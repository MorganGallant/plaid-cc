// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plaid.proto

#include "plaid/plaid.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ACHNumber_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Account_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountBalances_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AccountNumberCollection_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AccountWithOwners_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Address_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddressData_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AssetReport_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AssetReportItem_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AssetReportUser_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BACSNumber_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Category_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Credential_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EFTNumber_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Email_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAccountsRequestOptions_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAuthRequestOptions_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBalancesRequestOptions_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetHoldingsOptions_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetInstitutionByIDOptions_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetInstitutionsOptions_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetInvestmentTransactionsRequestOptions_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLiabilitiesRequestOptions_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTransactionsRequestOptions_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Holding_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IBANNumber_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Identity_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Income_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncomeStream_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Institution_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstitutionStatus_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstitutionStatusBreakdown_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvestmentTransaction_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Item_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ItemLogins_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Liabilities_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Location_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PSLFStatus_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Payment_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaymentAmount_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaymentMeta_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhoneNumber_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Recipient_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchInstitutionsOptions_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Security_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_StudentLoanLiability_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StudentLoanRepaymentPlan_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StudentLoanServicerAddress_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StudentLoanStatus_plaid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_plaid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transaction_plaid_2eproto;
namespace plaid {
class AccountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Account> _instance;
} _Account_default_instance_;
class AccountBalancesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountBalances> _instance;
} _AccountBalances_default_instance_;
class ACHNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ACHNumber> _instance;
} _ACHNumber_default_instance_;
class EFTNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EFTNumber> _instance;
} _EFTNumber_default_instance_;
class IBANNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IBANNumber> _instance;
} _IBANNumber_default_instance_;
class BACSNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BACSNumber> _instance;
} _BACSNumber_default_instance_;
class GetBalancesRequestOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBalancesRequestOptions> _instance;
} _GetBalancesRequestOptions_default_instance_;
class GetBalancesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBalancesRequest> _instance;
} _GetBalancesRequest_default_instance_;
class GetBalancesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBalancesResponse> _instance;
} _GetBalancesResponse_default_instance_;
class GetAccountsRequestOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAccountsRequestOptions> _instance;
} _GetAccountsRequestOptions_default_instance_;
class GetAccountsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAccountsRequest> _instance;
} _GetAccountsRequest_default_instance_;
class GetAccountsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAccountsResponse> _instance;
} _GetAccountsResponse_default_instance_;
class GetAccountsOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAccountsOptions> _instance;
} _GetAccountsOptions_default_instance_;
class GetBalancesOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBalancesOptions> _instance;
} _GetBalancesOptions_default_instance_;
class AssetReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssetReport> _instance;
} _AssetReport_default_instance_;
class AssetReportItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssetReportItem> _instance;
} _AssetReportItem_default_instance_;
class AssetReportUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssetReportUser> _instance;
} _AssetReportUser_default_instance_;
class GetAssetReportRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAssetReportRequest> _instance;
} _GetAssetReportRequest_default_instance_;
class GetAssetReportResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAssetReportResponse> _instance;
} _GetAssetReportResponse_default_instance_;
class RemoveAssetReportRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveAssetReportRequest> _instance;
} _RemoveAssetReportRequest_default_instance_;
class RemoveAssetReportResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveAssetReportResponse> _instance;
} _RemoveAssetReportResponse_default_instance_;
class CreateAuditCopyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateAuditCopyRequest> _instance;
} _CreateAuditCopyRequest_default_instance_;
class CreateAuditCopyTokenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateAuditCopyTokenResponse> _instance;
} _CreateAuditCopyTokenResponse_default_instance_;
class GetAuthRequestOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAuthRequestOptions> _instance;
} _GetAuthRequestOptions_default_instance_;
class GetAuthRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAuthRequest> _instance;
} _GetAuthRequest_default_instance_;
class AccountNumberCollectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountNumberCollection> _instance;
} _AccountNumberCollection_default_instance_;
class GetAuthResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAuthResponse> _instance;
} _GetAuthResponse_default_instance_;
class GetAuthOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAuthOptions> _instance;
} _GetAuthOptions_default_instance_;
class CategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Category> _instance;
} _Category_default_instance_;
class GetCategoriesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCategoriesResponse> _instance;
} _GetCategoriesResponse_default_instance_;
class ErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Error> _instance;
} _Error_default_instance_;
class SecurityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Security> _instance;
} _Security_default_instance_;
class HoldingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Holding> _instance;
} _Holding_default_instance_;
class GetHoldingsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHoldingsRequest> _instance;
} _GetHoldingsRequest_default_instance_;
class GetHoldingsOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHoldingsOptions> _instance;
} _GetHoldingsOptions_default_instance_;
class GetHoldingsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHoldingsResponse> _instance;
} _GetHoldingsResponse_default_instance_;
class IdentityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Identity> _instance;
} _Identity_default_instance_;
class AddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Address> _instance;
} _Address_default_instance_;
class AddressDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddressData> _instance;
} _AddressData_default_instance_;
class EmailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Email> _instance;
} _Email_default_instance_;
class PhoneNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhoneNumber> _instance;
} _PhoneNumber_default_instance_;
class GetIdentityRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIdentityRequest> _instance;
} _GetIdentityRequest_default_instance_;
class AccountWithOwnersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountWithOwners> _instance;
} _AccountWithOwners_default_instance_;
class GetIdentityResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIdentityResponse> _instance;
} _GetIdentityResponse_default_instance_;
class IncomeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Income> _instance;
} _Income_default_instance_;
class IncomeStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IncomeStream> _instance;
} _IncomeStream_default_instance_;
class GetIncomeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIncomeRequest> _instance;
} _GetIncomeRequest_default_instance_;
class GetIncomeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIncomeResponse> _instance;
} _GetIncomeResponse_default_instance_;
class InstitutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Institution> _instance;
} _Institution_default_instance_;
class InstitutionStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstitutionStatus> _instance;
} _InstitutionStatus_default_instance_;
class ItemLoginsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemLogins> _instance;
} _ItemLogins_default_instance_;
class InstitutionStatusBreakdownDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstitutionStatusBreakdown> _instance;
} _InstitutionStatusBreakdown_default_instance_;
class CredentialDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Credential> _instance;
} _Credential_default_instance_;
class GetInstitutionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInstitutionsRequest> _instance;
} _GetInstitutionsRequest_default_instance_;
class GetInstitutionsOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInstitutionsOptions> _instance;
} _GetInstitutionsOptions_default_instance_;
class GetInstitutionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInstitutionsResponse> _instance;
} _GetInstitutionsResponse_default_instance_;
class GetInstitutionByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInstitutionByIDRequest> _instance;
} _GetInstitutionByIDRequest_default_instance_;
class GetInstitutionByIDOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInstitutionByIDOptions> _instance;
} _GetInstitutionByIDOptions_default_instance_;
class GetInstitutionByIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInstitutionByIDResponse> _instance;
} _GetInstitutionByIDResponse_default_instance_;
class SearchInstitutionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchInstitutionsRequest> _instance;
} _SearchInstitutionsRequest_default_instance_;
class SearchInstitutionsOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchInstitutionsOptions> _instance;
} _SearchInstitutionsOptions_default_instance_;
class SearchInstitutionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchInstitutionsResponse> _instance;
} _SearchInstitutionsResponse_default_instance_;
class InvestmentTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvestmentTransaction> _instance;
} _InvestmentTransaction_default_instance_;
class GetInvestmentTransactionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInvestmentTransactionsResponse> _instance;
} _GetInvestmentTransactionsResponse_default_instance_;
class GetInvestmentTransactionsOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInvestmentTransactionsOptions> _instance;
} _GetInvestmentTransactionsOptions_default_instance_;
class GetInvestmentTransactionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInvestmentTransactionsRequest> _instance;
} _GetInvestmentTransactionsRequest_default_instance_;
class GetInvestmentTransactionsRequestOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInvestmentTransactionsRequestOptions> _instance;
} _GetInvestmentTransactionsRequestOptions_default_instance_;
class ItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Item> _instance;
} _Item_default_instance_;
class GetItemRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetItemRequest> _instance;
} _GetItemRequest_default_instance_;
class GetItemResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetItemResponse> _instance;
} _GetItemResponse_default_instance_;
class RemoveItemRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveItemRequest> _instance;
} _RemoveItemRequest_default_instance_;
class RemoveItemResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveItemResponse> _instance;
} _RemoveItemResponse_default_instance_;
class UpdateItemWebhookRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateItemWebhookRequest> _instance;
} _UpdateItemWebhookRequest_default_instance_;
class UpdateItemWebhookResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateItemWebhookResponse> _instance;
} _UpdateItemWebhookResponse_default_instance_;
class InvalidateAccessTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvalidateAccessTokenRequest> _instance;
} _InvalidateAccessTokenRequest_default_instance_;
class InvalidateAccessTokenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvalidateAccessTokenResponse> _instance;
} _InvalidateAccessTokenResponse_default_instance_;
class UpdateAccessTokenVersionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateAccessTokenVersionRequest> _instance;
} _UpdateAccessTokenVersionRequest_default_instance_;
class UpdateAccessTokenVersionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateAccessTokenVersionResponse> _instance;
} _UpdateAccessTokenVersionResponse_default_instance_;
class CreatePublicTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePublicTokenRequest> _instance;
} _CreatePublicTokenRequest_default_instance_;
class CreatePublicTokenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePublicTokenResponse> _instance;
} _CreatePublicTokenResponse_default_instance_;
class ExchangePublicTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExchangePublicTokenRequest> _instance;
} _ExchangePublicTokenRequest_default_instance_;
class ExchangePublicTokenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExchangePublicTokenResponse> _instance;
} _ExchangePublicTokenResponse_default_instance_;
class StudentLoanLiabilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StudentLoanLiability> _instance;
} _StudentLoanLiability_default_instance_;
class PSLFStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PSLFStatus> _instance;
} _PSLFStatus_default_instance_;
class StudentLoanServicerAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StudentLoanServicerAddress> _instance;
} _StudentLoanServicerAddress_default_instance_;
class StudentLoanStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StudentLoanStatus> _instance;
} _StudentLoanStatus_default_instance_;
class StudentLoanRepaymentPlanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StudentLoanRepaymentPlan> _instance;
} _StudentLoanRepaymentPlan_default_instance_;
class GetLiabilitiesRequestOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLiabilitiesRequestOptions> _instance;
} _GetLiabilitiesRequestOptions_default_instance_;
class GetLiabilitiesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLiabilitiesRequest> _instance;
} _GetLiabilitiesRequest_default_instance_;
class GetLiabilitiesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLiabilitiesResponse> _instance;
} _GetLiabilitiesResponse_default_instance_;
class LiabilitiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Liabilities> _instance;
} _Liabilities_default_instance_;
class GetLiabilitiesOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLiabilitiesOptions> _instance;
} _GetLiabilitiesOptions_default_instance_;
class PaymentRecipientAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PaymentRecipientAddress> _instance;
} _PaymentRecipientAddress_default_instance_;
class CreatePaymentRecipientRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePaymentRecipientRequest> _instance;
} _CreatePaymentRecipientRequest_default_instance_;
class CreatePaymentRecipientResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePaymentRecipientResponse> _instance;
} _CreatePaymentRecipientResponse_default_instance_;
class GetPaymentRecipientRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPaymentRecipientRequest> _instance;
} _GetPaymentRecipientRequest_default_instance_;
class GetPaymentRecipientResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPaymentRecipientResponse> _instance;
} _GetPaymentRecipientResponse_default_instance_;
class ListPaymentRecipientsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPaymentRecipientsRequest> _instance;
} _ListPaymentRecipientsRequest_default_instance_;
class RecipientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Recipient> _instance;
} _Recipient_default_instance_;
class ListPaymentRecipientsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPaymentRecipientsResponse> _instance;
} _ListPaymentRecipientsResponse_default_instance_;
class PaymentAmountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PaymentAmount> _instance;
} _PaymentAmount_default_instance_;
class CreatePaymentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePaymentRequest> _instance;
} _CreatePaymentRequest_default_instance_;
class CreatePaymentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePaymentResponse> _instance;
} _CreatePaymentResponse_default_instance_;
class CreatePaymentTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePaymentTokenRequest> _instance;
} _CreatePaymentTokenRequest_default_instance_;
class CreatePaymentTokenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePaymentTokenResponse> _instance;
} _CreatePaymentTokenResponse_default_instance_;
class GetPaymentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPaymentRequest> _instance;
} _GetPaymentRequest_default_instance_;
class GetPaymentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPaymentResponse> _instance;
} _GetPaymentResponse_default_instance_;
class ListPaymentsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPaymentsRequest> _instance;
} _ListPaymentsRequest_default_instance_;
class PaymentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Payment> _instance;
} _Payment_default_instance_;
class ListPaymentsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPaymentsResponse> _instance;
} _ListPaymentsResponse_default_instance_;
class ListPaymentsOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPaymentsOptions> _instance;
} _ListPaymentsOptions_default_instance_;
class CreateProcessorTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateProcessorTokenRequest> _instance;
} _CreateProcessorTokenRequest_default_instance_;
class CreateProcessorTokenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateProcessorTokenResponse> _instance;
} _CreateProcessorTokenResponse_default_instance_;
class CreateStripeTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateStripeTokenRequest> _instance;
} _CreateStripeTokenRequest_default_instance_;
class CreateStripeTokenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateStripeTokenResponse> _instance;
} _CreateStripeTokenResponse_default_instance_;
class CreateSandboxPublicTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateSandboxPublicTokenRequest> _instance;
} _CreateSandboxPublicTokenRequest_default_instance_;
class CreateSandboxPublicTokenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateSandboxPublicTokenResponse> _instance;
} _CreateSandboxPublicTokenResponse_default_instance_;
class ResetSandboxItemRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetSandboxItemRequest> _instance;
} _ResetSandboxItemRequest_default_instance_;
class ResetSandboxItemResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetSandboxItemResponse> _instance;
} _ResetSandboxItemResponse_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
} _Transaction_default_instance_;
class LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Location> _instance;
} _Location_default_instance_;
class PaymentMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PaymentMeta> _instance;
} _PaymentMeta_default_instance_;
class GetTransactionsRequestOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTransactionsRequestOptions> _instance;
} _GetTransactionsRequestOptions_default_instance_;
class GetTransactionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTransactionsRequest> _instance;
} _GetTransactionsRequest_default_instance_;
class GetTransactionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTransactionsResponse> _instance;
} _GetTransactionsResponse_default_instance_;
class GetTransactionsOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTransactionsOptions> _instance;
} _GetTransactionsOptions_default_instance_;
}  // namespace plaid
static void InitDefaultsscc_info_ACHNumber_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_ACHNumber_default_instance_;
    new (ptr) ::plaid::ACHNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::ACHNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ACHNumber_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ACHNumber_plaid_2eproto}, {}};

static void InitDefaultsscc_info_Account_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_Account_default_instance_;
    new (ptr) ::plaid::Account();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::Account::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Account_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Account_plaid_2eproto}, {
      &scc_info_AccountBalances_plaid_2eproto.base,}};

static void InitDefaultsscc_info_AccountBalances_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_AccountBalances_default_instance_;
    new (ptr) ::plaid::AccountBalances();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::AccountBalances::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountBalances_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountBalances_plaid_2eproto}, {}};

static void InitDefaultsscc_info_AccountNumberCollection_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_AccountNumberCollection_default_instance_;
    new (ptr) ::plaid::AccountNumberCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::AccountNumberCollection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AccountNumberCollection_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_AccountNumberCollection_plaid_2eproto}, {
      &scc_info_ACHNumber_plaid_2eproto.base,
      &scc_info_EFTNumber_plaid_2eproto.base,
      &scc_info_IBANNumber_plaid_2eproto.base,
      &scc_info_BACSNumber_plaid_2eproto.base,}};

static void InitDefaultsscc_info_AccountWithOwners_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_AccountWithOwners_default_instance_;
    new (ptr) ::plaid::AccountWithOwners();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::AccountWithOwners::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AccountWithOwners_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AccountWithOwners_plaid_2eproto}, {
      &scc_info_Identity_plaid_2eproto.base,
      &scc_info_AccountBalances_plaid_2eproto.base,}};

static void InitDefaultsscc_info_Address_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_Address_default_instance_;
    new (ptr) ::plaid::Address();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::Address::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Address_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Address_plaid_2eproto}, {
      &scc_info_AddressData_plaid_2eproto.base,}};

static void InitDefaultsscc_info_AddressData_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_AddressData_default_instance_;
    new (ptr) ::plaid::AddressData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::AddressData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddressData_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddressData_plaid_2eproto}, {}};

static void InitDefaultsscc_info_AssetReport_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_AssetReport_default_instance_;
    new (ptr) ::plaid::AssetReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::AssetReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AssetReport_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AssetReport_plaid_2eproto}, {
      &scc_info_AssetReportItem_plaid_2eproto.base,
      &scc_info_AssetReportUser_plaid_2eproto.base,}};

static void InitDefaultsscc_info_AssetReportItem_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_AssetReportItem_default_instance_;
    new (ptr) ::plaid::AssetReportItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::AssetReportItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AssetReportItem_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AssetReportItem_plaid_2eproto}, {
      &scc_info_Account_plaid_2eproto.base,}};

static void InitDefaultsscc_info_AssetReportUser_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_AssetReportUser_default_instance_;
    new (ptr) ::plaid::AssetReportUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::AssetReportUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AssetReportUser_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AssetReportUser_plaid_2eproto}, {}};

static void InitDefaultsscc_info_BACSNumber_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_BACSNumber_default_instance_;
    new (ptr) ::plaid::BACSNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::BACSNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BACSNumber_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BACSNumber_plaid_2eproto}, {}};

static void InitDefaultsscc_info_Category_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_Category_default_instance_;
    new (ptr) ::plaid::Category();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::Category::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Category_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Category_plaid_2eproto}, {}};

static void InitDefaultsscc_info_CreateAuditCopyRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_CreateAuditCopyRequest_default_instance_;
    new (ptr) ::plaid::CreateAuditCopyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::CreateAuditCopyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateAuditCopyRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateAuditCopyRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_CreateAuditCopyTokenResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_CreateAuditCopyTokenResponse_default_instance_;
    new (ptr) ::plaid::CreateAuditCopyTokenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::CreateAuditCopyTokenResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateAuditCopyTokenResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateAuditCopyTokenResponse_plaid_2eproto}, {}};

static void InitDefaultsscc_info_CreatePaymentRecipientRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_CreatePaymentRecipientRequest_default_instance_;
    new (ptr) ::plaid::CreatePaymentRecipientRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::CreatePaymentRecipientRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatePaymentRecipientRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreatePaymentRecipientRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_CreatePaymentRecipientResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_CreatePaymentRecipientResponse_default_instance_;
    new (ptr) ::plaid::CreatePaymentRecipientResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::CreatePaymentRecipientResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatePaymentRecipientResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreatePaymentRecipientResponse_plaid_2eproto}, {}};

static void InitDefaultsscc_info_CreatePaymentRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_CreatePaymentRequest_default_instance_;
    new (ptr) ::plaid::CreatePaymentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::CreatePaymentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreatePaymentRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreatePaymentRequest_plaid_2eproto}, {
      &scc_info_PaymentAmount_plaid_2eproto.base,}};

static void InitDefaultsscc_info_CreatePaymentResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_CreatePaymentResponse_default_instance_;
    new (ptr) ::plaid::CreatePaymentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::CreatePaymentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatePaymentResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreatePaymentResponse_plaid_2eproto}, {}};

static void InitDefaultsscc_info_CreatePaymentTokenRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_CreatePaymentTokenRequest_default_instance_;
    new (ptr) ::plaid::CreatePaymentTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::CreatePaymentTokenRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatePaymentTokenRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreatePaymentTokenRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_CreatePaymentTokenResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_CreatePaymentTokenResponse_default_instance_;
    new (ptr) ::plaid::CreatePaymentTokenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::CreatePaymentTokenResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatePaymentTokenResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreatePaymentTokenResponse_plaid_2eproto}, {}};

static void InitDefaultsscc_info_CreateProcessorTokenRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_CreateProcessorTokenRequest_default_instance_;
    new (ptr) ::plaid::CreateProcessorTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::CreateProcessorTokenRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateProcessorTokenRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateProcessorTokenRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_CreateProcessorTokenResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_CreateProcessorTokenResponse_default_instance_;
    new (ptr) ::plaid::CreateProcessorTokenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::CreateProcessorTokenResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateProcessorTokenResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateProcessorTokenResponse_plaid_2eproto}, {}};

static void InitDefaultsscc_info_CreatePublicTokenRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_CreatePublicTokenRequest_default_instance_;
    new (ptr) ::plaid::CreatePublicTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::CreatePublicTokenRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatePublicTokenRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreatePublicTokenRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_CreatePublicTokenResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_CreatePublicTokenResponse_default_instance_;
    new (ptr) ::plaid::CreatePublicTokenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::CreatePublicTokenResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatePublicTokenResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreatePublicTokenResponse_plaid_2eproto}, {}};

static void InitDefaultsscc_info_CreateSandboxPublicTokenRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_CreateSandboxPublicTokenRequest_default_instance_;
    new (ptr) ::plaid::CreateSandboxPublicTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::CreateSandboxPublicTokenRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateSandboxPublicTokenRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateSandboxPublicTokenRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_CreateSandboxPublicTokenResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_CreateSandboxPublicTokenResponse_default_instance_;
    new (ptr) ::plaid::CreateSandboxPublicTokenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::CreateSandboxPublicTokenResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateSandboxPublicTokenResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateSandboxPublicTokenResponse_plaid_2eproto}, {}};

static void InitDefaultsscc_info_CreateStripeTokenRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_CreateStripeTokenRequest_default_instance_;
    new (ptr) ::plaid::CreateStripeTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::CreateStripeTokenRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateStripeTokenRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateStripeTokenRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_CreateStripeTokenResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_CreateStripeTokenResponse_default_instance_;
    new (ptr) ::plaid::CreateStripeTokenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::CreateStripeTokenResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateStripeTokenResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateStripeTokenResponse_plaid_2eproto}, {}};

static void InitDefaultsscc_info_Credential_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_Credential_default_instance_;
    new (ptr) ::plaid::Credential();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::Credential::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Credential_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Credential_plaid_2eproto}, {}};

static void InitDefaultsscc_info_EFTNumber_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_EFTNumber_default_instance_;
    new (ptr) ::plaid::EFTNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::EFTNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EFTNumber_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EFTNumber_plaid_2eproto}, {}};

static void InitDefaultsscc_info_Email_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_Email_default_instance_;
    new (ptr) ::plaid::Email();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::Email::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Email_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Email_plaid_2eproto}, {}};

static void InitDefaultsscc_info_Error_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_Error_default_instance_;
    new (ptr) ::plaid::Error();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::Error::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Error_plaid_2eproto}, {}};

static void InitDefaultsscc_info_ExchangePublicTokenRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_ExchangePublicTokenRequest_default_instance_;
    new (ptr) ::plaid::ExchangePublicTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::ExchangePublicTokenRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExchangePublicTokenRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExchangePublicTokenRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_ExchangePublicTokenResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_ExchangePublicTokenResponse_default_instance_;
    new (ptr) ::plaid::ExchangePublicTokenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::ExchangePublicTokenResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExchangePublicTokenResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExchangePublicTokenResponse_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetAccountsOptions_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetAccountsOptions_default_instance_;
    new (ptr) ::plaid::GetAccountsOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetAccountsOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAccountsOptions_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAccountsOptions_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetAccountsRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetAccountsRequest_default_instance_;
    new (ptr) ::plaid::GetAccountsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetAccountsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAccountsRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAccountsRequest_plaid_2eproto}, {
      &scc_info_GetAccountsRequestOptions_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetAccountsRequestOptions_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetAccountsRequestOptions_default_instance_;
    new (ptr) ::plaid::GetAccountsRequestOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetAccountsRequestOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAccountsRequestOptions_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAccountsRequestOptions_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetAccountsResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetAccountsResponse_default_instance_;
    new (ptr) ::plaid::GetAccountsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetAccountsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetAccountsResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetAccountsResponse_plaid_2eproto}, {
      &scc_info_Account_plaid_2eproto.base,
      &scc_info_Item_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetAssetReportRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetAssetReportRequest_default_instance_;
    new (ptr) ::plaid::GetAssetReportRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetAssetReportRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAssetReportRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAssetReportRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetAssetReportResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetAssetReportResponse_default_instance_;
    new (ptr) ::plaid::GetAssetReportResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetAssetReportResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAssetReportResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAssetReportResponse_plaid_2eproto}, {
      &scc_info_AssetReport_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetAuthOptions_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetAuthOptions_default_instance_;
    new (ptr) ::plaid::GetAuthOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetAuthOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAuthOptions_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAuthOptions_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetAuthRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetAuthRequest_default_instance_;
    new (ptr) ::plaid::GetAuthRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetAuthRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAuthRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAuthRequest_plaid_2eproto}, {
      &scc_info_GetAuthRequestOptions_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetAuthRequestOptions_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetAuthRequestOptions_default_instance_;
    new (ptr) ::plaid::GetAuthRequestOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetAuthRequestOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAuthRequestOptions_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAuthRequestOptions_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetAuthResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetAuthResponse_default_instance_;
    new (ptr) ::plaid::GetAuthResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetAuthResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetAuthResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetAuthResponse_plaid_2eproto}, {
      &scc_info_Account_plaid_2eproto.base,
      &scc_info_AccountNumberCollection_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetBalancesOptions_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetBalancesOptions_default_instance_;
    new (ptr) ::plaid::GetBalancesOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetBalancesOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBalancesOptions_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBalancesOptions_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetBalancesRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetBalancesRequest_default_instance_;
    new (ptr) ::plaid::GetBalancesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetBalancesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBalancesRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBalancesRequest_plaid_2eproto}, {
      &scc_info_GetBalancesRequestOptions_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetBalancesRequestOptions_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetBalancesRequestOptions_default_instance_;
    new (ptr) ::plaid::GetBalancesRequestOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetBalancesRequestOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBalancesRequestOptions_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBalancesRequestOptions_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetBalancesResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetBalancesResponse_default_instance_;
    new (ptr) ::plaid::GetBalancesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetBalancesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBalancesResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBalancesResponse_plaid_2eproto}, {
      &scc_info_Account_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetCategoriesResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetCategoriesResponse_default_instance_;
    new (ptr) ::plaid::GetCategoriesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetCategoriesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetCategoriesResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetCategoriesResponse_plaid_2eproto}, {
      &scc_info_Category_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetHoldingsOptions_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetHoldingsOptions_default_instance_;
    new (ptr) ::plaid::GetHoldingsOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetHoldingsOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetHoldingsOptions_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetHoldingsOptions_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetHoldingsRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetHoldingsRequest_default_instance_;
    new (ptr) ::plaid::GetHoldingsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetHoldingsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetHoldingsRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetHoldingsRequest_plaid_2eproto}, {
      &scc_info_GetHoldingsOptions_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetHoldingsResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetHoldingsResponse_default_instance_;
    new (ptr) ::plaid::GetHoldingsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetHoldingsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GetHoldingsResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_GetHoldingsResponse_plaid_2eproto}, {
      &scc_info_Account_plaid_2eproto.base,
      &scc_info_Item_plaid_2eproto.base,
      &scc_info_Security_plaid_2eproto.base,
      &scc_info_Holding_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetIdentityRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetIdentityRequest_default_instance_;
    new (ptr) ::plaid::GetIdentityRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetIdentityRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetIdentityRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetIdentityRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetIdentityResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetIdentityResponse_default_instance_;
    new (ptr) ::plaid::GetIdentityResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetIdentityResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetIdentityResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetIdentityResponse_plaid_2eproto}, {
      &scc_info_AccountWithOwners_plaid_2eproto.base,
      &scc_info_Item_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetIncomeRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetIncomeRequest_default_instance_;
    new (ptr) ::plaid::GetIncomeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetIncomeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetIncomeRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetIncomeRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetIncomeResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetIncomeResponse_default_instance_;
    new (ptr) ::plaid::GetIncomeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetIncomeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetIncomeResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetIncomeResponse_plaid_2eproto}, {
      &scc_info_Income_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetInstitutionByIDOptions_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetInstitutionByIDOptions_default_instance_;
    new (ptr) ::plaid::GetInstitutionByIDOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetInstitutionByIDOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetInstitutionByIDOptions_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetInstitutionByIDOptions_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetInstitutionByIDRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetInstitutionByIDRequest_default_instance_;
    new (ptr) ::plaid::GetInstitutionByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetInstitutionByIDRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInstitutionByIDRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInstitutionByIDRequest_plaid_2eproto}, {
      &scc_info_GetInstitutionByIDOptions_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetInstitutionByIDResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetInstitutionByIDResponse_default_instance_;
    new (ptr) ::plaid::GetInstitutionByIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetInstitutionByIDResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInstitutionByIDResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInstitutionByIDResponse_plaid_2eproto}, {
      &scc_info_Institution_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetInstitutionsOptions_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetInstitutionsOptions_default_instance_;
    new (ptr) ::plaid::GetInstitutionsOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetInstitutionsOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetInstitutionsOptions_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetInstitutionsOptions_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetInstitutionsRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetInstitutionsRequest_default_instance_;
    new (ptr) ::plaid::GetInstitutionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetInstitutionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInstitutionsRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInstitutionsRequest_plaid_2eproto}, {
      &scc_info_GetInstitutionsOptions_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetInstitutionsResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetInstitutionsResponse_default_instance_;
    new (ptr) ::plaid::GetInstitutionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetInstitutionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInstitutionsResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInstitutionsResponse_plaid_2eproto}, {
      &scc_info_Institution_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetInvestmentTransactionsOptions_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetInvestmentTransactionsOptions_default_instance_;
    new (ptr) ::plaid::GetInvestmentTransactionsOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetInvestmentTransactionsOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetInvestmentTransactionsOptions_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetInvestmentTransactionsOptions_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetInvestmentTransactionsRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetInvestmentTransactionsRequest_default_instance_;
    new (ptr) ::plaid::GetInvestmentTransactionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetInvestmentTransactionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInvestmentTransactionsRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInvestmentTransactionsRequest_plaid_2eproto}, {
      &scc_info_GetInvestmentTransactionsRequestOptions_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetInvestmentTransactionsRequestOptions_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetInvestmentTransactionsRequestOptions_default_instance_;
    new (ptr) ::plaid::GetInvestmentTransactionsRequestOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetInvestmentTransactionsRequestOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetInvestmentTransactionsRequestOptions_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetInvestmentTransactionsRequestOptions_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetInvestmentTransactionsResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetInvestmentTransactionsResponse_default_instance_;
    new (ptr) ::plaid::GetInvestmentTransactionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetInvestmentTransactionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GetInvestmentTransactionsResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_GetInvestmentTransactionsResponse_plaid_2eproto}, {
      &scc_info_Item_plaid_2eproto.base,
      &scc_info_Account_plaid_2eproto.base,
      &scc_info_InvestmentTransaction_plaid_2eproto.base,
      &scc_info_Security_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetItemRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetItemRequest_default_instance_;
    new (ptr) ::plaid::GetItemRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetItemRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetItemRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetItemRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetItemResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetItemResponse_default_instance_;
    new (ptr) ::plaid::GetItemResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetItemResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetItemResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetItemResponse_plaid_2eproto}, {
      &scc_info_Item_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetLiabilitiesOptions_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetLiabilitiesOptions_default_instance_;
    new (ptr) ::plaid::GetLiabilitiesOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetLiabilitiesOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLiabilitiesOptions_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLiabilitiesOptions_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetLiabilitiesRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetLiabilitiesRequest_default_instance_;
    new (ptr) ::plaid::GetLiabilitiesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetLiabilitiesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLiabilitiesRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLiabilitiesRequest_plaid_2eproto}, {
      &scc_info_GetLiabilitiesRequestOptions_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetLiabilitiesRequestOptions_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetLiabilitiesRequestOptions_default_instance_;
    new (ptr) ::plaid::GetLiabilitiesRequestOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetLiabilitiesRequestOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLiabilitiesRequestOptions_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLiabilitiesRequestOptions_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetLiabilitiesResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetLiabilitiesResponse_default_instance_;
    new (ptr) ::plaid::GetLiabilitiesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetLiabilitiesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetLiabilitiesResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetLiabilitiesResponse_plaid_2eproto}, {
      &scc_info_Account_plaid_2eproto.base,
      &scc_info_Item_plaid_2eproto.base,
      &scc_info_Liabilities_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetPaymentRecipientRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetPaymentRecipientRequest_default_instance_;
    new (ptr) ::plaid::GetPaymentRecipientRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetPaymentRecipientRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPaymentRecipientRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPaymentRecipientRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetPaymentRecipientResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetPaymentRecipientResponse_default_instance_;
    new (ptr) ::plaid::GetPaymentRecipientResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetPaymentRecipientResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPaymentRecipientResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPaymentRecipientResponse_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetPaymentRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetPaymentRequest_default_instance_;
    new (ptr) ::plaid::GetPaymentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetPaymentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPaymentRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPaymentRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetPaymentResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetPaymentResponse_default_instance_;
    new (ptr) ::plaid::GetPaymentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetPaymentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPaymentResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetPaymentResponse_plaid_2eproto}, {
      &scc_info_PaymentAmount_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetTransactionsOptions_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetTransactionsOptions_default_instance_;
    new (ptr) ::plaid::GetTransactionsOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetTransactionsOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTransactionsOptions_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTransactionsOptions_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetTransactionsRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetTransactionsRequest_default_instance_;
    new (ptr) ::plaid::GetTransactionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetTransactionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTransactionsRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTransactionsRequest_plaid_2eproto}, {
      &scc_info_GetTransactionsRequestOptions_plaid_2eproto.base,}};

static void InitDefaultsscc_info_GetTransactionsRequestOptions_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetTransactionsRequestOptions_default_instance_;
    new (ptr) ::plaid::GetTransactionsRequestOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetTransactionsRequestOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTransactionsRequestOptions_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTransactionsRequestOptions_plaid_2eproto}, {}};

static void InitDefaultsscc_info_GetTransactionsResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_GetTransactionsResponse_default_instance_;
    new (ptr) ::plaid::GetTransactionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::GetTransactionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetTransactionsResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetTransactionsResponse_plaid_2eproto}, {
      &scc_info_Account_plaid_2eproto.base,
      &scc_info_Item_plaid_2eproto.base,
      &scc_info_Transaction_plaid_2eproto.base,}};

static void InitDefaultsscc_info_Holding_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_Holding_default_instance_;
    new (ptr) ::plaid::Holding();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::Holding::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Holding_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Holding_plaid_2eproto}, {}};

static void InitDefaultsscc_info_IBANNumber_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_IBANNumber_default_instance_;
    new (ptr) ::plaid::IBANNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::IBANNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IBANNumber_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IBANNumber_plaid_2eproto}, {}};

static void InitDefaultsscc_info_Identity_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_Identity_default_instance_;
    new (ptr) ::plaid::Identity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::Identity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Identity_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Identity_plaid_2eproto}, {
      &scc_info_Address_plaid_2eproto.base,
      &scc_info_Email_plaid_2eproto.base,
      &scc_info_PhoneNumber_plaid_2eproto.base,}};

static void InitDefaultsscc_info_Income_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_Income_default_instance_;
    new (ptr) ::plaid::Income();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::Income::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Income_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Income_plaid_2eproto}, {
      &scc_info_IncomeStream_plaid_2eproto.base,}};

static void InitDefaultsscc_info_IncomeStream_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_IncomeStream_default_instance_;
    new (ptr) ::plaid::IncomeStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::IncomeStream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncomeStream_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IncomeStream_plaid_2eproto}, {}};

static void InitDefaultsscc_info_Institution_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_Institution_default_instance_;
    new (ptr) ::plaid::Institution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::Institution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Institution_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Institution_plaid_2eproto}, {
      &scc_info_Credential_plaid_2eproto.base,
      &scc_info_InstitutionStatus_plaid_2eproto.base,}};

static void InitDefaultsscc_info_InstitutionStatus_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_InstitutionStatus_default_instance_;
    new (ptr) ::plaid::InstitutionStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::InstitutionStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstitutionStatus_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InstitutionStatus_plaid_2eproto}, {
      &scc_info_ItemLogins_plaid_2eproto.base,}};

static void InitDefaultsscc_info_InstitutionStatusBreakdown_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_InstitutionStatusBreakdown_default_instance_;
    new (ptr) ::plaid::InstitutionStatusBreakdown();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::InstitutionStatusBreakdown::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstitutionStatusBreakdown_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstitutionStatusBreakdown_plaid_2eproto}, {}};

static void InitDefaultsscc_info_InvalidateAccessTokenRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_InvalidateAccessTokenRequest_default_instance_;
    new (ptr) ::plaid::InvalidateAccessTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::InvalidateAccessTokenRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvalidateAccessTokenRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InvalidateAccessTokenRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_InvalidateAccessTokenResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_InvalidateAccessTokenResponse_default_instance_;
    new (ptr) ::plaid::InvalidateAccessTokenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::InvalidateAccessTokenResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvalidateAccessTokenResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InvalidateAccessTokenResponse_plaid_2eproto}, {}};

static void InitDefaultsscc_info_InvestmentTransaction_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_InvestmentTransaction_default_instance_;
    new (ptr) ::plaid::InvestmentTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::InvestmentTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvestmentTransaction_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InvestmentTransaction_plaid_2eproto}, {}};

static void InitDefaultsscc_info_Item_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_Item_default_instance_;
    new (ptr) ::plaid::Item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::Item::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Item_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Item_plaid_2eproto}, {
      &scc_info_Error_plaid_2eproto.base,}};

static void InitDefaultsscc_info_ItemLogins_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_ItemLogins_default_instance_;
    new (ptr) ::plaid::ItemLogins();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::ItemLogins::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ItemLogins_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ItemLogins_plaid_2eproto}, {
      &scc_info_InstitutionStatusBreakdown_plaid_2eproto.base,}};

static void InitDefaultsscc_info_Liabilities_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_Liabilities_default_instance_;
    new (ptr) ::plaid::Liabilities();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::Liabilities::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Liabilities_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Liabilities_plaid_2eproto}, {
      &scc_info_StudentLoanLiability_plaid_2eproto.base,}};

static void InitDefaultsscc_info_ListPaymentRecipientsRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_ListPaymentRecipientsRequest_default_instance_;
    new (ptr) ::plaid::ListPaymentRecipientsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::ListPaymentRecipientsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPaymentRecipientsRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPaymentRecipientsRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_ListPaymentRecipientsResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_ListPaymentRecipientsResponse_default_instance_;
    new (ptr) ::plaid::ListPaymentRecipientsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::ListPaymentRecipientsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPaymentRecipientsResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPaymentRecipientsResponse_plaid_2eproto}, {
      &scc_info_Recipient_plaid_2eproto.base,}};

static void InitDefaultsscc_info_ListPaymentsOptions_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_ListPaymentsOptions_default_instance_;
    new (ptr) ::plaid::ListPaymentsOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::ListPaymentsOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPaymentsOptions_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPaymentsOptions_plaid_2eproto}, {}};

static void InitDefaultsscc_info_ListPaymentsRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_ListPaymentsRequest_default_instance_;
    new (ptr) ::plaid::ListPaymentsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::ListPaymentsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPaymentsRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPaymentsRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_ListPaymentsResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_ListPaymentsResponse_default_instance_;
    new (ptr) ::plaid::ListPaymentsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::ListPaymentsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPaymentsResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPaymentsResponse_plaid_2eproto}, {
      &scc_info_Payment_plaid_2eproto.base,}};

static void InitDefaultsscc_info_Location_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_Location_default_instance_;
    new (ptr) ::plaid::Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::Location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Location_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Location_plaid_2eproto}, {}};

static void InitDefaultsscc_info_PSLFStatus_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_PSLFStatus_default_instance_;
    new (ptr) ::plaid::PSLFStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::PSLFStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PSLFStatus_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PSLFStatus_plaid_2eproto}, {}};

static void InitDefaultsscc_info_Payment_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_Payment_default_instance_;
    new (ptr) ::plaid::Payment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::Payment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Payment_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Payment_plaid_2eproto}, {
      &scc_info_PaymentAmount_plaid_2eproto.base,}};

static void InitDefaultsscc_info_PaymentAmount_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_PaymentAmount_default_instance_;
    new (ptr) ::plaid::PaymentAmount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::PaymentAmount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaymentAmount_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PaymentAmount_plaid_2eproto}, {}};

static void InitDefaultsscc_info_PaymentMeta_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_PaymentMeta_default_instance_;
    new (ptr) ::plaid::PaymentMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::PaymentMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaymentMeta_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PaymentMeta_plaid_2eproto}, {}};

static void InitDefaultsscc_info_PaymentRecipientAddress_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_PaymentRecipientAddress_default_instance_;
    new (ptr) ::plaid::PaymentRecipientAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::PaymentRecipientAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaymentRecipientAddress_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PaymentRecipientAddress_plaid_2eproto}, {}};

static void InitDefaultsscc_info_PhoneNumber_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_PhoneNumber_default_instance_;
    new (ptr) ::plaid::PhoneNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::PhoneNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhoneNumber_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PhoneNumber_plaid_2eproto}, {}};

static void InitDefaultsscc_info_Recipient_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_Recipient_default_instance_;
    new (ptr) ::plaid::Recipient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::Recipient::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Recipient_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Recipient_plaid_2eproto}, {}};

static void InitDefaultsscc_info_RemoveAssetReportRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_RemoveAssetReportRequest_default_instance_;
    new (ptr) ::plaid::RemoveAssetReportRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::RemoveAssetReportRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveAssetReportRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveAssetReportRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_RemoveAssetReportResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_RemoveAssetReportResponse_default_instance_;
    new (ptr) ::plaid::RemoveAssetReportResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::RemoveAssetReportResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveAssetReportResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveAssetReportResponse_plaid_2eproto}, {}};

static void InitDefaultsscc_info_RemoveItemRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_RemoveItemRequest_default_instance_;
    new (ptr) ::plaid::RemoveItemRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::RemoveItemRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveItemRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveItemRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_RemoveItemResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_RemoveItemResponse_default_instance_;
    new (ptr) ::plaid::RemoveItemResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::RemoveItemResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveItemResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveItemResponse_plaid_2eproto}, {}};

static void InitDefaultsscc_info_ResetSandboxItemRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_ResetSandboxItemRequest_default_instance_;
    new (ptr) ::plaid::ResetSandboxItemRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::ResetSandboxItemRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetSandboxItemRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetSandboxItemRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_ResetSandboxItemResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_ResetSandboxItemResponse_default_instance_;
    new (ptr) ::plaid::ResetSandboxItemResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::ResetSandboxItemResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetSandboxItemResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetSandboxItemResponse_plaid_2eproto}, {}};

static void InitDefaultsscc_info_SearchInstitutionsOptions_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_SearchInstitutionsOptions_default_instance_;
    new (ptr) ::plaid::SearchInstitutionsOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::SearchInstitutionsOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchInstitutionsOptions_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SearchInstitutionsOptions_plaid_2eproto}, {}};

static void InitDefaultsscc_info_SearchInstitutionsRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_SearchInstitutionsRequest_default_instance_;
    new (ptr) ::plaid::SearchInstitutionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::SearchInstitutionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SearchInstitutionsRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SearchInstitutionsRequest_plaid_2eproto}, {
      &scc_info_SearchInstitutionsOptions_plaid_2eproto.base,}};

static void InitDefaultsscc_info_SearchInstitutionsResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_SearchInstitutionsResponse_default_instance_;
    new (ptr) ::plaid::SearchInstitutionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::SearchInstitutionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SearchInstitutionsResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SearchInstitutionsResponse_plaid_2eproto}, {
      &scc_info_Institution_plaid_2eproto.base,}};

static void InitDefaultsscc_info_Security_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_Security_default_instance_;
    new (ptr) ::plaid::Security();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::Security::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Security_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Security_plaid_2eproto}, {}};

static void InitDefaultsscc_info_StudentLoanLiability_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_StudentLoanLiability_default_instance_;
    new (ptr) ::plaid::StudentLoanLiability();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::StudentLoanLiability::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_StudentLoanLiability_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_StudentLoanLiability_plaid_2eproto}, {
      &scc_info_StudentLoanStatus_plaid_2eproto.base,
      &scc_info_PSLFStatus_plaid_2eproto.base,
      &scc_info_StudentLoanRepaymentPlan_plaid_2eproto.base,
      &scc_info_StudentLoanServicerAddress_plaid_2eproto.base,}};

static void InitDefaultsscc_info_StudentLoanRepaymentPlan_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_StudentLoanRepaymentPlan_default_instance_;
    new (ptr) ::plaid::StudentLoanRepaymentPlan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::StudentLoanRepaymentPlan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StudentLoanRepaymentPlan_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StudentLoanRepaymentPlan_plaid_2eproto}, {}};

static void InitDefaultsscc_info_StudentLoanServicerAddress_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_StudentLoanServicerAddress_default_instance_;
    new (ptr) ::plaid::StudentLoanServicerAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::StudentLoanServicerAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StudentLoanServicerAddress_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StudentLoanServicerAddress_plaid_2eproto}, {}};

static void InitDefaultsscc_info_StudentLoanStatus_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_StudentLoanStatus_default_instance_;
    new (ptr) ::plaid::StudentLoanStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::StudentLoanStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StudentLoanStatus_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StudentLoanStatus_plaid_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_Transaction_default_instance_;
    new (ptr) ::plaid::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::Transaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transaction_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Transaction_plaid_2eproto}, {
      &scc_info_Location_plaid_2eproto.base,
      &scc_info_PaymentMeta_plaid_2eproto.base,}};

static void InitDefaultsscc_info_UpdateAccessTokenVersionRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_UpdateAccessTokenVersionRequest_default_instance_;
    new (ptr) ::plaid::UpdateAccessTokenVersionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::UpdateAccessTokenVersionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateAccessTokenVersionRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateAccessTokenVersionRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_UpdateAccessTokenVersionResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_UpdateAccessTokenVersionResponse_default_instance_;
    new (ptr) ::plaid::UpdateAccessTokenVersionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::UpdateAccessTokenVersionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateAccessTokenVersionResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateAccessTokenVersionResponse_plaid_2eproto}, {}};

static void InitDefaultsscc_info_UpdateItemWebhookRequest_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_UpdateItemWebhookRequest_default_instance_;
    new (ptr) ::plaid::UpdateItemWebhookRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::UpdateItemWebhookRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateItemWebhookRequest_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateItemWebhookRequest_plaid_2eproto}, {}};

static void InitDefaultsscc_info_UpdateItemWebhookResponse_plaid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plaid::_UpdateItemWebhookResponse_default_instance_;
    new (ptr) ::plaid::UpdateItemWebhookResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plaid::UpdateItemWebhookResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateItemWebhookResponse_plaid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateItemWebhookResponse_plaid_2eproto}, {
      &scc_info_Item_plaid_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_plaid_2eproto[126];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_plaid_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_plaid_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_plaid_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::Account, account_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Account, balances_),
  PROTOBUF_FIELD_OFFSET(::plaid::Account, mask_),
  PROTOBUF_FIELD_OFFSET(::plaid::Account, name_),
  PROTOBUF_FIELD_OFFSET(::plaid::Account, official_name_),
  PROTOBUF_FIELD_OFFSET(::plaid::Account, subtype_),
  PROTOBUF_FIELD_OFFSET(::plaid::Account, type_),
  PROTOBUF_FIELD_OFFSET(::plaid::Account, verification_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::AccountBalances, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::AccountBalances, available_),
  PROTOBUF_FIELD_OFFSET(::plaid::AccountBalances, current_),
  PROTOBUF_FIELD_OFFSET(::plaid::AccountBalances, limit_),
  PROTOBUF_FIELD_OFFSET(::plaid::AccountBalances, iso_currency_code_),
  PROTOBUF_FIELD_OFFSET(::plaid::AccountBalances, unofficial_currency_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::ACHNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::ACHNumber, account_),
  PROTOBUF_FIELD_OFFSET(::plaid::ACHNumber, account_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::ACHNumber, routing_),
  PROTOBUF_FIELD_OFFSET(::plaid::ACHNumber, wire_routing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::EFTNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::EFTNumber, account_),
  PROTOBUF_FIELD_OFFSET(::plaid::EFTNumber, account_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::EFTNumber, institution_),
  PROTOBUF_FIELD_OFFSET(::plaid::EFTNumber, branch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::IBANNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::IBANNumber, account_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::IBANNumber, iban_),
  PROTOBUF_FIELD_OFFSET(::plaid::IBANNumber, bic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::BACSNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::BACSNumber, account_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::BACSNumber, account_),
  PROTOBUF_FIELD_OFFSET(::plaid::BACSNumber, sort_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetBalancesRequestOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetBalancesRequestOptions, account_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetBalancesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetBalancesRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetBalancesRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetBalancesRequest, access_token_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetBalancesRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetBalancesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetBalancesResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetBalancesResponse, accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAccountsRequestOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAccountsRequestOptions, account_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAccountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAccountsRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetAccountsRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetAccountsRequest, access_token_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetAccountsRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAccountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAccountsResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetAccountsResponse, accounts_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetAccountsResponse, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAccountsOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAccountsOptions, account_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetBalancesOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetBalancesOptions, account_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReport, asset_report_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReport, client_report_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReport, date_generated_),
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReport, days_requested_),
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReport, items_),
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReport, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReportItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReportItem, accounts_),
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReportItem, date_last_updated_),
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReportItem, institution_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReportItem, institution_name_),
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReportItem, item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReportUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReportUser, client_user_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReportUser, email_),
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReportUser, first_name_),
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReportUser, last_name_),
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReportUser, middle_name_),
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReportUser, phone_number_),
  PROTOBUF_FIELD_OFFSET(::plaid::AssetReportUser, ssn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAssetReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAssetReportRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetAssetReportRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetAssetReportRequest, asset_report_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAssetReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAssetReportResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetAssetReportResponse, report_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetAssetReportResponse, warnings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::RemoveAssetReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::RemoveAssetReportRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::RemoveAssetReportRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::RemoveAssetReportRequest, asset_report_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::RemoveAssetReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::RemoveAssetReportResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::RemoveAssetReportResponse, removed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::CreateAuditCopyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::CreateAuditCopyRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreateAuditCopyRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreateAuditCopyRequest, asset_report_token_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreateAuditCopyRequest, auditor_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::CreateAuditCopyTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::CreateAuditCopyTokenResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreateAuditCopyTokenResponse, audit_copy_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAuthRequestOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAuthRequestOptions, account_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAuthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAuthRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetAuthRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetAuthRequest, access_token_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetAuthRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::AccountNumberCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::AccountNumberCollection, ach_),
  PROTOBUF_FIELD_OFFSET(::plaid::AccountNumberCollection, eft_),
  PROTOBUF_FIELD_OFFSET(::plaid::AccountNumberCollection, international_),
  PROTOBUF_FIELD_OFFSET(::plaid::AccountNumberCollection, bacs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAuthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAuthResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetAuthResponse, accounts_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetAuthResponse, numbers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAuthOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetAuthOptions, account_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::Category, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::Category, category_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Category, group_),
  PROTOBUF_FIELD_OFFSET(::plaid::Category, hierarchy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetCategoriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetCategoriesResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetCategoriesResponse, categories_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::Error, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Error, error_type_),
  PROTOBUF_FIELD_OFFSET(::plaid::Error, error_code_),
  PROTOBUF_FIELD_OFFSET(::plaid::Error, error_message_),
  PROTOBUF_FIELD_OFFSET(::plaid::Error, display_message_),
  PROTOBUF_FIELD_OFFSET(::plaid::Error, status_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::Security, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::Security, security_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Security, cusip_),
  PROTOBUF_FIELD_OFFSET(::plaid::Security, sedol_),
  PROTOBUF_FIELD_OFFSET(::plaid::Security, isin_),
  PROTOBUF_FIELD_OFFSET(::plaid::Security, institution_security_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Security, institution_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Security, proxy_security_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Security, name_),
  PROTOBUF_FIELD_OFFSET(::plaid::Security, ticker_symbol_),
  PROTOBUF_FIELD_OFFSET(::plaid::Security, is_cash_equivalent_),
  PROTOBUF_FIELD_OFFSET(::plaid::Security, type_),
  PROTOBUF_FIELD_OFFSET(::plaid::Security, close_price_),
  PROTOBUF_FIELD_OFFSET(::plaid::Security, close_price_as_of_),
  PROTOBUF_FIELD_OFFSET(::plaid::Security, iso_currency_code_),
  PROTOBUF_FIELD_OFFSET(::plaid::Security, unofficial_currency_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::Holding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::Holding, account_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Holding, security_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Holding, institution_value_),
  PROTOBUF_FIELD_OFFSET(::plaid::Holding, institution_price_),
  PROTOBUF_FIELD_OFFSET(::plaid::Holding, quantity_),
  PROTOBUF_FIELD_OFFSET(::plaid::Holding, institution_price_as_of_),
  PROTOBUF_FIELD_OFFSET(::plaid::Holding, cost_basis_),
  PROTOBUF_FIELD_OFFSET(::plaid::Holding, iso_currency_code_),
  PROTOBUF_FIELD_OFFSET(::plaid::Holding, unofficial_currency_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetHoldingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetHoldingsRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetHoldingsRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetHoldingsRequest, access_token_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetHoldingsRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetHoldingsOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetHoldingsOptions, account_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetHoldingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetHoldingsResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetHoldingsResponse, accounts_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetHoldingsResponse, item_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetHoldingsResponse, securities_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetHoldingsResponse, holdings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::Identity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::Identity, addresses_),
  PROTOBUF_FIELD_OFFSET(::plaid::Identity, emails_),
  PROTOBUF_FIELD_OFFSET(::plaid::Identity, names_),
  PROTOBUF_FIELD_OFFSET(::plaid::Identity, phone_numbers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::Address, data_),
  PROTOBUF_FIELD_OFFSET(::plaid::Address, primary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::AddressData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::AddressData, city_),
  PROTOBUF_FIELD_OFFSET(::plaid::AddressData, region_),
  PROTOBUF_FIELD_OFFSET(::plaid::AddressData, street_),
  PROTOBUF_FIELD_OFFSET(::plaid::AddressData, postal_code_),
  PROTOBUF_FIELD_OFFSET(::plaid::AddressData, country_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::Email, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::Email, data_),
  PROTOBUF_FIELD_OFFSET(::plaid::Email, primary_),
  PROTOBUF_FIELD_OFFSET(::plaid::Email, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::PhoneNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::PhoneNumber, primary_),
  PROTOBUF_FIELD_OFFSET(::plaid::PhoneNumber, type_),
  PROTOBUF_FIELD_OFFSET(::plaid::PhoneNumber, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetIdentityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetIdentityRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetIdentityRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetIdentityRequest, access_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::AccountWithOwners, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::AccountWithOwners, owners_),
  PROTOBUF_FIELD_OFFSET(::plaid::AccountWithOwners, account_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::AccountWithOwners, balances_),
  PROTOBUF_FIELD_OFFSET(::plaid::AccountWithOwners, mask_),
  PROTOBUF_FIELD_OFFSET(::plaid::AccountWithOwners, name_),
  PROTOBUF_FIELD_OFFSET(::plaid::AccountWithOwners, official_name_),
  PROTOBUF_FIELD_OFFSET(::plaid::AccountWithOwners, subtype_),
  PROTOBUF_FIELD_OFFSET(::plaid::AccountWithOwners, type_),
  PROTOBUF_FIELD_OFFSET(::plaid::AccountWithOwners, verification_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetIdentityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetIdentityResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetIdentityResponse, accounts_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetIdentityResponse, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::Income, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::Income, income_streams_),
  PROTOBUF_FIELD_OFFSET(::plaid::Income, last_year_income_),
  PROTOBUF_FIELD_OFFSET(::plaid::Income, last_year_income_before_tax_),
  PROTOBUF_FIELD_OFFSET(::plaid::Income, projected_yearly_income_),
  PROTOBUF_FIELD_OFFSET(::plaid::Income, projected_yearly_income_before_tax_),
  PROTOBUF_FIELD_OFFSET(::plaid::Income, max_number_of_overlapping_income_streams_),
  PROTOBUF_FIELD_OFFSET(::plaid::Income, number_of_income_streams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::IncomeStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::IncomeStream, confidence_),
  PROTOBUF_FIELD_OFFSET(::plaid::IncomeStream, days_),
  PROTOBUF_FIELD_OFFSET(::plaid::IncomeStream, monthly_income_),
  PROTOBUF_FIELD_OFFSET(::plaid::IncomeStream, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetIncomeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetIncomeRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetIncomeRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetIncomeRequest, access_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetIncomeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetIncomeResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetIncomeResponse, income_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::Institution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::Institution, credentials_),
  PROTOBUF_FIELD_OFFSET(::plaid::Institution, has_mfa_),
  PROTOBUF_FIELD_OFFSET(::plaid::Institution, institution_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Institution, mfa_),
  PROTOBUF_FIELD_OFFSET(::plaid::Institution, name_),
  PROTOBUF_FIELD_OFFSET(::plaid::Institution, products_),
  PROTOBUF_FIELD_OFFSET(::plaid::Institution, country_codes_),
  PROTOBUF_FIELD_OFFSET(::plaid::Institution, status_),
  PROTOBUF_FIELD_OFFSET(::plaid::Institution, primary_color_),
  PROTOBUF_FIELD_OFFSET(::plaid::Institution, url_),
  PROTOBUF_FIELD_OFFSET(::plaid::Institution, logo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::InstitutionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::InstitutionStatus, item_logins_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::ItemLogins, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::ItemLogins, status_),
  PROTOBUF_FIELD_OFFSET(::plaid::ItemLogins, last_status_change_),
  PROTOBUF_FIELD_OFFSET(::plaid::ItemLogins, breakdown_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::InstitutionStatusBreakdown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::InstitutionStatusBreakdown, success_),
  PROTOBUF_FIELD_OFFSET(::plaid::InstitutionStatusBreakdown, error_plaid_),
  PROTOBUF_FIELD_OFFSET(::plaid::InstitutionStatusBreakdown, error_institution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::Credential, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::Credential, label_),
  PROTOBUF_FIELD_OFFSET(::plaid::Credential, name_),
  PROTOBUF_FIELD_OFFSET(::plaid::Credential, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionsRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionsRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionsRequest, count_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionsRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionsRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionsOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionsOptions, products_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionsOptions, include_optional_metadata_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionsOptions, country_codes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionsResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionsResponse, institutions_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionsResponse, total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionByIDRequest, institution_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionByIDRequest, public_key_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionByIDRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionByIDOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionByIDOptions, include_optional_metadata_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionByIDOptions, include_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionByIDResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInstitutionByIDResponse, institution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::SearchInstitutionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::SearchInstitutionsRequest, query_),
  PROTOBUF_FIELD_OFFSET(::plaid::SearchInstitutionsRequest, products_),
  PROTOBUF_FIELD_OFFSET(::plaid::SearchInstitutionsRequest, public_key_),
  PROTOBUF_FIELD_OFFSET(::plaid::SearchInstitutionsRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::SearchInstitutionsOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::SearchInstitutionsOptions, include_optional_metadata_),
  PROTOBUF_FIELD_OFFSET(::plaid::SearchInstitutionsOptions, country_codes_),
  PROTOBUF_FIELD_OFFSET(::plaid::SearchInstitutionsOptions, routing_numbers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::SearchInstitutionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::SearchInstitutionsResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::SearchInstitutionsResponse, institutions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::InvestmentTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::InvestmentTransaction, investment_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::InvestmentTransaction, account_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::InvestmentTransaction, security_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::InvestmentTransaction, cancel_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::InvestmentTransaction, date_),
  PROTOBUF_FIELD_OFFSET(::plaid::InvestmentTransaction, name_),
  PROTOBUF_FIELD_OFFSET(::plaid::InvestmentTransaction, quantity_),
  PROTOBUF_FIELD_OFFSET(::plaid::InvestmentTransaction, amount_),
  PROTOBUF_FIELD_OFFSET(::plaid::InvestmentTransaction, price_),
  PROTOBUF_FIELD_OFFSET(::plaid::InvestmentTransaction, fees_),
  PROTOBUF_FIELD_OFFSET(::plaid::InvestmentTransaction, type_),
  PROTOBUF_FIELD_OFFSET(::plaid::InvestmentTransaction, iso_currency_code_),
  PROTOBUF_FIELD_OFFSET(::plaid::InvestmentTransaction, unofficial_currency_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsResponse, item_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsResponse, accounts_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsResponse, investment_transactions_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsResponse, securities_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsResponse, total_investment_transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsOptions, start_date_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsOptions, end_date_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsOptions, account_ids_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsOptions, count_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsOptions, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsRequest, access_token_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsRequest, start_date_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsRequest, end_date_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsRequestOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsRequestOptions, account_ids_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsRequestOptions, count_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetInvestmentTransactionsRequestOptions, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::Item, available_products_),
  PROTOBUF_FIELD_OFFSET(::plaid::Item, billed_products_),
  PROTOBUF_FIELD_OFFSET(::plaid::Item, error_),
  PROTOBUF_FIELD_OFFSET(::plaid::Item, institution_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Item, item_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Item, webhook_),
  PROTOBUF_FIELD_OFFSET(::plaid::Item, consent_expiration_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetItemRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetItemRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetItemRequest, access_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetItemResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetItemResponse, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::RemoveItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::RemoveItemRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::RemoveItemRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::RemoveItemRequest, access_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::RemoveItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::RemoveItemResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::RemoveItemResponse, removed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::UpdateItemWebhookRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::UpdateItemWebhookRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::UpdateItemWebhookRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::UpdateItemWebhookRequest, access_token_),
  PROTOBUF_FIELD_OFFSET(::plaid::UpdateItemWebhookRequest, webhook_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::UpdateItemWebhookResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::UpdateItemWebhookResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::UpdateItemWebhookResponse, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::InvalidateAccessTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::InvalidateAccessTokenRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::InvalidateAccessTokenRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::InvalidateAccessTokenRequest, access_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::InvalidateAccessTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::InvalidateAccessTokenResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::InvalidateAccessTokenResponse, new_access_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::UpdateAccessTokenVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::UpdateAccessTokenVersionRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::UpdateAccessTokenVersionRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::UpdateAccessTokenVersionRequest, access_token_v1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::UpdateAccessTokenVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::UpdateAccessTokenVersionResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::UpdateAccessTokenVersionResponse, access_token_),
  PROTOBUF_FIELD_OFFSET(::plaid::UpdateAccessTokenVersionResponse, item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePublicTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePublicTokenRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePublicTokenRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePublicTokenRequest, access_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePublicTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePublicTokenResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePublicTokenResponse, public_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::ExchangePublicTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::ExchangePublicTokenRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::ExchangePublicTokenRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::ExchangePublicTokenRequest, public_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::ExchangePublicTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::ExchangePublicTokenResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::ExchangePublicTokenResponse, access_token_),
  PROTOBUF_FIELD_OFFSET(::plaid::ExchangePublicTokenResponse, item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, account_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, account_number_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, disbursement_dates_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, expected_payoff_date_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, guarantor_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, interest_rate_percentage_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, is_overdue_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, last_payment_amount_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, last_payment_date_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, last_satement_balance_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, last_statement_issue_date_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, loan_name_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, loan_status_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, minimum_payment_amount_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, next_payment_due_date_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, origination_date_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, origination_principal_amount_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, outstanding_interest_amount_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, payment_reference_number_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, pslf_status_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, repayment_plan_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, servicer_address_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, ytd_interest_paid_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanLiability, ytd_principal_paid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::PSLFStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::PSLFStatus, estimated_eligibility_date_),
  PROTOBUF_FIELD_OFFSET(::plaid::PSLFStatus, payments_made_),
  PROTOBUF_FIELD_OFFSET(::plaid::PSLFStatus, payments_remaining_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanServicerAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanServicerAddress, city_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanServicerAddress, country_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanServicerAddress, postal_code_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanServicerAddress, region_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanServicerAddress, street_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanStatus, type_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanStatus, end_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanRepaymentPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanRepaymentPlan, type_),
  PROTOBUF_FIELD_OFFSET(::plaid::StudentLoanRepaymentPlan, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetLiabilitiesRequestOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetLiabilitiesRequestOptions, account_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetLiabilitiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetLiabilitiesRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetLiabilitiesRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetLiabilitiesRequest, access_token_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetLiabilitiesRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetLiabilitiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetLiabilitiesResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetLiabilitiesResponse, accounts_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetLiabilitiesResponse, item_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetLiabilitiesResponse, liabilities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::Liabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::Liabilities, student_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetLiabilitiesOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetLiabilitiesOptions, account_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::PaymentRecipientAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::PaymentRecipientAddress, street_),
  PROTOBUF_FIELD_OFFSET(::plaid::PaymentRecipientAddress, city_),
  PROTOBUF_FIELD_OFFSET(::plaid::PaymentRecipientAddress, postal_code_),
  PROTOBUF_FIELD_OFFSET(::plaid::PaymentRecipientAddress, country_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentRecipientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentRecipientRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentRecipientRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentRecipientRequest, name_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentRecipientRequest, iban_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentRecipientRequest, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentRecipientResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentRecipientResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentRecipientResponse, recipient_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentRecipientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentRecipientRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentRecipientRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentRecipientRequest, recipient_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentRecipientResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentRecipientResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentRecipientResponse, recipient_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentRecipientResponse, name_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentRecipientResponse, iban_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentRecipientResponse, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentRecipientsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentRecipientsRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentRecipientsRequest, secret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::Recipient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::Recipient, recipient_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Recipient, name_),
  PROTOBUF_FIELD_OFFSET(::plaid::Recipient, iban_),
  PROTOBUF_FIELD_OFFSET(::plaid::Recipient, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentRecipientsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentRecipientsResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentRecipientsResponse, recipients_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::PaymentAmount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::PaymentAmount, currency_),
  PROTOBUF_FIELD_OFFSET(::plaid::PaymentAmount, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentRequest, recipient_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentRequest, reference_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentRequest, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentResponse, payment_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentTokenRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentTokenRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentTokenRequest, payment_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentTokenResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentTokenResponse, payment_token_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreatePaymentTokenResponse, payment_token_expiration_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentRequest, payment_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentResponse, payment_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentResponse, payment_token_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentResponse, reference_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentResponse, amount_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentResponse, status_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentResponse, last_status_update_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentResponse, payment_token_expiration_time_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetPaymentResponse, recipient_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentsRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentsRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentsRequest, count_),
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentsRequest, cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::Payment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::Payment, payment_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Payment, payment_token_),
  PROTOBUF_FIELD_OFFSET(::plaid::Payment, reference_),
  PROTOBUF_FIELD_OFFSET(::plaid::Payment, amount_),
  PROTOBUF_FIELD_OFFSET(::plaid::Payment, status_),
  PROTOBUF_FIELD_OFFSET(::plaid::Payment, last_status_update_),
  PROTOBUF_FIELD_OFFSET(::plaid::Payment, payment_token_expiration_time_),
  PROTOBUF_FIELD_OFFSET(::plaid::Payment, recipient_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentsResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentsResponse, payments_),
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentsResponse, next_cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentsOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentsOptions, count_),
  PROTOBUF_FIELD_OFFSET(::plaid::ListPaymentsOptions, cursor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::CreateProcessorTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::CreateProcessorTokenRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreateProcessorTokenRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreateProcessorTokenRequest, access_token_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreateProcessorTokenRequest, account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::CreateProcessorTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::CreateProcessorTokenResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreateProcessorTokenResponse, processor_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::CreateStripeTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::CreateStripeTokenRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreateStripeTokenRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreateStripeTokenRequest, access_token_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreateStripeTokenRequest, account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::CreateStripeTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::CreateStripeTokenResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreateStripeTokenResponse, stripe_bank_account_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::CreateSandboxPublicTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::CreateSandboxPublicTokenRequest, institution_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreateSandboxPublicTokenRequest, inital_products_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreateSandboxPublicTokenRequest, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::CreateSandboxPublicTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::CreateSandboxPublicTokenResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::CreateSandboxPublicTokenResponse, public_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::ResetSandboxItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::ResetSandboxItemRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::ResetSandboxItemRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::ResetSandboxItemRequest, access_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::ResetSandboxItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::ResetSandboxItemResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::ResetSandboxItemResponse, reset_login_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::Transaction, account_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Transaction, amount_),
  PROTOBUF_FIELD_OFFSET(::plaid::Transaction, iso_currency_code_),
  PROTOBUF_FIELD_OFFSET(::plaid::Transaction, unofficial_currency_code_),
  PROTOBUF_FIELD_OFFSET(::plaid::Transaction, category_),
  PROTOBUF_FIELD_OFFSET(::plaid::Transaction, category_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Transaction, date_),
  PROTOBUF_FIELD_OFFSET(::plaid::Transaction, location_),
  PROTOBUF_FIELD_OFFSET(::plaid::Transaction, name_),
  PROTOBUF_FIELD_OFFSET(::plaid::Transaction, payment_meta_),
  PROTOBUF_FIELD_OFFSET(::plaid::Transaction, pending_),
  PROTOBUF_FIELD_OFFSET(::plaid::Transaction, pending_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Transaction, account_owner_),
  PROTOBUF_FIELD_OFFSET(::plaid::Transaction, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::Transaction, transaction_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::Location, addreess_),
  PROTOBUF_FIELD_OFFSET(::plaid::Location, city_),
  PROTOBUF_FIELD_OFFSET(::plaid::Location, lat_),
  PROTOBUF_FIELD_OFFSET(::plaid::Location, lon_),
  PROTOBUF_FIELD_OFFSET(::plaid::Location, region_),
  PROTOBUF_FIELD_OFFSET(::plaid::Location, store_number_),
  PROTOBUF_FIELD_OFFSET(::plaid::Location, postal_code_),
  PROTOBUF_FIELD_OFFSET(::plaid::Location, country_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::PaymentMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::PaymentMeta, by_order_of_),
  PROTOBUF_FIELD_OFFSET(::plaid::PaymentMeta, payee_),
  PROTOBUF_FIELD_OFFSET(::plaid::PaymentMeta, payer_),
  PROTOBUF_FIELD_OFFSET(::plaid::PaymentMeta, payment_method_),
  PROTOBUF_FIELD_OFFSET(::plaid::PaymentMeta, payment_processor_),
  PROTOBUF_FIELD_OFFSET(::plaid::PaymentMeta, ppd_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::PaymentMeta, reason_),
  PROTOBUF_FIELD_OFFSET(::plaid::PaymentMeta, reference_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsRequestOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsRequestOptions, account_ids_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsRequestOptions, count_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsRequestOptions, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsRequest, secret_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsRequest, access_token_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsRequest, start_date_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsRequest, end_date_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsResponse, accounts_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsResponse, item_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsResponse, transactions_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsResponse, total_transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsOptions, start_date_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsOptions, end_date_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsOptions, account_ids_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsOptions, count_),
  PROTOBUF_FIELD_OFFSET(::plaid::GetTransactionsOptions, offset_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::plaid::Account)},
  { 13, -1, sizeof(::plaid::AccountBalances)},
  { 23, -1, sizeof(::plaid::ACHNumber)},
  { 32, -1, sizeof(::plaid::EFTNumber)},
  { 41, -1, sizeof(::plaid::IBANNumber)},
  { 49, -1, sizeof(::plaid::BACSNumber)},
  { 57, -1, sizeof(::plaid::GetBalancesRequestOptions)},
  { 63, -1, sizeof(::plaid::GetBalancesRequest)},
  { 72, -1, sizeof(::plaid::GetBalancesResponse)},
  { 79, -1, sizeof(::plaid::GetAccountsRequestOptions)},
  { 85, -1, sizeof(::plaid::GetAccountsRequest)},
  { 94, -1, sizeof(::plaid::GetAccountsResponse)},
  { 102, -1, sizeof(::plaid::GetAccountsOptions)},
  { 108, -1, sizeof(::plaid::GetBalancesOptions)},
  { 114, -1, sizeof(::plaid::AssetReport)},
  { 125, -1, sizeof(::plaid::AssetReportItem)},
  { 135, -1, sizeof(::plaid::AssetReportUser)},
  { 147, -1, sizeof(::plaid::GetAssetReportRequest)},
  { 155, -1, sizeof(::plaid::GetAssetReportResponse)},
  { 163, -1, sizeof(::plaid::RemoveAssetReportRequest)},
  { 171, -1, sizeof(::plaid::RemoveAssetReportResponse)},
  { 178, -1, sizeof(::plaid::CreateAuditCopyRequest)},
  { 187, -1, sizeof(::plaid::CreateAuditCopyTokenResponse)},
  { 194, -1, sizeof(::plaid::GetAuthRequestOptions)},
  { 200, -1, sizeof(::plaid::GetAuthRequest)},
  { 209, -1, sizeof(::plaid::AccountNumberCollection)},
  { 218, -1, sizeof(::plaid::GetAuthResponse)},
  { 226, -1, sizeof(::plaid::GetAuthOptions)},
  { 232, -1, sizeof(::plaid::Category)},
  { 240, -1, sizeof(::plaid::GetCategoriesResponse)},
  { 247, -1, sizeof(::plaid::Error)},
  { 258, -1, sizeof(::plaid::Security)},
  { 278, -1, sizeof(::plaid::Holding)},
  { 292, -1, sizeof(::plaid::GetHoldingsRequest)},
  { 301, -1, sizeof(::plaid::GetHoldingsOptions)},
  { 307, -1, sizeof(::plaid::GetHoldingsResponse)},
  { 317, -1, sizeof(::plaid::Identity)},
  { 326, -1, sizeof(::plaid::Address)},
  { 333, -1, sizeof(::plaid::AddressData)},
  { 343, -1, sizeof(::plaid::Email)},
  { 351, -1, sizeof(::plaid::PhoneNumber)},
  { 359, -1, sizeof(::plaid::GetIdentityRequest)},
  { 367, -1, sizeof(::plaid::AccountWithOwners)},
  { 381, -1, sizeof(::plaid::GetIdentityResponse)},
  { 389, -1, sizeof(::plaid::Income)},
  { 401, -1, sizeof(::plaid::IncomeStream)},
  { 410, -1, sizeof(::plaid::GetIncomeRequest)},
  { 418, -1, sizeof(::plaid::GetIncomeResponse)},
  { 425, -1, sizeof(::plaid::Institution)},
  { 441, -1, sizeof(::plaid::InstitutionStatus)},
  { 447, -1, sizeof(::plaid::ItemLogins)},
  { 455, -1, sizeof(::plaid::InstitutionStatusBreakdown)},
  { 463, -1, sizeof(::plaid::Credential)},
  { 471, -1, sizeof(::plaid::GetInstitutionsRequest)},
  { 481, -1, sizeof(::plaid::GetInstitutionsOptions)},
  { 489, -1, sizeof(::plaid::GetInstitutionsResponse)},
  { 497, -1, sizeof(::plaid::GetInstitutionByIDRequest)},
  { 505, -1, sizeof(::plaid::GetInstitutionByIDOptions)},
  { 512, -1, sizeof(::plaid::GetInstitutionByIDResponse)},
  { 519, -1, sizeof(::plaid::SearchInstitutionsRequest)},
  { 528, -1, sizeof(::plaid::SearchInstitutionsOptions)},
  { 536, -1, sizeof(::plaid::SearchInstitutionsResponse)},
  { 543, -1, sizeof(::plaid::InvestmentTransaction)},
  { 561, -1, sizeof(::plaid::GetInvestmentTransactionsResponse)},
  { 572, -1, sizeof(::plaid::GetInvestmentTransactionsOptions)},
  { 582, -1, sizeof(::plaid::GetInvestmentTransactionsRequest)},
  { 593, -1, sizeof(::plaid::GetInvestmentTransactionsRequestOptions)},
  { 601, -1, sizeof(::plaid::Item)},
  { 613, -1, sizeof(::plaid::GetItemRequest)},
  { 621, -1, sizeof(::plaid::GetItemResponse)},
  { 628, -1, sizeof(::plaid::RemoveItemRequest)},
  { 636, -1, sizeof(::plaid::RemoveItemResponse)},
  { 643, -1, sizeof(::plaid::UpdateItemWebhookRequest)},
  { 652, -1, sizeof(::plaid::UpdateItemWebhookResponse)},
  { 659, -1, sizeof(::plaid::InvalidateAccessTokenRequest)},
  { 667, -1, sizeof(::plaid::InvalidateAccessTokenResponse)},
  { 674, -1, sizeof(::plaid::UpdateAccessTokenVersionRequest)},
  { 682, -1, sizeof(::plaid::UpdateAccessTokenVersionResponse)},
  { 690, -1, sizeof(::plaid::CreatePublicTokenRequest)},
  { 698, -1, sizeof(::plaid::CreatePublicTokenResponse)},
  { 705, -1, sizeof(::plaid::ExchangePublicTokenRequest)},
  { 713, -1, sizeof(::plaid::ExchangePublicTokenResponse)},
  { 721, -1, sizeof(::plaid::StudentLoanLiability)},
  { 751, -1, sizeof(::plaid::PSLFStatus)},
  { 759, -1, sizeof(::plaid::StudentLoanServicerAddress)},
  { 769, -1, sizeof(::plaid::StudentLoanStatus)},
  { 776, -1, sizeof(::plaid::StudentLoanRepaymentPlan)},
  { 783, -1, sizeof(::plaid::GetLiabilitiesRequestOptions)},
  { 789, -1, sizeof(::plaid::GetLiabilitiesRequest)},
  { 798, -1, sizeof(::plaid::GetLiabilitiesResponse)},
  { 807, -1, sizeof(::plaid::Liabilities)},
  { 813, -1, sizeof(::plaid::GetLiabilitiesOptions)},
  { 819, -1, sizeof(::plaid::PaymentRecipientAddress)},
  { 828, -1, sizeof(::plaid::CreatePaymentRecipientRequest)},
  { 838, -1, sizeof(::plaid::CreatePaymentRecipientResponse)},
  { 845, -1, sizeof(::plaid::GetPaymentRecipientRequest)},
  { 853, -1, sizeof(::plaid::GetPaymentRecipientResponse)},
  { 863, -1, sizeof(::plaid::ListPaymentRecipientsRequest)},
  { 870, -1, sizeof(::plaid::Recipient)},
  { 879, -1, sizeof(::plaid::ListPaymentRecipientsResponse)},
  { 886, -1, sizeof(::plaid::PaymentAmount)},
  { 893, -1, sizeof(::plaid::CreatePaymentRequest)},
  { 903, -1, sizeof(::plaid::CreatePaymentResponse)},
  { 911, -1, sizeof(::plaid::CreatePaymentTokenRequest)},
  { 919, -1, sizeof(::plaid::CreatePaymentTokenResponse)},
  { 927, -1, sizeof(::plaid::GetPaymentRequest)},
  { 935, -1, sizeof(::plaid::GetPaymentResponse)},
  { 949, -1, sizeof(::plaid::ListPaymentsRequest)},
  { 958, -1, sizeof(::plaid::Payment)},
  { 971, -1, sizeof(::plaid::ListPaymentsResponse)},
  { 979, -1, sizeof(::plaid::ListPaymentsOptions)},
  { 986, -1, sizeof(::plaid::CreateProcessorTokenRequest)},
  { 995, -1, sizeof(::plaid::CreateProcessorTokenResponse)},
  { 1002, -1, sizeof(::plaid::CreateStripeTokenRequest)},
  { 1011, -1, sizeof(::plaid::CreateStripeTokenResponse)},
  { 1018, -1, sizeof(::plaid::CreateSandboxPublicTokenRequest)},
  { 1026, -1, sizeof(::plaid::CreateSandboxPublicTokenResponse)},
  { 1033, -1, sizeof(::plaid::ResetSandboxItemRequest)},
  { 1041, -1, sizeof(::plaid::ResetSandboxItemResponse)},
  { 1048, -1, sizeof(::plaid::Transaction)},
  { 1068, -1, sizeof(::plaid::Location)},
  { 1081, -1, sizeof(::plaid::PaymentMeta)},
  { 1094, -1, sizeof(::plaid::GetTransactionsRequestOptions)},
  { 1102, -1, sizeof(::plaid::GetTransactionsRequest)},
  { 1113, -1, sizeof(::plaid::GetTransactionsResponse)},
  { 1123, -1, sizeof(::plaid::GetTransactionsOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_Account_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_AccountBalances_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_ACHNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_EFTNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_IBANNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_BACSNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetBalancesRequestOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetBalancesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetBalancesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetAccountsRequestOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetAccountsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetAccountsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetAccountsOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetBalancesOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_AssetReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_AssetReportItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_AssetReportUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetAssetReportRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetAssetReportResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_RemoveAssetReportRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_RemoveAssetReportResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_CreateAuditCopyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_CreateAuditCopyTokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetAuthRequestOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetAuthRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_AccountNumberCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetAuthResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetAuthOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_Category_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetCategoriesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_Error_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_Security_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_Holding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetHoldingsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetHoldingsOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetHoldingsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_Identity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_Address_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_AddressData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_Email_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_PhoneNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetIdentityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_AccountWithOwners_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetIdentityResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_Income_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_IncomeStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetIncomeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetIncomeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_Institution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_InstitutionStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_ItemLogins_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_InstitutionStatusBreakdown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_Credential_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetInstitutionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetInstitutionsOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetInstitutionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetInstitutionByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetInstitutionByIDOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetInstitutionByIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_SearchInstitutionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_SearchInstitutionsOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_SearchInstitutionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_InvestmentTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetInvestmentTransactionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetInvestmentTransactionsOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetInvestmentTransactionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetInvestmentTransactionsRequestOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetItemRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetItemResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_RemoveItemRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_RemoveItemResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_UpdateItemWebhookRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_UpdateItemWebhookResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_InvalidateAccessTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_InvalidateAccessTokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_UpdateAccessTokenVersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_UpdateAccessTokenVersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_CreatePublicTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_CreatePublicTokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_ExchangePublicTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_ExchangePublicTokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_StudentLoanLiability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_PSLFStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_StudentLoanServicerAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_StudentLoanStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_StudentLoanRepaymentPlan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetLiabilitiesRequestOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetLiabilitiesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetLiabilitiesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_Liabilities_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetLiabilitiesOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_PaymentRecipientAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_CreatePaymentRecipientRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_CreatePaymentRecipientResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetPaymentRecipientRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetPaymentRecipientResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_ListPaymentRecipientsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_Recipient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_ListPaymentRecipientsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_PaymentAmount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_CreatePaymentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_CreatePaymentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_CreatePaymentTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_CreatePaymentTokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetPaymentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetPaymentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_ListPaymentsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_Payment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_ListPaymentsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_ListPaymentsOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_CreateProcessorTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_CreateProcessorTokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_CreateStripeTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_CreateStripeTokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_CreateSandboxPublicTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_CreateSandboxPublicTokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_ResetSandboxItemRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_ResetSandboxItemResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_PaymentMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetTransactionsRequestOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetTransactionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetTransactionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plaid::_GetTransactionsOptions_default_instance_),
};

const char descriptor_table_protodef_plaid_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013plaid.proto\022\005plaid\"\266\001\n\007Account\022\022\n\nacco"
  "unt_id\030\001 \001(\t\022(\n\010balances\030\002 \001(\0132\026.plaid.A"
  "ccountBalances\022\014\n\004mask\030\003 \001(\t\022\014\n\004name\030\004 \001"
  "(\t\022\025\n\rofficial_name\030\005 \001(\t\022\017\n\007subtype\030\006 \001"
  "(\t\022\014\n\004type\030\007 \001(\t\022\033\n\023verification_status\030"
  "\010 \001(\t\"\201\001\n\017AccountBalances\022\021\n\tavailable\030\001"
  " \001(\001\022\017\n\007current\030\002 \001(\001\022\r\n\005limit\030\003 \001(\001\022\031\n\021"
  "iso_currency_code\030\004 \001(\t\022 \n\030unofficial_cu"
  "rrency_code\030\005 \001(\t\"W\n\tACHNumber\022\017\n\007accoun"
  "t\030\001 \001(\t\022\022\n\naccount_id\030\002 \001(\t\022\017\n\007routing\030\003"
  " \001(\t\022\024\n\014wire_routing\030\004 \001(\t\"U\n\tEFTNumber\022"
  "\017\n\007account\030\001 \001(\t\022\022\n\naccount_id\030\002 \001(\t\022\023\n\013"
  "institution\030\003 \001(\t\022\016\n\006branch\030\004 \001(\t\";\n\nIBA"
  "NNumber\022\022\n\naccount_id\030\001 \001(\t\022\014\n\004iban\030\002 \001("
  "\t\022\013\n\003bic\030\003 \001(\t\"D\n\nBACSNumber\022\022\n\naccount_"
  "id\030\001 \001(\t\022\017\n\007account\030\002 \001(\t\022\021\n\tsort_code\030\003"
  " \001(\t\"0\n\031GetBalancesRequestOptions\022\023\n\013acc"
  "ount_ids\030\001 \003(\t\"\200\001\n\022GetBalancesRequest\022\021\n"
  "\tclient_id\030\001 \001(\t\022\016\n\006secret\030\002 \001(\t\022\024\n\014acce"
  "ss_token\030\003 \001(\t\0221\n\007options\030\004 \001(\0132 .plaid."
  "GetBalancesRequestOptions\"K\n\023GetBalances"
  "Response\022\022\n\nrequest_id\030\001 \001(\t\022 \n\010accounts"
  "\030\002 \003(\0132\016.plaid.Account\"0\n\031GetAccountsReq"
  "uestOptions\022\023\n\013account_ids\030\001 \003(\t\"\200\001\n\022Get"
  "AccountsRequest\022\021\n\tclient_id\030\001 \001(\t\022\016\n\006se"
  "cret\030\002 \001(\t\022\024\n\014access_token\030\003 \001(\t\0221\n\007opti"
  "ons\030\004 \001(\0132 .plaid.GetAccountsRequestOpti"
  "ons\"f\n\023GetAccountsResponse\022\022\n\nrequest_id"
  "\030\001 \001(\t\022 \n\010accounts\030\002 \003(\0132\016.plaid.Account"
  "\022\031\n\004item\030\003 \001(\0132\013.plaid.Item\")\n\022GetAccoun"
  "tsOptions\022\023\n\013account_ids\030\001 \003(\t\")\n\022GetBal"
  "ancesOptions\022\023\n\013account_ids\030\001 \003(\t\"\275\001\n\013As"
  "setReport\022\027\n\017asset_report_id\030\001 \001(\t\022\030\n\020cl"
  "ient_report_id\030\002 \001(\t\022\026\n\016date_generated\030\003"
  " \001(\t\022\026\n\016days_requested\030\004 \001(\003\022%\n\005items\030\005 "
  "\003(\0132\026.plaid.AssetReportItem\022$\n\004user\030\006 \001("
  "\0132\026.plaid.AssetReportUser\"\221\001\n\017AssetRepor"
  "tItem\022 \n\010accounts\030\001 \003(\0132\016.plaid.Account\022"
  "\031\n\021date_last_updated\030\002 \001(\t\022\026\n\016institutio"
  "n_id\030\003 \001(\t\022\030\n\020institution_name\030\004 \001(\t\022\017\n\007"
  "item_id\030\005 \001(\t\"\227\001\n\017AssetReportUser\022\026\n\016cli"
  "ent_user_id\030\001 \001(\t\022\r\n\005email\030\002 \001(\t\022\022\n\nfirs"
  "t_name\030\003 \001(\t\022\021\n\tlast_name\030\004 \001(\t\022\023\n\013middl"
  "e_name\030\005 \001(\t\022\024\n\014phone_number\030\006 \001(\t\022\013\n\003ss"
  "n\030\007 \001(\t\"V\n\025GetAssetReportRequest\022\021\n\tclie"
  "nt_id\030\001 \001(\t\022\016\n\006secret\030\002 \001(\t\022\032\n\022asset_rep"
  "ort_token\030\003 \001(\t\"b\n\026GetAssetReportRespons"
  "e\022\022\n\nrequest_id\030\001 \001(\t\022\"\n\006report\030\002 \001(\0132\022."
  "plaid.AssetReport\022\020\n\010warnings\030\003 \003(\t\"Y\n\030R"
  "emoveAssetReportRequest\022\021\n\tclient_id\030\001 \001"
  "(\t\022\016\n\006secret\030\002 \001(\t\022\032\n\022asset_report_token"
  "\030\003 \001(\t\"@\n\031RemoveAssetReportResponse\022\022\n\nr"
  "equest_id\030\001 \001(\t\022\017\n\007removed\030\002 \001(\010\"k\n\026Crea"
  "teAuditCopyRequest\022\021\n\tclient_id\030\001 \001(\t\022\016\n"
  "\006secret\030\002 \001(\t\022\032\n\022asset_report_token\030\003 \001("
  "\t\022\022\n\nauditor_id\030\004 \001(\t\"L\n\034CreateAuditCopy"
  "TokenResponse\022\022\n\nrequest_id\030\001 \001(\t\022\030\n\020aud"
  "it_copy_token\030\002 \001(\t\",\n\025GetAuthRequestOpt"
  "ions\022\023\n\013account_ids\030\001 \003(\t\"x\n\016GetAuthRequ"
  "est\022\021\n\tclient_id\030\001 \001(\t\022\016\n\006secret\030\002 \001(\t\022\024"
  "\n\014access_token\030\003 \001(\t\022-\n\007options\030\004 \001(\0132\034."
  "plaid.GetAuthRequestOptions\"\242\001\n\027AccountN"
  "umberCollection\022\035\n\003ach\030\001 \003(\0132\020.plaid.ACH"
  "Number\022\035\n\003eft\030\002 \003(\0132\020.plaid.EFTNumber\022(\n"
  "\rinternational\030\003 \003(\0132\021.plaid.IBANNumber\022"
  "\037\n\004bacs\030\004 \003(\0132\021.plaid.BACSNumber\"x\n\017GetA"
  "uthResponse\022\022\n\nrequest_id\030\001 \001(\t\022 \n\010accou"
  "nts\030\002 \003(\0132\016.plaid.Account\022/\n\007numbers\030\003 \001"
  "(\0132\036.plaid.AccountNumberCollection\"%\n\016Ge"
  "tAuthOptions\022\023\n\013account_ids\030\001 \003(\t\"A\n\010Cat"
  "egory\022\023\n\013category_id\030\001 \001(\t\022\r\n\005group\030\002 \001("
  "\t\022\021\n\thierarchy\030\003 \003(\t\"P\n\025GetCategoriesRes"
  "ponse\022\022\n\nrequest_id\030\001 \001(\t\022#\n\ncategories\030"
  "\002 \003(\0132\017.plaid.Category\"\210\001\n\005Error\022\022\n\nrequ"
  "est_id\030\001 \001(\t\022\022\n\nerror_type\030\002 \001(\t\022\022\n\nerro"
  "r_code\030\003 \001(\t\022\025\n\rerror_message\030\004 \001(\t\022\027\n\017d"
  "isplay_message\030\005 \001(\t\022\023\n\013status_code\030\006 \001("
  "\003\"\333\002\n\010Security\022\023\n\013security_id\030\001 \001(\t\022\r\n\005c"
  "usip\030\002 \001(\t\022\r\n\005sedol\030\003 \001(\t\022\014\n\004isin\030\004 \001(\t\022"
  "\037\n\027institution_security_id\030\005 \001(\t\022\026\n\016inst"
  "itution_id\030\006 \001(\t\022\031\n\021proxy_security_id\030\007 "
  "\001(\t\022\014\n\004name\030\010 \001(\t\022\025\n\rticker_symbol\030\t \001(\t"
  "\022\032\n\022is_cash_equivalent\030\n \001(\010\022\014\n\004type\030\013 \001"
  "(\t\022\023\n\013close_price\030\014 \001(\001\022\031\n\021close_price_a"
  "s_of\030\r \001(\t\022\031\n\021iso_currency_code\030\016 \001(\t\022 \n"
  "\030unofficial_currency_code\030\017 \001(\t\"\354\001\n\007Hold"
  "ing\022\022\n\naccount_id\030\001 \001(\t\022\023\n\013security_id\030\002"
  " \001(\t\022\031\n\021institution_value\030\003 \001(\001\022\031\n\021insti"
  "tution_price\030\004 \001(\001\022\020\n\010quantity\030\005 \001(\001\022\037\n\027"
  "institution_price_as_of\030\006 \001(\t\022\022\n\ncost_ba"
  "sis\030\007 \001(\001\022\031\n\021iso_currency_code\030\010 \001(\t\022 \n\030"
  "unofficial_currency_code\030\t \001(\t\"y\n\022GetHol"
  "dingsRequest\022\021\n\tclient_id\030\001 \001(\t\022\016\n\006secre"
  "t\030\002 \001(\t\022\024\n\014access_token\030\003 \001(\t\022*\n\007options"
  "\030\004 \001(\0132\031.plaid.GetHoldingsOptions\")\n\022Get"
  "HoldingsOptions\022\023\n\013account_ids\030\001 \003(\t\"\255\001\n"
  "\023GetHoldingsResponse\022\022\n\nrequest_id\030\001 \001(\t"
  "\022 \n\010accounts\030\002 \003(\0132\016.plaid.Account\022\031\n\004it"
  "em\030\003 \001(\0132\013.plaid.Item\022#\n\nsecurities\030\004 \003("
  "\0132\017.plaid.Security\022 \n\010holdings\030\005 \003(\0132\016.p"
  "laid.Holding\"\205\001\n\010Identity\022!\n\taddresses\030\001"
  " \003(\0132\016.plaid.Address\022\034\n\006emails\030\002 \003(\0132\014.p"
  "laid.Email\022\r\n\005names\030\003 \003(\t\022)\n\rphone_numbe"
  "rs\030\004 \003(\0132\022.plaid.PhoneNumber\"<\n\007Address\022"
  " \n\004data\030\001 \001(\0132\022.plaid.AddressData\022\017\n\007pri"
  "mary\030\002 \001(\010\"a\n\013AddressData\022\014\n\004city\030\001 \001(\t\022"
  "\016\n\006region\030\002 \001(\t\022\016\n\006street\030\003 \001(\t\022\023\n\013posta"
  "l_code\030\004 \001(\t\022\017\n\007country\030\005 \001(\t\"4\n\005Email\022\014"
  "\n\004data\030\001 \001(\t\022\017\n\007primary\030\002 \001(\010\022\014\n\004type\030\003 "
  "\001(\t\":\n\013PhoneNumber\022\017\n\007primary\030\001 \001(\010\022\014\n\004t"
  "ype\030\002 \001(\t\022\014\n\004data\030\003 \001(\t\"M\n\022GetIdentityRe"
  "quest\022\021\n\tclient_id\030\001 \001(\t\022\016\n\006secret\030\002 \001(\t"
  "\022\024\n\014access_token\030\003 \001(\t\"\341\001\n\021AccountWithOw"
  "ners\022\037\n\006owners\030\001 \003(\0132\017.plaid.Identity\022\022\n"
  "\naccount_id\030\002 \001(\t\022(\n\010balances\030\003 \001(\0132\026.pl"
  "aid.AccountBalances\022\014\n\004mask\030\004 \001(\t\022\014\n\004nam"
  "e\030\005 \001(\t\022\025\n\rofficial_name\030\006 \001(\t\022\017\n\007subtyp"
  "e\030\007 \001(\t\022\014\n\004type\030\010 \001(\t\022\033\n\023verification_st"
  "atus\030\t \001(\t\"p\n\023GetIdentityResponse\022\022\n\nreq"
  "uest_id\030\001 \001(\t\022*\n\010accounts\030\002 \003(\0132\030.plaid."
  "AccountWithOwners\022\031\n\004item\030\003 \001(\0132\013.plaid."
  "Item\"\225\002\n\006Income\022+\n\016income_streams\030\001 \003(\0132"
  "\023.plaid.IncomeStream\022\030\n\020last_year_income"
  "\030\002 \001(\003\022#\n\033last_year_income_before_tax\030\003 "
  "\001(\003\022\037\n\027projected_yearly_income\030\004 \001(\003\022*\n\""
  "projected_yearly_income_before_tax\030\005 \001(\003"
  "\0220\n(max_number_of_overlapping_income_str"
  "eams\030\006 \001(\003\022 \n\030number_of_income_streams\030\007"
  " \001(\003\"V\n\014IncomeStream\022\022\n\nconfidence\030\001 \001(\001"
  "\022\014\n\004days\030\002 \001(\003\022\026\n\016monthly_income\030\003 \001(\003\022\014"
  "\n\004name\030\004 \001(\t\"K\n\020GetIncomeRequest\022\021\n\tclie"
  "nt_id\030\001 \001(\t\022\016\n\006secret\030\002 \001(\t\022\024\n\014access_to"
  "ken\030\003 \001(\t\"F\n\021GetIncomeResponse\022\022\n\nreques"
  "t_id\030\001 \001(\t\022\035\n\006income\030\002 \001(\0132\r.plaid.Incom"
  "e\"\376\001\n\013Institution\022&\n\013credentials\030\001 \003(\0132\021"
  ".plaid.Credential\022\017\n\007has_mfa\030\002 \001(\010\022\026\n\016in"
  "stitution_id\030\003 \001(\t\022\013\n\003mfa\030\004 \003(\t\022\014\n\004name\030"
  "\005 \001(\t\022\020\n\010products\030\006 \003(\t\022\025\n\rcountry_codes"
  "\030\007 \003(\t\022(\n\006status\030\010 \001(\0132\030.plaid.Instituti"
  "onStatus\022\025\n\rprimary_color\030\t \001(\t\022\013\n\003url\030\n"
  " \001(\t\022\014\n\004logo\030\013 \001(\t\";\n\021InstitutionStatus\022"
  "&\n\013item_logins\030\001 \001(\0132\021.plaid.ItemLogins\""
  "n\n\nItemLogins\022\016\n\006status\030\001 \001(\t\022\032\n\022last_st"
  "atus_change\030\002 \001(\t\0224\n\tbreakdown\030\003 \001(\0132!.p"
  "laid.InstitutionStatusBreakdown\"]\n\032Insti"
  "tutionStatusBreakdown\022\017\n\007success\030\001 \001(\001\022\023"
  "\n\013error_plaid\030\002 \001(\001\022\031\n\021error_institution"
  "\030\003 \001(\001\"7\n\nCredential\022\r\n\005label\030\001 \001(\t\022\014\n\004n"
  "ame\030\002 \001(\t\022\014\n\004type\030\003 \001(\t\"\212\001\n\026GetInstituti"
  "onsRequest\022\021\n\tclient_id\030\001 \001(\t\022\016\n\006secret\030"
  "\002 \001(\t\022\r\n\005count\030\003 \001(\003\022\016\n\006offset\030\004 \001(\003\022.\n\007"
  "options\030\005 \001(\0132\035.plaid.GetInstitutionsOpt"
  "ions\"d\n\026GetInstitutionsOptions\022\020\n\010produc"
  "ts\030\001 \003(\t\022!\n\031include_optional_metadata\030\002 "
  "\001(\010\022\025\n\rcountry_codes\030\003 \003(\t\"f\n\027GetInstitu"
  "tionsResponse\022\022\n\nrequest_id\030\001 \001(\t\022(\n\014ins"
  "titutions\030\002 \003(\0132\022.plaid.Institution\022\r\n\005t"
  "otal\030\003 \001(\003\"z\n\031GetInstitutionByIDRequest\022"
  "\026\n\016institution_id\030\001 \001(\t\022\022\n\npublic_key\030\002 "
  "\001(\t\0221\n\007options\030\003 \001(\0132 .plaid.GetInstitut"
  "ionByIDOptions\"V\n\031GetInstitutionByIDOpti"
  "ons\022!\n\031include_optional_metadata\030\001 \001(\010\022\026"
  "\n\016include_status\030\002 \001(\010\"Y\n\032GetInstitution"
  "ByIDResponse\022\022\n\nrequest_id\030\001 \001(\t\022\'\n\013inst"
  "itution\030\002 \001(\0132\022.plaid.Institution\"\203\001\n\031Se"
  "archInstitutionsRequest\022\r\n\005query\030\001 \001(\t\022\020"
  "\n\010products\030\002 \003(\t\022\022\n\npublic_key\030\003 \001(\t\0221\n\007"
  "options\030\004 \001(\0132 .plaid.SearchInstitutions"
  "Options\"n\n\031SearchInstitutionsOptions\022!\n\031"
  "include_optional_metadata\030\001 \001(\010\022\025\n\rcount"
  "ry_codes\030\002 \003(\t\022\027\n\017routing_numbers\030\003 \003(\t\""
  "Z\n\032SearchInstitutionsResponse\022\022\n\nrequest"
  "_id\030\001 \001(\t\022(\n\014institutions\030\002 \003(\0132\022.plaid."
  "Institution\"\250\002\n\025InvestmentTransaction\022!\n"
  "\031investment_transaction_id\030\001 \001(\t\022\022\n\nacco"
  "unt_id\030\002 \001(\t\022\023\n\013security_id\030\003 \001(\t\022\035\n\025can"
  "cel_transaction_id\030\004 \001(\t\022\014\n\004date\030\005 \001(\t\022\014"
  "\n\004name\030\006 \001(\t\022\020\n\010quantity\030\007 \001(\001\022\016\n\006amount"
  "\030\010 \001(\001\022\r\n\005price\030\t \001(\001\022\014\n\004fees\030\n \001(\001\022\014\n\004t"
  "ype\030\013 \001(\t\022\031\n\021iso_currency_code\030\014 \001(\t\022 \n\030"
  "unofficial_currency_code\030\r \001(\t\"\377\001\n!GetIn"
  "vestmentTransactionsResponse\022\022\n\nrequest_"
  "id\030\001 \001(\t\022\031\n\004item\030\002 \001(\0132\013.plaid.Item\022 \n\010a"
  "ccounts\030\003 \003(\0132\016.plaid.Account\022=\n\027investm"
  "ent_transactions\030\004 \003(\0132\034.plaid.Investmen"
  "tTransaction\022#\n\nsecurities\030\005 \003(\0132\017.plaid"
  ".Security\022%\n\035total_investment_transactio"
  "ns\030\006 \001(\003\"|\n GetInvestmentTransactionsOpt"
  "ions\022\022\n\nstart_date\030\001 \001(\t\022\020\n\010end_date\030\002 \001"
  "(\t\022\023\n\013account_ids\030\003 \003(\t\022\r\n\005count\030\004 \001(\003\022\016"
  "\n\006offset\030\005 \001(\003\"\302\001\n GetInvestmentTransact"
  "ionsRequest\022\021\n\tclient_id\030\001 \001(\t\022\016\n\006secret"
  "\030\002 \001(\t\022\024\n\014access_token\030\003 \001(\t\022\022\n\nstart_da"
  "te\030\004 \001(\t\022\020\n\010end_date\030\005 \001(\t\022\?\n\007options\030\006 "
  "\001(\0132..plaid.GetInvestmentTransactionsReq"
  "uestOptions\"]\n\'GetInvestmentTransactions"
  "RequestOptions\022\023\n\013account_ids\030\001 \003(\t\022\r\n\005c"
  "ount\030\002 \001(\003\022\016\n\006offset\030\003 \001(\003\"\263\001\n\004Item\022\032\n\022a"
  "vailable_products\030\001 \003(\t\022\027\n\017billed_produc"
  "ts\030\002 \003(\t\022\033\n\005error\030\003 \001(\0132\014.plaid.Error\022\026\n"
  "\016institution_id\030\004 \001(\t\022\017\n\007item_id\030\005 \001(\t\022\017"
  "\n\007webhook\030\006 \001(\t\022\037\n\027consent_expiration_ti"
  "me\030\007 \001(\t\"I\n\016GetItemRequest\022\021\n\tclient_id\030"
  "\001 \001(\t\022\016\n\006secret\030\002 \001(\t\022\024\n\014access_token\030\003 "
  "\001(\t\"@\n\017GetItemResponse\022\022\n\nrequest_id\030\001 \001"
  "(\t\022\031\n\004item\030\002 \001(\0132\013.plaid.Item\"L\n\021RemoveI"
  "temRequest\022\021\n\tclient_id\030\001 \001(\t\022\016\n\006secret\030"
  "\002 \001(\t\022\024\n\014access_token\030\003 \001(\t\"9\n\022RemoveIte"
  "mResponse\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007removed"
  "\030\002 \001(\010\"d\n\030UpdateItemWebhookRequest\022\021\n\tcl"
  "ient_id\030\001 \001(\t\022\016\n\006secret\030\002 \001(\t\022\024\n\014access_"
  "token\030\003 \001(\t\022\017\n\007webhook\030\004 \001(\t\"J\n\031UpdateIt"
  "emWebhookResponse\022\022\n\nrequest_id\030\001 \001(\t\022\031\n"
  "\004item\030\002 \001(\0132\013.plaid.Item\"W\n\034InvalidateAc"
  "cessTokenRequest\022\021\n\tclient_id\030\001 \001(\t\022\016\n\006s"
  "ecret\030\002 \001(\t\022\024\n\014access_token\030\003 \001(\t\"M\n\035Inv"
  "alidateAccessTokenResponse\022\022\n\nrequest_id"
  "\030\001 \001(\t\022\030\n\020new_access_token\030\002 \001(\t\"]\n\037Upda"
  "teAccessTokenVersionRequest\022\021\n\tclient_id"
  "\030\001 \001(\t\022\016\n\006secret\030\002 \001(\t\022\027\n\017access_token_v"
  "1\030\003 \001(\t\"]\n UpdateAccessTokenVersionRespo"
  "nse\022\022\n\nrequest_id\030\001 \001(\t\022\024\n\014access_token\030"
  "\002 \001(\t\022\017\n\007item_id\030\003 \001(\t\"S\n\030CreatePublicTo"
  "kenRequest\022\021\n\tclient_id\030\001 \001(\t\022\016\n\006secret\030"
  "\002 \001(\t\022\024\n\014access_token\030\003 \001(\t\"E\n\031CreatePub"
  "licTokenResponse\022\022\n\nrequest_id\030\001 \001(\t\022\024\n\014"
  "public_token\030\002 \001(\t\"U\n\032ExchangePublicToke"
  "nRequest\022\021\n\tclient_id\030\001 \001(\t\022\016\n\006secret\030\002 "
  "\001(\t\022\024\n\014public_token\030\003 \001(\t\"X\n\033ExchangePub"
  "licTokenResponse\022\022\n\nrequest_id\030\001 \001(\t\022\024\n\014"
  "access_token\030\002 \001(\t\022\017\n\007item_id\030\003 \001(\t\"\265\006\n\024"
  "StudentLoanLiability\022\022\n\naccount_id\030\001 \001(\t"
  "\022\026\n\016account_number\030\002 \001(\t\022\032\n\022disbursement"
  "_dates\030\003 \003(\t\022\034\n\024expected_payoff_date\030\004 \001"
  "(\t\022\021\n\tguarantor\030\005 \001(\t\022 \n\030interest_rate_p"
  "ercentage\030\006 \001(\001\022\022\n\nis_overdue\030\007 \001(\010\022\033\n\023l"
  "ast_payment_amount\030\010 \001(\001\022\031\n\021last_payment"
  "_date\030\t \001(\t\022\035\n\025last_satement_balance\030\n \001"
  "(\001\022!\n\031last_statement_issue_date\030\013 \001(\t\022\021\n"
  "\tloan_name\030\014 \001(\t\022-\n\013loan_status\030\r \001(\0132\030."
  "plaid.StudentLoanStatus\022\036\n\026minimum_payme"
  "nt_amount\030\016 \001(\001\022\035\n\025next_payment_due_date"
  "\030\017 \001(\t\022\030\n\020origination_date\030\020 \001(\t\022$\n\034orig"
  "ination_principal_amount\030\021 \001(\001\022#\n\033outsta"
  "nding_interest_amount\030\022 \001(\001\022 \n\030payment_r"
  "eference_number\030\023 \001(\t\022&\n\013pslf_status\030\024 \001"
  "(\0132\021.plaid.PSLFStatus\0227\n\016repayment_plan\030"
  "\025 \001(\0132\037.plaid.StudentLoanRepaymentPlan\022\027"
  "\n\017sequence_number\030\026 \001(\t\022;\n\020servicer_addr"
  "ess\030\027 \001(\0132!.plaid.StudentLoanServicerAdd"
  "ress\022\031\n\021ytd_interest_paid\030\030 \001(\001\022\032\n\022ytd_p"
  "rincipal_paid\030\031 \001(\001\"c\n\nPSLFStatus\022\"\n\032est"
  "imated_eligibility_date\030\001 \001(\t\022\025\n\rpayment"
  "s_made\030\002 \001(\003\022\032\n\022payments_remaining\030\003 \001(\003"
  "\"p\n\032StudentLoanServicerAddress\022\014\n\004city\030\001"
  " \001(\t\022\017\n\007country\030\002 \001(\t\022\023\n\013postal_code\030\003 \001"
  "(\t\022\016\n\006region\030\004 \001(\t\022\016\n\006street\030\005 \001(\t\"3\n\021St"
  "udentLoanStatus\022\014\n\004type\030\001 \001(\t\022\020\n\010end_dat"
  "e\030\002 \001(\t\"=\n\030StudentLoanRepaymentPlan\022\014\n\004t"
  "ype\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\"3\n\034GetLia"
  "bilitiesRequestOptions\022\023\n\013account_ids\030\001 "
  "\003(\t\"\206\001\n\025GetLiabilitiesRequest\022\021\n\tclient_"
  "id\030\001 \001(\t\022\016\n\006secret\030\002 \001(\t\022\024\n\014access_token"
  "\030\003 \001(\t\0224\n\007options\030\004 \001(\0132#.plaid.GetLiabi"
  "litiesRequestOptions\"\222\001\n\026GetLiabilitiesR"
  "esponse\022\022\n\nrequest_id\030\001 \001(\t\022 \n\010accounts\030"
  "\002 \003(\0132\016.plaid.Account\022\031\n\004item\030\003 \001(\0132\013.pl"
  "aid.Item\022\'\n\013liabilities\030\004 \001(\0132\022.plaid.Li"
  "abilities\";\n\013Liabilities\022,\n\007student\030\001 \003("
  "\0132\033.plaid.StudentLoanLiability\",\n\025GetLia"
  "bilitiesOptions\022\023\n\013account_ids\030\001 \003(\t\"]\n\027"
  "PaymentRecipientAddress\022\016\n\006street\030\001 \003(\t\022"
  "\014\n\004city\030\002 \001(\t\022\023\n\013postal_code\030\003 \001(\t\022\017\n\007co"
  "untry\030\004 \001(\t\"o\n\035CreatePaymentRecipientReq"
  "uest\022\021\n\tclient_id\030\001 \001(\t\022\016\n\006secret\030\002 \001(\t\022"
  "\014\n\004name\030\003 \001(\t\022\014\n\004iban\030\004 \001(\t\022\017\n\007address\030\005"
  " \001(\t\"J\n\036CreatePaymentRecipientResponse\022\022"
  "\n\nrequest_id\030\001 \001(\t\022\024\n\014recipient_id\030\002 \001(\t"
  "\"U\n\032GetPaymentRecipientRequest\022\021\n\tclient"
  "_id\030\001 \001(\t\022\016\n\006secret\030\002 \001(\t\022\024\n\014recipient_i"
  "d\030\003 \001(\t\"t\n\033GetPaymentRecipientResponse\022\022"
  "\n\nrequest_id\030\001 \001(\t\022\024\n\014recipient_id\030\002 \001(\t"
  "\022\014\n\004name\030\003 \001(\t\022\014\n\004iban\030\004 \001(\t\022\017\n\007address\030"
  "\005 \001(\t\"A\n\034ListPaymentRecipientsRequest\022\021\n"
  "\tclient_id\030\001 \001(\t\022\016\n\006secret\030\002 \001(\t\"N\n\tReci"
  "pient\022\024\n\014recipient_id\030\001 \001(\t\022\014\n\004name\030\002 \001("
  "\t\022\014\n\004iban\030\003 \001(\t\022\017\n\007address\030\004 \001(\t\"Y\n\035List"
  "PaymentRecipientsResponse\022\022\n\nrequest_id\030"
  "\001 \001(\t\022$\n\nrecipients\030\002 \003(\0132\020.plaid.Recipi"
  "ent\"0\n\rPaymentAmount\022\020\n\010currency\030\001 \001(\t\022\r"
  "\n\005value\030\002 \001(\001\"\210\001\n\024CreatePaymentRequest\022\021"
  "\n\tclient_id\030\001 \001(\t\022\016\n\006secret\030\002 \001(\t\022\024\n\014rec"
  "ipient_id\030\003 \001(\t\022\021\n\treference\030\004 \001(\t\022$\n\006am"
  "ount\030\005 \001(\0132\024.plaid.PaymentAmount\"O\n\025Crea"
  "tePaymentResponse\022\022\n\nrequest_id\030\001 \001(\t\022\022\n"
  "\npayment_id\030\002 \001(\t\022\016\n\006status\030\003 \001(\t\"R\n\031Cre"
  "atePaymentTokenRequest\022\021\n\tclient_id\030\001 \001("
  "\t\022\016\n\006secret\030\002 \001(\t\022\022\n\npayment_id\030\003 \001(\t\"n\n"
  "\032CreatePaymentTokenResponse\022\022\n\nrequest_i"
  "d\030\001 \001(\t\022\025\n\rpayment_token\030\002 \001(\t\022%\n\035paymen"
  "t_token_expiration_time\030\003 \001(\t\"J\n\021GetPaym"
  "entRequest\022\021\n\tclient_id\030\001 \001(\t\022\016\n\006secret\030"
  "\002 \001(\t\022\022\n\npayment_id\030\003 \001(\t\"\365\001\n\022GetPayment"
  "Response\022\022\n\nrequest_id\030\001 \001(\t\022\022\n\npayment_"
  "id\030\002 \001(\t\022\025\n\rpayment_token\030\003 \001(\t\022\021\n\trefer"
  "ence\030\004 \001(\t\022$\n\006amount\030\005 \001(\0132\024.plaid.Payme"
  "ntAmount\022\016\n\006status\030\006 \001(\t\022\032\n\022last_status_"
  "update\030\007 \001(\t\022%\n\035payment_token_expiration"
  "_time\030\010 \001(\t\022\024\n\014recipient_id\030\t \001(\t\"W\n\023Lis"
  "tPaymentsRequest\022\021\n\tclient_id\030\001 \001(\t\022\016\n\006s"
  "ecret\030\002 \001(\t\022\r\n\005count\030\003 \001(\003\022\016\n\006cursor\030\004 \001"
  "(\t\"\326\001\n\007Payment\022\022\n\npayment_id\030\001 \001(\t\022\025\n\rpa"
  "yment_token\030\002 \001(\t\022\021\n\treference\030\003 \001(\t\022$\n\006"
  "amount\030\004 \001(\0132\024.plaid.PaymentAmount\022\016\n\006st"
  "atus\030\005 \001(\t\022\032\n\022last_status_update\030\006 \001(\t\022%"
  "\n\035payment_token_expiration_time\030\007 \001(\t\022\024\n"
  "\014recipient_id\030\010 \001(\t\"a\n\024ListPaymentsRespo"
  "nse\022\022\n\nrequest_id\030\001 \001(\t\022 \n\010payments\030\002 \003("
  "\0132\016.plaid.Payment\022\023\n\013next_cursor\030\003 \001(\t\"4"
  "\n\023ListPaymentsOptions\022\r\n\005count\030\001 \001(\003\022\016\n\006"
  "cursor\030\002 \001(\t\"j\n\033CreateProcessorTokenRequ"
  "est\022\021\n\tclient_id\030\001 \001(\t\022\016\n\006secret\030\002 \001(\t\022\024"
  "\n\014access_token\030\003 \001(\t\022\022\n\naccount_id\030\004 \001(\t"
  "\"K\n\034CreateProcessorTokenResponse\022\022\n\nrequ"
  "est_id\030\001 \001(\t\022\027\n\017processor_token\030\002 \001(\t\"g\n"
  "\030CreateStripeTokenRequest\022\021\n\tclient_id\030\001"
  " \001(\t\022\016\n\006secret\030\002 \001(\t\022\024\n\014access_token\030\003 \001"
  "(\t\022\022\n\naccount_id\030\004 \001(\t\"R\n\031CreateStripeTo"
  "kenResponse\022\022\n\nrequest_id\030\001 \001(\t\022!\n\031strip"
  "e_bank_account_token\030\002 \001(\t\"f\n\037CreateSand"
  "boxPublicTokenRequest\022\026\n\016institution_id\030"
  "\001 \001(\t\022\027\n\017inital_products\030\002 \003(\t\022\022\n\npublic"
  "_key\030\003 \001(\t\"L\n CreateSandboxPublicTokenRe"
  "sponse\022\022\n\nrequest_id\030\001 \001(\t\022\024\n\014public_tok"
  "en\030\002 \001(\t\"R\n\027ResetSandboxItemRequest\022\021\n\tc"
  "lient_id\030\001 \001(\t\022\016\n\006secret\030\002 \001(\t\022\024\n\014access"
  "_token\030\003 \001(\t\"C\n\030ResetSandboxItemResponse"
  "\022\022\n\nrequest_id\030\001 \001(\t\022\023\n\013reset_login\030\002 \001("
  "\010\"\370\002\n\013Transaction\022\022\n\naccount_id\030\001 \001(\t\022\016\n"
  "\006amount\030\002 \001(\001\022\031\n\021iso_currency_code\030\003 \001(\t"
  "\022 \n\030unofficial_currency_code\030\004 \001(\t\022\020\n\010ca"
  "tegory\030\005 \003(\t\022\023\n\013category_id\030\006 \001(\t\022\014\n\004dat"
  "e\030\007 \001(\t\022!\n\010location\030\010 \001(\0132\017.plaid.Locati"
  "on\022\014\n\004name\030\t \001(\t\022(\n\014payment_meta\030\n \001(\0132\022"
  ".plaid.PaymentMeta\022\017\n\007pending\030\013 \001(\010\022\036\n\026p"
  "ending_transaction_id\030\014 \001(\t\022\025\n\raccount_o"
  "wner\030\r \001(\t\022\026\n\016transaction_id\030\016 \001(\t\022\030\n\020tr"
  "ansaction_type\030\017 \001(\t\"\220\001\n\010Location\022\020\n\010add"
  "reess\030\001 \001(\t\022\014\n\004city\030\002 \001(\t\022\013\n\003lat\030\003 \001(\001\022\013"
  "\n\003lon\030\004 \001(\001\022\016\n\006region\030\005 \001(\t\022\024\n\014store_num"
  "ber\030\006 \001(\t\022\023\n\013postal_code\030\007 \001(\t\022\017\n\007countr"
  "y\030\010 \001(\t\"\255\001\n\013PaymentMeta\022\023\n\013by_order_of\030\001"
  " \001(\t\022\r\n\005payee\030\002 \001(\t\022\r\n\005payer\030\003 \001(\t\022\026\n\016pa"
  "yment_method\030\004 \001(\t\022\031\n\021payment_processor\030"
  "\005 \001(\t\022\016\n\006ppd_id\030\006 \001(\t\022\016\n\006reason\030\007 \001(\t\022\030\n"
  "\020reference_number\030\010 \001(\t\"S\n\035GetTransactio"
  "nsRequestOptions\022\023\n\013account_ids\030\001 \003(\t\022\r\n"
  "\005count\030\002 \001(\003\022\016\n\006offset\030\003 \001(\003\"\256\001\n\026GetTran"
  "sactionsRequest\022\021\n\tclient_id\030\001 \001(\t\022\016\n\006se"
  "cret\030\002 \001(\t\022\024\n\014access_token\030\003 \001(\t\022\022\n\nstar"
  "t_date\030\004 \001(\t\022\020\n\010end_date\030\005 \001(\t\0225\n\007option"
  "s\030\006 \001(\0132$.plaid.GetTransactionsRequestOp"
  "tions\"\260\001\n\027GetTransactionsResponse\022\022\n\nreq"
  "uest_id\030\001 \001(\t\022 \n\010accounts\030\002 \003(\0132\016.plaid."
  "Account\022\031\n\004item\030\003 \001(\0132\013.plaid.Item\022(\n\014tr"
  "ansactions\030\004 \003(\0132\022.plaid.Transaction\022\032\n\022"
  "total_transactions\030\005 \001(\003\"r\n\026GetTransacti"
  "onsOptions\022\022\n\nstart_date\030\001 \001(\t\022\020\n\010end_da"
  "te\030\002 \001(\t\022\023\n\013account_ids\030\003 \003(\t\022\r\n\005count\030\004"
  " \001(\003\022\016\n\006offset\030\005 \001(\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_plaid_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_plaid_2eproto_sccs[126] = {
  &scc_info_ACHNumber_plaid_2eproto.base,
  &scc_info_Account_plaid_2eproto.base,
  &scc_info_AccountBalances_plaid_2eproto.base,
  &scc_info_AccountNumberCollection_plaid_2eproto.base,
  &scc_info_AccountWithOwners_plaid_2eproto.base,
  &scc_info_Address_plaid_2eproto.base,
  &scc_info_AddressData_plaid_2eproto.base,
  &scc_info_AssetReport_plaid_2eproto.base,
  &scc_info_AssetReportItem_plaid_2eproto.base,
  &scc_info_AssetReportUser_plaid_2eproto.base,
  &scc_info_BACSNumber_plaid_2eproto.base,
  &scc_info_Category_plaid_2eproto.base,
  &scc_info_CreateAuditCopyRequest_plaid_2eproto.base,
  &scc_info_CreateAuditCopyTokenResponse_plaid_2eproto.base,
  &scc_info_CreatePaymentRecipientRequest_plaid_2eproto.base,
  &scc_info_CreatePaymentRecipientResponse_plaid_2eproto.base,
  &scc_info_CreatePaymentRequest_plaid_2eproto.base,
  &scc_info_CreatePaymentResponse_plaid_2eproto.base,
  &scc_info_CreatePaymentTokenRequest_plaid_2eproto.base,
  &scc_info_CreatePaymentTokenResponse_plaid_2eproto.base,
  &scc_info_CreateProcessorTokenRequest_plaid_2eproto.base,
  &scc_info_CreateProcessorTokenResponse_plaid_2eproto.base,
  &scc_info_CreatePublicTokenRequest_plaid_2eproto.base,
  &scc_info_CreatePublicTokenResponse_plaid_2eproto.base,
  &scc_info_CreateSandboxPublicTokenRequest_plaid_2eproto.base,
  &scc_info_CreateSandboxPublicTokenResponse_plaid_2eproto.base,
  &scc_info_CreateStripeTokenRequest_plaid_2eproto.base,
  &scc_info_CreateStripeTokenResponse_plaid_2eproto.base,
  &scc_info_Credential_plaid_2eproto.base,
  &scc_info_EFTNumber_plaid_2eproto.base,
  &scc_info_Email_plaid_2eproto.base,
  &scc_info_Error_plaid_2eproto.base,
  &scc_info_ExchangePublicTokenRequest_plaid_2eproto.base,
  &scc_info_ExchangePublicTokenResponse_plaid_2eproto.base,
  &scc_info_GetAccountsOptions_plaid_2eproto.base,
  &scc_info_GetAccountsRequest_plaid_2eproto.base,
  &scc_info_GetAccountsRequestOptions_plaid_2eproto.base,
  &scc_info_GetAccountsResponse_plaid_2eproto.base,
  &scc_info_GetAssetReportRequest_plaid_2eproto.base,
  &scc_info_GetAssetReportResponse_plaid_2eproto.base,
  &scc_info_GetAuthOptions_plaid_2eproto.base,
  &scc_info_GetAuthRequest_plaid_2eproto.base,
  &scc_info_GetAuthRequestOptions_plaid_2eproto.base,
  &scc_info_GetAuthResponse_plaid_2eproto.base,
  &scc_info_GetBalancesOptions_plaid_2eproto.base,
  &scc_info_GetBalancesRequest_plaid_2eproto.base,
  &scc_info_GetBalancesRequestOptions_plaid_2eproto.base,
  &scc_info_GetBalancesResponse_plaid_2eproto.base,
  &scc_info_GetCategoriesResponse_plaid_2eproto.base,
  &scc_info_GetHoldingsOptions_plaid_2eproto.base,
  &scc_info_GetHoldingsRequest_plaid_2eproto.base,
  &scc_info_GetHoldingsResponse_plaid_2eproto.base,
  &scc_info_GetIdentityRequest_plaid_2eproto.base,
  &scc_info_GetIdentityResponse_plaid_2eproto.base,
  &scc_info_GetIncomeRequest_plaid_2eproto.base,
  &scc_info_GetIncomeResponse_plaid_2eproto.base,
  &scc_info_GetInstitutionByIDOptions_plaid_2eproto.base,
  &scc_info_GetInstitutionByIDRequest_plaid_2eproto.base,
  &scc_info_GetInstitutionByIDResponse_plaid_2eproto.base,
  &scc_info_GetInstitutionsOptions_plaid_2eproto.base,
  &scc_info_GetInstitutionsRequest_plaid_2eproto.base,
  &scc_info_GetInstitutionsResponse_plaid_2eproto.base,
  &scc_info_GetInvestmentTransactionsOptions_plaid_2eproto.base,
  &scc_info_GetInvestmentTransactionsRequest_plaid_2eproto.base,
  &scc_info_GetInvestmentTransactionsRequestOptions_plaid_2eproto.base,
  &scc_info_GetInvestmentTransactionsResponse_plaid_2eproto.base,
  &scc_info_GetItemRequest_plaid_2eproto.base,
  &scc_info_GetItemResponse_plaid_2eproto.base,
  &scc_info_GetLiabilitiesOptions_plaid_2eproto.base,
  &scc_info_GetLiabilitiesRequest_plaid_2eproto.base,
  &scc_info_GetLiabilitiesRequestOptions_plaid_2eproto.base,
  &scc_info_GetLiabilitiesResponse_plaid_2eproto.base,
  &scc_info_GetPaymentRecipientRequest_plaid_2eproto.base,
  &scc_info_GetPaymentRecipientResponse_plaid_2eproto.base,
  &scc_info_GetPaymentRequest_plaid_2eproto.base,
  &scc_info_GetPaymentResponse_plaid_2eproto.base,
  &scc_info_GetTransactionsOptions_plaid_2eproto.base,
  &scc_info_GetTransactionsRequest_plaid_2eproto.base,
  &scc_info_GetTransactionsRequestOptions_plaid_2eproto.base,
  &scc_info_GetTransactionsResponse_plaid_2eproto.base,
  &scc_info_Holding_plaid_2eproto.base,
  &scc_info_IBANNumber_plaid_2eproto.base,
  &scc_info_Identity_plaid_2eproto.base,
  &scc_info_Income_plaid_2eproto.base,
  &scc_info_IncomeStream_plaid_2eproto.base,
  &scc_info_Institution_plaid_2eproto.base,
  &scc_info_InstitutionStatus_plaid_2eproto.base,
  &scc_info_InstitutionStatusBreakdown_plaid_2eproto.base,
  &scc_info_InvalidateAccessTokenRequest_plaid_2eproto.base,
  &scc_info_InvalidateAccessTokenResponse_plaid_2eproto.base,
  &scc_info_InvestmentTransaction_plaid_2eproto.base,
  &scc_info_Item_plaid_2eproto.base,
  &scc_info_ItemLogins_plaid_2eproto.base,
  &scc_info_Liabilities_plaid_2eproto.base,
  &scc_info_ListPaymentRecipientsRequest_plaid_2eproto.base,
  &scc_info_ListPaymentRecipientsResponse_plaid_2eproto.base,
  &scc_info_ListPaymentsOptions_plaid_2eproto.base,
  &scc_info_ListPaymentsRequest_plaid_2eproto.base,
  &scc_info_ListPaymentsResponse_plaid_2eproto.base,
  &scc_info_Location_plaid_2eproto.base,
  &scc_info_PSLFStatus_plaid_2eproto.base,
  &scc_info_Payment_plaid_2eproto.base,
  &scc_info_PaymentAmount_plaid_2eproto.base,
  &scc_info_PaymentMeta_plaid_2eproto.base,
  &scc_info_PaymentRecipientAddress_plaid_2eproto.base,
  &scc_info_PhoneNumber_plaid_2eproto.base,
  &scc_info_Recipient_plaid_2eproto.base,
  &scc_info_RemoveAssetReportRequest_plaid_2eproto.base,
  &scc_info_RemoveAssetReportResponse_plaid_2eproto.base,
  &scc_info_RemoveItemRequest_plaid_2eproto.base,
  &scc_info_RemoveItemResponse_plaid_2eproto.base,
  &scc_info_ResetSandboxItemRequest_plaid_2eproto.base,
  &scc_info_ResetSandboxItemResponse_plaid_2eproto.base,
  &scc_info_SearchInstitutionsOptions_plaid_2eproto.base,
  &scc_info_SearchInstitutionsRequest_plaid_2eproto.base,
  &scc_info_SearchInstitutionsResponse_plaid_2eproto.base,
  &scc_info_Security_plaid_2eproto.base,
  &scc_info_StudentLoanLiability_plaid_2eproto.base,
  &scc_info_StudentLoanRepaymentPlan_plaid_2eproto.base,
  &scc_info_StudentLoanServicerAddress_plaid_2eproto.base,
  &scc_info_StudentLoanStatus_plaid_2eproto.base,
  &scc_info_Transaction_plaid_2eproto.base,
  &scc_info_UpdateAccessTokenVersionRequest_plaid_2eproto.base,
  &scc_info_UpdateAccessTokenVersionResponse_plaid_2eproto.base,
  &scc_info_UpdateItemWebhookRequest_plaid_2eproto.base,
  &scc_info_UpdateItemWebhookResponse_plaid_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_plaid_2eproto_once;
static bool descriptor_table_plaid_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_plaid_2eproto = {
  &descriptor_table_plaid_2eproto_initialized, descriptor_table_protodef_plaid_2eproto, "plaid.proto", 14788,
  &descriptor_table_plaid_2eproto_once, descriptor_table_plaid_2eproto_sccs, descriptor_table_plaid_2eproto_deps, 126, 0,
  schemas, file_default_instances, TableStruct_plaid_2eproto::offsets,
  file_level_metadata_plaid_2eproto, 126, file_level_enum_descriptors_plaid_2eproto, file_level_service_descriptors_plaid_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_plaid_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_plaid_2eproto), true);
namespace plaid {

// ===================================================================

void Account::InitAsDefaultInstance() {
  ::plaid::_Account_default_instance_._instance.get_mutable()->balances_ = const_cast< ::plaid::AccountBalances*>(
      ::plaid::AccountBalances::internal_default_instance());
}
class Account::_Internal {
 public:
  static const ::plaid::AccountBalances& balances(const Account* msg);
};

const ::plaid::AccountBalances&
Account::_Internal::balances(const Account* msg) {
  return *msg->balances_;
}
Account::Account()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.Account)
}
Account::Account(const Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mask().empty()) {
    mask_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  official_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_official_name().empty()) {
    official_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.official_name_);
  }
  subtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subtype().empty()) {
    subtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subtype_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  verification_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_verification_status().empty()) {
    verification_status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.verification_status_);
  }
  if (from._internal_has_balances()) {
    balances_ = new ::plaid::AccountBalances(*from.balances_);
  } else {
    balances_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.Account)
}

void Account::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Account_plaid_2eproto.base);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  official_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verification_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balances_ = nullptr;
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:plaid.Account)
  SharedDtor();
}

void Account::SharedDtor() {
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  official_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verification_status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete balances_;
}

void Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Account& Account::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Account_plaid_2eproto.base);
  return *internal_default_instance();
}


void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mask_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  official_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verification_status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && balances_ != nullptr) {
    delete balances_;
  }
  balances_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Account.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.AccountBalances balances = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_balances(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Account.mask"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Account.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string official_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_official_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Account.official_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subtype = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_subtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Account.subtype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Account.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string verification_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_verification_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Account.verification_status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Account::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Account.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // .plaid.AccountBalances balances = 2;
  if (this->has_balances()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::balances(this), target, stream);
  }

  // string mask = 3;
  if (this->mask().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mask().data(), static_cast<int>(this->_internal_mask().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Account.mask");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mask(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Account.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // string official_name = 5;
  if (this->official_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_official_name().data(), static_cast<int>(this->_internal_official_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Account.official_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_official_name(), target);
  }

  // string subtype = 6;
  if (this->subtype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subtype().data(), static_cast<int>(this->_internal_subtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Account.subtype");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_subtype(), target);
  }

  // string type = 7;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Account.type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_type(), target);
  }

  // string verification_status = 8;
  if (this->verification_status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verification_status().data(), static_cast<int>(this->_internal_verification_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Account.verification_status");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_verification_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.Account)
  return target;
}

size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.Account)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string mask = 3;
  if (this->mask().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mask());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string official_name = 5;
  if (this->official_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_official_name());
  }

  // string subtype = 6;
  if (this->subtype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subtype());
  }

  // string type = 7;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string verification_status = 8;
  if (this->verification_status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verification_status());
  }

  // .plaid.AccountBalances balances = 2;
  if (this->has_balances()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *balances_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Account::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.Account)
  GOOGLE_DCHECK_NE(&from, this);
  const Account* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Account>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.Account)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.Account)
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.Account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.mask().size() > 0) {

    mask_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.official_name().size() > 0) {

    official_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.official_name_);
  }
  if (from.subtype().size() > 0) {

    subtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subtype_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.verification_status().size() > 0) {

    verification_status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.verification_status_);
  }
  if (from.has_balances()) {
    _internal_mutable_balances()->::plaid::AccountBalances::MergeFrom(from._internal_balances());
  }
}

void Account::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  return true;
}

void Account::InternalSwap(Account* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mask_.Swap(&other->mask_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  official_name_.Swap(&other->official_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subtype_.Swap(&other->subtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  verification_status_.Swap(&other->verification_status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(balances_, other->balances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Account::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountBalances::InitAsDefaultInstance() {
}
class AccountBalances::_Internal {
 public:
};

AccountBalances::AccountBalances()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.AccountBalances)
}
AccountBalances::AccountBalances(const AccountBalances& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  iso_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iso_currency_code().empty()) {
    iso_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iso_currency_code_);
  }
  unofficial_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unofficial_currency_code().empty()) {
    unofficial_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unofficial_currency_code_);
  }
  ::memcpy(&available_, &from.available_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&available_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:plaid.AccountBalances)
}

void AccountBalances::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountBalances_plaid_2eproto.base);
  iso_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unofficial_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&available_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&available_)) + sizeof(limit_));
}

AccountBalances::~AccountBalances() {
  // @@protoc_insertion_point(destructor:plaid.AccountBalances)
  SharedDtor();
}

void AccountBalances::SharedDtor() {
  iso_currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unofficial_currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountBalances::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountBalances& AccountBalances::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountBalances_plaid_2eproto.base);
  return *internal_default_instance();
}


void AccountBalances::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.AccountBalances)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iso_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unofficial_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&available_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&available_)) + sizeof(limit_));
  _internal_metadata_.Clear();
}

const char* AccountBalances::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double available = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          available_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double current = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string iso_currency_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_iso_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AccountBalances.iso_currency_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unofficial_currency_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_unofficial_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AccountBalances.unofficial_currency_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountBalances::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.AccountBalances)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double available = 1;
  if (!(this->available() <= 0 && this->available() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_available(), target);
  }

  // double current = 2;
  if (!(this->current() <= 0 && this->current() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_current(), target);
  }

  // double limit = 3;
  if (!(this->limit() <= 0 && this->limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_limit(), target);
  }

  // string iso_currency_code = 4;
  if (this->iso_currency_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iso_currency_code().data(), static_cast<int>(this->_internal_iso_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AccountBalances.iso_currency_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_iso_currency_code(), target);
  }

  // string unofficial_currency_code = 5;
  if (this->unofficial_currency_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unofficial_currency_code().data(), static_cast<int>(this->_internal_unofficial_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AccountBalances.unofficial_currency_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_unofficial_currency_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.AccountBalances)
  return target;
}

size_t AccountBalances::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.AccountBalances)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string iso_currency_code = 4;
  if (this->iso_currency_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iso_currency_code());
  }

  // string unofficial_currency_code = 5;
  if (this->unofficial_currency_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unofficial_currency_code());
  }

  // double available = 1;
  if (!(this->available() <= 0 && this->available() >= 0)) {
    total_size += 1 + 8;
  }

  // double current = 2;
  if (!(this->current() <= 0 && this->current() >= 0)) {
    total_size += 1 + 8;
  }

  // double limit = 3;
  if (!(this->limit() <= 0 && this->limit() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountBalances::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.AccountBalances)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountBalances* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountBalances>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.AccountBalances)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.AccountBalances)
    MergeFrom(*source);
  }
}

void AccountBalances::MergeFrom(const AccountBalances& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.AccountBalances)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iso_currency_code().size() > 0) {

    iso_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iso_currency_code_);
  }
  if (from.unofficial_currency_code().size() > 0) {

    unofficial_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unofficial_currency_code_);
  }
  if (!(from.available() <= 0 && from.available() >= 0)) {
    _internal_set_available(from._internal_available());
  }
  if (!(from.current() <= 0 && from.current() >= 0)) {
    _internal_set_current(from._internal_current());
  }
  if (!(from.limit() <= 0 && from.limit() >= 0)) {
    _internal_set_limit(from._internal_limit());
  }
}

void AccountBalances::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.AccountBalances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountBalances::CopyFrom(const AccountBalances& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.AccountBalances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountBalances::IsInitialized() const {
  return true;
}

void AccountBalances::InternalSwap(AccountBalances* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  iso_currency_code_.Swap(&other->iso_currency_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unofficial_currency_code_.Swap(&other->unofficial_currency_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(available_, other->available_);
  swap(current_, other->current_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountBalances::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ACHNumber::InitAsDefaultInstance() {
}
class ACHNumber::_Internal {
 public:
};

ACHNumber::ACHNumber()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.ACHNumber)
}
ACHNumber::ACHNumber(const ACHNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  routing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_routing().empty()) {
    routing_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.routing_);
  }
  wire_routing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wire_routing().empty()) {
    wire_routing_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wire_routing_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.ACHNumber)
}

void ACHNumber::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ACHNumber_plaid_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  routing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wire_routing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ACHNumber::~ACHNumber() {
  // @@protoc_insertion_point(destructor:plaid.ACHNumber)
  SharedDtor();
}

void ACHNumber::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  routing_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wire_routing_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ACHNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ACHNumber& ACHNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ACHNumber_plaid_2eproto.base);
  return *internal_default_instance();
}


void ACHNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.ACHNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  routing_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wire_routing_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ACHNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ACHNumber.account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ACHNumber.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string routing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_routing();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ACHNumber.routing"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string wire_routing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_wire_routing();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ACHNumber.wire_routing"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ACHNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.ACHNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ACHNumber.account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account(), target);
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ACHNumber.account_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account_id(), target);
  }

  // string routing = 3;
  if (this->routing().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_routing().data(), static_cast<int>(this->_internal_routing().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ACHNumber.routing");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_routing(), target);
  }

  // string wire_routing = 4;
  if (this->wire_routing().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wire_routing().data(), static_cast<int>(this->_internal_wire_routing().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ACHNumber.wire_routing");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_wire_routing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.ACHNumber)
  return target;
}

size_t ACHNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.ACHNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string routing = 3;
  if (this->routing().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_routing());
  }

  // string wire_routing = 4;
  if (this->wire_routing().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wire_routing());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ACHNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.ACHNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const ACHNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ACHNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.ACHNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.ACHNumber)
    MergeFrom(*source);
  }
}

void ACHNumber::MergeFrom(const ACHNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.ACHNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.routing().size() > 0) {

    routing_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.routing_);
  }
  if (from.wire_routing().size() > 0) {

    wire_routing_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wire_routing_);
  }
}

void ACHNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.ACHNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACHNumber::CopyFrom(const ACHNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.ACHNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACHNumber::IsInitialized() const {
  return true;
}

void ACHNumber::InternalSwap(ACHNumber* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  routing_.Swap(&other->routing_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  wire_routing_.Swap(&other->wire_routing_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ACHNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EFTNumber::InitAsDefaultInstance() {
}
class EFTNumber::_Internal {
 public:
};

EFTNumber::EFTNumber()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.EFTNumber)
}
EFTNumber::EFTNumber(const EFTNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  institution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_institution().empty()) {
    institution_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_);
  }
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_branch().empty()) {
    branch_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.branch_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.EFTNumber)
}

void EFTNumber::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EFTNumber_plaid_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EFTNumber::~EFTNumber() {
  // @@protoc_insertion_point(destructor:plaid.EFTNumber)
  SharedDtor();
}

void EFTNumber::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EFTNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EFTNumber& EFTNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EFTNumber_plaid_2eproto.base);
  return *internal_default_instance();
}


void EFTNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.EFTNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* EFTNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.EFTNumber.account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.EFTNumber.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string institution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_institution();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.EFTNumber.institution"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string branch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_branch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.EFTNumber.branch"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EFTNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.EFTNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.EFTNumber.account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account(), target);
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.EFTNumber.account_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account_id(), target);
  }

  // string institution = 3;
  if (this->institution().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_institution().data(), static_cast<int>(this->_internal_institution().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.EFTNumber.institution");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_institution(), target);
  }

  // string branch = 4;
  if (this->branch().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_branch().data(), static_cast<int>(this->_internal_branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.EFTNumber.branch");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_branch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.EFTNumber)
  return target;
}

size_t EFTNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.EFTNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string institution = 3;
  if (this->institution().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_institution());
  }

  // string branch = 4;
  if (this->branch().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_branch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EFTNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.EFTNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const EFTNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EFTNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.EFTNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.EFTNumber)
    MergeFrom(*source);
  }
}

void EFTNumber::MergeFrom(const EFTNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.EFTNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.institution().size() > 0) {

    institution_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_);
  }
  if (from.branch().size() > 0) {

    branch_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.branch_);
  }
}

void EFTNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.EFTNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EFTNumber::CopyFrom(const EFTNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.EFTNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EFTNumber::IsInitialized() const {
  return true;
}

void EFTNumber::InternalSwap(EFTNumber* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  institution_.Swap(&other->institution_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  branch_.Swap(&other->branch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata EFTNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IBANNumber::InitAsDefaultInstance() {
}
class IBANNumber::_Internal {
 public:
};

IBANNumber::IBANNumber()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.IBANNumber)
}
IBANNumber::IBANNumber(const IBANNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  iban_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iban().empty()) {
    iban_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iban_);
  }
  bic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bic().empty()) {
    bic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bic_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.IBANNumber)
}

void IBANNumber::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IBANNumber_plaid_2eproto.base);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iban_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IBANNumber::~IBANNumber() {
  // @@protoc_insertion_point(destructor:plaid.IBANNumber)
  SharedDtor();
}

void IBANNumber::SharedDtor() {
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iban_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IBANNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IBANNumber& IBANNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IBANNumber_plaid_2eproto.base);
  return *internal_default_instance();
}


void IBANNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.IBANNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iban_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* IBANNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.IBANNumber.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iban = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_iban();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.IBANNumber.iban"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.IBANNumber.bic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IBANNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.IBANNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.IBANNumber.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string iban = 2;
  if (this->iban().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iban().data(), static_cast<int>(this->_internal_iban().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.IBANNumber.iban");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_iban(), target);
  }

  // string bic = 3;
  if (this->bic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bic().data(), static_cast<int>(this->_internal_bic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.IBANNumber.bic");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.IBANNumber)
  return target;
}

size_t IBANNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.IBANNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string iban = 2;
  if (this->iban().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iban());
  }

  // string bic = 3;
  if (this->bic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bic());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IBANNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.IBANNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const IBANNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IBANNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.IBANNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.IBANNumber)
    MergeFrom(*source);
  }
}

void IBANNumber::MergeFrom(const IBANNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.IBANNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.iban().size() > 0) {

    iban_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iban_);
  }
  if (from.bic().size() > 0) {

    bic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bic_);
  }
}

void IBANNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.IBANNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IBANNumber::CopyFrom(const IBANNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.IBANNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IBANNumber::IsInitialized() const {
  return true;
}

void IBANNumber::InternalSwap(IBANNumber* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  iban_.Swap(&other->iban_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bic_.Swap(&other->bic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata IBANNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BACSNumber::InitAsDefaultInstance() {
}
class BACSNumber::_Internal {
 public:
};

BACSNumber::BACSNumber()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.BACSNumber)
}
BACSNumber::BACSNumber(const BACSNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  sort_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sort_code().empty()) {
    sort_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sort_code_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.BACSNumber)
}

void BACSNumber::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BACSNumber_plaid_2eproto.base);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sort_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BACSNumber::~BACSNumber() {
  // @@protoc_insertion_point(destructor:plaid.BACSNumber)
  SharedDtor();
}

void BACSNumber::SharedDtor() {
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sort_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BACSNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BACSNumber& BACSNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BACSNumber_plaid_2eproto.base);
  return *internal_default_instance();
}


void BACSNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.BACSNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sort_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* BACSNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.BACSNumber.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.BACSNumber.account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sort_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sort_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.BACSNumber.sort_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BACSNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.BACSNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.BACSNumber.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.BACSNumber.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  // string sort_code = 3;
  if (this->sort_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sort_code().data(), static_cast<int>(this->_internal_sort_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.BACSNumber.sort_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sort_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.BACSNumber)
  return target;
}

size_t BACSNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.BACSNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string sort_code = 3;
  if (this->sort_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sort_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BACSNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.BACSNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const BACSNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BACSNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.BACSNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.BACSNumber)
    MergeFrom(*source);
  }
}

void BACSNumber::MergeFrom(const BACSNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.BACSNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.sort_code().size() > 0) {

    sort_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sort_code_);
  }
}

void BACSNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.BACSNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BACSNumber::CopyFrom(const BACSNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.BACSNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BACSNumber::IsInitialized() const {
  return true;
}

void BACSNumber::InternalSwap(BACSNumber* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sort_code_.Swap(&other->sort_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BACSNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBalancesRequestOptions::InitAsDefaultInstance() {
}
class GetBalancesRequestOptions::_Internal {
 public:
};

GetBalancesRequestOptions::GetBalancesRequestOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetBalancesRequestOptions)
}
GetBalancesRequestOptions::GetBalancesRequestOptions(const GetBalancesRequestOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plaid.GetBalancesRequestOptions)
}

void GetBalancesRequestOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBalancesRequestOptions_plaid_2eproto.base);
}

GetBalancesRequestOptions::~GetBalancesRequestOptions() {
  // @@protoc_insertion_point(destructor:plaid.GetBalancesRequestOptions)
  SharedDtor();
}

void GetBalancesRequestOptions::SharedDtor() {
}

void GetBalancesRequestOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBalancesRequestOptions& GetBalancesRequestOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBalancesRequestOptions_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetBalancesRequestOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetBalancesRequestOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* GetBalancesRequestOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_account_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetBalancesRequestOptions.account_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBalancesRequestOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetBalancesRequestOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    const auto& s = this->_internal_account_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetBalancesRequestOptions.account_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetBalancesRequestOptions)
  return target;
}

size_t GetBalancesRequestOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetBalancesRequestOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(account_ids_.size());
  for (int i = 0, n = account_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      account_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBalancesRequestOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetBalancesRequestOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBalancesRequestOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBalancesRequestOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetBalancesRequestOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetBalancesRequestOptions)
    MergeFrom(*source);
  }
}

void GetBalancesRequestOptions::MergeFrom(const GetBalancesRequestOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetBalancesRequestOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void GetBalancesRequestOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetBalancesRequestOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBalancesRequestOptions::CopyFrom(const GetBalancesRequestOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetBalancesRequestOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBalancesRequestOptions::IsInitialized() const {
  return true;
}

void GetBalancesRequestOptions::InternalSwap(GetBalancesRequestOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBalancesRequestOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBalancesRequest::InitAsDefaultInstance() {
  ::plaid::_GetBalancesRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::plaid::GetBalancesRequestOptions*>(
      ::plaid::GetBalancesRequestOptions::internal_default_instance());
}
class GetBalancesRequest::_Internal {
 public:
  static const ::plaid::GetBalancesRequestOptions& options(const GetBalancesRequest* msg);
};

const ::plaid::GetBalancesRequestOptions&
GetBalancesRequest::_Internal::options(const GetBalancesRequest* msg) {
  return *msg->options_;
}
GetBalancesRequest::GetBalancesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetBalancesRequest)
}
GetBalancesRequest::GetBalancesRequest(const GetBalancesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  if (from._internal_has_options()) {
    options_ = new ::plaid::GetBalancesRequestOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetBalancesRequest)
}

void GetBalancesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBalancesRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  options_ = nullptr;
}

GetBalancesRequest::~GetBalancesRequest() {
  // @@protoc_insertion_point(destructor:plaid.GetBalancesRequest)
  SharedDtor();
}

void GetBalancesRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void GetBalancesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBalancesRequest& GetBalancesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBalancesRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetBalancesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetBalancesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetBalancesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetBalancesRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetBalancesRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetBalancesRequest.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.GetBalancesRequestOptions options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBalancesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetBalancesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetBalancesRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetBalancesRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetBalancesRequest.access_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token(), target);
  }

  // .plaid.GetBalancesRequestOptions options = 4;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetBalancesRequest)
  return target;
}

size_t GetBalancesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetBalancesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  // .plaid.GetBalancesRequestOptions options = 4;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBalancesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetBalancesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBalancesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBalancesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetBalancesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetBalancesRequest)
    MergeFrom(*source);
  }
}

void GetBalancesRequest::MergeFrom(const GetBalancesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetBalancesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  if (from.has_options()) {
    _internal_mutable_options()->::plaid::GetBalancesRequestOptions::MergeFrom(from._internal_options());
  }
}

void GetBalancesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetBalancesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBalancesRequest::CopyFrom(const GetBalancesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetBalancesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBalancesRequest::IsInitialized() const {
  return true;
}

void GetBalancesRequest::InternalSwap(GetBalancesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBalancesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBalancesResponse::InitAsDefaultInstance() {
}
class GetBalancesResponse::_Internal {
 public:
};

GetBalancesResponse::GetBalancesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetBalancesResponse)
}
GetBalancesResponse::GetBalancesResponse(const GetBalancesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetBalancesResponse)
}

void GetBalancesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBalancesResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetBalancesResponse::~GetBalancesResponse() {
  // @@protoc_insertion_point(destructor:plaid.GetBalancesResponse)
  SharedDtor();
}

void GetBalancesResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBalancesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBalancesResponse& GetBalancesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBalancesResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetBalancesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetBalancesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetBalancesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetBalancesResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .plaid.Account accounts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBalancesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetBalancesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetBalancesResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // repeated .plaid.Account accounts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetBalancesResponse)
  return target;
}

size_t GetBalancesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetBalancesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.Account accounts = 2;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBalancesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetBalancesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBalancesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBalancesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetBalancesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetBalancesResponse)
    MergeFrom(*source);
  }
}

void GetBalancesResponse::MergeFrom(const GetBalancesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetBalancesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
}

void GetBalancesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetBalancesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBalancesResponse::CopyFrom(const GetBalancesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetBalancesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBalancesResponse::IsInitialized() const {
  return true;
}

void GetBalancesResponse::InternalSwap(GetBalancesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBalancesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAccountsRequestOptions::InitAsDefaultInstance() {
}
class GetAccountsRequestOptions::_Internal {
 public:
};

GetAccountsRequestOptions::GetAccountsRequestOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetAccountsRequestOptions)
}
GetAccountsRequestOptions::GetAccountsRequestOptions(const GetAccountsRequestOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plaid.GetAccountsRequestOptions)
}

void GetAccountsRequestOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAccountsRequestOptions_plaid_2eproto.base);
}

GetAccountsRequestOptions::~GetAccountsRequestOptions() {
  // @@protoc_insertion_point(destructor:plaid.GetAccountsRequestOptions)
  SharedDtor();
}

void GetAccountsRequestOptions::SharedDtor() {
}

void GetAccountsRequestOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccountsRequestOptions& GetAccountsRequestOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAccountsRequestOptions_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetAccountsRequestOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetAccountsRequestOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* GetAccountsRequestOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_account_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetAccountsRequestOptions.account_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountsRequestOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetAccountsRequestOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    const auto& s = this->_internal_account_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetAccountsRequestOptions.account_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetAccountsRequestOptions)
  return target;
}

size_t GetAccountsRequestOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetAccountsRequestOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(account_ids_.size());
  for (int i = 0, n = account_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      account_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountsRequestOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetAccountsRequestOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountsRequestOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountsRequestOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetAccountsRequestOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetAccountsRequestOptions)
    MergeFrom(*source);
  }
}

void GetAccountsRequestOptions::MergeFrom(const GetAccountsRequestOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetAccountsRequestOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void GetAccountsRequestOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetAccountsRequestOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountsRequestOptions::CopyFrom(const GetAccountsRequestOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetAccountsRequestOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountsRequestOptions::IsInitialized() const {
  return true;
}

void GetAccountsRequestOptions::InternalSwap(GetAccountsRequestOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountsRequestOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAccountsRequest::InitAsDefaultInstance() {
  ::plaid::_GetAccountsRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::plaid::GetAccountsRequestOptions*>(
      ::plaid::GetAccountsRequestOptions::internal_default_instance());
}
class GetAccountsRequest::_Internal {
 public:
  static const ::plaid::GetAccountsRequestOptions& options(const GetAccountsRequest* msg);
};

const ::plaid::GetAccountsRequestOptions&
GetAccountsRequest::_Internal::options(const GetAccountsRequest* msg) {
  return *msg->options_;
}
GetAccountsRequest::GetAccountsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetAccountsRequest)
}
GetAccountsRequest::GetAccountsRequest(const GetAccountsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  if (from._internal_has_options()) {
    options_ = new ::plaid::GetAccountsRequestOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetAccountsRequest)
}

void GetAccountsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAccountsRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  options_ = nullptr;
}

GetAccountsRequest::~GetAccountsRequest() {
  // @@protoc_insertion_point(destructor:plaid.GetAccountsRequest)
  SharedDtor();
}

void GetAccountsRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void GetAccountsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccountsRequest& GetAccountsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAccountsRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetAccountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetAccountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetAccountsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetAccountsRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetAccountsRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetAccountsRequest.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.GetAccountsRequestOptions options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetAccountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetAccountsRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetAccountsRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetAccountsRequest.access_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token(), target);
  }

  // .plaid.GetAccountsRequestOptions options = 4;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetAccountsRequest)
  return target;
}

size_t GetAccountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetAccountsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  // .plaid.GetAccountsRequestOptions options = 4;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetAccountsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetAccountsRequest)
    MergeFrom(*source);
  }
}

void GetAccountsRequest::MergeFrom(const GetAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  if (from.has_options()) {
    _internal_mutable_options()->::plaid::GetAccountsRequestOptions::MergeFrom(from._internal_options());
  }
}

void GetAccountsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountsRequest::CopyFrom(const GetAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountsRequest::IsInitialized() const {
  return true;
}

void GetAccountsRequest::InternalSwap(GetAccountsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAccountsResponse::InitAsDefaultInstance() {
  ::plaid::_GetAccountsResponse_default_instance_._instance.get_mutable()->item_ = const_cast< ::plaid::Item*>(
      ::plaid::Item::internal_default_instance());
}
class GetAccountsResponse::_Internal {
 public:
  static const ::plaid::Item& item(const GetAccountsResponse* msg);
};

const ::plaid::Item&
GetAccountsResponse::_Internal::item(const GetAccountsResponse* msg) {
  return *msg->item_;
}
GetAccountsResponse::GetAccountsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetAccountsResponse)
}
GetAccountsResponse::GetAccountsResponse(const GetAccountsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from._internal_has_item()) {
    item_ = new ::plaid::Item(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetAccountsResponse)
}

void GetAccountsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAccountsResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_ = nullptr;
}

GetAccountsResponse::~GetAccountsResponse() {
  // @@protoc_insertion_point(destructor:plaid.GetAccountsResponse)
  SharedDtor();
}

void GetAccountsResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete item_;
}

void GetAccountsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccountsResponse& GetAccountsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAccountsResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetAccountsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetAccountsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetAccountsResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .plaid.Account accounts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .plaid.Item item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetAccountsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetAccountsResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // repeated .plaid.Account accounts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_accounts(i), target, stream);
  }

  // .plaid.Item item = 3;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetAccountsResponse)
  return target;
}

size_t GetAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetAccountsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.Account accounts = 2;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .plaid.Item item = 3;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetAccountsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetAccountsResponse)
    MergeFrom(*source);
  }
}

void GetAccountsResponse::MergeFrom(const GetAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_item()) {
    _internal_mutable_item()->::plaid::Item::MergeFrom(from._internal_item());
  }
}

void GetAccountsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountsResponse::CopyFrom(const GetAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountsResponse::IsInitialized() const {
  return true;
}

void GetAccountsResponse::InternalSwap(GetAccountsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(item_, other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAccountsOptions::InitAsDefaultInstance() {
}
class GetAccountsOptions::_Internal {
 public:
};

GetAccountsOptions::GetAccountsOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetAccountsOptions)
}
GetAccountsOptions::GetAccountsOptions(const GetAccountsOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plaid.GetAccountsOptions)
}

void GetAccountsOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAccountsOptions_plaid_2eproto.base);
}

GetAccountsOptions::~GetAccountsOptions() {
  // @@protoc_insertion_point(destructor:plaid.GetAccountsOptions)
  SharedDtor();
}

void GetAccountsOptions::SharedDtor() {
}

void GetAccountsOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccountsOptions& GetAccountsOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAccountsOptions_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetAccountsOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetAccountsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* GetAccountsOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_account_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetAccountsOptions.account_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountsOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetAccountsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    const auto& s = this->_internal_account_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetAccountsOptions.account_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetAccountsOptions)
  return target;
}

size_t GetAccountsOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetAccountsOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(account_ids_.size());
  for (int i = 0, n = account_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      account_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountsOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetAccountsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountsOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountsOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetAccountsOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetAccountsOptions)
    MergeFrom(*source);
  }
}

void GetAccountsOptions::MergeFrom(const GetAccountsOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetAccountsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void GetAccountsOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetAccountsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountsOptions::CopyFrom(const GetAccountsOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetAccountsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountsOptions::IsInitialized() const {
  return true;
}

void GetAccountsOptions::InternalSwap(GetAccountsOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountsOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBalancesOptions::InitAsDefaultInstance() {
}
class GetBalancesOptions::_Internal {
 public:
};

GetBalancesOptions::GetBalancesOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetBalancesOptions)
}
GetBalancesOptions::GetBalancesOptions(const GetBalancesOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plaid.GetBalancesOptions)
}

void GetBalancesOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBalancesOptions_plaid_2eproto.base);
}

GetBalancesOptions::~GetBalancesOptions() {
  // @@protoc_insertion_point(destructor:plaid.GetBalancesOptions)
  SharedDtor();
}

void GetBalancesOptions::SharedDtor() {
}

void GetBalancesOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBalancesOptions& GetBalancesOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBalancesOptions_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetBalancesOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetBalancesOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* GetBalancesOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_account_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetBalancesOptions.account_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBalancesOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetBalancesOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    const auto& s = this->_internal_account_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetBalancesOptions.account_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetBalancesOptions)
  return target;
}

size_t GetBalancesOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetBalancesOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(account_ids_.size());
  for (int i = 0, n = account_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      account_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBalancesOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetBalancesOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBalancesOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBalancesOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetBalancesOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetBalancesOptions)
    MergeFrom(*source);
  }
}

void GetBalancesOptions::MergeFrom(const GetBalancesOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetBalancesOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void GetBalancesOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetBalancesOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBalancesOptions::CopyFrom(const GetBalancesOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetBalancesOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBalancesOptions::IsInitialized() const {
  return true;
}

void GetBalancesOptions::InternalSwap(GetBalancesOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBalancesOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AssetReport::InitAsDefaultInstance() {
  ::plaid::_AssetReport_default_instance_._instance.get_mutable()->user_ = const_cast< ::plaid::AssetReportUser*>(
      ::plaid::AssetReportUser::internal_default_instance());
}
class AssetReport::_Internal {
 public:
  static const ::plaid::AssetReportUser& user(const AssetReport* msg);
};

const ::plaid::AssetReportUser&
AssetReport::_Internal::user(const AssetReport* msg) {
  return *msg->user_;
}
AssetReport::AssetReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.AssetReport)
}
AssetReport::AssetReport(const AssetReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  asset_report_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_report_id().empty()) {
    asset_report_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.asset_report_id_);
  }
  client_report_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_report_id().empty()) {
    client_report_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_report_id_);
  }
  date_generated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date_generated().empty()) {
    date_generated_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_generated_);
  }
  if (from._internal_has_user()) {
    user_ = new ::plaid::AssetReportUser(*from.user_);
  } else {
    user_ = nullptr;
  }
  days_requested_ = from.days_requested_;
  // @@protoc_insertion_point(copy_constructor:plaid.AssetReport)
}

void AssetReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssetReport_plaid_2eproto.base);
  asset_report_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_report_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_generated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&days_requested_) -
      reinterpret_cast<char*>(&user_)) + sizeof(days_requested_));
}

AssetReport::~AssetReport() {
  // @@protoc_insertion_point(destructor:plaid.AssetReport)
  SharedDtor();
}

void AssetReport::SharedDtor() {
  asset_report_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_report_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_generated_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void AssetReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetReport& AssetReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssetReport_plaid_2eproto.base);
  return *internal_default_instance();
}


void AssetReport::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.AssetReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  asset_report_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_report_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_generated_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  days_requested_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* AssetReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset_report_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_report_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AssetReport.asset_report_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_report_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_client_report_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AssetReport.client_report_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date_generated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_date_generated();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AssetReport.date_generated"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 days_requested = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          days_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .plaid.AssetReportItem items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .plaid.AssetReportUser user = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.AssetReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_report_id = 1;
  if (this->asset_report_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_report_id().data(), static_cast<int>(this->_internal_asset_report_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AssetReport.asset_report_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_report_id(), target);
  }

  // string client_report_id = 2;
  if (this->client_report_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_report_id().data(), static_cast<int>(this->_internal_client_report_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AssetReport.client_report_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_report_id(), target);
  }

  // string date_generated = 3;
  if (this->date_generated().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date_generated().data(), static_cast<int>(this->_internal_date_generated().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AssetReport.date_generated");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_date_generated(), target);
  }

  // int64 days_requested = 4;
  if (this->days_requested() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_days_requested(), target);
  }

  // repeated .plaid.AssetReportItem items = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_items(i), target, stream);
  }

  // .plaid.AssetReportUser user = 6;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.AssetReport)
  return target;
}

size_t AssetReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.AssetReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.AssetReportItem items = 5;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string asset_report_id = 1;
  if (this->asset_report_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_report_id());
  }

  // string client_report_id = 2;
  if (this->client_report_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_report_id());
  }

  // string date_generated = 3;
  if (this->date_generated().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date_generated());
  }

  // .plaid.AssetReportUser user = 6;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // int64 days_requested = 4;
  if (this->days_requested() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_days_requested());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.AssetReport)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.AssetReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.AssetReport)
    MergeFrom(*source);
  }
}

void AssetReport::MergeFrom(const AssetReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.AssetReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.asset_report_id().size() > 0) {

    asset_report_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.asset_report_id_);
  }
  if (from.client_report_id().size() > 0) {

    client_report_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_report_id_);
  }
  if (from.date_generated().size() > 0) {

    date_generated_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_generated_);
  }
  if (from.has_user()) {
    _internal_mutable_user()->::plaid::AssetReportUser::MergeFrom(from._internal_user());
  }
  if (from.days_requested() != 0) {
    _internal_set_days_requested(from._internal_days_requested());
  }
}

void AssetReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.AssetReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetReport::CopyFrom(const AssetReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.AssetReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetReport::IsInitialized() const {
  return true;
}

void AssetReport::InternalSwap(AssetReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  asset_report_id_.Swap(&other->asset_report_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_report_id_.Swap(&other->client_report_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  date_generated_.Swap(&other->date_generated_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_, other->user_);
  swap(days_requested_, other->days_requested_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AssetReportItem::InitAsDefaultInstance() {
}
class AssetReportItem::_Internal {
 public:
};

AssetReportItem::AssetReportItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.AssetReportItem)
}
AssetReportItem::AssetReportItem(const AssetReportItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  date_last_updated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date_last_updated().empty()) {
    date_last_updated_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_last_updated_);
  }
  institution_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_institution_id().empty()) {
    institution_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_id_);
  }
  institution_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_institution_name().empty()) {
    institution_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_name_);
  }
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_item_id().empty()) {
    item_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.AssetReportItem)
}

void AssetReportItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssetReportItem_plaid_2eproto.base);
  date_last_updated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AssetReportItem::~AssetReportItem() {
  // @@protoc_insertion_point(destructor:plaid.AssetReportItem)
  SharedDtor();
}

void AssetReportItem::SharedDtor() {
  date_last_updated_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AssetReportItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetReportItem& AssetReportItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssetReportItem_plaid_2eproto.base);
  return *internal_default_instance();
}


void AssetReportItem::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.AssetReportItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  date_last_updated_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AssetReportItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .plaid.Account accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string date_last_updated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_date_last_updated();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AssetReportItem.date_last_updated"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string institution_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_institution_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AssetReportItem.institution_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string institution_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_institution_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AssetReportItem.institution_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string item_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_item_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AssetReportItem.item_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetReportItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.AssetReportItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .plaid.Account accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_accounts(i), target, stream);
  }

  // string date_last_updated = 2;
  if (this->date_last_updated().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date_last_updated().data(), static_cast<int>(this->_internal_date_last_updated().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AssetReportItem.date_last_updated");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_date_last_updated(), target);
  }

  // string institution_id = 3;
  if (this->institution_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_institution_id().data(), static_cast<int>(this->_internal_institution_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AssetReportItem.institution_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_institution_id(), target);
  }

  // string institution_name = 4;
  if (this->institution_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_institution_name().data(), static_cast<int>(this->_internal_institution_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AssetReportItem.institution_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_institution_name(), target);
  }

  // string item_id = 5;
  if (this->item_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item_id().data(), static_cast<int>(this->_internal_item_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AssetReportItem.item_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.AssetReportItem)
  return target;
}

size_t AssetReportItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.AssetReportItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.Account accounts = 1;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string date_last_updated = 2;
  if (this->date_last_updated().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date_last_updated());
  }

  // string institution_id = 3;
  if (this->institution_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_institution_id());
  }

  // string institution_name = 4;
  if (this->institution_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_institution_name());
  }

  // string item_id = 5;
  if (this->item_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetReportItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.AssetReportItem)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetReportItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetReportItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.AssetReportItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.AssetReportItem)
    MergeFrom(*source);
  }
}

void AssetReportItem::MergeFrom(const AssetReportItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.AssetReportItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
  if (from.date_last_updated().size() > 0) {

    date_last_updated_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_last_updated_);
  }
  if (from.institution_id().size() > 0) {

    institution_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_id_);
  }
  if (from.institution_name().size() > 0) {

    institution_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_name_);
  }
  if (from.item_id().size() > 0) {

    item_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
}

void AssetReportItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.AssetReportItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetReportItem::CopyFrom(const AssetReportItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.AssetReportItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetReportItem::IsInitialized() const {
  return true;
}

void AssetReportItem::InternalSwap(AssetReportItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
  date_last_updated_.Swap(&other->date_last_updated_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  institution_id_.Swap(&other->institution_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  institution_name_.Swap(&other->institution_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  item_id_.Swap(&other->item_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetReportItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AssetReportUser::InitAsDefaultInstance() {
}
class AssetReportUser::_Internal {
 public:
};

AssetReportUser::AssetReportUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.AssetReportUser)
}
AssetReportUser::AssetReportUser(const AssetReportUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_user_id().empty()) {
    client_user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_user_id_);
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  middle_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_middle_name().empty()) {
    middle_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.middle_name_);
  }
  phone_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone_number().empty()) {
    phone_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_number_);
  }
  ssn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssn().empty()) {
    ssn_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ssn_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.AssetReportUser)
}

void AssetReportUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssetReportUser_plaid_2eproto.base);
  client_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  middle_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ssn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AssetReportUser::~AssetReportUser() {
  // @@protoc_insertion_point(destructor:plaid.AssetReportUser)
  SharedDtor();
}

void AssetReportUser::SharedDtor() {
  client_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  middle_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ssn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AssetReportUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetReportUser& AssetReportUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssetReportUser_plaid_2eproto.base);
  return *internal_default_instance();
}


void AssetReportUser::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.AssetReportUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  middle_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ssn_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AssetReportUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AssetReportUser.client_user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AssetReportUser.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AssetReportUser.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AssetReportUser.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string middle_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_middle_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AssetReportUser.middle_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_phone_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AssetReportUser.phone_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ssn = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ssn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AssetReportUser.ssn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetReportUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.AssetReportUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_user_id = 1;
  if (this->client_user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_user_id().data(), static_cast<int>(this->_internal_client_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AssetReportUser.client_user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_user_id(), target);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AssetReportUser.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string first_name = 3;
  if (this->first_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AssetReportUser.first_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_first_name(), target);
  }

  // string last_name = 4;
  if (this->last_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AssetReportUser.last_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_last_name(), target);
  }

  // string middle_name = 5;
  if (this->middle_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_middle_name().data(), static_cast<int>(this->_internal_middle_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AssetReportUser.middle_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_middle_name(), target);
  }

  // string phone_number = 6;
  if (this->phone_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_number().data(), static_cast<int>(this->_internal_phone_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AssetReportUser.phone_number");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_phone_number(), target);
  }

  // string ssn = 7;
  if (this->ssn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssn().data(), static_cast<int>(this->_internal_ssn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AssetReportUser.ssn");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ssn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.AssetReportUser)
  return target;
}

size_t AssetReportUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.AssetReportUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_user_id = 1;
  if (this->client_user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_user_id());
  }

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string first_name = 3;
  if (this->first_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 4;
  if (this->last_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string middle_name = 5;
  if (this->middle_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_middle_name());
  }

  // string phone_number = 6;
  if (this->phone_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_number());
  }

  // string ssn = 7;
  if (this->ssn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetReportUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.AssetReportUser)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetReportUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetReportUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.AssetReportUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.AssetReportUser)
    MergeFrom(*source);
  }
}

void AssetReportUser::MergeFrom(const AssetReportUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.AssetReportUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_user_id().size() > 0) {

    client_user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_user_id_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.first_name().size() > 0) {

    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  if (from.last_name().size() > 0) {

    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  if (from.middle_name().size() > 0) {

    middle_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.middle_name_);
  }
  if (from.phone_number().size() > 0) {

    phone_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_number_);
  }
  if (from.ssn().size() > 0) {

    ssn_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ssn_);
  }
}

void AssetReportUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.AssetReportUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetReportUser::CopyFrom(const AssetReportUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.AssetReportUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetReportUser::IsInitialized() const {
  return true;
}

void AssetReportUser::InternalSwap(AssetReportUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_user_id_.Swap(&other->client_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_name_.Swap(&other->first_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_name_.Swap(&other->last_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  middle_name_.Swap(&other->middle_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phone_number_.Swap(&other->phone_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ssn_.Swap(&other->ssn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetReportUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAssetReportRequest::InitAsDefaultInstance() {
}
class GetAssetReportRequest::_Internal {
 public:
};

GetAssetReportRequest::GetAssetReportRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetAssetReportRequest)
}
GetAssetReportRequest::GetAssetReportRequest(const GetAssetReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  asset_report_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_report_token().empty()) {
    asset_report_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.asset_report_token_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetAssetReportRequest)
}

void GetAssetReportRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAssetReportRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_report_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAssetReportRequest::~GetAssetReportRequest() {
  // @@protoc_insertion_point(destructor:plaid.GetAssetReportRequest)
  SharedDtor();
}

void GetAssetReportRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_report_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAssetReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAssetReportRequest& GetAssetReportRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAssetReportRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetAssetReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetAssetReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_report_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetAssetReportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetAssetReportRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetAssetReportRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset_report_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_asset_report_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetAssetReportRequest.asset_report_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAssetReportRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetAssetReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetAssetReportRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetAssetReportRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string asset_report_token = 3;
  if (this->asset_report_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_report_token().data(), static_cast<int>(this->_internal_asset_report_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetAssetReportRequest.asset_report_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_asset_report_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetAssetReportRequest)
  return target;
}

size_t GetAssetReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetAssetReportRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string asset_report_token = 3;
  if (this->asset_report_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_report_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAssetReportRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetAssetReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAssetReportRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAssetReportRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetAssetReportRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetAssetReportRequest)
    MergeFrom(*source);
  }
}

void GetAssetReportRequest::MergeFrom(const GetAssetReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetAssetReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.asset_report_token().size() > 0) {

    asset_report_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.asset_report_token_);
  }
}

void GetAssetReportRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetAssetReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAssetReportRequest::CopyFrom(const GetAssetReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetAssetReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssetReportRequest::IsInitialized() const {
  return true;
}

void GetAssetReportRequest::InternalSwap(GetAssetReportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  asset_report_token_.Swap(&other->asset_report_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAssetReportRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAssetReportResponse::InitAsDefaultInstance() {
  ::plaid::_GetAssetReportResponse_default_instance_._instance.get_mutable()->report_ = const_cast< ::plaid::AssetReport*>(
      ::plaid::AssetReport::internal_default_instance());
}
class GetAssetReportResponse::_Internal {
 public:
  static const ::plaid::AssetReport& report(const GetAssetReportResponse* msg);
};

const ::plaid::AssetReport&
GetAssetReportResponse::_Internal::report(const GetAssetReportResponse* msg) {
  return *msg->report_;
}
GetAssetReportResponse::GetAssetReportResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetAssetReportResponse)
}
GetAssetReportResponse::GetAssetReportResponse(const GetAssetReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      warnings_(from.warnings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from._internal_has_report()) {
    report_ = new ::plaid::AssetReport(*from.report_);
  } else {
    report_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetAssetReportResponse)
}

void GetAssetReportResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAssetReportResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  report_ = nullptr;
}

GetAssetReportResponse::~GetAssetReportResponse() {
  // @@protoc_insertion_point(destructor:plaid.GetAssetReportResponse)
  SharedDtor();
}

void GetAssetReportResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete report_;
}

void GetAssetReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAssetReportResponse& GetAssetReportResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAssetReportResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetAssetReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetAssetReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  warnings_.Clear();
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && report_ != nullptr) {
    delete report_;
  }
  report_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetAssetReportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetAssetReportResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.AssetReport report = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string warnings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_warnings();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetAssetReportResponse.warnings"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAssetReportResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetAssetReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetAssetReportResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // .plaid.AssetReport report = 2;
  if (this->has_report()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::report(this), target, stream);
  }

  // repeated string warnings = 3;
  for (int i = 0, n = this->_internal_warnings_size(); i < n; i++) {
    const auto& s = this->_internal_warnings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetAssetReportResponse.warnings");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetAssetReportResponse)
  return target;
}

size_t GetAssetReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetAssetReportResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string warnings = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(warnings_.size());
  for (int i = 0, n = warnings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      warnings_.Get(i));
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .plaid.AssetReport report = 2;
  if (this->has_report()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *report_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAssetReportResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetAssetReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAssetReportResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAssetReportResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetAssetReportResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetAssetReportResponse)
    MergeFrom(*source);
  }
}

void GetAssetReportResponse::MergeFrom(const GetAssetReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetAssetReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  warnings_.MergeFrom(from.warnings_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_report()) {
    _internal_mutable_report()->::plaid::AssetReport::MergeFrom(from._internal_report());
  }
}

void GetAssetReportResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetAssetReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAssetReportResponse::CopyFrom(const GetAssetReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetAssetReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssetReportResponse::IsInitialized() const {
  return true;
}

void GetAssetReportResponse::InternalSwap(GetAssetReportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  warnings_.InternalSwap(&other->warnings_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(report_, other->report_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAssetReportResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveAssetReportRequest::InitAsDefaultInstance() {
}
class RemoveAssetReportRequest::_Internal {
 public:
};

RemoveAssetReportRequest::RemoveAssetReportRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.RemoveAssetReportRequest)
}
RemoveAssetReportRequest::RemoveAssetReportRequest(const RemoveAssetReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  asset_report_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_report_token().empty()) {
    asset_report_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.asset_report_token_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.RemoveAssetReportRequest)
}

void RemoveAssetReportRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveAssetReportRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_report_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoveAssetReportRequest::~RemoveAssetReportRequest() {
  // @@protoc_insertion_point(destructor:plaid.RemoveAssetReportRequest)
  SharedDtor();
}

void RemoveAssetReportRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_report_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveAssetReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveAssetReportRequest& RemoveAssetReportRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveAssetReportRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void RemoveAssetReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.RemoveAssetReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_report_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RemoveAssetReportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.RemoveAssetReportRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.RemoveAssetReportRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset_report_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_asset_report_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.RemoveAssetReportRequest.asset_report_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveAssetReportRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.RemoveAssetReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.RemoveAssetReportRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.RemoveAssetReportRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string asset_report_token = 3;
  if (this->asset_report_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_report_token().data(), static_cast<int>(this->_internal_asset_report_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.RemoveAssetReportRequest.asset_report_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_asset_report_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.RemoveAssetReportRequest)
  return target;
}

size_t RemoveAssetReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.RemoveAssetReportRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string asset_report_token = 3;
  if (this->asset_report_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_report_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveAssetReportRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.RemoveAssetReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveAssetReportRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveAssetReportRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.RemoveAssetReportRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.RemoveAssetReportRequest)
    MergeFrom(*source);
  }
}

void RemoveAssetReportRequest::MergeFrom(const RemoveAssetReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.RemoveAssetReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.asset_report_token().size() > 0) {

    asset_report_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.asset_report_token_);
  }
}

void RemoveAssetReportRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.RemoveAssetReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveAssetReportRequest::CopyFrom(const RemoveAssetReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.RemoveAssetReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveAssetReportRequest::IsInitialized() const {
  return true;
}

void RemoveAssetReportRequest::InternalSwap(RemoveAssetReportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  asset_report_token_.Swap(&other->asset_report_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveAssetReportRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveAssetReportResponse::InitAsDefaultInstance() {
}
class RemoveAssetReportResponse::_Internal {
 public:
};

RemoveAssetReportResponse::RemoveAssetReportResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.RemoveAssetReportResponse)
}
RemoveAssetReportResponse::RemoveAssetReportResponse(const RemoveAssetReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  removed_ = from.removed_;
  // @@protoc_insertion_point(copy_constructor:plaid.RemoveAssetReportResponse)
}

void RemoveAssetReportResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveAssetReportResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  removed_ = false;
}

RemoveAssetReportResponse::~RemoveAssetReportResponse() {
  // @@protoc_insertion_point(destructor:plaid.RemoveAssetReportResponse)
  SharedDtor();
}

void RemoveAssetReportResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveAssetReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveAssetReportResponse& RemoveAssetReportResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveAssetReportResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void RemoveAssetReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.RemoveAssetReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  removed_ = false;
  _internal_metadata_.Clear();
}

const char* RemoveAssetReportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.RemoveAssetReportResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool removed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveAssetReportResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.RemoveAssetReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.RemoveAssetReportResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool removed = 2;
  if (this->removed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_removed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.RemoveAssetReportResponse)
  return target;
}

size_t RemoveAssetReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.RemoveAssetReportResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // bool removed = 2;
  if (this->removed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveAssetReportResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.RemoveAssetReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveAssetReportResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveAssetReportResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.RemoveAssetReportResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.RemoveAssetReportResponse)
    MergeFrom(*source);
  }
}

void RemoveAssetReportResponse::MergeFrom(const RemoveAssetReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.RemoveAssetReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.removed() != 0) {
    _internal_set_removed(from._internal_removed());
  }
}

void RemoveAssetReportResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.RemoveAssetReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveAssetReportResponse::CopyFrom(const RemoveAssetReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.RemoveAssetReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveAssetReportResponse::IsInitialized() const {
  return true;
}

void RemoveAssetReportResponse::InternalSwap(RemoveAssetReportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(removed_, other->removed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveAssetReportResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateAuditCopyRequest::InitAsDefaultInstance() {
}
class CreateAuditCopyRequest::_Internal {
 public:
};

CreateAuditCopyRequest::CreateAuditCopyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.CreateAuditCopyRequest)
}
CreateAuditCopyRequest::CreateAuditCopyRequest(const CreateAuditCopyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  asset_report_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_report_token().empty()) {
    asset_report_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.asset_report_token_);
  }
  auditor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auditor_id().empty()) {
    auditor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auditor_id_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.CreateAuditCopyRequest)
}

void CreateAuditCopyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateAuditCopyRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_report_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auditor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateAuditCopyRequest::~CreateAuditCopyRequest() {
  // @@protoc_insertion_point(destructor:plaid.CreateAuditCopyRequest)
  SharedDtor();
}

void CreateAuditCopyRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_report_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auditor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateAuditCopyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAuditCopyRequest& CreateAuditCopyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateAuditCopyRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void CreateAuditCopyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.CreateAuditCopyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_report_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auditor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreateAuditCopyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateAuditCopyRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateAuditCopyRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset_report_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_asset_report_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateAuditCopyRequest.asset_report_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auditor_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_auditor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateAuditCopyRequest.auditor_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAuditCopyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.CreateAuditCopyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateAuditCopyRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateAuditCopyRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string asset_report_token = 3;
  if (this->asset_report_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_report_token().data(), static_cast<int>(this->_internal_asset_report_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateAuditCopyRequest.asset_report_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_asset_report_token(), target);
  }

  // string auditor_id = 4;
  if (this->auditor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auditor_id().data(), static_cast<int>(this->_internal_auditor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateAuditCopyRequest.auditor_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_auditor_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.CreateAuditCopyRequest)
  return target;
}

size_t CreateAuditCopyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.CreateAuditCopyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string asset_report_token = 3;
  if (this->asset_report_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_report_token());
  }

  // string auditor_id = 4;
  if (this->auditor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auditor_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAuditCopyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.CreateAuditCopyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAuditCopyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAuditCopyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.CreateAuditCopyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.CreateAuditCopyRequest)
    MergeFrom(*source);
  }
}

void CreateAuditCopyRequest::MergeFrom(const CreateAuditCopyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.CreateAuditCopyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.asset_report_token().size() > 0) {

    asset_report_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.asset_report_token_);
  }
  if (from.auditor_id().size() > 0) {

    auditor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auditor_id_);
  }
}

void CreateAuditCopyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.CreateAuditCopyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAuditCopyRequest::CopyFrom(const CreateAuditCopyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.CreateAuditCopyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAuditCopyRequest::IsInitialized() const {
  return true;
}

void CreateAuditCopyRequest::InternalSwap(CreateAuditCopyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  asset_report_token_.Swap(&other->asset_report_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auditor_id_.Swap(&other->auditor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAuditCopyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateAuditCopyTokenResponse::InitAsDefaultInstance() {
}
class CreateAuditCopyTokenResponse::_Internal {
 public:
};

CreateAuditCopyTokenResponse::CreateAuditCopyTokenResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.CreateAuditCopyTokenResponse)
}
CreateAuditCopyTokenResponse::CreateAuditCopyTokenResponse(const CreateAuditCopyTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  audit_copy_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audit_copy_token().empty()) {
    audit_copy_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audit_copy_token_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.CreateAuditCopyTokenResponse)
}

void CreateAuditCopyTokenResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateAuditCopyTokenResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audit_copy_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateAuditCopyTokenResponse::~CreateAuditCopyTokenResponse() {
  // @@protoc_insertion_point(destructor:plaid.CreateAuditCopyTokenResponse)
  SharedDtor();
}

void CreateAuditCopyTokenResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audit_copy_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateAuditCopyTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAuditCopyTokenResponse& CreateAuditCopyTokenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateAuditCopyTokenResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void CreateAuditCopyTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.CreateAuditCopyTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audit_copy_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreateAuditCopyTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateAuditCopyTokenResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string audit_copy_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_audit_copy_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateAuditCopyTokenResponse.audit_copy_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAuditCopyTokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.CreateAuditCopyTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateAuditCopyTokenResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string audit_copy_token = 2;
  if (this->audit_copy_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audit_copy_token().data(), static_cast<int>(this->_internal_audit_copy_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateAuditCopyTokenResponse.audit_copy_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_audit_copy_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.CreateAuditCopyTokenResponse)
  return target;
}

size_t CreateAuditCopyTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.CreateAuditCopyTokenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string audit_copy_token = 2;
  if (this->audit_copy_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audit_copy_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAuditCopyTokenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.CreateAuditCopyTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAuditCopyTokenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAuditCopyTokenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.CreateAuditCopyTokenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.CreateAuditCopyTokenResponse)
    MergeFrom(*source);
  }
}

void CreateAuditCopyTokenResponse::MergeFrom(const CreateAuditCopyTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.CreateAuditCopyTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.audit_copy_token().size() > 0) {

    audit_copy_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audit_copy_token_);
  }
}

void CreateAuditCopyTokenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.CreateAuditCopyTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAuditCopyTokenResponse::CopyFrom(const CreateAuditCopyTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.CreateAuditCopyTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAuditCopyTokenResponse::IsInitialized() const {
  return true;
}

void CreateAuditCopyTokenResponse::InternalSwap(CreateAuditCopyTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  audit_copy_token_.Swap(&other->audit_copy_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAuditCopyTokenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAuthRequestOptions::InitAsDefaultInstance() {
}
class GetAuthRequestOptions::_Internal {
 public:
};

GetAuthRequestOptions::GetAuthRequestOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetAuthRequestOptions)
}
GetAuthRequestOptions::GetAuthRequestOptions(const GetAuthRequestOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plaid.GetAuthRequestOptions)
}

void GetAuthRequestOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAuthRequestOptions_plaid_2eproto.base);
}

GetAuthRequestOptions::~GetAuthRequestOptions() {
  // @@protoc_insertion_point(destructor:plaid.GetAuthRequestOptions)
  SharedDtor();
}

void GetAuthRequestOptions::SharedDtor() {
}

void GetAuthRequestOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAuthRequestOptions& GetAuthRequestOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAuthRequestOptions_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetAuthRequestOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetAuthRequestOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* GetAuthRequestOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_account_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetAuthRequestOptions.account_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAuthRequestOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetAuthRequestOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    const auto& s = this->_internal_account_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetAuthRequestOptions.account_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetAuthRequestOptions)
  return target;
}

size_t GetAuthRequestOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetAuthRequestOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(account_ids_.size());
  for (int i = 0, n = account_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      account_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAuthRequestOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetAuthRequestOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAuthRequestOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAuthRequestOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetAuthRequestOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetAuthRequestOptions)
    MergeFrom(*source);
  }
}

void GetAuthRequestOptions::MergeFrom(const GetAuthRequestOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetAuthRequestOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void GetAuthRequestOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetAuthRequestOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAuthRequestOptions::CopyFrom(const GetAuthRequestOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetAuthRequestOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthRequestOptions::IsInitialized() const {
  return true;
}

void GetAuthRequestOptions::InternalSwap(GetAuthRequestOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAuthRequestOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAuthRequest::InitAsDefaultInstance() {
  ::plaid::_GetAuthRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::plaid::GetAuthRequestOptions*>(
      ::plaid::GetAuthRequestOptions::internal_default_instance());
}
class GetAuthRequest::_Internal {
 public:
  static const ::plaid::GetAuthRequestOptions& options(const GetAuthRequest* msg);
};

const ::plaid::GetAuthRequestOptions&
GetAuthRequest::_Internal::options(const GetAuthRequest* msg) {
  return *msg->options_;
}
GetAuthRequest::GetAuthRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetAuthRequest)
}
GetAuthRequest::GetAuthRequest(const GetAuthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  if (from._internal_has_options()) {
    options_ = new ::plaid::GetAuthRequestOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetAuthRequest)
}

void GetAuthRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAuthRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  options_ = nullptr;
}

GetAuthRequest::~GetAuthRequest() {
  // @@protoc_insertion_point(destructor:plaid.GetAuthRequest)
  SharedDtor();
}

void GetAuthRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void GetAuthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAuthRequest& GetAuthRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAuthRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetAuthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetAuthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetAuthRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetAuthRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetAuthRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetAuthRequest.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.GetAuthRequestOptions options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAuthRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetAuthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetAuthRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetAuthRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetAuthRequest.access_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token(), target);
  }

  // .plaid.GetAuthRequestOptions options = 4;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetAuthRequest)
  return target;
}

size_t GetAuthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetAuthRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  // .plaid.GetAuthRequestOptions options = 4;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAuthRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetAuthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAuthRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAuthRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetAuthRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetAuthRequest)
    MergeFrom(*source);
  }
}

void GetAuthRequest::MergeFrom(const GetAuthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetAuthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  if (from.has_options()) {
    _internal_mutable_options()->::plaid::GetAuthRequestOptions::MergeFrom(from._internal_options());
  }
}

void GetAuthRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetAuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAuthRequest::CopyFrom(const GetAuthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetAuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthRequest::IsInitialized() const {
  return true;
}

void GetAuthRequest::InternalSwap(GetAuthRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAuthRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountNumberCollection::InitAsDefaultInstance() {
}
class AccountNumberCollection::_Internal {
 public:
};

AccountNumberCollection::AccountNumberCollection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.AccountNumberCollection)
}
AccountNumberCollection::AccountNumberCollection(const AccountNumberCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ach_(from.ach_),
      eft_(from.eft_),
      international_(from.international_),
      bacs_(from.bacs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plaid.AccountNumberCollection)
}

void AccountNumberCollection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountNumberCollection_plaid_2eproto.base);
}

AccountNumberCollection::~AccountNumberCollection() {
  // @@protoc_insertion_point(destructor:plaid.AccountNumberCollection)
  SharedDtor();
}

void AccountNumberCollection::SharedDtor() {
}

void AccountNumberCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountNumberCollection& AccountNumberCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountNumberCollection_plaid_2eproto.base);
  return *internal_default_instance();
}


void AccountNumberCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.AccountNumberCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ach_.Clear();
  eft_.Clear();
  international_.Clear();
  bacs_.Clear();
  _internal_metadata_.Clear();
}

const char* AccountNumberCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .plaid.ACHNumber ach = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ach(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .plaid.EFTNumber eft = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_eft(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .plaid.IBANNumber international = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_international(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .plaid.BACSNumber bacs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bacs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountNumberCollection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.AccountNumberCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .plaid.ACHNumber ach = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ach_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ach(i), target, stream);
  }

  // repeated .plaid.EFTNumber eft = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_eft_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_eft(i), target, stream);
  }

  // repeated .plaid.IBANNumber international = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_international_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_international(i), target, stream);
  }

  // repeated .plaid.BACSNumber bacs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bacs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_bacs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.AccountNumberCollection)
  return target;
}

size_t AccountNumberCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.AccountNumberCollection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.ACHNumber ach = 1;
  total_size += 1UL * this->_internal_ach_size();
  for (const auto& msg : this->ach_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .plaid.EFTNumber eft = 2;
  total_size += 1UL * this->_internal_eft_size();
  for (const auto& msg : this->eft_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .plaid.IBANNumber international = 3;
  total_size += 1UL * this->_internal_international_size();
  for (const auto& msg : this->international_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .plaid.BACSNumber bacs = 4;
  total_size += 1UL * this->_internal_bacs_size();
  for (const auto& msg : this->bacs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountNumberCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.AccountNumberCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountNumberCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountNumberCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.AccountNumberCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.AccountNumberCollection)
    MergeFrom(*source);
  }
}

void AccountNumberCollection::MergeFrom(const AccountNumberCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.AccountNumberCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ach_.MergeFrom(from.ach_);
  eft_.MergeFrom(from.eft_);
  international_.MergeFrom(from.international_);
  bacs_.MergeFrom(from.bacs_);
}

void AccountNumberCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.AccountNumberCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountNumberCollection::CopyFrom(const AccountNumberCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.AccountNumberCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountNumberCollection::IsInitialized() const {
  return true;
}

void AccountNumberCollection::InternalSwap(AccountNumberCollection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ach_.InternalSwap(&other->ach_);
  eft_.InternalSwap(&other->eft_);
  international_.InternalSwap(&other->international_);
  bacs_.InternalSwap(&other->bacs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountNumberCollection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAuthResponse::InitAsDefaultInstance() {
  ::plaid::_GetAuthResponse_default_instance_._instance.get_mutable()->numbers_ = const_cast< ::plaid::AccountNumberCollection*>(
      ::plaid::AccountNumberCollection::internal_default_instance());
}
class GetAuthResponse::_Internal {
 public:
  static const ::plaid::AccountNumberCollection& numbers(const GetAuthResponse* msg);
};

const ::plaid::AccountNumberCollection&
GetAuthResponse::_Internal::numbers(const GetAuthResponse* msg) {
  return *msg->numbers_;
}
GetAuthResponse::GetAuthResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetAuthResponse)
}
GetAuthResponse::GetAuthResponse(const GetAuthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from._internal_has_numbers()) {
    numbers_ = new ::plaid::AccountNumberCollection(*from.numbers_);
  } else {
    numbers_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetAuthResponse)
}

void GetAuthResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAuthResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  numbers_ = nullptr;
}

GetAuthResponse::~GetAuthResponse() {
  // @@protoc_insertion_point(destructor:plaid.GetAuthResponse)
  SharedDtor();
}

void GetAuthResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete numbers_;
}

void GetAuthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAuthResponse& GetAuthResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAuthResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetAuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetAuthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && numbers_ != nullptr) {
    delete numbers_;
  }
  numbers_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetAuthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetAuthResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .plaid.Account accounts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .plaid.AccountNumberCollection numbers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_numbers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAuthResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetAuthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetAuthResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // repeated .plaid.Account accounts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_accounts(i), target, stream);
  }

  // .plaid.AccountNumberCollection numbers = 3;
  if (this->has_numbers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::numbers(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetAuthResponse)
  return target;
}

size_t GetAuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetAuthResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.Account accounts = 2;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .plaid.AccountNumberCollection numbers = 3;
  if (this->has_numbers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *numbers_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAuthResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAuthResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAuthResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetAuthResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetAuthResponse)
    MergeFrom(*source);
  }
}

void GetAuthResponse::MergeFrom(const GetAuthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_numbers()) {
    _internal_mutable_numbers()->::plaid::AccountNumberCollection::MergeFrom(from._internal_numbers());
  }
}

void GetAuthResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAuthResponse::CopyFrom(const GetAuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthResponse::IsInitialized() const {
  return true;
}

void GetAuthResponse::InternalSwap(GetAuthResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(numbers_, other->numbers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAuthResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAuthOptions::InitAsDefaultInstance() {
}
class GetAuthOptions::_Internal {
 public:
};

GetAuthOptions::GetAuthOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetAuthOptions)
}
GetAuthOptions::GetAuthOptions(const GetAuthOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plaid.GetAuthOptions)
}

void GetAuthOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAuthOptions_plaid_2eproto.base);
}

GetAuthOptions::~GetAuthOptions() {
  // @@protoc_insertion_point(destructor:plaid.GetAuthOptions)
  SharedDtor();
}

void GetAuthOptions::SharedDtor() {
}

void GetAuthOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAuthOptions& GetAuthOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAuthOptions_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetAuthOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetAuthOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* GetAuthOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_account_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetAuthOptions.account_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAuthOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetAuthOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    const auto& s = this->_internal_account_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetAuthOptions.account_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetAuthOptions)
  return target;
}

size_t GetAuthOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetAuthOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(account_ids_.size());
  for (int i = 0, n = account_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      account_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAuthOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetAuthOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAuthOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAuthOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetAuthOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetAuthOptions)
    MergeFrom(*source);
  }
}

void GetAuthOptions::MergeFrom(const GetAuthOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetAuthOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void GetAuthOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetAuthOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAuthOptions::CopyFrom(const GetAuthOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetAuthOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthOptions::IsInitialized() const {
  return true;
}

void GetAuthOptions::InternalSwap(GetAuthOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAuthOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Category::InitAsDefaultInstance() {
}
class Category::_Internal {
 public:
};

Category::Category()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.Category)
}
Category::Category(const Category& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      hierarchy_(from.hierarchy_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_category_id().empty()) {
    category_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_id_);
  }
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group().empty()) {
    group_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.Category)
}

void Category::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Category_plaid_2eproto.base);
  category_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Category::~Category() {
  // @@protoc_insertion_point(destructor:plaid.Category)
  SharedDtor();
}

void Category::SharedDtor() {
  category_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Category::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Category& Category::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Category_plaid_2eproto.base);
  return *internal_default_instance();
}


void Category::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hierarchy_.Clear();
  category_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Category::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string category_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_category_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Category.category_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Category.group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string hierarchy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hierarchy();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Category.hierarchy"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Category::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string category_id = 1;
  if (this->category_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category_id().data(), static_cast<int>(this->_internal_category_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Category.category_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_category_id(), target);
  }

  // string group = 2;
  if (this->group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Category.group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_group(), target);
  }

  // repeated string hierarchy = 3;
  for (int i = 0, n = this->_internal_hierarchy_size(); i < n; i++) {
    const auto& s = this->_internal_hierarchy(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Category.hierarchy");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.Category)
  return target;
}

size_t Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.Category)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string hierarchy = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hierarchy_.size());
  for (int i = 0, n = hierarchy_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      hierarchy_.Get(i));
  }

  // string category_id = 1;
  if (this->category_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category_id());
  }

  // string group = 2;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Category::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.Category)
  GOOGLE_DCHECK_NE(&from, this);
  const Category* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Category>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.Category)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.Category)
    MergeFrom(*source);
  }
}

void Category::MergeFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.Category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hierarchy_.MergeFrom(from.hierarchy_);
  if (from.category_id().size() > 0) {

    category_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_id_);
  }
  if (from.group().size() > 0) {

    group_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
}

void Category::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Category::CopyFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Category::IsInitialized() const {
  return true;
}

void Category::InternalSwap(Category* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hierarchy_.InternalSwap(&other->hierarchy_);
  category_id_.Swap(&other->category_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  group_.Swap(&other->group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Category::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCategoriesResponse::InitAsDefaultInstance() {
}
class GetCategoriesResponse::_Internal {
 public:
};

GetCategoriesResponse::GetCategoriesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetCategoriesResponse)
}
GetCategoriesResponse::GetCategoriesResponse(const GetCategoriesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      categories_(from.categories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetCategoriesResponse)
}

void GetCategoriesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCategoriesResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetCategoriesResponse::~GetCategoriesResponse() {
  // @@protoc_insertion_point(destructor:plaid.GetCategoriesResponse)
  SharedDtor();
}

void GetCategoriesResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCategoriesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCategoriesResponse& GetCategoriesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCategoriesResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetCategoriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetCategoriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  categories_.Clear();
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetCategoriesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetCategoriesResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .plaid.Category categories = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_categories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCategoriesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetCategoriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetCategoriesResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // repeated .plaid.Category categories = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_categories_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_categories(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetCategoriesResponse)
  return target;
}

size_t GetCategoriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetCategoriesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.Category categories = 2;
  total_size += 1UL * this->_internal_categories_size();
  for (const auto& msg : this->categories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCategoriesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetCategoriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCategoriesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCategoriesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetCategoriesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetCategoriesResponse)
    MergeFrom(*source);
  }
}

void GetCategoriesResponse::MergeFrom(const GetCategoriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetCategoriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
}

void GetCategoriesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetCategoriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCategoriesResponse::CopyFrom(const GetCategoriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetCategoriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCategoriesResponse::IsInitialized() const {
  return true;
}

void GetCategoriesResponse::InternalSwap(GetCategoriesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  categories_.InternalSwap(&other->categories_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCategoriesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Error::InitAsDefaultInstance() {
}
class Error::_Internal {
 public:
};

Error::Error()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  error_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_type().empty()) {
    error_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_type_);
  }
  error_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_code().empty()) {
    error_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_code_);
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  display_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_display_message().empty()) {
    display_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_message_);
  }
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:plaid.Error)
}

void Error::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Error_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_code_ = PROTOBUF_LONGLONG(0);
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:plaid.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Error& Error::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Error_plaid_2eproto.base);
  return *internal_default_instance();
}


void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_code_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Error.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Error.error_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Error.error_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Error.error_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string display_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_display_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Error.display_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 status_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Error::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Error.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string error_type = 2;
  if (this->error_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_type().data(), static_cast<int>(this->_internal_error_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Error.error_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_type(), target);
  }

  // string error_code = 3;
  if (this->error_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_code().data(), static_cast<int>(this->_internal_error_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Error.error_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_code(), target);
  }

  // string error_message = 4;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Error.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  // string display_message = 5;
  if (this->display_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_message().data(), static_cast<int>(this->_internal_display_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Error.display_message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_display_message(), target);
  }

  // int64 status_code = 6;
  if (this->status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_status_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.Error)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string error_type = 2;
  if (this->error_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_type());
  }

  // string error_code = 3;
  if (this->error_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_code());
  }

  // string error_message = 4;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // string display_message = 5;
  if (this->display_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_message());
  }

  // int64 status_code = 6;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_status_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Error::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Error>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.Error)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.error_type().size() > 0) {

    error_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_type_);
  }
  if (from.error_code().size() > 0) {

    error_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_code_);
  }
  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.display_message().size() > 0) {

    display_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_message_);
  }
  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
}

void Error::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_type_.Swap(&other->error_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_code_.Swap(&other->error_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_message_.Swap(&other->display_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Security::InitAsDefaultInstance() {
}
class Security::_Internal {
 public:
};

Security::Security()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.Security)
}
Security::Security(const Security& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  security_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_security_id().empty()) {
    security_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.security_id_);
  }
  cusip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cusip().empty()) {
    cusip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cusip_);
  }
  sedol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sedol().empty()) {
    sedol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sedol_);
  }
  isin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_isin().empty()) {
    isin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.isin_);
  }
  institution_security_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_institution_security_id().empty()) {
    institution_security_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_security_id_);
  }
  institution_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_institution_id().empty()) {
    institution_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_id_);
  }
  proxy_security_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proxy_security_id().empty()) {
    proxy_security_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proxy_security_id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ticker_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ticker_symbol().empty()) {
    ticker_symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ticker_symbol_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  close_price_as_of_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_close_price_as_of().empty()) {
    close_price_as_of_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.close_price_as_of_);
  }
  iso_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iso_currency_code().empty()) {
    iso_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iso_currency_code_);
  }
  unofficial_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unofficial_currency_code().empty()) {
    unofficial_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unofficial_currency_code_);
  }
  ::memcpy(&close_price_, &from.close_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_cash_equivalent_) -
    reinterpret_cast<char*>(&close_price_)) + sizeof(is_cash_equivalent_));
  // @@protoc_insertion_point(copy_constructor:plaid.Security)
}

void Security::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Security_plaid_2eproto.base);
  security_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cusip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sedol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_security_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxy_security_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ticker_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  close_price_as_of_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iso_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unofficial_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&close_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_cash_equivalent_) -
      reinterpret_cast<char*>(&close_price_)) + sizeof(is_cash_equivalent_));
}

Security::~Security() {
  // @@protoc_insertion_point(destructor:plaid.Security)
  SharedDtor();
}

void Security::SharedDtor() {
  security_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cusip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sedol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_security_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxy_security_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ticker_symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  close_price_as_of_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iso_currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unofficial_currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Security::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Security& Security::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Security_plaid_2eproto.base);
  return *internal_default_instance();
}


void Security::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.Security)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  security_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cusip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sedol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_security_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxy_security_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ticker_symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  close_price_as_of_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iso_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unofficial_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&close_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_cash_equivalent_) -
      reinterpret_cast<char*>(&close_price_)) + sizeof(is_cash_equivalent_));
  _internal_metadata_.Clear();
}

const char* Security::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string security_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_security_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Security.security_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cusip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cusip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Security.cusip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sedol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sedol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Security.sedol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string isin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_isin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Security.isin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string institution_security_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_institution_security_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Security.institution_security_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string institution_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_institution_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Security.institution_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string proxy_security_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_proxy_security_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Security.proxy_security_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Security.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ticker_symbol = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_ticker_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Security.ticker_symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_cash_equivalent = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          is_cash_equivalent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Security.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double close_price = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string close_price_as_of = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_close_price_as_of();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Security.close_price_as_of"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iso_currency_code = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_iso_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Security.iso_currency_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unofficial_currency_code = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_unofficial_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Security.unofficial_currency_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Security::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.Security)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string security_id = 1;
  if (this->security_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_security_id().data(), static_cast<int>(this->_internal_security_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Security.security_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_security_id(), target);
  }

  // string cusip = 2;
  if (this->cusip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cusip().data(), static_cast<int>(this->_internal_cusip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Security.cusip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cusip(), target);
  }

  // string sedol = 3;
  if (this->sedol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sedol().data(), static_cast<int>(this->_internal_sedol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Security.sedol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sedol(), target);
  }

  // string isin = 4;
  if (this->isin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_isin().data(), static_cast<int>(this->_internal_isin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Security.isin");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_isin(), target);
  }

  // string institution_security_id = 5;
  if (this->institution_security_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_institution_security_id().data(), static_cast<int>(this->_internal_institution_security_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Security.institution_security_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_institution_security_id(), target);
  }

  // string institution_id = 6;
  if (this->institution_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_institution_id().data(), static_cast<int>(this->_internal_institution_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Security.institution_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_institution_id(), target);
  }

  // string proxy_security_id = 7;
  if (this->proxy_security_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proxy_security_id().data(), static_cast<int>(this->_internal_proxy_security_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Security.proxy_security_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_proxy_security_id(), target);
  }

  // string name = 8;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Security.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  // string ticker_symbol = 9;
  if (this->ticker_symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticker_symbol().data(), static_cast<int>(this->_internal_ticker_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Security.ticker_symbol");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ticker_symbol(), target);
  }

  // bool is_cash_equivalent = 10;
  if (this->is_cash_equivalent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_cash_equivalent(), target);
  }

  // string type = 11;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Security.type");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_type(), target);
  }

  // double close_price = 12;
  if (!(this->close_price() <= 0 && this->close_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_close_price(), target);
  }

  // string close_price_as_of = 13;
  if (this->close_price_as_of().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_close_price_as_of().data(), static_cast<int>(this->_internal_close_price_as_of().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Security.close_price_as_of");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_close_price_as_of(), target);
  }

  // string iso_currency_code = 14;
  if (this->iso_currency_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iso_currency_code().data(), static_cast<int>(this->_internal_iso_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Security.iso_currency_code");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_iso_currency_code(), target);
  }

  // string unofficial_currency_code = 15;
  if (this->unofficial_currency_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unofficial_currency_code().data(), static_cast<int>(this->_internal_unofficial_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Security.unofficial_currency_code");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_unofficial_currency_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.Security)
  return target;
}

size_t Security::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.Security)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string security_id = 1;
  if (this->security_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_security_id());
  }

  // string cusip = 2;
  if (this->cusip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cusip());
  }

  // string sedol = 3;
  if (this->sedol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sedol());
  }

  // string isin = 4;
  if (this->isin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_isin());
  }

  // string institution_security_id = 5;
  if (this->institution_security_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_institution_security_id());
  }

  // string institution_id = 6;
  if (this->institution_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_institution_id());
  }

  // string proxy_security_id = 7;
  if (this->proxy_security_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proxy_security_id());
  }

  // string name = 8;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string ticker_symbol = 9;
  if (this->ticker_symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticker_symbol());
  }

  // string type = 11;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string close_price_as_of = 13;
  if (this->close_price_as_of().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_close_price_as_of());
  }

  // string iso_currency_code = 14;
  if (this->iso_currency_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iso_currency_code());
  }

  // string unofficial_currency_code = 15;
  if (this->unofficial_currency_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unofficial_currency_code());
  }

  // double close_price = 12;
  if (!(this->close_price() <= 0 && this->close_price() >= 0)) {
    total_size += 1 + 8;
  }

  // bool is_cash_equivalent = 10;
  if (this->is_cash_equivalent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Security::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.Security)
  GOOGLE_DCHECK_NE(&from, this);
  const Security* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Security>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.Security)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.Security)
    MergeFrom(*source);
  }
}

void Security::MergeFrom(const Security& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.Security)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.security_id().size() > 0) {

    security_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.security_id_);
  }
  if (from.cusip().size() > 0) {

    cusip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cusip_);
  }
  if (from.sedol().size() > 0) {

    sedol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sedol_);
  }
  if (from.isin().size() > 0) {

    isin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.isin_);
  }
  if (from.institution_security_id().size() > 0) {

    institution_security_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_security_id_);
  }
  if (from.institution_id().size() > 0) {

    institution_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_id_);
  }
  if (from.proxy_security_id().size() > 0) {

    proxy_security_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proxy_security_id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ticker_symbol().size() > 0) {

    ticker_symbol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ticker_symbol_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.close_price_as_of().size() > 0) {

    close_price_as_of_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.close_price_as_of_);
  }
  if (from.iso_currency_code().size() > 0) {

    iso_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iso_currency_code_);
  }
  if (from.unofficial_currency_code().size() > 0) {

    unofficial_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unofficial_currency_code_);
  }
  if (!(from.close_price() <= 0 && from.close_price() >= 0)) {
    _internal_set_close_price(from._internal_close_price());
  }
  if (from.is_cash_equivalent() != 0) {
    _internal_set_is_cash_equivalent(from._internal_is_cash_equivalent());
  }
}

void Security::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.Security)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Security::CopyFrom(const Security& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.Security)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Security::IsInitialized() const {
  return true;
}

void Security::InternalSwap(Security* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  security_id_.Swap(&other->security_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cusip_.Swap(&other->cusip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sedol_.Swap(&other->sedol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  isin_.Swap(&other->isin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  institution_security_id_.Swap(&other->institution_security_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  institution_id_.Swap(&other->institution_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proxy_security_id_.Swap(&other->proxy_security_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ticker_symbol_.Swap(&other->ticker_symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  close_price_as_of_.Swap(&other->close_price_as_of_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  iso_currency_code_.Swap(&other->iso_currency_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unofficial_currency_code_.Swap(&other->unofficial_currency_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(close_price_, other->close_price_);
  swap(is_cash_equivalent_, other->is_cash_equivalent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Security::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Holding::InitAsDefaultInstance() {
}
class Holding::_Internal {
 public:
};

Holding::Holding()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.Holding)
}
Holding::Holding(const Holding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  security_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_security_id().empty()) {
    security_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.security_id_);
  }
  institution_price_as_of_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_institution_price_as_of().empty()) {
    institution_price_as_of_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_price_as_of_);
  }
  iso_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iso_currency_code().empty()) {
    iso_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iso_currency_code_);
  }
  unofficial_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unofficial_currency_code().empty()) {
    unofficial_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unofficial_currency_code_);
  }
  ::memcpy(&institution_value_, &from.institution_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_basis_) -
    reinterpret_cast<char*>(&institution_value_)) + sizeof(cost_basis_));
  // @@protoc_insertion_point(copy_constructor:plaid.Holding)
}

void Holding::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Holding_plaid_2eproto.base);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_price_as_of_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iso_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unofficial_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&institution_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_basis_) -
      reinterpret_cast<char*>(&institution_value_)) + sizeof(cost_basis_));
}

Holding::~Holding() {
  // @@protoc_insertion_point(destructor:plaid.Holding)
  SharedDtor();
}

void Holding::SharedDtor() {
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_price_as_of_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iso_currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unofficial_currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Holding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Holding& Holding::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Holding_plaid_2eproto.base);
  return *internal_default_instance();
}


void Holding::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.Holding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_price_as_of_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iso_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unofficial_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&institution_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_basis_) -
      reinterpret_cast<char*>(&institution_value_)) + sizeof(cost_basis_));
  _internal_metadata_.Clear();
}

const char* Holding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Holding.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string security_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_security_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Holding.security_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double institution_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          institution_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double institution_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          institution_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double quantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string institution_price_as_of = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_institution_price_as_of();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Holding.institution_price_as_of"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double cost_basis = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          cost_basis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string iso_currency_code = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_iso_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Holding.iso_currency_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unofficial_currency_code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_unofficial_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Holding.unofficial_currency_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Holding::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.Holding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Holding.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string security_id = 2;
  if (this->security_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_security_id().data(), static_cast<int>(this->_internal_security_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Holding.security_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_security_id(), target);
  }

  // double institution_value = 3;
  if (!(this->institution_value() <= 0 && this->institution_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_institution_value(), target);
  }

  // double institution_price = 4;
  if (!(this->institution_price() <= 0 && this->institution_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_institution_price(), target);
  }

  // double quantity = 5;
  if (!(this->quantity() <= 0 && this->quantity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_quantity(), target);
  }

  // string institution_price_as_of = 6;
  if (this->institution_price_as_of().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_institution_price_as_of().data(), static_cast<int>(this->_internal_institution_price_as_of().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Holding.institution_price_as_of");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_institution_price_as_of(), target);
  }

  // double cost_basis = 7;
  if (!(this->cost_basis() <= 0 && this->cost_basis() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_cost_basis(), target);
  }

  // string iso_currency_code = 8;
  if (this->iso_currency_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iso_currency_code().data(), static_cast<int>(this->_internal_iso_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Holding.iso_currency_code");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_iso_currency_code(), target);
  }

  // string unofficial_currency_code = 9;
  if (this->unofficial_currency_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unofficial_currency_code().data(), static_cast<int>(this->_internal_unofficial_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Holding.unofficial_currency_code");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_unofficial_currency_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.Holding)
  return target;
}

size_t Holding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.Holding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string security_id = 2;
  if (this->security_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_security_id());
  }

  // string institution_price_as_of = 6;
  if (this->institution_price_as_of().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_institution_price_as_of());
  }

  // string iso_currency_code = 8;
  if (this->iso_currency_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iso_currency_code());
  }

  // string unofficial_currency_code = 9;
  if (this->unofficial_currency_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unofficial_currency_code());
  }

  // double institution_value = 3;
  if (!(this->institution_value() <= 0 && this->institution_value() >= 0)) {
    total_size += 1 + 8;
  }

  // double institution_price = 4;
  if (!(this->institution_price() <= 0 && this->institution_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double quantity = 5;
  if (!(this->quantity() <= 0 && this->quantity() >= 0)) {
    total_size += 1 + 8;
  }

  // double cost_basis = 7;
  if (!(this->cost_basis() <= 0 && this->cost_basis() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Holding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.Holding)
  GOOGLE_DCHECK_NE(&from, this);
  const Holding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Holding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.Holding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.Holding)
    MergeFrom(*source);
  }
}

void Holding::MergeFrom(const Holding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.Holding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.security_id().size() > 0) {

    security_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.security_id_);
  }
  if (from.institution_price_as_of().size() > 0) {

    institution_price_as_of_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_price_as_of_);
  }
  if (from.iso_currency_code().size() > 0) {

    iso_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iso_currency_code_);
  }
  if (from.unofficial_currency_code().size() > 0) {

    unofficial_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unofficial_currency_code_);
  }
  if (!(from.institution_value() <= 0 && from.institution_value() >= 0)) {
    _internal_set_institution_value(from._internal_institution_value());
  }
  if (!(from.institution_price() <= 0 && from.institution_price() >= 0)) {
    _internal_set_institution_price(from._internal_institution_price());
  }
  if (!(from.quantity() <= 0 && from.quantity() >= 0)) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (!(from.cost_basis() <= 0 && from.cost_basis() >= 0)) {
    _internal_set_cost_basis(from._internal_cost_basis());
  }
}

void Holding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.Holding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Holding::CopyFrom(const Holding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.Holding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Holding::IsInitialized() const {
  return true;
}

void Holding::InternalSwap(Holding* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  security_id_.Swap(&other->security_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  institution_price_as_of_.Swap(&other->institution_price_as_of_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  iso_currency_code_.Swap(&other->iso_currency_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unofficial_currency_code_.Swap(&other->unofficial_currency_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(institution_value_, other->institution_value_);
  swap(institution_price_, other->institution_price_);
  swap(quantity_, other->quantity_);
  swap(cost_basis_, other->cost_basis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Holding::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetHoldingsRequest::InitAsDefaultInstance() {
  ::plaid::_GetHoldingsRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::plaid::GetHoldingsOptions*>(
      ::plaid::GetHoldingsOptions::internal_default_instance());
}
class GetHoldingsRequest::_Internal {
 public:
  static const ::plaid::GetHoldingsOptions& options(const GetHoldingsRequest* msg);
};

const ::plaid::GetHoldingsOptions&
GetHoldingsRequest::_Internal::options(const GetHoldingsRequest* msg) {
  return *msg->options_;
}
GetHoldingsRequest::GetHoldingsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetHoldingsRequest)
}
GetHoldingsRequest::GetHoldingsRequest(const GetHoldingsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  if (from._internal_has_options()) {
    options_ = new ::plaid::GetHoldingsOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetHoldingsRequest)
}

void GetHoldingsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetHoldingsRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  options_ = nullptr;
}

GetHoldingsRequest::~GetHoldingsRequest() {
  // @@protoc_insertion_point(destructor:plaid.GetHoldingsRequest)
  SharedDtor();
}

void GetHoldingsRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void GetHoldingsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHoldingsRequest& GetHoldingsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHoldingsRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetHoldingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetHoldingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetHoldingsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetHoldingsRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetHoldingsRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetHoldingsRequest.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.GetHoldingsOptions options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHoldingsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetHoldingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetHoldingsRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetHoldingsRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetHoldingsRequest.access_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token(), target);
  }

  // .plaid.GetHoldingsOptions options = 4;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetHoldingsRequest)
  return target;
}

size_t GetHoldingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetHoldingsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  // .plaid.GetHoldingsOptions options = 4;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHoldingsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetHoldingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHoldingsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHoldingsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetHoldingsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetHoldingsRequest)
    MergeFrom(*source);
  }
}

void GetHoldingsRequest::MergeFrom(const GetHoldingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetHoldingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  if (from.has_options()) {
    _internal_mutable_options()->::plaid::GetHoldingsOptions::MergeFrom(from._internal_options());
  }
}

void GetHoldingsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetHoldingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHoldingsRequest::CopyFrom(const GetHoldingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetHoldingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHoldingsRequest::IsInitialized() const {
  return true;
}

void GetHoldingsRequest::InternalSwap(GetHoldingsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHoldingsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetHoldingsOptions::InitAsDefaultInstance() {
}
class GetHoldingsOptions::_Internal {
 public:
};

GetHoldingsOptions::GetHoldingsOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetHoldingsOptions)
}
GetHoldingsOptions::GetHoldingsOptions(const GetHoldingsOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plaid.GetHoldingsOptions)
}

void GetHoldingsOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetHoldingsOptions_plaid_2eproto.base);
}

GetHoldingsOptions::~GetHoldingsOptions() {
  // @@protoc_insertion_point(destructor:plaid.GetHoldingsOptions)
  SharedDtor();
}

void GetHoldingsOptions::SharedDtor() {
}

void GetHoldingsOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHoldingsOptions& GetHoldingsOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHoldingsOptions_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetHoldingsOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetHoldingsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* GetHoldingsOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_account_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetHoldingsOptions.account_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHoldingsOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetHoldingsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    const auto& s = this->_internal_account_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetHoldingsOptions.account_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetHoldingsOptions)
  return target;
}

size_t GetHoldingsOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetHoldingsOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(account_ids_.size());
  for (int i = 0, n = account_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      account_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHoldingsOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetHoldingsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHoldingsOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHoldingsOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetHoldingsOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetHoldingsOptions)
    MergeFrom(*source);
  }
}

void GetHoldingsOptions::MergeFrom(const GetHoldingsOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetHoldingsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void GetHoldingsOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetHoldingsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHoldingsOptions::CopyFrom(const GetHoldingsOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetHoldingsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHoldingsOptions::IsInitialized() const {
  return true;
}

void GetHoldingsOptions::InternalSwap(GetHoldingsOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHoldingsOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetHoldingsResponse::InitAsDefaultInstance() {
  ::plaid::_GetHoldingsResponse_default_instance_._instance.get_mutable()->item_ = const_cast< ::plaid::Item*>(
      ::plaid::Item::internal_default_instance());
}
class GetHoldingsResponse::_Internal {
 public:
  static const ::plaid::Item& item(const GetHoldingsResponse* msg);
};

const ::plaid::Item&
GetHoldingsResponse::_Internal::item(const GetHoldingsResponse* msg) {
  return *msg->item_;
}
GetHoldingsResponse::GetHoldingsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetHoldingsResponse)
}
GetHoldingsResponse::GetHoldingsResponse(const GetHoldingsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      accounts_(from.accounts_),
      securities_(from.securities_),
      holdings_(from.holdings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from._internal_has_item()) {
    item_ = new ::plaid::Item(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetHoldingsResponse)
}

void GetHoldingsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetHoldingsResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_ = nullptr;
}

GetHoldingsResponse::~GetHoldingsResponse() {
  // @@protoc_insertion_point(destructor:plaid.GetHoldingsResponse)
  SharedDtor();
}

void GetHoldingsResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete item_;
}

void GetHoldingsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHoldingsResponse& GetHoldingsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHoldingsResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetHoldingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetHoldingsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  securities_.Clear();
  holdings_.Clear();
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetHoldingsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetHoldingsResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .plaid.Account accounts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .plaid.Item item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .plaid.Security securities = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_securities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .plaid.Holding holdings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_holdings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHoldingsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetHoldingsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetHoldingsResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // repeated .plaid.Account accounts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_accounts(i), target, stream);
  }

  // .plaid.Item item = 3;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::item(this), target, stream);
  }

  // repeated .plaid.Security securities = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_securities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_securities(i), target, stream);
  }

  // repeated .plaid.Holding holdings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_holdings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_holdings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetHoldingsResponse)
  return target;
}

size_t GetHoldingsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetHoldingsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.Account accounts = 2;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .plaid.Security securities = 4;
  total_size += 1UL * this->_internal_securities_size();
  for (const auto& msg : this->securities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .plaid.Holding holdings = 5;
  total_size += 1UL * this->_internal_holdings_size();
  for (const auto& msg : this->holdings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .plaid.Item item = 3;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHoldingsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetHoldingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHoldingsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHoldingsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetHoldingsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetHoldingsResponse)
    MergeFrom(*source);
  }
}

void GetHoldingsResponse::MergeFrom(const GetHoldingsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetHoldingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
  securities_.MergeFrom(from.securities_);
  holdings_.MergeFrom(from.holdings_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_item()) {
    _internal_mutable_item()->::plaid::Item::MergeFrom(from._internal_item());
  }
}

void GetHoldingsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetHoldingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHoldingsResponse::CopyFrom(const GetHoldingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetHoldingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHoldingsResponse::IsInitialized() const {
  return true;
}

void GetHoldingsResponse::InternalSwap(GetHoldingsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
  securities_.InternalSwap(&other->securities_);
  holdings_.InternalSwap(&other->holdings_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(item_, other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHoldingsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Identity::InitAsDefaultInstance() {
}
class Identity::_Internal {
 public:
};

Identity::Identity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.Identity)
}
Identity::Identity(const Identity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      addresses_(from.addresses_),
      emails_(from.emails_),
      names_(from.names_),
      phone_numbers_(from.phone_numbers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plaid.Identity)
}

void Identity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Identity_plaid_2eproto.base);
}

Identity::~Identity() {
  // @@protoc_insertion_point(destructor:plaid.Identity)
  SharedDtor();
}

void Identity::SharedDtor() {
}

void Identity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Identity& Identity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Identity_plaid_2eproto.base);
  return *internal_default_instance();
}


void Identity::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.Identity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  emails_.Clear();
  names_.Clear();
  phone_numbers_.Clear();
  _internal_metadata_.Clear();
}

const char* Identity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .plaid.Address addresses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .plaid.Email emails = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_emails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Identity.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .plaid.PhoneNumber phone_numbers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phone_numbers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Identity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.Identity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .plaid.Address addresses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_addresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_addresses(i), target, stream);
  }

  // repeated .plaid.Email emails = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_emails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_emails(i), target, stream);
  }

  // repeated string names = 3;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Identity.names");
    target = stream->WriteString(3, s, target);
  }

  // repeated .plaid.PhoneNumber phone_numbers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_phone_numbers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_phone_numbers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.Identity)
  return target;
}

size_t Identity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.Identity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.Address addresses = 1;
  total_size += 1UL * this->_internal_addresses_size();
  for (const auto& msg : this->addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .plaid.Email emails = 2;
  total_size += 1UL * this->_internal_emails_size();
  for (const auto& msg : this->emails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // repeated .plaid.PhoneNumber phone_numbers = 4;
  total_size += 1UL * this->_internal_phone_numbers_size();
  for (const auto& msg : this->phone_numbers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Identity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.Identity)
  GOOGLE_DCHECK_NE(&from, this);
  const Identity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Identity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.Identity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.Identity)
    MergeFrom(*source);
  }
}

void Identity::MergeFrom(const Identity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.Identity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
  emails_.MergeFrom(from.emails_);
  names_.MergeFrom(from.names_);
  phone_numbers_.MergeFrom(from.phone_numbers_);
}

void Identity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.Identity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identity::CopyFrom(const Identity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.Identity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identity::IsInitialized() const {
  return true;
}

void Identity::InternalSwap(Identity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addresses_.InternalSwap(&other->addresses_);
  emails_.InternalSwap(&other->emails_);
  names_.InternalSwap(&other->names_);
  phone_numbers_.InternalSwap(&other->phone_numbers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Identity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Address::InitAsDefaultInstance() {
  ::plaid::_Address_default_instance_._instance.get_mutable()->data_ = const_cast< ::plaid::AddressData*>(
      ::plaid::AddressData::internal_default_instance());
}
class Address::_Internal {
 public:
  static const ::plaid::AddressData& data(const Address* msg);
};

const ::plaid::AddressData&
Address::_Internal::data(const Address* msg) {
  return *msg->data_;
}
Address::Address()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.Address)
}
Address::Address(const Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::plaid::AddressData(*from.data_);
  } else {
    data_ = nullptr;
  }
  primary_ = from.primary_;
  // @@protoc_insertion_point(copy_constructor:plaid.Address)
}

void Address::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Address_plaid_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&data_)) + sizeof(primary_));
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:plaid.Address)
  SharedDtor();
}

void Address::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Address& Address::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Address_plaid_2eproto.base);
  return *internal_default_instance();
}


void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  primary_ = false;
  _internal_metadata_.Clear();
}

const char* Address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .plaid.AddressData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool primary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Address::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .plaid.AddressData data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // bool primary = 2;
  if (this->primary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_primary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.Address)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .plaid.AddressData data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // bool primary = 2;
  if (this->primary() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Address::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.Address)
  GOOGLE_DCHECK_NE(&from, this);
  const Address* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Address>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.Address)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::plaid::AddressData::MergeFrom(from._internal_data());
  }
  if (from.primary() != 0) {
    _internal_set_primary(from._internal_primary());
  }
}

void Address::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::InternalSwap(Address* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(primary_, other->primary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Address::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddressData::InitAsDefaultInstance() {
}
class AddressData::_Internal {
 public:
};

AddressData::AddressData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.AddressData)
}
AddressData::AddressData(const AddressData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_city().empty()) {
    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_region().empty()) {
    region_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  street_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_street().empty()) {
    street_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.street_);
  }
  postal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_postal_code().empty()) {
    postal_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.postal_code_);
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.AddressData)
}

void AddressData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddressData_plaid_2eproto.base);
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  street_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddressData::~AddressData() {
  // @@protoc_insertion_point(destructor:plaid.AddressData)
  SharedDtor();
}

void AddressData::SharedDtor() {
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  street_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddressData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddressData& AddressData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddressData_plaid_2eproto.base);
  return *internal_default_instance();
}


void AddressData::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.AddressData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  street_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AddressData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string city = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_city();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AddressData.city"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AddressData.region"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string street = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_street();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AddressData.street"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string postal_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_postal_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AddressData.postal_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AddressData.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.AddressData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string city = 1;
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AddressData.city");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_city(), target);
  }

  // string region = 2;
  if (this->region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AddressData.region");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_region(), target);
  }

  // string street = 3;
  if (this->street().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_street().data(), static_cast<int>(this->_internal_street().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AddressData.street");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_street(), target);
  }

  // string postal_code = 4;
  if (this->postal_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_postal_code().data(), static_cast<int>(this->_internal_postal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AddressData.postal_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_postal_code(), target);
  }

  // string country = 5;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AddressData.country");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.AddressData)
  return target;
}

size_t AddressData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.AddressData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string city = 1;
  if (this->city().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string region = 2;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string street = 3;
  if (this->street().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_street());
  }

  // string postal_code = 4;
  if (this->postal_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_postal_code());
  }

  // string country = 5;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddressData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.AddressData)
  GOOGLE_DCHECK_NE(&from, this);
  const AddressData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddressData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.AddressData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.AddressData)
    MergeFrom(*source);
  }
}

void AddressData::MergeFrom(const AddressData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.AddressData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.city().size() > 0) {

    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.street().size() > 0) {

    street_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.street_);
  }
  if (from.postal_code().size() > 0) {

    postal_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.postal_code_);
  }
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
}

void AddressData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.AddressData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressData::CopyFrom(const AddressData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.AddressData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressData::IsInitialized() const {
  return true;
}

void AddressData::InternalSwap(AddressData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  street_.Swap(&other->street_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  postal_code_.Swap(&other->postal_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Email::InitAsDefaultInstance() {
}
class Email::_Internal {
 public:
};

Email::Email()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.Email)
}
Email::Email(const Email& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  primary_ = from.primary_;
  // @@protoc_insertion_point(copy_constructor:plaid.Email)
}

void Email::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Email_plaid_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_ = false;
}

Email::~Email() {
  // @@protoc_insertion_point(destructor:plaid.Email)
  SharedDtor();
}

void Email::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Email::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Email& Email::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Email_plaid_2eproto.base);
  return *internal_default_instance();
}


void Email::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.Email)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_ = false;
  _internal_metadata_.Clear();
}

const char* Email::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Email.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool primary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Email.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Email::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.Email)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Email.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // bool primary = 2;
  if (this->primary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_primary(), target);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Email.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.Email)
  return target;
}

size_t Email::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.Email)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // bool primary = 2;
  if (this->primary() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Email::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.Email)
  GOOGLE_DCHECK_NE(&from, this);
  const Email* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Email>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.Email)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.Email)
    MergeFrom(*source);
  }
}

void Email::MergeFrom(const Email& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.Email)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.primary() != 0) {
    _internal_set_primary(from._internal_primary());
  }
}

void Email::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.Email)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Email::CopyFrom(const Email& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.Email)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Email::IsInitialized() const {
  return true;
}

void Email::InternalSwap(Email* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(primary_, other->primary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Email::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PhoneNumber::InitAsDefaultInstance() {
}
class PhoneNumber::_Internal {
 public:
};

PhoneNumber::PhoneNumber()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.PhoneNumber)
}
PhoneNumber::PhoneNumber(const PhoneNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  primary_ = from.primary_;
  // @@protoc_insertion_point(copy_constructor:plaid.PhoneNumber)
}

void PhoneNumber::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PhoneNumber_plaid_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_ = false;
}

PhoneNumber::~PhoneNumber() {
  // @@protoc_insertion_point(destructor:plaid.PhoneNumber)
  SharedDtor();
}

void PhoneNumber::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PhoneNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhoneNumber& PhoneNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhoneNumber_plaid_2eproto.base);
  return *internal_default_instance();
}


void PhoneNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.PhoneNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_ = false;
  _internal_metadata_.Clear();
}

const char* PhoneNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool primary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.PhoneNumber.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.PhoneNumber.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhoneNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.PhoneNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool primary = 1;
  if (this->primary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_primary(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.PhoneNumber.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.PhoneNumber.data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.PhoneNumber)
  return target;
}

size_t PhoneNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.PhoneNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // bool primary = 1;
  if (this->primary() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhoneNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.PhoneNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const PhoneNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhoneNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.PhoneNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.PhoneNumber)
    MergeFrom(*source);
  }
}

void PhoneNumber::MergeFrom(const PhoneNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.PhoneNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.primary() != 0) {
    _internal_set_primary(from._internal_primary());
  }
}

void PhoneNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.PhoneNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhoneNumber::CopyFrom(const PhoneNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.PhoneNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneNumber::IsInitialized() const {
  return true;
}

void PhoneNumber::InternalSwap(PhoneNumber* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(primary_, other->primary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhoneNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIdentityRequest::InitAsDefaultInstance() {
}
class GetIdentityRequest::_Internal {
 public:
};

GetIdentityRequest::GetIdentityRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetIdentityRequest)
}
GetIdentityRequest::GetIdentityRequest(const GetIdentityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetIdentityRequest)
}

void GetIdentityRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetIdentityRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetIdentityRequest::~GetIdentityRequest() {
  // @@protoc_insertion_point(destructor:plaid.GetIdentityRequest)
  SharedDtor();
}

void GetIdentityRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetIdentityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIdentityRequest& GetIdentityRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIdentityRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetIdentityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetIdentityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetIdentityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetIdentityRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetIdentityRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetIdentityRequest.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIdentityRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetIdentityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetIdentityRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetIdentityRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetIdentityRequest.access_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetIdentityRequest)
  return target;
}

size_t GetIdentityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetIdentityRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIdentityRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetIdentityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIdentityRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIdentityRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetIdentityRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetIdentityRequest)
    MergeFrom(*source);
  }
}

void GetIdentityRequest::MergeFrom(const GetIdentityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetIdentityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
}

void GetIdentityRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetIdentityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIdentityRequest::CopyFrom(const GetIdentityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetIdentityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIdentityRequest::IsInitialized() const {
  return true;
}

void GetIdentityRequest::InternalSwap(GetIdentityRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIdentityRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountWithOwners::InitAsDefaultInstance() {
  ::plaid::_AccountWithOwners_default_instance_._instance.get_mutable()->balances_ = const_cast< ::plaid::AccountBalances*>(
      ::plaid::AccountBalances::internal_default_instance());
}
class AccountWithOwners::_Internal {
 public:
  static const ::plaid::AccountBalances& balances(const AccountWithOwners* msg);
};

const ::plaid::AccountBalances&
AccountWithOwners::_Internal::balances(const AccountWithOwners* msg) {
  return *msg->balances_;
}
AccountWithOwners::AccountWithOwners()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.AccountWithOwners)
}
AccountWithOwners::AccountWithOwners(const AccountWithOwners& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      owners_(from.owners_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mask().empty()) {
    mask_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  official_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_official_name().empty()) {
    official_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.official_name_);
  }
  subtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subtype().empty()) {
    subtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subtype_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  verification_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_verification_status().empty()) {
    verification_status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.verification_status_);
  }
  if (from._internal_has_balances()) {
    balances_ = new ::plaid::AccountBalances(*from.balances_);
  } else {
    balances_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.AccountWithOwners)
}

void AccountWithOwners::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountWithOwners_plaid_2eproto.base);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  official_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verification_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balances_ = nullptr;
}

AccountWithOwners::~AccountWithOwners() {
  // @@protoc_insertion_point(destructor:plaid.AccountWithOwners)
  SharedDtor();
}

void AccountWithOwners::SharedDtor() {
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  official_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verification_status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete balances_;
}

void AccountWithOwners::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountWithOwners& AccountWithOwners::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountWithOwners_plaid_2eproto.base);
  return *internal_default_instance();
}


void AccountWithOwners::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.AccountWithOwners)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owners_.Clear();
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mask_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  official_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verification_status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && balances_ != nullptr) {
    delete balances_;
  }
  balances_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AccountWithOwners::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .plaid.Identity owners = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owners(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AccountWithOwners.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.AccountBalances balances = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_balances(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AccountWithOwners.mask"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AccountWithOwners.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string official_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_official_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AccountWithOwners.official_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subtype = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_subtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AccountWithOwners.subtype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AccountWithOwners.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string verification_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_verification_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.AccountWithOwners.verification_status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountWithOwners::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.AccountWithOwners)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .plaid.Identity owners = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_owners_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_owners(i), target, stream);
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AccountWithOwners.account_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account_id(), target);
  }

  // .plaid.AccountBalances balances = 3;
  if (this->has_balances()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::balances(this), target, stream);
  }

  // string mask = 4;
  if (this->mask().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mask().data(), static_cast<int>(this->_internal_mask().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AccountWithOwners.mask");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mask(), target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AccountWithOwners.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // string official_name = 6;
  if (this->official_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_official_name().data(), static_cast<int>(this->_internal_official_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AccountWithOwners.official_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_official_name(), target);
  }

  // string subtype = 7;
  if (this->subtype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subtype().data(), static_cast<int>(this->_internal_subtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AccountWithOwners.subtype");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_subtype(), target);
  }

  // string type = 8;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AccountWithOwners.type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_type(), target);
  }

  // string verification_status = 9;
  if (this->verification_status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verification_status().data(), static_cast<int>(this->_internal_verification_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.AccountWithOwners.verification_status");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_verification_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.AccountWithOwners)
  return target;
}

size_t AccountWithOwners::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.AccountWithOwners)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.Identity owners = 1;
  total_size += 1UL * this->_internal_owners_size();
  for (const auto& msg : this->owners_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string mask = 4;
  if (this->mask().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mask());
  }

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string official_name = 6;
  if (this->official_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_official_name());
  }

  // string subtype = 7;
  if (this->subtype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subtype());
  }

  // string type = 8;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string verification_status = 9;
  if (this->verification_status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verification_status());
  }

  // .plaid.AccountBalances balances = 3;
  if (this->has_balances()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *balances_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountWithOwners::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.AccountWithOwners)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountWithOwners* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountWithOwners>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.AccountWithOwners)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.AccountWithOwners)
    MergeFrom(*source);
  }
}

void AccountWithOwners::MergeFrom(const AccountWithOwners& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.AccountWithOwners)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owners_.MergeFrom(from.owners_);
  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.mask().size() > 0) {

    mask_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.official_name().size() > 0) {

    official_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.official_name_);
  }
  if (from.subtype().size() > 0) {

    subtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subtype_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.verification_status().size() > 0) {

    verification_status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.verification_status_);
  }
  if (from.has_balances()) {
    _internal_mutable_balances()->::plaid::AccountBalances::MergeFrom(from._internal_balances());
  }
}

void AccountWithOwners::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.AccountWithOwners)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountWithOwners::CopyFrom(const AccountWithOwners& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.AccountWithOwners)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountWithOwners::IsInitialized() const {
  return true;
}

void AccountWithOwners::InternalSwap(AccountWithOwners* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  owners_.InternalSwap(&other->owners_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mask_.Swap(&other->mask_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  official_name_.Swap(&other->official_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subtype_.Swap(&other->subtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  verification_status_.Swap(&other->verification_status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(balances_, other->balances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountWithOwners::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIdentityResponse::InitAsDefaultInstance() {
  ::plaid::_GetIdentityResponse_default_instance_._instance.get_mutable()->item_ = const_cast< ::plaid::Item*>(
      ::plaid::Item::internal_default_instance());
}
class GetIdentityResponse::_Internal {
 public:
  static const ::plaid::Item& item(const GetIdentityResponse* msg);
};

const ::plaid::Item&
GetIdentityResponse::_Internal::item(const GetIdentityResponse* msg) {
  return *msg->item_;
}
GetIdentityResponse::GetIdentityResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetIdentityResponse)
}
GetIdentityResponse::GetIdentityResponse(const GetIdentityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from._internal_has_item()) {
    item_ = new ::plaid::Item(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetIdentityResponse)
}

void GetIdentityResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetIdentityResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_ = nullptr;
}

GetIdentityResponse::~GetIdentityResponse() {
  // @@protoc_insertion_point(destructor:plaid.GetIdentityResponse)
  SharedDtor();
}

void GetIdentityResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete item_;
}

void GetIdentityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIdentityResponse& GetIdentityResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIdentityResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetIdentityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetIdentityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetIdentityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetIdentityResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .plaid.AccountWithOwners accounts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .plaid.Item item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIdentityResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetIdentityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetIdentityResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // repeated .plaid.AccountWithOwners accounts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_accounts(i), target, stream);
  }

  // .plaid.Item item = 3;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetIdentityResponse)
  return target;
}

size_t GetIdentityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetIdentityResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.AccountWithOwners accounts = 2;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .plaid.Item item = 3;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIdentityResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetIdentityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIdentityResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIdentityResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetIdentityResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetIdentityResponse)
    MergeFrom(*source);
  }
}

void GetIdentityResponse::MergeFrom(const GetIdentityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetIdentityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_item()) {
    _internal_mutable_item()->::plaid::Item::MergeFrom(from._internal_item());
  }
}

void GetIdentityResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetIdentityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIdentityResponse::CopyFrom(const GetIdentityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetIdentityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIdentityResponse::IsInitialized() const {
  return true;
}

void GetIdentityResponse::InternalSwap(GetIdentityResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(item_, other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIdentityResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Income::InitAsDefaultInstance() {
}
class Income::_Internal {
 public:
};

Income::Income()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.Income)
}
Income::Income(const Income& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      income_streams_(from.income_streams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_year_income_, &from.last_year_income_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_income_streams_) -
    reinterpret_cast<char*>(&last_year_income_)) + sizeof(number_of_income_streams_));
  // @@protoc_insertion_point(copy_constructor:plaid.Income)
}

void Income::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Income_plaid_2eproto.base);
  ::memset(&last_year_income_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_income_streams_) -
      reinterpret_cast<char*>(&last_year_income_)) + sizeof(number_of_income_streams_));
}

Income::~Income() {
  // @@protoc_insertion_point(destructor:plaid.Income)
  SharedDtor();
}

void Income::SharedDtor() {
}

void Income::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Income& Income::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Income_plaid_2eproto.base);
  return *internal_default_instance();
}


void Income::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.Income)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  income_streams_.Clear();
  ::memset(&last_year_income_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_income_streams_) -
      reinterpret_cast<char*>(&last_year_income_)) + sizeof(number_of_income_streams_));
  _internal_metadata_.Clear();
}

const char* Income::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .plaid.IncomeStream income_streams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_income_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 last_year_income = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          last_year_income_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_year_income_before_tax = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_year_income_before_tax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 projected_yearly_income = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          projected_yearly_income_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 projected_yearly_income_before_tax = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          projected_yearly_income_before_tax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_number_of_overlapping_income_streams = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_number_of_overlapping_income_streams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 number_of_income_streams = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          number_of_income_streams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Income::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.Income)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .plaid.IncomeStream income_streams = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_income_streams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_income_streams(i), target, stream);
  }

  // int64 last_year_income = 2;
  if (this->last_year_income() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_last_year_income(), target);
  }

  // int64 last_year_income_before_tax = 3;
  if (this->last_year_income_before_tax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_year_income_before_tax(), target);
  }

  // int64 projected_yearly_income = 4;
  if (this->projected_yearly_income() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_projected_yearly_income(), target);
  }

  // int64 projected_yearly_income_before_tax = 5;
  if (this->projected_yearly_income_before_tax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_projected_yearly_income_before_tax(), target);
  }

  // int64 max_number_of_overlapping_income_streams = 6;
  if (this->max_number_of_overlapping_income_streams() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_max_number_of_overlapping_income_streams(), target);
  }

  // int64 number_of_income_streams = 7;
  if (this->number_of_income_streams() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_number_of_income_streams(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.Income)
  return target;
}

size_t Income::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.Income)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.IncomeStream income_streams = 1;
  total_size += 1UL * this->_internal_income_streams_size();
  for (const auto& msg : this->income_streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 last_year_income = 2;
  if (this->last_year_income() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_year_income());
  }

  // int64 last_year_income_before_tax = 3;
  if (this->last_year_income_before_tax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_year_income_before_tax());
  }

  // int64 projected_yearly_income = 4;
  if (this->projected_yearly_income() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_projected_yearly_income());
  }

  // int64 projected_yearly_income_before_tax = 5;
  if (this->projected_yearly_income_before_tax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_projected_yearly_income_before_tax());
  }

  // int64 max_number_of_overlapping_income_streams = 6;
  if (this->max_number_of_overlapping_income_streams() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_number_of_overlapping_income_streams());
  }

  // int64 number_of_income_streams = 7;
  if (this->number_of_income_streams() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_number_of_income_streams());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Income::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.Income)
  GOOGLE_DCHECK_NE(&from, this);
  const Income* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Income>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.Income)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.Income)
    MergeFrom(*source);
  }
}

void Income::MergeFrom(const Income& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.Income)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  income_streams_.MergeFrom(from.income_streams_);
  if (from.last_year_income() != 0) {
    _internal_set_last_year_income(from._internal_last_year_income());
  }
  if (from.last_year_income_before_tax() != 0) {
    _internal_set_last_year_income_before_tax(from._internal_last_year_income_before_tax());
  }
  if (from.projected_yearly_income() != 0) {
    _internal_set_projected_yearly_income(from._internal_projected_yearly_income());
  }
  if (from.projected_yearly_income_before_tax() != 0) {
    _internal_set_projected_yearly_income_before_tax(from._internal_projected_yearly_income_before_tax());
  }
  if (from.max_number_of_overlapping_income_streams() != 0) {
    _internal_set_max_number_of_overlapping_income_streams(from._internal_max_number_of_overlapping_income_streams());
  }
  if (from.number_of_income_streams() != 0) {
    _internal_set_number_of_income_streams(from._internal_number_of_income_streams());
  }
}

void Income::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.Income)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Income::CopyFrom(const Income& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.Income)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Income::IsInitialized() const {
  return true;
}

void Income::InternalSwap(Income* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  income_streams_.InternalSwap(&other->income_streams_);
  swap(last_year_income_, other->last_year_income_);
  swap(last_year_income_before_tax_, other->last_year_income_before_tax_);
  swap(projected_yearly_income_, other->projected_yearly_income_);
  swap(projected_yearly_income_before_tax_, other->projected_yearly_income_before_tax_);
  swap(max_number_of_overlapping_income_streams_, other->max_number_of_overlapping_income_streams_);
  swap(number_of_income_streams_, other->number_of_income_streams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Income::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IncomeStream::InitAsDefaultInstance() {
}
class IncomeStream::_Internal {
 public:
};

IncomeStream::IncomeStream()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.IncomeStream)
}
IncomeStream::IncomeStream(const IncomeStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&monthly_income_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(monthly_income_));
  // @@protoc_insertion_point(copy_constructor:plaid.IncomeStream)
}

void IncomeStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IncomeStream_plaid_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monthly_income_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(monthly_income_));
}

IncomeStream::~IncomeStream() {
  // @@protoc_insertion_point(destructor:plaid.IncomeStream)
  SharedDtor();
}

void IncomeStream::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IncomeStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncomeStream& IncomeStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IncomeStream_plaid_2eproto.base);
  return *internal_default_instance();
}


void IncomeStream::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.IncomeStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monthly_income_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(monthly_income_));
  _internal_metadata_.Clear();
}

const char* IncomeStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 days = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 monthly_income = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          monthly_income_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.IncomeStream.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IncomeStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.IncomeStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double confidence = 1;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_confidence(), target);
  }

  // int64 days = 2;
  if (this->days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_days(), target);
  }

  // int64 monthly_income = 3;
  if (this->monthly_income() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_monthly_income(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.IncomeStream.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.IncomeStream)
  return target;
}

size_t IncomeStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.IncomeStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // double confidence = 1;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 days = 2;
  if (this->days() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_days());
  }

  // int64 monthly_income = 3;
  if (this->monthly_income() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_monthly_income());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncomeStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.IncomeStream)
  GOOGLE_DCHECK_NE(&from, this);
  const IncomeStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IncomeStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.IncomeStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.IncomeStream)
    MergeFrom(*source);
  }
}

void IncomeStream::MergeFrom(const IncomeStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.IncomeStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (from.days() != 0) {
    _internal_set_days(from._internal_days());
  }
  if (from.monthly_income() != 0) {
    _internal_set_monthly_income(from._internal_monthly_income());
  }
}

void IncomeStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.IncomeStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncomeStream::CopyFrom(const IncomeStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.IncomeStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncomeStream::IsInitialized() const {
  return true;
}

void IncomeStream::InternalSwap(IncomeStream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(confidence_, other->confidence_);
  swap(days_, other->days_);
  swap(monthly_income_, other->monthly_income_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncomeStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIncomeRequest::InitAsDefaultInstance() {
}
class GetIncomeRequest::_Internal {
 public:
};

GetIncomeRequest::GetIncomeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetIncomeRequest)
}
GetIncomeRequest::GetIncomeRequest(const GetIncomeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetIncomeRequest)
}

void GetIncomeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetIncomeRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetIncomeRequest::~GetIncomeRequest() {
  // @@protoc_insertion_point(destructor:plaid.GetIncomeRequest)
  SharedDtor();
}

void GetIncomeRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetIncomeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIncomeRequest& GetIncomeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIncomeRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetIncomeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetIncomeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetIncomeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetIncomeRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetIncomeRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetIncomeRequest.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIncomeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetIncomeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetIncomeRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetIncomeRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetIncomeRequest.access_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetIncomeRequest)
  return target;
}

size_t GetIncomeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetIncomeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIncomeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetIncomeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIncomeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIncomeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetIncomeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetIncomeRequest)
    MergeFrom(*source);
  }
}

void GetIncomeRequest::MergeFrom(const GetIncomeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetIncomeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
}

void GetIncomeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetIncomeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIncomeRequest::CopyFrom(const GetIncomeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetIncomeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIncomeRequest::IsInitialized() const {
  return true;
}

void GetIncomeRequest::InternalSwap(GetIncomeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIncomeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIncomeResponse::InitAsDefaultInstance() {
  ::plaid::_GetIncomeResponse_default_instance_._instance.get_mutable()->income_ = const_cast< ::plaid::Income*>(
      ::plaid::Income::internal_default_instance());
}
class GetIncomeResponse::_Internal {
 public:
  static const ::plaid::Income& income(const GetIncomeResponse* msg);
};

const ::plaid::Income&
GetIncomeResponse::_Internal::income(const GetIncomeResponse* msg) {
  return *msg->income_;
}
GetIncomeResponse::GetIncomeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetIncomeResponse)
}
GetIncomeResponse::GetIncomeResponse(const GetIncomeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from._internal_has_income()) {
    income_ = new ::plaid::Income(*from.income_);
  } else {
    income_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetIncomeResponse)
}

void GetIncomeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetIncomeResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  income_ = nullptr;
}

GetIncomeResponse::~GetIncomeResponse() {
  // @@protoc_insertion_point(destructor:plaid.GetIncomeResponse)
  SharedDtor();
}

void GetIncomeResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete income_;
}

void GetIncomeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIncomeResponse& GetIncomeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIncomeResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetIncomeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetIncomeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && income_ != nullptr) {
    delete income_;
  }
  income_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetIncomeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetIncomeResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.Income income = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_income(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIncomeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetIncomeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetIncomeResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // .plaid.Income income = 2;
  if (this->has_income()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::income(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetIncomeResponse)
  return target;
}

size_t GetIncomeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetIncomeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .plaid.Income income = 2;
  if (this->has_income()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *income_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIncomeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetIncomeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIncomeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIncomeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetIncomeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetIncomeResponse)
    MergeFrom(*source);
  }
}

void GetIncomeResponse::MergeFrom(const GetIncomeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetIncomeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_income()) {
    _internal_mutable_income()->::plaid::Income::MergeFrom(from._internal_income());
  }
}

void GetIncomeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetIncomeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIncomeResponse::CopyFrom(const GetIncomeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetIncomeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIncomeResponse::IsInitialized() const {
  return true;
}

void GetIncomeResponse::InternalSwap(GetIncomeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(income_, other->income_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIncomeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Institution::InitAsDefaultInstance() {
  ::plaid::_Institution_default_instance_._instance.get_mutable()->status_ = const_cast< ::plaid::InstitutionStatus*>(
      ::plaid::InstitutionStatus::internal_default_instance());
}
class Institution::_Internal {
 public:
  static const ::plaid::InstitutionStatus& status(const Institution* msg);
};

const ::plaid::InstitutionStatus&
Institution::_Internal::status(const Institution* msg) {
  return *msg->status_;
}
Institution::Institution()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.Institution)
}
Institution::Institution(const Institution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      credentials_(from.credentials_),
      mfa_(from.mfa_),
      products_(from.products_),
      country_codes_(from.country_codes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  institution_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_institution_id().empty()) {
    institution_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  primary_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_primary_color().empty()) {
    primary_color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.primary_color_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logo().empty()) {
    logo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logo_);
  }
  if (from._internal_has_status()) {
    status_ = new ::plaid::InstitutionStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  has_mfa_ = from.has_mfa_;
  // @@protoc_insertion_point(copy_constructor:plaid.Institution)
}

void Institution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Institution_plaid_2eproto.base);
  institution_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_mfa_) -
      reinterpret_cast<char*>(&status_)) + sizeof(has_mfa_));
}

Institution::~Institution() {
  // @@protoc_insertion_point(destructor:plaid.Institution)
  SharedDtor();
}

void Institution::SharedDtor() {
  institution_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void Institution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Institution& Institution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Institution_plaid_2eproto.base);
  return *internal_default_instance();
}


void Institution::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.Institution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  credentials_.Clear();
  mfa_.Clear();
  products_.Clear();
  country_codes_.Clear();
  institution_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  has_mfa_ = false;
  _internal_metadata_.Clear();
}

const char* Institution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .plaid.Credential credentials = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_credentials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool has_mfa = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          has_mfa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string institution_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_institution_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Institution.institution_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string mfa = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mfa();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Institution.mfa"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Institution.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string products = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_products();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Institution.products"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string country_codes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_country_codes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Institution.country_codes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .plaid.InstitutionStatus status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string primary_color = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_primary_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Institution.primary_color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Institution.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string logo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_logo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Institution.logo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Institution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.Institution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .plaid.Credential credentials = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_credentials_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_credentials(i), target, stream);
  }

  // bool has_mfa = 2;
  if (this->has_mfa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_has_mfa(), target);
  }

  // string institution_id = 3;
  if (this->institution_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_institution_id().data(), static_cast<int>(this->_internal_institution_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Institution.institution_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_institution_id(), target);
  }

  // repeated string mfa = 4;
  for (int i = 0, n = this->_internal_mfa_size(); i < n; i++) {
    const auto& s = this->_internal_mfa(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Institution.mfa");
    target = stream->WriteString(4, s, target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Institution.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // repeated string products = 6;
  for (int i = 0, n = this->_internal_products_size(); i < n; i++) {
    const auto& s = this->_internal_products(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Institution.products");
    target = stream->WriteString(6, s, target);
  }

  // repeated string country_codes = 7;
  for (int i = 0, n = this->_internal_country_codes_size(); i < n; i++) {
    const auto& s = this->_internal_country_codes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Institution.country_codes");
    target = stream->WriteString(7, s, target);
  }

  // .plaid.InstitutionStatus status = 8;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::status(this), target, stream);
  }

  // string primary_color = 9;
  if (this->primary_color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_primary_color().data(), static_cast<int>(this->_internal_primary_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Institution.primary_color");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_primary_color(), target);
  }

  // string url = 10;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Institution.url");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_url(), target);
  }

  // string logo = 11;
  if (this->logo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logo().data(), static_cast<int>(this->_internal_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Institution.logo");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_logo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.Institution)
  return target;
}

size_t Institution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.Institution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.Credential credentials = 1;
  total_size += 1UL * this->_internal_credentials_size();
  for (const auto& msg : this->credentials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string mfa = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(mfa_.size());
  for (int i = 0, n = mfa_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      mfa_.Get(i));
  }

  // repeated string products = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(products_.size());
  for (int i = 0, n = products_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      products_.Get(i));
  }

  // repeated string country_codes = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(country_codes_.size());
  for (int i = 0, n = country_codes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      country_codes_.Get(i));
  }

  // string institution_id = 3;
  if (this->institution_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_institution_id());
  }

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string primary_color = 9;
  if (this->primary_color().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_primary_color());
  }

  // string url = 10;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string logo = 11;
  if (this->logo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logo());
  }

  // .plaid.InstitutionStatus status = 8;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // bool has_mfa = 2;
  if (this->has_mfa() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Institution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.Institution)
  GOOGLE_DCHECK_NE(&from, this);
  const Institution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Institution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.Institution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.Institution)
    MergeFrom(*source);
  }
}

void Institution::MergeFrom(const Institution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.Institution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  credentials_.MergeFrom(from.credentials_);
  mfa_.MergeFrom(from.mfa_);
  products_.MergeFrom(from.products_);
  country_codes_.MergeFrom(from.country_codes_);
  if (from.institution_id().size() > 0) {

    institution_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.primary_color().size() > 0) {

    primary_color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.primary_color_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.logo().size() > 0) {

    logo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logo_);
  }
  if (from.has_status()) {
    _internal_mutable_status()->::plaid::InstitutionStatus::MergeFrom(from._internal_status());
  }
  if (from.has_mfa() != 0) {
    _internal_set_has_mfa(from._internal_has_mfa());
  }
}

void Institution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.Institution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Institution::CopyFrom(const Institution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.Institution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Institution::IsInitialized() const {
  return true;
}

void Institution::InternalSwap(Institution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  credentials_.InternalSwap(&other->credentials_);
  mfa_.InternalSwap(&other->mfa_);
  products_.InternalSwap(&other->products_);
  country_codes_.InternalSwap(&other->country_codes_);
  institution_id_.Swap(&other->institution_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  primary_color_.Swap(&other->primary_color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  logo_.Swap(&other->logo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(has_mfa_, other->has_mfa_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Institution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstitutionStatus::InitAsDefaultInstance() {
  ::plaid::_InstitutionStatus_default_instance_._instance.get_mutable()->item_logins_ = const_cast< ::plaid::ItemLogins*>(
      ::plaid::ItemLogins::internal_default_instance());
}
class InstitutionStatus::_Internal {
 public:
  static const ::plaid::ItemLogins& item_logins(const InstitutionStatus* msg);
};

const ::plaid::ItemLogins&
InstitutionStatus::_Internal::item_logins(const InstitutionStatus* msg) {
  return *msg->item_logins_;
}
InstitutionStatus::InstitutionStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.InstitutionStatus)
}
InstitutionStatus::InstitutionStatus(const InstitutionStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_item_logins()) {
    item_logins_ = new ::plaid::ItemLogins(*from.item_logins_);
  } else {
    item_logins_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.InstitutionStatus)
}

void InstitutionStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstitutionStatus_plaid_2eproto.base);
  item_logins_ = nullptr;
}

InstitutionStatus::~InstitutionStatus() {
  // @@protoc_insertion_point(destructor:plaid.InstitutionStatus)
  SharedDtor();
}

void InstitutionStatus::SharedDtor() {
  if (this != internal_default_instance()) delete item_logins_;
}

void InstitutionStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstitutionStatus& InstitutionStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstitutionStatus_plaid_2eproto.base);
  return *internal_default_instance();
}


void InstitutionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.InstitutionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && item_logins_ != nullptr) {
    delete item_logins_;
  }
  item_logins_ = nullptr;
  _internal_metadata_.Clear();
}

const char* InstitutionStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .plaid.ItemLogins item_logins = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_logins(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstitutionStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.InstitutionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .plaid.ItemLogins item_logins = 1;
  if (this->has_item_logins()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::item_logins(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.InstitutionStatus)
  return target;
}

size_t InstitutionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.InstitutionStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .plaid.ItemLogins item_logins = 1;
  if (this->has_item_logins()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_logins_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstitutionStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.InstitutionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const InstitutionStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstitutionStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.InstitutionStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.InstitutionStatus)
    MergeFrom(*source);
  }
}

void InstitutionStatus::MergeFrom(const InstitutionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.InstitutionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item_logins()) {
    _internal_mutable_item_logins()->::plaid::ItemLogins::MergeFrom(from._internal_item_logins());
  }
}

void InstitutionStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.InstitutionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstitutionStatus::CopyFrom(const InstitutionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.InstitutionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstitutionStatus::IsInitialized() const {
  return true;
}

void InstitutionStatus::InternalSwap(InstitutionStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(item_logins_, other->item_logins_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstitutionStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ItemLogins::InitAsDefaultInstance() {
  ::plaid::_ItemLogins_default_instance_._instance.get_mutable()->breakdown_ = const_cast< ::plaid::InstitutionStatusBreakdown*>(
      ::plaid::InstitutionStatusBreakdown::internal_default_instance());
}
class ItemLogins::_Internal {
 public:
  static const ::plaid::InstitutionStatusBreakdown& breakdown(const ItemLogins* msg);
};

const ::plaid::InstitutionStatusBreakdown&
ItemLogins::_Internal::breakdown(const ItemLogins* msg) {
  return *msg->breakdown_;
}
ItemLogins::ItemLogins()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.ItemLogins)
}
ItemLogins::ItemLogins(const ItemLogins& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  last_status_change_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_status_change().empty()) {
    last_status_change_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_status_change_);
  }
  if (from._internal_has_breakdown()) {
    breakdown_ = new ::plaid::InstitutionStatusBreakdown(*from.breakdown_);
  } else {
    breakdown_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.ItemLogins)
}

void ItemLogins::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ItemLogins_plaid_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_status_change_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  breakdown_ = nullptr;
}

ItemLogins::~ItemLogins() {
  // @@protoc_insertion_point(destructor:plaid.ItemLogins)
  SharedDtor();
}

void ItemLogins::SharedDtor() {
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_status_change_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete breakdown_;
}

void ItemLogins::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemLogins& ItemLogins::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemLogins_plaid_2eproto.base);
  return *internal_default_instance();
}


void ItemLogins::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.ItemLogins)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_status_change_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && breakdown_ != nullptr) {
    delete breakdown_;
  }
  breakdown_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ItemLogins::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ItemLogins.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_status_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_last_status_change();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ItemLogins.last_status_change"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.InstitutionStatusBreakdown breakdown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_breakdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemLogins::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.ItemLogins)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ItemLogins.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  // string last_status_change = 2;
  if (this->last_status_change().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_status_change().data(), static_cast<int>(this->_internal_last_status_change().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ItemLogins.last_status_change");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_last_status_change(), target);
  }

  // .plaid.InstitutionStatusBreakdown breakdown = 3;
  if (this->has_breakdown()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::breakdown(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.ItemLogins)
  return target;
}

size_t ItemLogins::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.ItemLogins)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string last_status_change = 2;
  if (this->last_status_change().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_status_change());
  }

  // .plaid.InstitutionStatusBreakdown breakdown = 3;
  if (this->has_breakdown()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *breakdown_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemLogins::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.ItemLogins)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemLogins* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemLogins>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.ItemLogins)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.ItemLogins)
    MergeFrom(*source);
  }
}

void ItemLogins::MergeFrom(const ItemLogins& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.ItemLogins)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.last_status_change().size() > 0) {

    last_status_change_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_status_change_);
  }
  if (from.has_breakdown()) {
    _internal_mutable_breakdown()->::plaid::InstitutionStatusBreakdown::MergeFrom(from._internal_breakdown());
  }
}

void ItemLogins::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.ItemLogins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemLogins::CopyFrom(const ItemLogins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.ItemLogins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemLogins::IsInitialized() const {
  return true;
}

void ItemLogins::InternalSwap(ItemLogins* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_status_change_.Swap(&other->last_status_change_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(breakdown_, other->breakdown_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemLogins::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstitutionStatusBreakdown::InitAsDefaultInstance() {
}
class InstitutionStatusBreakdown::_Internal {
 public:
};

InstitutionStatusBreakdown::InstitutionStatusBreakdown()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.InstitutionStatusBreakdown)
}
InstitutionStatusBreakdown::InstitutionStatusBreakdown(const InstitutionStatusBreakdown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_institution_) -
    reinterpret_cast<char*>(&success_)) + sizeof(error_institution_));
  // @@protoc_insertion_point(copy_constructor:plaid.InstitutionStatusBreakdown)
}

void InstitutionStatusBreakdown::SharedCtor() {
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_institution_) -
      reinterpret_cast<char*>(&success_)) + sizeof(error_institution_));
}

InstitutionStatusBreakdown::~InstitutionStatusBreakdown() {
  // @@protoc_insertion_point(destructor:plaid.InstitutionStatusBreakdown)
  SharedDtor();
}

void InstitutionStatusBreakdown::SharedDtor() {
}

void InstitutionStatusBreakdown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstitutionStatusBreakdown& InstitutionStatusBreakdown::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstitutionStatusBreakdown_plaid_2eproto.base);
  return *internal_default_instance();
}


void InstitutionStatusBreakdown::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.InstitutionStatusBreakdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_institution_) -
      reinterpret_cast<char*>(&success_)) + sizeof(error_institution_));
  _internal_metadata_.Clear();
}

const char* InstitutionStatusBreakdown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double error_plaid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          error_plaid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double error_institution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          error_institution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstitutionStatusBreakdown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.InstitutionStatusBreakdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double success = 1;
  if (!(this->success() <= 0 && this->success() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_success(), target);
  }

  // double error_plaid = 2;
  if (!(this->error_plaid() <= 0 && this->error_plaid() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_error_plaid(), target);
  }

  // double error_institution = 3;
  if (!(this->error_institution() <= 0 && this->error_institution() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_error_institution(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.InstitutionStatusBreakdown)
  return target;
}

size_t InstitutionStatusBreakdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.InstitutionStatusBreakdown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double success = 1;
  if (!(this->success() <= 0 && this->success() >= 0)) {
    total_size += 1 + 8;
  }

  // double error_plaid = 2;
  if (!(this->error_plaid() <= 0 && this->error_plaid() >= 0)) {
    total_size += 1 + 8;
  }

  // double error_institution = 3;
  if (!(this->error_institution() <= 0 && this->error_institution() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstitutionStatusBreakdown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.InstitutionStatusBreakdown)
  GOOGLE_DCHECK_NE(&from, this);
  const InstitutionStatusBreakdown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstitutionStatusBreakdown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.InstitutionStatusBreakdown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.InstitutionStatusBreakdown)
    MergeFrom(*source);
  }
}

void InstitutionStatusBreakdown::MergeFrom(const InstitutionStatusBreakdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.InstitutionStatusBreakdown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.success() <= 0 && from.success() >= 0)) {
    _internal_set_success(from._internal_success());
  }
  if (!(from.error_plaid() <= 0 && from.error_plaid() >= 0)) {
    _internal_set_error_plaid(from._internal_error_plaid());
  }
  if (!(from.error_institution() <= 0 && from.error_institution() >= 0)) {
    _internal_set_error_institution(from._internal_error_institution());
  }
}

void InstitutionStatusBreakdown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.InstitutionStatusBreakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstitutionStatusBreakdown::CopyFrom(const InstitutionStatusBreakdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.InstitutionStatusBreakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstitutionStatusBreakdown::IsInitialized() const {
  return true;
}

void InstitutionStatusBreakdown::InternalSwap(InstitutionStatusBreakdown* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
  swap(error_plaid_, other->error_plaid_);
  swap(error_institution_, other->error_institution_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstitutionStatusBreakdown::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Credential::InitAsDefaultInstance() {
}
class Credential::_Internal {
 public:
};

Credential::Credential()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.Credential)
}
Credential::Credential(const Credential& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.Credential)
}

void Credential::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Credential_plaid_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Credential::~Credential() {
  // @@protoc_insertion_point(destructor:plaid.Credential)
  SharedDtor();
}

void Credential::SharedDtor() {
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Credential::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Credential& Credential::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Credential_plaid_2eproto.base);
  return *internal_default_instance();
}


void Credential::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.Credential)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Credential::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Credential.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Credential.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Credential.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Credential::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.Credential)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Credential.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Credential.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Credential.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.Credential)
  return target;
}

size_t Credential::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.Credential)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 1;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Credential::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.Credential)
  GOOGLE_DCHECK_NE(&from, this);
  const Credential* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Credential>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.Credential)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.Credential)
    MergeFrom(*source);
  }
}

void Credential::MergeFrom(const Credential& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.Credential)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.label().size() > 0) {

    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void Credential::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.Credential)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Credential::CopyFrom(const Credential& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.Credential)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Credential::IsInitialized() const {
  return true;
}

void Credential::InternalSwap(Credential* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Credential::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInstitutionsRequest::InitAsDefaultInstance() {
  ::plaid::_GetInstitutionsRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::plaid::GetInstitutionsOptions*>(
      ::plaid::GetInstitutionsOptions::internal_default_instance());
}
class GetInstitutionsRequest::_Internal {
 public:
  static const ::plaid::GetInstitutionsOptions& options(const GetInstitutionsRequest* msg);
};

const ::plaid::GetInstitutionsOptions&
GetInstitutionsRequest::_Internal::options(const GetInstitutionsRequest* msg) {
  return *msg->options_;
}
GetInstitutionsRequest::GetInstitutionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetInstitutionsRequest)
}
GetInstitutionsRequest::GetInstitutionsRequest(const GetInstitutionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from._internal_has_options()) {
    options_ = new ::plaid::GetInstitutionsOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&count_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:plaid.GetInstitutionsRequest)
}

void GetInstitutionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInstitutionsRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&options_)) + sizeof(offset_));
}

GetInstitutionsRequest::~GetInstitutionsRequest() {
  // @@protoc_insertion_point(destructor:plaid.GetInstitutionsRequest)
  SharedDtor();
}

void GetInstitutionsRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void GetInstitutionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInstitutionsRequest& GetInstitutionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInstitutionsRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetInstitutionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetInstitutionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&count_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

const char* GetInstitutionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInstitutionsRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInstitutionsRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.GetInstitutionsOptions options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInstitutionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetInstitutionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInstitutionsRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInstitutionsRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // int64 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_count(), target);
  }

  // int64 offset = 4;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_offset(), target);
  }

  // .plaid.GetInstitutionsOptions options = 5;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetInstitutionsRequest)
  return target;
}

size_t GetInstitutionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetInstitutionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // .plaid.GetInstitutionsOptions options = 5;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // int64 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  // int64 offset = 4;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInstitutionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetInstitutionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInstitutionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInstitutionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetInstitutionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetInstitutionsRequest)
    MergeFrom(*source);
  }
}

void GetInstitutionsRequest::MergeFrom(const GetInstitutionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetInstitutionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.has_options()) {
    _internal_mutable_options()->::plaid::GetInstitutionsOptions::MergeFrom(from._internal_options());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void GetInstitutionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetInstitutionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstitutionsRequest::CopyFrom(const GetInstitutionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetInstitutionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstitutionsRequest::IsInitialized() const {
  return true;
}

void GetInstitutionsRequest::InternalSwap(GetInstitutionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
  swap(count_, other->count_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInstitutionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInstitutionsOptions::InitAsDefaultInstance() {
}
class GetInstitutionsOptions::_Internal {
 public:
};

GetInstitutionsOptions::GetInstitutionsOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetInstitutionsOptions)
}
GetInstitutionsOptions::GetInstitutionsOptions(const GetInstitutionsOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      products_(from.products_),
      country_codes_(from.country_codes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  include_optional_metadata_ = from.include_optional_metadata_;
  // @@protoc_insertion_point(copy_constructor:plaid.GetInstitutionsOptions)
}

void GetInstitutionsOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInstitutionsOptions_plaid_2eproto.base);
  include_optional_metadata_ = false;
}

GetInstitutionsOptions::~GetInstitutionsOptions() {
  // @@protoc_insertion_point(destructor:plaid.GetInstitutionsOptions)
  SharedDtor();
}

void GetInstitutionsOptions::SharedDtor() {
}

void GetInstitutionsOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInstitutionsOptions& GetInstitutionsOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInstitutionsOptions_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetInstitutionsOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetInstitutionsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  products_.Clear();
  country_codes_.Clear();
  include_optional_metadata_ = false;
  _internal_metadata_.Clear();
}

const char* GetInstitutionsOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string products = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_products();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInstitutionsOptions.products"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool include_optional_metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          include_optional_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string country_codes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_country_codes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInstitutionsOptions.country_codes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInstitutionsOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetInstitutionsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string products = 1;
  for (int i = 0, n = this->_internal_products_size(); i < n; i++) {
    const auto& s = this->_internal_products(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInstitutionsOptions.products");
    target = stream->WriteString(1, s, target);
  }

  // bool include_optional_metadata = 2;
  if (this->include_optional_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_include_optional_metadata(), target);
  }

  // repeated string country_codes = 3;
  for (int i = 0, n = this->_internal_country_codes_size(); i < n; i++) {
    const auto& s = this->_internal_country_codes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInstitutionsOptions.country_codes");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetInstitutionsOptions)
  return target;
}

size_t GetInstitutionsOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetInstitutionsOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string products = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(products_.size());
  for (int i = 0, n = products_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      products_.Get(i));
  }

  // repeated string country_codes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(country_codes_.size());
  for (int i = 0, n = country_codes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      country_codes_.Get(i));
  }

  // bool include_optional_metadata = 2;
  if (this->include_optional_metadata() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInstitutionsOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetInstitutionsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInstitutionsOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInstitutionsOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetInstitutionsOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetInstitutionsOptions)
    MergeFrom(*source);
  }
}

void GetInstitutionsOptions::MergeFrom(const GetInstitutionsOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetInstitutionsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  products_.MergeFrom(from.products_);
  country_codes_.MergeFrom(from.country_codes_);
  if (from.include_optional_metadata() != 0) {
    _internal_set_include_optional_metadata(from._internal_include_optional_metadata());
  }
}

void GetInstitutionsOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetInstitutionsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstitutionsOptions::CopyFrom(const GetInstitutionsOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetInstitutionsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstitutionsOptions::IsInitialized() const {
  return true;
}

void GetInstitutionsOptions::InternalSwap(GetInstitutionsOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  products_.InternalSwap(&other->products_);
  country_codes_.InternalSwap(&other->country_codes_);
  swap(include_optional_metadata_, other->include_optional_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInstitutionsOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInstitutionsResponse::InitAsDefaultInstance() {
}
class GetInstitutionsResponse::_Internal {
 public:
};

GetInstitutionsResponse::GetInstitutionsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetInstitutionsResponse)
}
GetInstitutionsResponse::GetInstitutionsResponse(const GetInstitutionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      institutions_(from.institutions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:plaid.GetInstitutionsResponse)
}

void GetInstitutionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInstitutionsResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_ = PROTOBUF_LONGLONG(0);
}

GetInstitutionsResponse::~GetInstitutionsResponse() {
  // @@protoc_insertion_point(destructor:plaid.GetInstitutionsResponse)
  SharedDtor();
}

void GetInstitutionsResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetInstitutionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInstitutionsResponse& GetInstitutionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInstitutionsResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetInstitutionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetInstitutionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  institutions_.Clear();
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GetInstitutionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInstitutionsResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .plaid.Institution institutions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_institutions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInstitutionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetInstitutionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInstitutionsResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // repeated .plaid.Institution institutions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_institutions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_institutions(i), target, stream);
  }

  // int64 total = 3;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetInstitutionsResponse)
  return target;
}

size_t GetInstitutionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetInstitutionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.Institution institutions = 2;
  total_size += 1UL * this->_internal_institutions_size();
  for (const auto& msg : this->institutions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // int64 total = 3;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInstitutionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetInstitutionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInstitutionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInstitutionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetInstitutionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetInstitutionsResponse)
    MergeFrom(*source);
  }
}

void GetInstitutionsResponse::MergeFrom(const GetInstitutionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetInstitutionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  institutions_.MergeFrom(from.institutions_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
}

void GetInstitutionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetInstitutionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstitutionsResponse::CopyFrom(const GetInstitutionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetInstitutionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstitutionsResponse::IsInitialized() const {
  return true;
}

void GetInstitutionsResponse::InternalSwap(GetInstitutionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  institutions_.InternalSwap(&other->institutions_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInstitutionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInstitutionByIDRequest::InitAsDefaultInstance() {
  ::plaid::_GetInstitutionByIDRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::plaid::GetInstitutionByIDOptions*>(
      ::plaid::GetInstitutionByIDOptions::internal_default_instance());
}
class GetInstitutionByIDRequest::_Internal {
 public:
  static const ::plaid::GetInstitutionByIDOptions& options(const GetInstitutionByIDRequest* msg);
};

const ::plaid::GetInstitutionByIDOptions&
GetInstitutionByIDRequest::_Internal::options(const GetInstitutionByIDRequest* msg) {
  return *msg->options_;
}
GetInstitutionByIDRequest::GetInstitutionByIDRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetInstitutionByIDRequest)
}
GetInstitutionByIDRequest::GetInstitutionByIDRequest(const GetInstitutionByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  institution_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_institution_id().empty()) {
    institution_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_id_);
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from._internal_has_options()) {
    options_ = new ::plaid::GetInstitutionByIDOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetInstitutionByIDRequest)
}

void GetInstitutionByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInstitutionByIDRequest_plaid_2eproto.base);
  institution_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  options_ = nullptr;
}

GetInstitutionByIDRequest::~GetInstitutionByIDRequest() {
  // @@protoc_insertion_point(destructor:plaid.GetInstitutionByIDRequest)
  SharedDtor();
}

void GetInstitutionByIDRequest::SharedDtor() {
  institution_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void GetInstitutionByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInstitutionByIDRequest& GetInstitutionByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInstitutionByIDRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetInstitutionByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetInstitutionByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  institution_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetInstitutionByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string institution_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_institution_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInstitutionByIDRequest.institution_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInstitutionByIDRequest.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.GetInstitutionByIDOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInstitutionByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetInstitutionByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string institution_id = 1;
  if (this->institution_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_institution_id().data(), static_cast<int>(this->_internal_institution_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInstitutionByIDRequest.institution_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_institution_id(), target);
  }

  // string public_key = 2;
  if (this->public_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInstitutionByIDRequest.public_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_public_key(), target);
  }

  // .plaid.GetInstitutionByIDOptions options = 3;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetInstitutionByIDRequest)
  return target;
}

size_t GetInstitutionByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetInstitutionByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string institution_id = 1;
  if (this->institution_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_institution_id());
  }

  // string public_key = 2;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // .plaid.GetInstitutionByIDOptions options = 3;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInstitutionByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetInstitutionByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInstitutionByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInstitutionByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetInstitutionByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetInstitutionByIDRequest)
    MergeFrom(*source);
  }
}

void GetInstitutionByIDRequest::MergeFrom(const GetInstitutionByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetInstitutionByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.institution_id().size() > 0) {

    institution_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_id_);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.has_options()) {
    _internal_mutable_options()->::plaid::GetInstitutionByIDOptions::MergeFrom(from._internal_options());
  }
}

void GetInstitutionByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetInstitutionByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstitutionByIDRequest::CopyFrom(const GetInstitutionByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetInstitutionByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstitutionByIDRequest::IsInitialized() const {
  return true;
}

void GetInstitutionByIDRequest::InternalSwap(GetInstitutionByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  institution_id_.Swap(&other->institution_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInstitutionByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInstitutionByIDOptions::InitAsDefaultInstance() {
}
class GetInstitutionByIDOptions::_Internal {
 public:
};

GetInstitutionByIDOptions::GetInstitutionByIDOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetInstitutionByIDOptions)
}
GetInstitutionByIDOptions::GetInstitutionByIDOptions(const GetInstitutionByIDOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&include_optional_metadata_, &from.include_optional_metadata_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_status_) -
    reinterpret_cast<char*>(&include_optional_metadata_)) + sizeof(include_status_));
  // @@protoc_insertion_point(copy_constructor:plaid.GetInstitutionByIDOptions)
}

void GetInstitutionByIDOptions::SharedCtor() {
  ::memset(&include_optional_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_status_) -
      reinterpret_cast<char*>(&include_optional_metadata_)) + sizeof(include_status_));
}

GetInstitutionByIDOptions::~GetInstitutionByIDOptions() {
  // @@protoc_insertion_point(destructor:plaid.GetInstitutionByIDOptions)
  SharedDtor();
}

void GetInstitutionByIDOptions::SharedDtor() {
}

void GetInstitutionByIDOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInstitutionByIDOptions& GetInstitutionByIDOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInstitutionByIDOptions_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetInstitutionByIDOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetInstitutionByIDOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&include_optional_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_status_) -
      reinterpret_cast<char*>(&include_optional_metadata_)) + sizeof(include_status_));
  _internal_metadata_.Clear();
}

const char* GetInstitutionByIDOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool include_optional_metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          include_optional_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          include_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInstitutionByIDOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetInstitutionByIDOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool include_optional_metadata = 1;
  if (this->include_optional_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_include_optional_metadata(), target);
  }

  // bool include_status = 2;
  if (this->include_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_include_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetInstitutionByIDOptions)
  return target;
}

size_t GetInstitutionByIDOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetInstitutionByIDOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool include_optional_metadata = 1;
  if (this->include_optional_metadata() != 0) {
    total_size += 1 + 1;
  }

  // bool include_status = 2;
  if (this->include_status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInstitutionByIDOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetInstitutionByIDOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInstitutionByIDOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInstitutionByIDOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetInstitutionByIDOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetInstitutionByIDOptions)
    MergeFrom(*source);
  }
}

void GetInstitutionByIDOptions::MergeFrom(const GetInstitutionByIDOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetInstitutionByIDOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.include_optional_metadata() != 0) {
    _internal_set_include_optional_metadata(from._internal_include_optional_metadata());
  }
  if (from.include_status() != 0) {
    _internal_set_include_status(from._internal_include_status());
  }
}

void GetInstitutionByIDOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetInstitutionByIDOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstitutionByIDOptions::CopyFrom(const GetInstitutionByIDOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetInstitutionByIDOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstitutionByIDOptions::IsInitialized() const {
  return true;
}

void GetInstitutionByIDOptions::InternalSwap(GetInstitutionByIDOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(include_optional_metadata_, other->include_optional_metadata_);
  swap(include_status_, other->include_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInstitutionByIDOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInstitutionByIDResponse::InitAsDefaultInstance() {
  ::plaid::_GetInstitutionByIDResponse_default_instance_._instance.get_mutable()->institution_ = const_cast< ::plaid::Institution*>(
      ::plaid::Institution::internal_default_instance());
}
class GetInstitutionByIDResponse::_Internal {
 public:
  static const ::plaid::Institution& institution(const GetInstitutionByIDResponse* msg);
};

const ::plaid::Institution&
GetInstitutionByIDResponse::_Internal::institution(const GetInstitutionByIDResponse* msg) {
  return *msg->institution_;
}
GetInstitutionByIDResponse::GetInstitutionByIDResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetInstitutionByIDResponse)
}
GetInstitutionByIDResponse::GetInstitutionByIDResponse(const GetInstitutionByIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from._internal_has_institution()) {
    institution_ = new ::plaid::Institution(*from.institution_);
  } else {
    institution_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetInstitutionByIDResponse)
}

void GetInstitutionByIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInstitutionByIDResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  institution_ = nullptr;
}

GetInstitutionByIDResponse::~GetInstitutionByIDResponse() {
  // @@protoc_insertion_point(destructor:plaid.GetInstitutionByIDResponse)
  SharedDtor();
}

void GetInstitutionByIDResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete institution_;
}

void GetInstitutionByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInstitutionByIDResponse& GetInstitutionByIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInstitutionByIDResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetInstitutionByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetInstitutionByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && institution_ != nullptr) {
    delete institution_;
  }
  institution_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetInstitutionByIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInstitutionByIDResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.Institution institution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_institution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInstitutionByIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetInstitutionByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInstitutionByIDResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // .plaid.Institution institution = 2;
  if (this->has_institution()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::institution(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetInstitutionByIDResponse)
  return target;
}

size_t GetInstitutionByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetInstitutionByIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .plaid.Institution institution = 2;
  if (this->has_institution()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *institution_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInstitutionByIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetInstitutionByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInstitutionByIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInstitutionByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetInstitutionByIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetInstitutionByIDResponse)
    MergeFrom(*source);
  }
}

void GetInstitutionByIDResponse::MergeFrom(const GetInstitutionByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetInstitutionByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_institution()) {
    _internal_mutable_institution()->::plaid::Institution::MergeFrom(from._internal_institution());
  }
}

void GetInstitutionByIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetInstitutionByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstitutionByIDResponse::CopyFrom(const GetInstitutionByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetInstitutionByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstitutionByIDResponse::IsInitialized() const {
  return true;
}

void GetInstitutionByIDResponse::InternalSwap(GetInstitutionByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(institution_, other->institution_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInstitutionByIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchInstitutionsRequest::InitAsDefaultInstance() {
  ::plaid::_SearchInstitutionsRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::plaid::SearchInstitutionsOptions*>(
      ::plaid::SearchInstitutionsOptions::internal_default_instance());
}
class SearchInstitutionsRequest::_Internal {
 public:
  static const ::plaid::SearchInstitutionsOptions& options(const SearchInstitutionsRequest* msg);
};

const ::plaid::SearchInstitutionsOptions&
SearchInstitutionsRequest::_Internal::options(const SearchInstitutionsRequest* msg) {
  return *msg->options_;
}
SearchInstitutionsRequest::SearchInstitutionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.SearchInstitutionsRequest)
}
SearchInstitutionsRequest::SearchInstitutionsRequest(const SearchInstitutionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      products_(from.products_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from._internal_has_options()) {
    options_ = new ::plaid::SearchInstitutionsOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.SearchInstitutionsRequest)
}

void SearchInstitutionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchInstitutionsRequest_plaid_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  options_ = nullptr;
}

SearchInstitutionsRequest::~SearchInstitutionsRequest() {
  // @@protoc_insertion_point(destructor:plaid.SearchInstitutionsRequest)
  SharedDtor();
}

void SearchInstitutionsRequest::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void SearchInstitutionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchInstitutionsRequest& SearchInstitutionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchInstitutionsRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void SearchInstitutionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.SearchInstitutionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  products_.Clear();
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SearchInstitutionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.SearchInstitutionsRequest.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string products = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_products();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.SearchInstitutionsRequest.products"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string public_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.SearchInstitutionsRequest.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.SearchInstitutionsOptions options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchInstitutionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.SearchInstitutionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.SearchInstitutionsRequest.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  // repeated string products = 2;
  for (int i = 0, n = this->_internal_products_size(); i < n; i++) {
    const auto& s = this->_internal_products(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.SearchInstitutionsRequest.products");
    target = stream->WriteString(2, s, target);
  }

  // string public_key = 3;
  if (this->public_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.SearchInstitutionsRequest.public_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_public_key(), target);
  }

  // .plaid.SearchInstitutionsOptions options = 4;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.SearchInstitutionsRequest)
  return target;
}

size_t SearchInstitutionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.SearchInstitutionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string products = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(products_.size());
  for (int i = 0, n = products_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      products_.Get(i));
  }

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // string public_key = 3;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // .plaid.SearchInstitutionsOptions options = 4;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchInstitutionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.SearchInstitutionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchInstitutionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchInstitutionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.SearchInstitutionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.SearchInstitutionsRequest)
    MergeFrom(*source);
  }
}

void SearchInstitutionsRequest::MergeFrom(const SearchInstitutionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.SearchInstitutionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  products_.MergeFrom(from.products_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.has_options()) {
    _internal_mutable_options()->::plaid::SearchInstitutionsOptions::MergeFrom(from._internal_options());
  }
}

void SearchInstitutionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.SearchInstitutionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchInstitutionsRequest::CopyFrom(const SearchInstitutionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.SearchInstitutionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchInstitutionsRequest::IsInitialized() const {
  return true;
}

void SearchInstitutionsRequest::InternalSwap(SearchInstitutionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  products_.InternalSwap(&other->products_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchInstitutionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchInstitutionsOptions::InitAsDefaultInstance() {
}
class SearchInstitutionsOptions::_Internal {
 public:
};

SearchInstitutionsOptions::SearchInstitutionsOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.SearchInstitutionsOptions)
}
SearchInstitutionsOptions::SearchInstitutionsOptions(const SearchInstitutionsOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      country_codes_(from.country_codes_),
      routing_numbers_(from.routing_numbers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  include_optional_metadata_ = from.include_optional_metadata_;
  // @@protoc_insertion_point(copy_constructor:plaid.SearchInstitutionsOptions)
}

void SearchInstitutionsOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchInstitutionsOptions_plaid_2eproto.base);
  include_optional_metadata_ = false;
}

SearchInstitutionsOptions::~SearchInstitutionsOptions() {
  // @@protoc_insertion_point(destructor:plaid.SearchInstitutionsOptions)
  SharedDtor();
}

void SearchInstitutionsOptions::SharedDtor() {
}

void SearchInstitutionsOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchInstitutionsOptions& SearchInstitutionsOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchInstitutionsOptions_plaid_2eproto.base);
  return *internal_default_instance();
}


void SearchInstitutionsOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.SearchInstitutionsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  country_codes_.Clear();
  routing_numbers_.Clear();
  include_optional_metadata_ = false;
  _internal_metadata_.Clear();
}

const char* SearchInstitutionsOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool include_optional_metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          include_optional_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string country_codes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_country_codes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.SearchInstitutionsOptions.country_codes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string routing_numbers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_routing_numbers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.SearchInstitutionsOptions.routing_numbers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchInstitutionsOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.SearchInstitutionsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool include_optional_metadata = 1;
  if (this->include_optional_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_include_optional_metadata(), target);
  }

  // repeated string country_codes = 2;
  for (int i = 0, n = this->_internal_country_codes_size(); i < n; i++) {
    const auto& s = this->_internal_country_codes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.SearchInstitutionsOptions.country_codes");
    target = stream->WriteString(2, s, target);
  }

  // repeated string routing_numbers = 3;
  for (int i = 0, n = this->_internal_routing_numbers_size(); i < n; i++) {
    const auto& s = this->_internal_routing_numbers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.SearchInstitutionsOptions.routing_numbers");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.SearchInstitutionsOptions)
  return target;
}

size_t SearchInstitutionsOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.SearchInstitutionsOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string country_codes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(country_codes_.size());
  for (int i = 0, n = country_codes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      country_codes_.Get(i));
  }

  // repeated string routing_numbers = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(routing_numbers_.size());
  for (int i = 0, n = routing_numbers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      routing_numbers_.Get(i));
  }

  // bool include_optional_metadata = 1;
  if (this->include_optional_metadata() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchInstitutionsOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.SearchInstitutionsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchInstitutionsOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchInstitutionsOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.SearchInstitutionsOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.SearchInstitutionsOptions)
    MergeFrom(*source);
  }
}

void SearchInstitutionsOptions::MergeFrom(const SearchInstitutionsOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.SearchInstitutionsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  country_codes_.MergeFrom(from.country_codes_);
  routing_numbers_.MergeFrom(from.routing_numbers_);
  if (from.include_optional_metadata() != 0) {
    _internal_set_include_optional_metadata(from._internal_include_optional_metadata());
  }
}

void SearchInstitutionsOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.SearchInstitutionsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchInstitutionsOptions::CopyFrom(const SearchInstitutionsOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.SearchInstitutionsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchInstitutionsOptions::IsInitialized() const {
  return true;
}

void SearchInstitutionsOptions::InternalSwap(SearchInstitutionsOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  country_codes_.InternalSwap(&other->country_codes_);
  routing_numbers_.InternalSwap(&other->routing_numbers_);
  swap(include_optional_metadata_, other->include_optional_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchInstitutionsOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchInstitutionsResponse::InitAsDefaultInstance() {
}
class SearchInstitutionsResponse::_Internal {
 public:
};

SearchInstitutionsResponse::SearchInstitutionsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.SearchInstitutionsResponse)
}
SearchInstitutionsResponse::SearchInstitutionsResponse(const SearchInstitutionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      institutions_(from.institutions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.SearchInstitutionsResponse)
}

void SearchInstitutionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchInstitutionsResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SearchInstitutionsResponse::~SearchInstitutionsResponse() {
  // @@protoc_insertion_point(destructor:plaid.SearchInstitutionsResponse)
  SharedDtor();
}

void SearchInstitutionsResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SearchInstitutionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchInstitutionsResponse& SearchInstitutionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchInstitutionsResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void SearchInstitutionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.SearchInstitutionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  institutions_.Clear();
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SearchInstitutionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.SearchInstitutionsResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .plaid.Institution institutions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_institutions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchInstitutionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.SearchInstitutionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.SearchInstitutionsResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // repeated .plaid.Institution institutions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_institutions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_institutions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.SearchInstitutionsResponse)
  return target;
}

size_t SearchInstitutionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.SearchInstitutionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.Institution institutions = 2;
  total_size += 1UL * this->_internal_institutions_size();
  for (const auto& msg : this->institutions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchInstitutionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.SearchInstitutionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchInstitutionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchInstitutionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.SearchInstitutionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.SearchInstitutionsResponse)
    MergeFrom(*source);
  }
}

void SearchInstitutionsResponse::MergeFrom(const SearchInstitutionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.SearchInstitutionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  institutions_.MergeFrom(from.institutions_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
}

void SearchInstitutionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.SearchInstitutionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchInstitutionsResponse::CopyFrom(const SearchInstitutionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.SearchInstitutionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchInstitutionsResponse::IsInitialized() const {
  return true;
}

void SearchInstitutionsResponse::InternalSwap(SearchInstitutionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  institutions_.InternalSwap(&other->institutions_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchInstitutionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InvestmentTransaction::InitAsDefaultInstance() {
}
class InvestmentTransaction::_Internal {
 public:
};

InvestmentTransaction::InvestmentTransaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.InvestmentTransaction)
}
InvestmentTransaction::InvestmentTransaction(const InvestmentTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  investment_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_investment_transaction_id().empty()) {
    investment_transaction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.investment_transaction_id_);
  }
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  security_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_security_id().empty()) {
    security_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.security_id_);
  }
  cancel_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cancel_transaction_id().empty()) {
    cancel_transaction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cancel_transaction_id_);
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  iso_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iso_currency_code().empty()) {
    iso_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iso_currency_code_);
  }
  unofficial_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unofficial_currency_code().empty()) {
    unofficial_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unofficial_currency_code_);
  }
  ::memcpy(&quantity_, &from.quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&fees_) -
    reinterpret_cast<char*>(&quantity_)) + sizeof(fees_));
  // @@protoc_insertion_point(copy_constructor:plaid.InvestmentTransaction)
}

void InvestmentTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvestmentTransaction_plaid_2eproto.base);
  investment_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cancel_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iso_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unofficial_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fees_) -
      reinterpret_cast<char*>(&quantity_)) + sizeof(fees_));
}

InvestmentTransaction::~InvestmentTransaction() {
  // @@protoc_insertion_point(destructor:plaid.InvestmentTransaction)
  SharedDtor();
}

void InvestmentTransaction::SharedDtor() {
  investment_transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cancel_transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iso_currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unofficial_currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvestmentTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvestmentTransaction& InvestmentTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvestmentTransaction_plaid_2eproto.base);
  return *internal_default_instance();
}


void InvestmentTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.InvestmentTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investment_transaction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cancel_transaction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iso_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unofficial_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fees_) -
      reinterpret_cast<char*>(&quantity_)) + sizeof(fees_));
  _internal_metadata_.Clear();
}

const char* InvestmentTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string investment_transaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_investment_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.InvestmentTransaction.investment_transaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.InvestmentTransaction.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string security_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_security_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.InvestmentTransaction.security_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cancel_transaction_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cancel_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.InvestmentTransaction.cancel_transaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.InvestmentTransaction.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.InvestmentTransaction.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double quantity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double amount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double price = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fees = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          fees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.InvestmentTransaction.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iso_currency_code = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_iso_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.InvestmentTransaction.iso_currency_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unofficial_currency_code = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_unofficial_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.InvestmentTransaction.unofficial_currency_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvestmentTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.InvestmentTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string investment_transaction_id = 1;
  if (this->investment_transaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_investment_transaction_id().data(), static_cast<int>(this->_internal_investment_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.InvestmentTransaction.investment_transaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_investment_transaction_id(), target);
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.InvestmentTransaction.account_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account_id(), target);
  }

  // string security_id = 3;
  if (this->security_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_security_id().data(), static_cast<int>(this->_internal_security_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.InvestmentTransaction.security_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_security_id(), target);
  }

  // string cancel_transaction_id = 4;
  if (this->cancel_transaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cancel_transaction_id().data(), static_cast<int>(this->_internal_cancel_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.InvestmentTransaction.cancel_transaction_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cancel_transaction_id(), target);
  }

  // string date = 5;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.InvestmentTransaction.date");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_date(), target);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.InvestmentTransaction.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // double quantity = 7;
  if (!(this->quantity() <= 0 && this->quantity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_quantity(), target);
  }

  // double amount = 8;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_amount(), target);
  }

  // double price = 9;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_price(), target);
  }

  // double fees = 10;
  if (!(this->fees() <= 0 && this->fees() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_fees(), target);
  }

  // string type = 11;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.InvestmentTransaction.type");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_type(), target);
  }

  // string iso_currency_code = 12;
  if (this->iso_currency_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iso_currency_code().data(), static_cast<int>(this->_internal_iso_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.InvestmentTransaction.iso_currency_code");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_iso_currency_code(), target);
  }

  // string unofficial_currency_code = 13;
  if (this->unofficial_currency_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unofficial_currency_code().data(), static_cast<int>(this->_internal_unofficial_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.InvestmentTransaction.unofficial_currency_code");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_unofficial_currency_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.InvestmentTransaction)
  return target;
}

size_t InvestmentTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.InvestmentTransaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string investment_transaction_id = 1;
  if (this->investment_transaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_investment_transaction_id());
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string security_id = 3;
  if (this->security_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_security_id());
  }

  // string cancel_transaction_id = 4;
  if (this->cancel_transaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cancel_transaction_id());
  }

  // string date = 5;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // string name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 11;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string iso_currency_code = 12;
  if (this->iso_currency_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iso_currency_code());
  }

  // string unofficial_currency_code = 13;
  if (this->unofficial_currency_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unofficial_currency_code());
  }

  // double quantity = 7;
  if (!(this->quantity() <= 0 && this->quantity() >= 0)) {
    total_size += 1 + 8;
  }

  // double amount = 8;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    total_size += 1 + 8;
  }

  // double price = 9;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // double fees = 10;
  if (!(this->fees() <= 0 && this->fees() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvestmentTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.InvestmentTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const InvestmentTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvestmentTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.InvestmentTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.InvestmentTransaction)
    MergeFrom(*source);
  }
}

void InvestmentTransaction::MergeFrom(const InvestmentTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.InvestmentTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.investment_transaction_id().size() > 0) {

    investment_transaction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.investment_transaction_id_);
  }
  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.security_id().size() > 0) {

    security_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.security_id_);
  }
  if (from.cancel_transaction_id().size() > 0) {

    cancel_transaction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cancel_transaction_id_);
  }
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.iso_currency_code().size() > 0) {

    iso_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iso_currency_code_);
  }
  if (from.unofficial_currency_code().size() > 0) {

    unofficial_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unofficial_currency_code_);
  }
  if (!(from.quantity() <= 0 && from.quantity() >= 0)) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (!(from.amount() <= 0 && from.amount() >= 0)) {
    _internal_set_amount(from._internal_amount());
  }
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (!(from.fees() <= 0 && from.fees() >= 0)) {
    _internal_set_fees(from._internal_fees());
  }
}

void InvestmentTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.InvestmentTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvestmentTransaction::CopyFrom(const InvestmentTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.InvestmentTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvestmentTransaction::IsInitialized() const {
  return true;
}

void InvestmentTransaction::InternalSwap(InvestmentTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  investment_transaction_id_.Swap(&other->investment_transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  security_id_.Swap(&other->security_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cancel_transaction_id_.Swap(&other->cancel_transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  iso_currency_code_.Swap(&other->iso_currency_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unofficial_currency_code_.Swap(&other->unofficial_currency_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(quantity_, other->quantity_);
  swap(amount_, other->amount_);
  swap(price_, other->price_);
  swap(fees_, other->fees_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvestmentTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInvestmentTransactionsResponse::InitAsDefaultInstance() {
  ::plaid::_GetInvestmentTransactionsResponse_default_instance_._instance.get_mutable()->item_ = const_cast< ::plaid::Item*>(
      ::plaid::Item::internal_default_instance());
}
class GetInvestmentTransactionsResponse::_Internal {
 public:
  static const ::plaid::Item& item(const GetInvestmentTransactionsResponse* msg);
};

const ::plaid::Item&
GetInvestmentTransactionsResponse::_Internal::item(const GetInvestmentTransactionsResponse* msg) {
  return *msg->item_;
}
GetInvestmentTransactionsResponse::GetInvestmentTransactionsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetInvestmentTransactionsResponse)
}
GetInvestmentTransactionsResponse::GetInvestmentTransactionsResponse(const GetInvestmentTransactionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      accounts_(from.accounts_),
      investment_transactions_(from.investment_transactions_),
      securities_(from.securities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from._internal_has_item()) {
    item_ = new ::plaid::Item(*from.item_);
  } else {
    item_ = nullptr;
  }
  total_investment_transactions_ = from.total_investment_transactions_;
  // @@protoc_insertion_point(copy_constructor:plaid.GetInvestmentTransactionsResponse)
}

void GetInvestmentTransactionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInvestmentTransactionsResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_investment_transactions_) -
      reinterpret_cast<char*>(&item_)) + sizeof(total_investment_transactions_));
}

GetInvestmentTransactionsResponse::~GetInvestmentTransactionsResponse() {
  // @@protoc_insertion_point(destructor:plaid.GetInvestmentTransactionsResponse)
  SharedDtor();
}

void GetInvestmentTransactionsResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete item_;
}

void GetInvestmentTransactionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInvestmentTransactionsResponse& GetInvestmentTransactionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInvestmentTransactionsResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetInvestmentTransactionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetInvestmentTransactionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  investment_transactions_.Clear();
  securities_.Clear();
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  total_investment_transactions_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GetInvestmentTransactionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInvestmentTransactionsResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.Item item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .plaid.Account accounts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .plaid.InvestmentTransaction investment_transactions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_investment_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .plaid.Security securities = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_securities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 total_investment_transactions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_investment_transactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInvestmentTransactionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetInvestmentTransactionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInvestmentTransactionsResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // .plaid.Item item = 2;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::item(this), target, stream);
  }

  // repeated .plaid.Account accounts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_accounts(i), target, stream);
  }

  // repeated .plaid.InvestmentTransaction investment_transactions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_investment_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_investment_transactions(i), target, stream);
  }

  // repeated .plaid.Security securities = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_securities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_securities(i), target, stream);
  }

  // int64 total_investment_transactions = 6;
  if (this->total_investment_transactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_total_investment_transactions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetInvestmentTransactionsResponse)
  return target;
}

size_t GetInvestmentTransactionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetInvestmentTransactionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.Account accounts = 3;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .plaid.InvestmentTransaction investment_transactions = 4;
  total_size += 1UL * this->_internal_investment_transactions_size();
  for (const auto& msg : this->investment_transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .plaid.Security securities = 5;
  total_size += 1UL * this->_internal_securities_size();
  for (const auto& msg : this->securities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .plaid.Item item = 2;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  // int64 total_investment_transactions = 6;
  if (this->total_investment_transactions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_investment_transactions());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInvestmentTransactionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetInvestmentTransactionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInvestmentTransactionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInvestmentTransactionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetInvestmentTransactionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetInvestmentTransactionsResponse)
    MergeFrom(*source);
  }
}

void GetInvestmentTransactionsResponse::MergeFrom(const GetInvestmentTransactionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetInvestmentTransactionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
  investment_transactions_.MergeFrom(from.investment_transactions_);
  securities_.MergeFrom(from.securities_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_item()) {
    _internal_mutable_item()->::plaid::Item::MergeFrom(from._internal_item());
  }
  if (from.total_investment_transactions() != 0) {
    _internal_set_total_investment_transactions(from._internal_total_investment_transactions());
  }
}

void GetInvestmentTransactionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetInvestmentTransactionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInvestmentTransactionsResponse::CopyFrom(const GetInvestmentTransactionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetInvestmentTransactionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvestmentTransactionsResponse::IsInitialized() const {
  return true;
}

void GetInvestmentTransactionsResponse::InternalSwap(GetInvestmentTransactionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
  investment_transactions_.InternalSwap(&other->investment_transactions_);
  securities_.InternalSwap(&other->securities_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(item_, other->item_);
  swap(total_investment_transactions_, other->total_investment_transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInvestmentTransactionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInvestmentTransactionsOptions::InitAsDefaultInstance() {
}
class GetInvestmentTransactionsOptions::_Internal {
 public:
};

GetInvestmentTransactionsOptions::GetInvestmentTransactionsOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetInvestmentTransactionsOptions)
}
GetInvestmentTransactionsOptions::GetInvestmentTransactionsOptions(const GetInvestmentTransactionsOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_date().empty()) {
    start_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_date_);
  }
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_date().empty()) {
    end_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_date_);
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&count_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:plaid.GetInvestmentTransactionsOptions)
}

void GetInvestmentTransactionsOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInvestmentTransactionsOptions_plaid_2eproto.base);
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&count_)) + sizeof(offset_));
}

GetInvestmentTransactionsOptions::~GetInvestmentTransactionsOptions() {
  // @@protoc_insertion_point(destructor:plaid.GetInvestmentTransactionsOptions)
  SharedDtor();
}

void GetInvestmentTransactionsOptions::SharedDtor() {
  start_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetInvestmentTransactionsOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInvestmentTransactionsOptions& GetInvestmentTransactionsOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInvestmentTransactionsOptions_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetInvestmentTransactionsOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetInvestmentTransactionsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  start_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&count_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

const char* GetInvestmentTransactionsOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string start_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInvestmentTransactionsOptions.start_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_end_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInvestmentTransactionsOptions.end_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string account_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_account_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInvestmentTransactionsOptions.account_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInvestmentTransactionsOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetInvestmentTransactionsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start_date = 1;
  if (this->start_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_date().data(), static_cast<int>(this->_internal_start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInvestmentTransactionsOptions.start_date");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start_date(), target);
  }

  // string end_date = 2;
  if (this->end_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_date().data(), static_cast<int>(this->_internal_end_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInvestmentTransactionsOptions.end_date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_end_date(), target);
  }

  // repeated string account_ids = 3;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    const auto& s = this->_internal_account_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInvestmentTransactionsOptions.account_ids");
    target = stream->WriteString(3, s, target);
  }

  // int64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_count(), target);
  }

  // int64 offset = 5;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetInvestmentTransactionsOptions)
  return target;
}

size_t GetInvestmentTransactionsOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetInvestmentTransactionsOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string account_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(account_ids_.size());
  for (int i = 0, n = account_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      account_ids_.Get(i));
  }

  // string start_date = 1;
  if (this->start_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_date());
  }

  // string end_date = 2;
  if (this->end_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_date());
  }

  // int64 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  // int64 offset = 5;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInvestmentTransactionsOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetInvestmentTransactionsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInvestmentTransactionsOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInvestmentTransactionsOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetInvestmentTransactionsOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetInvestmentTransactionsOptions)
    MergeFrom(*source);
  }
}

void GetInvestmentTransactionsOptions::MergeFrom(const GetInvestmentTransactionsOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetInvestmentTransactionsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  if (from.start_date().size() > 0) {

    start_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_date_);
  }
  if (from.end_date().size() > 0) {

    end_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_date_);
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void GetInvestmentTransactionsOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetInvestmentTransactionsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInvestmentTransactionsOptions::CopyFrom(const GetInvestmentTransactionsOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetInvestmentTransactionsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvestmentTransactionsOptions::IsInitialized() const {
  return true;
}

void GetInvestmentTransactionsOptions::InternalSwap(GetInvestmentTransactionsOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
  start_date_.Swap(&other->start_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_date_.Swap(&other->end_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInvestmentTransactionsOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInvestmentTransactionsRequest::InitAsDefaultInstance() {
  ::plaid::_GetInvestmentTransactionsRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::plaid::GetInvestmentTransactionsRequestOptions*>(
      ::plaid::GetInvestmentTransactionsRequestOptions::internal_default_instance());
}
class GetInvestmentTransactionsRequest::_Internal {
 public:
  static const ::plaid::GetInvestmentTransactionsRequestOptions& options(const GetInvestmentTransactionsRequest* msg);
};

const ::plaid::GetInvestmentTransactionsRequestOptions&
GetInvestmentTransactionsRequest::_Internal::options(const GetInvestmentTransactionsRequest* msg) {
  return *msg->options_;
}
GetInvestmentTransactionsRequest::GetInvestmentTransactionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetInvestmentTransactionsRequest)
}
GetInvestmentTransactionsRequest::GetInvestmentTransactionsRequest(const GetInvestmentTransactionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_date().empty()) {
    start_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_date_);
  }
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_date().empty()) {
    end_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_date_);
  }
  if (from._internal_has_options()) {
    options_ = new ::plaid::GetInvestmentTransactionsRequestOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetInvestmentTransactionsRequest)
}

void GetInvestmentTransactionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInvestmentTransactionsRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  options_ = nullptr;
}

GetInvestmentTransactionsRequest::~GetInvestmentTransactionsRequest() {
  // @@protoc_insertion_point(destructor:plaid.GetInvestmentTransactionsRequest)
  SharedDtor();
}

void GetInvestmentTransactionsRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void GetInvestmentTransactionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInvestmentTransactionsRequest& GetInvestmentTransactionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInvestmentTransactionsRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetInvestmentTransactionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetInvestmentTransactionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetInvestmentTransactionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInvestmentTransactionsRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInvestmentTransactionsRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInvestmentTransactionsRequest.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string start_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_start_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInvestmentTransactionsRequest.start_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_end_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInvestmentTransactionsRequest.end_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.GetInvestmentTransactionsRequestOptions options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInvestmentTransactionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetInvestmentTransactionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInvestmentTransactionsRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInvestmentTransactionsRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInvestmentTransactionsRequest.access_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token(), target);
  }

  // string start_date = 4;
  if (this->start_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_date().data(), static_cast<int>(this->_internal_start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInvestmentTransactionsRequest.start_date");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_start_date(), target);
  }

  // string end_date = 5;
  if (this->end_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_date().data(), static_cast<int>(this->_internal_end_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInvestmentTransactionsRequest.end_date");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_end_date(), target);
  }

  // .plaid.GetInvestmentTransactionsRequestOptions options = 6;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetInvestmentTransactionsRequest)
  return target;
}

size_t GetInvestmentTransactionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetInvestmentTransactionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  // string start_date = 4;
  if (this->start_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_date());
  }

  // string end_date = 5;
  if (this->end_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_date());
  }

  // .plaid.GetInvestmentTransactionsRequestOptions options = 6;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInvestmentTransactionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetInvestmentTransactionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInvestmentTransactionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInvestmentTransactionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetInvestmentTransactionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetInvestmentTransactionsRequest)
    MergeFrom(*source);
  }
}

void GetInvestmentTransactionsRequest::MergeFrom(const GetInvestmentTransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetInvestmentTransactionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  if (from.start_date().size() > 0) {

    start_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_date_);
  }
  if (from.end_date().size() > 0) {

    end_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_date_);
  }
  if (from.has_options()) {
    _internal_mutable_options()->::plaid::GetInvestmentTransactionsRequestOptions::MergeFrom(from._internal_options());
  }
}

void GetInvestmentTransactionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetInvestmentTransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInvestmentTransactionsRequest::CopyFrom(const GetInvestmentTransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetInvestmentTransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvestmentTransactionsRequest::IsInitialized() const {
  return true;
}

void GetInvestmentTransactionsRequest::InternalSwap(GetInvestmentTransactionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_date_.Swap(&other->start_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_date_.Swap(&other->end_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInvestmentTransactionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInvestmentTransactionsRequestOptions::InitAsDefaultInstance() {
}
class GetInvestmentTransactionsRequestOptions::_Internal {
 public:
};

GetInvestmentTransactionsRequestOptions::GetInvestmentTransactionsRequestOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetInvestmentTransactionsRequestOptions)
}
GetInvestmentTransactionsRequestOptions::GetInvestmentTransactionsRequestOptions(const GetInvestmentTransactionsRequestOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&count_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:plaid.GetInvestmentTransactionsRequestOptions)
}

void GetInvestmentTransactionsRequestOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInvestmentTransactionsRequestOptions_plaid_2eproto.base);
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&count_)) + sizeof(offset_));
}

GetInvestmentTransactionsRequestOptions::~GetInvestmentTransactionsRequestOptions() {
  // @@protoc_insertion_point(destructor:plaid.GetInvestmentTransactionsRequestOptions)
  SharedDtor();
}

void GetInvestmentTransactionsRequestOptions::SharedDtor() {
}

void GetInvestmentTransactionsRequestOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInvestmentTransactionsRequestOptions& GetInvestmentTransactionsRequestOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInvestmentTransactionsRequestOptions_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetInvestmentTransactionsRequestOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetInvestmentTransactionsRequestOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&count_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

const char* GetInvestmentTransactionsRequestOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_account_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetInvestmentTransactionsRequestOptions.account_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInvestmentTransactionsRequestOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetInvestmentTransactionsRequestOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    const auto& s = this->_internal_account_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetInvestmentTransactionsRequestOptions.account_ids");
    target = stream->WriteString(1, s, target);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_count(), target);
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetInvestmentTransactionsRequestOptions)
  return target;
}

size_t GetInvestmentTransactionsRequestOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetInvestmentTransactionsRequestOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(account_ids_.size());
  for (int i = 0, n = account_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      account_ids_.Get(i));
  }

  // int64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInvestmentTransactionsRequestOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetInvestmentTransactionsRequestOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInvestmentTransactionsRequestOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInvestmentTransactionsRequestOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetInvestmentTransactionsRequestOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetInvestmentTransactionsRequestOptions)
    MergeFrom(*source);
  }
}

void GetInvestmentTransactionsRequestOptions::MergeFrom(const GetInvestmentTransactionsRequestOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetInvestmentTransactionsRequestOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void GetInvestmentTransactionsRequestOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetInvestmentTransactionsRequestOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInvestmentTransactionsRequestOptions::CopyFrom(const GetInvestmentTransactionsRequestOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetInvestmentTransactionsRequestOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvestmentTransactionsRequestOptions::IsInitialized() const {
  return true;
}

void GetInvestmentTransactionsRequestOptions::InternalSwap(GetInvestmentTransactionsRequestOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
  swap(count_, other->count_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInvestmentTransactionsRequestOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Item::InitAsDefaultInstance() {
  ::plaid::_Item_default_instance_._instance.get_mutable()->error_ = const_cast< ::plaid::Error*>(
      ::plaid::Error::internal_default_instance());
}
class Item::_Internal {
 public:
  static const ::plaid::Error& error(const Item* msg);
};

const ::plaid::Error&
Item::_Internal::error(const Item* msg) {
  return *msg->error_;
}
Item::Item()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      available_products_(from.available_products_),
      billed_products_(from.billed_products_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  institution_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_institution_id().empty()) {
    institution_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_id_);
  }
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_item_id().empty()) {
    item_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
  webhook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_webhook().empty()) {
    webhook_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.webhook_);
  }
  consent_expiration_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_consent_expiration_time().empty()) {
    consent_expiration_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.consent_expiration_time_);
  }
  if (from._internal_has_error()) {
    error_ = new ::plaid::Error(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.Item)
}

void Item::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Item_plaid_2eproto.base);
  institution_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  webhook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consent_expiration_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_ = nullptr;
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:plaid.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  institution_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  webhook_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consent_expiration_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
}

void Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Item& Item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Item_plaid_2eproto.base);
  return *internal_default_instance();
}


void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  available_products_.Clear();
  billed_products_.Clear();
  institution_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  webhook_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consent_expiration_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string available_products = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_available_products();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Item.available_products"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string billed_products = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_billed_products();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Item.billed_products"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .plaid.Error error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string institution_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_institution_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Item.institution_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string item_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_item_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Item.item_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string webhook = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_webhook();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Item.webhook"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string consent_expiration_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_consent_expiration_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Item.consent_expiration_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string available_products = 1;
  for (int i = 0, n = this->_internal_available_products_size(); i < n; i++) {
    const auto& s = this->_internal_available_products(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Item.available_products");
    target = stream->WriteString(1, s, target);
  }

  // repeated string billed_products = 2;
  for (int i = 0, n = this->_internal_billed_products_size(); i < n; i++) {
    const auto& s = this->_internal_billed_products(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Item.billed_products");
    target = stream->WriteString(2, s, target);
  }

  // .plaid.Error error = 3;
  if (this->has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::error(this), target, stream);
  }

  // string institution_id = 4;
  if (this->institution_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_institution_id().data(), static_cast<int>(this->_internal_institution_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Item.institution_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_institution_id(), target);
  }

  // string item_id = 5;
  if (this->item_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item_id().data(), static_cast<int>(this->_internal_item_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Item.item_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_item_id(), target);
  }

  // string webhook = 6;
  if (this->webhook().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_webhook().data(), static_cast<int>(this->_internal_webhook().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Item.webhook");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_webhook(), target);
  }

  // string consent_expiration_time = 7;
  if (this->consent_expiration_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consent_expiration_time().data(), static_cast<int>(this->_internal_consent_expiration_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Item.consent_expiration_time");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_consent_expiration_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string available_products = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(available_products_.size());
  for (int i = 0, n = available_products_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      available_products_.Get(i));
  }

  // repeated string billed_products = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(billed_products_.size());
  for (int i = 0, n = billed_products_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      billed_products_.Get(i));
  }

  // string institution_id = 4;
  if (this->institution_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_institution_id());
  }

  // string item_id = 5;
  if (this->item_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_id());
  }

  // string webhook = 6;
  if (this->webhook().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_webhook());
  }

  // string consent_expiration_time = 7;
  if (this->consent_expiration_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consent_expiration_time());
  }

  // .plaid.Error error = 3;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.Item)
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  available_products_.MergeFrom(from.available_products_);
  billed_products_.MergeFrom(from.billed_products_);
  if (from.institution_id().size() > 0) {

    institution_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_id_);
  }
  if (from.item_id().size() > 0) {

    item_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
  if (from.webhook().size() > 0) {

    webhook_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.webhook_);
  }
  if (from.consent_expiration_time().size() > 0) {

    consent_expiration_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.consent_expiration_time_);
  }
  if (from.has_error()) {
    _internal_mutable_error()->::plaid::Error::MergeFrom(from._internal_error());
  }
}

void Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  available_products_.InternalSwap(&other->available_products_);
  billed_products_.InternalSwap(&other->billed_products_);
  institution_id_.Swap(&other->institution_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  item_id_.Swap(&other->item_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  webhook_.Swap(&other->webhook_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  consent_expiration_time_.Swap(&other->consent_expiration_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetItemRequest::InitAsDefaultInstance() {
}
class GetItemRequest::_Internal {
 public:
};

GetItemRequest::GetItemRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetItemRequest)
}
GetItemRequest::GetItemRequest(const GetItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetItemRequest)
}

void GetItemRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetItemRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetItemRequest::~GetItemRequest() {
  // @@protoc_insertion_point(destructor:plaid.GetItemRequest)
  SharedDtor();
}

void GetItemRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetItemRequest& GetItemRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetItemRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetItemRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetItemRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetItemRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetItemRequest.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetItemRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetItemRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetItemRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetItemRequest.access_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetItemRequest)
  return target;
}

size_t GetItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetItemRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetItemRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetItemRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetItemRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetItemRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetItemRequest)
    MergeFrom(*source);
  }
}

void GetItemRequest::MergeFrom(const GetItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
}

void GetItemRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetItemRequest::CopyFrom(const GetItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemRequest::IsInitialized() const {
  return true;
}

void GetItemRequest::InternalSwap(GetItemRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetItemRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetItemResponse::InitAsDefaultInstance() {
  ::plaid::_GetItemResponse_default_instance_._instance.get_mutable()->item_ = const_cast< ::plaid::Item*>(
      ::plaid::Item::internal_default_instance());
}
class GetItemResponse::_Internal {
 public:
  static const ::plaid::Item& item(const GetItemResponse* msg);
};

const ::plaid::Item&
GetItemResponse::_Internal::item(const GetItemResponse* msg) {
  return *msg->item_;
}
GetItemResponse::GetItemResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetItemResponse)
}
GetItemResponse::GetItemResponse(const GetItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from._internal_has_item()) {
    item_ = new ::plaid::Item(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetItemResponse)
}

void GetItemResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetItemResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_ = nullptr;
}

GetItemResponse::~GetItemResponse() {
  // @@protoc_insertion_point(destructor:plaid.GetItemResponse)
  SharedDtor();
}

void GetItemResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete item_;
}

void GetItemResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetItemResponse& GetItemResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetItemResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetItemResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetItemResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.Item item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetItemResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetItemResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // .plaid.Item item = 2;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetItemResponse)
  return target;
}

size_t GetItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetItemResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .plaid.Item item = 2;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetItemResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetItemResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetItemResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetItemResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetItemResponse)
    MergeFrom(*source);
  }
}

void GetItemResponse::MergeFrom(const GetItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_item()) {
    _internal_mutable_item()->::plaid::Item::MergeFrom(from._internal_item());
  }
}

void GetItemResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetItemResponse::CopyFrom(const GetItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemResponse::IsInitialized() const {
  return true;
}

void GetItemResponse::InternalSwap(GetItemResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(item_, other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetItemResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveItemRequest::InitAsDefaultInstance() {
}
class RemoveItemRequest::_Internal {
 public:
};

RemoveItemRequest::RemoveItemRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.RemoveItemRequest)
}
RemoveItemRequest::RemoveItemRequest(const RemoveItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.RemoveItemRequest)
}

void RemoveItemRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveItemRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoveItemRequest::~RemoveItemRequest() {
  // @@protoc_insertion_point(destructor:plaid.RemoveItemRequest)
  SharedDtor();
}

void RemoveItemRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveItemRequest& RemoveItemRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveItemRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void RemoveItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.RemoveItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RemoveItemRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.RemoveItemRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.RemoveItemRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.RemoveItemRequest.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveItemRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.RemoveItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.RemoveItemRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.RemoveItemRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.RemoveItemRequest.access_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.RemoveItemRequest)
  return target;
}

size_t RemoveItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.RemoveItemRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveItemRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.RemoveItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveItemRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveItemRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.RemoveItemRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.RemoveItemRequest)
    MergeFrom(*source);
  }
}

void RemoveItemRequest::MergeFrom(const RemoveItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.RemoveItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
}

void RemoveItemRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.RemoveItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveItemRequest::CopyFrom(const RemoveItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.RemoveItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveItemRequest::IsInitialized() const {
  return true;
}

void RemoveItemRequest::InternalSwap(RemoveItemRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveItemRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveItemResponse::InitAsDefaultInstance() {
}
class RemoveItemResponse::_Internal {
 public:
};

RemoveItemResponse::RemoveItemResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.RemoveItemResponse)
}
RemoveItemResponse::RemoveItemResponse(const RemoveItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  removed_ = from.removed_;
  // @@protoc_insertion_point(copy_constructor:plaid.RemoveItemResponse)
}

void RemoveItemResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveItemResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  removed_ = false;
}

RemoveItemResponse::~RemoveItemResponse() {
  // @@protoc_insertion_point(destructor:plaid.RemoveItemResponse)
  SharedDtor();
}

void RemoveItemResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveItemResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveItemResponse& RemoveItemResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveItemResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void RemoveItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.RemoveItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  removed_ = false;
  _internal_metadata_.Clear();
}

const char* RemoveItemResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.RemoveItemResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool removed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveItemResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.RemoveItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.RemoveItemResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool removed = 2;
  if (this->removed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_removed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.RemoveItemResponse)
  return target;
}

size_t RemoveItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.RemoveItemResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // bool removed = 2;
  if (this->removed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveItemResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.RemoveItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveItemResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveItemResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.RemoveItemResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.RemoveItemResponse)
    MergeFrom(*source);
  }
}

void RemoveItemResponse::MergeFrom(const RemoveItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.RemoveItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.removed() != 0) {
    _internal_set_removed(from._internal_removed());
  }
}

void RemoveItemResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.RemoveItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveItemResponse::CopyFrom(const RemoveItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.RemoveItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveItemResponse::IsInitialized() const {
  return true;
}

void RemoveItemResponse::InternalSwap(RemoveItemResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(removed_, other->removed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveItemResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateItemWebhookRequest::InitAsDefaultInstance() {
}
class UpdateItemWebhookRequest::_Internal {
 public:
};

UpdateItemWebhookRequest::UpdateItemWebhookRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.UpdateItemWebhookRequest)
}
UpdateItemWebhookRequest::UpdateItemWebhookRequest(const UpdateItemWebhookRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  webhook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_webhook().empty()) {
    webhook_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.webhook_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.UpdateItemWebhookRequest)
}

void UpdateItemWebhookRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateItemWebhookRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  webhook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateItemWebhookRequest::~UpdateItemWebhookRequest() {
  // @@protoc_insertion_point(destructor:plaid.UpdateItemWebhookRequest)
  SharedDtor();
}

void UpdateItemWebhookRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  webhook_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateItemWebhookRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateItemWebhookRequest& UpdateItemWebhookRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateItemWebhookRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void UpdateItemWebhookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.UpdateItemWebhookRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  webhook_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* UpdateItemWebhookRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.UpdateItemWebhookRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.UpdateItemWebhookRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.UpdateItemWebhookRequest.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string webhook = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_webhook();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.UpdateItemWebhookRequest.webhook"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateItemWebhookRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.UpdateItemWebhookRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.UpdateItemWebhookRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.UpdateItemWebhookRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.UpdateItemWebhookRequest.access_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token(), target);
  }

  // string webhook = 4;
  if (this->webhook().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_webhook().data(), static_cast<int>(this->_internal_webhook().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.UpdateItemWebhookRequest.webhook");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_webhook(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.UpdateItemWebhookRequest)
  return target;
}

size_t UpdateItemWebhookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.UpdateItemWebhookRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  // string webhook = 4;
  if (this->webhook().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_webhook());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateItemWebhookRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.UpdateItemWebhookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateItemWebhookRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateItemWebhookRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.UpdateItemWebhookRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.UpdateItemWebhookRequest)
    MergeFrom(*source);
  }
}

void UpdateItemWebhookRequest::MergeFrom(const UpdateItemWebhookRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.UpdateItemWebhookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  if (from.webhook().size() > 0) {

    webhook_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.webhook_);
  }
}

void UpdateItemWebhookRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.UpdateItemWebhookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateItemWebhookRequest::CopyFrom(const UpdateItemWebhookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.UpdateItemWebhookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateItemWebhookRequest::IsInitialized() const {
  return true;
}

void UpdateItemWebhookRequest::InternalSwap(UpdateItemWebhookRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  webhook_.Swap(&other->webhook_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateItemWebhookRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateItemWebhookResponse::InitAsDefaultInstance() {
  ::plaid::_UpdateItemWebhookResponse_default_instance_._instance.get_mutable()->item_ = const_cast< ::plaid::Item*>(
      ::plaid::Item::internal_default_instance());
}
class UpdateItemWebhookResponse::_Internal {
 public:
  static const ::plaid::Item& item(const UpdateItemWebhookResponse* msg);
};

const ::plaid::Item&
UpdateItemWebhookResponse::_Internal::item(const UpdateItemWebhookResponse* msg) {
  return *msg->item_;
}
UpdateItemWebhookResponse::UpdateItemWebhookResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.UpdateItemWebhookResponse)
}
UpdateItemWebhookResponse::UpdateItemWebhookResponse(const UpdateItemWebhookResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from._internal_has_item()) {
    item_ = new ::plaid::Item(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.UpdateItemWebhookResponse)
}

void UpdateItemWebhookResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateItemWebhookResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_ = nullptr;
}

UpdateItemWebhookResponse::~UpdateItemWebhookResponse() {
  // @@protoc_insertion_point(destructor:plaid.UpdateItemWebhookResponse)
  SharedDtor();
}

void UpdateItemWebhookResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete item_;
}

void UpdateItemWebhookResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateItemWebhookResponse& UpdateItemWebhookResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateItemWebhookResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void UpdateItemWebhookResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.UpdateItemWebhookResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear();
}

const char* UpdateItemWebhookResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.UpdateItemWebhookResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.Item item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateItemWebhookResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.UpdateItemWebhookResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.UpdateItemWebhookResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // .plaid.Item item = 2;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.UpdateItemWebhookResponse)
  return target;
}

size_t UpdateItemWebhookResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.UpdateItemWebhookResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .plaid.Item item = 2;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateItemWebhookResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.UpdateItemWebhookResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateItemWebhookResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateItemWebhookResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.UpdateItemWebhookResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.UpdateItemWebhookResponse)
    MergeFrom(*source);
  }
}

void UpdateItemWebhookResponse::MergeFrom(const UpdateItemWebhookResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.UpdateItemWebhookResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_item()) {
    _internal_mutable_item()->::plaid::Item::MergeFrom(from._internal_item());
  }
}

void UpdateItemWebhookResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.UpdateItemWebhookResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateItemWebhookResponse::CopyFrom(const UpdateItemWebhookResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.UpdateItemWebhookResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateItemWebhookResponse::IsInitialized() const {
  return true;
}

void UpdateItemWebhookResponse::InternalSwap(UpdateItemWebhookResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(item_, other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateItemWebhookResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InvalidateAccessTokenRequest::InitAsDefaultInstance() {
}
class InvalidateAccessTokenRequest::_Internal {
 public:
};

InvalidateAccessTokenRequest::InvalidateAccessTokenRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.InvalidateAccessTokenRequest)
}
InvalidateAccessTokenRequest::InvalidateAccessTokenRequest(const InvalidateAccessTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.InvalidateAccessTokenRequest)
}

void InvalidateAccessTokenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvalidateAccessTokenRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InvalidateAccessTokenRequest::~InvalidateAccessTokenRequest() {
  // @@protoc_insertion_point(destructor:plaid.InvalidateAccessTokenRequest)
  SharedDtor();
}

void InvalidateAccessTokenRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvalidateAccessTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvalidateAccessTokenRequest& InvalidateAccessTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvalidateAccessTokenRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void InvalidateAccessTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.InvalidateAccessTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* InvalidateAccessTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.InvalidateAccessTokenRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.InvalidateAccessTokenRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.InvalidateAccessTokenRequest.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvalidateAccessTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.InvalidateAccessTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.InvalidateAccessTokenRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.InvalidateAccessTokenRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.InvalidateAccessTokenRequest.access_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.InvalidateAccessTokenRequest)
  return target;
}

size_t InvalidateAccessTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.InvalidateAccessTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvalidateAccessTokenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.InvalidateAccessTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InvalidateAccessTokenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvalidateAccessTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.InvalidateAccessTokenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.InvalidateAccessTokenRequest)
    MergeFrom(*source);
  }
}

void InvalidateAccessTokenRequest::MergeFrom(const InvalidateAccessTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.InvalidateAccessTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
}

void InvalidateAccessTokenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.InvalidateAccessTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvalidateAccessTokenRequest::CopyFrom(const InvalidateAccessTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.InvalidateAccessTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvalidateAccessTokenRequest::IsInitialized() const {
  return true;
}

void InvalidateAccessTokenRequest::InternalSwap(InvalidateAccessTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata InvalidateAccessTokenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InvalidateAccessTokenResponse::InitAsDefaultInstance() {
}
class InvalidateAccessTokenResponse::_Internal {
 public:
};

InvalidateAccessTokenResponse::InvalidateAccessTokenResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.InvalidateAccessTokenResponse)
}
InvalidateAccessTokenResponse::InvalidateAccessTokenResponse(const InvalidateAccessTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  new_access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_access_token().empty()) {
    new_access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_access_token_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.InvalidateAccessTokenResponse)
}

void InvalidateAccessTokenResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvalidateAccessTokenResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InvalidateAccessTokenResponse::~InvalidateAccessTokenResponse() {
  // @@protoc_insertion_point(destructor:plaid.InvalidateAccessTokenResponse)
  SharedDtor();
}

void InvalidateAccessTokenResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvalidateAccessTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvalidateAccessTokenResponse& InvalidateAccessTokenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvalidateAccessTokenResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void InvalidateAccessTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.InvalidateAccessTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* InvalidateAccessTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.InvalidateAccessTokenResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_access_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.InvalidateAccessTokenResponse.new_access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvalidateAccessTokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.InvalidateAccessTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.InvalidateAccessTokenResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string new_access_token = 2;
  if (this->new_access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_access_token().data(), static_cast<int>(this->_internal_new_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.InvalidateAccessTokenResponse.new_access_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_access_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.InvalidateAccessTokenResponse)
  return target;
}

size_t InvalidateAccessTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.InvalidateAccessTokenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string new_access_token = 2;
  if (this->new_access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_access_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvalidateAccessTokenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.InvalidateAccessTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InvalidateAccessTokenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvalidateAccessTokenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.InvalidateAccessTokenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.InvalidateAccessTokenResponse)
    MergeFrom(*source);
  }
}

void InvalidateAccessTokenResponse::MergeFrom(const InvalidateAccessTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.InvalidateAccessTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.new_access_token().size() > 0) {

    new_access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_access_token_);
  }
}

void InvalidateAccessTokenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.InvalidateAccessTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvalidateAccessTokenResponse::CopyFrom(const InvalidateAccessTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.InvalidateAccessTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvalidateAccessTokenResponse::IsInitialized() const {
  return true;
}

void InvalidateAccessTokenResponse::InternalSwap(InvalidateAccessTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_access_token_.Swap(&other->new_access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata InvalidateAccessTokenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateAccessTokenVersionRequest::InitAsDefaultInstance() {
}
class UpdateAccessTokenVersionRequest::_Internal {
 public:
};

UpdateAccessTokenVersionRequest::UpdateAccessTokenVersionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.UpdateAccessTokenVersionRequest)
}
UpdateAccessTokenVersionRequest::UpdateAccessTokenVersionRequest(const UpdateAccessTokenVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_v1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token_v1().empty()) {
    access_token_v1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_v1_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.UpdateAccessTokenVersionRequest)
}

void UpdateAccessTokenVersionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateAccessTokenVersionRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_v1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateAccessTokenVersionRequest::~UpdateAccessTokenVersionRequest() {
  // @@protoc_insertion_point(destructor:plaid.UpdateAccessTokenVersionRequest)
  SharedDtor();
}

void UpdateAccessTokenVersionRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_v1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateAccessTokenVersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateAccessTokenVersionRequest& UpdateAccessTokenVersionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateAccessTokenVersionRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void UpdateAccessTokenVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.UpdateAccessTokenVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_v1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* UpdateAccessTokenVersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.UpdateAccessTokenVersionRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.UpdateAccessTokenVersionRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token_v1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token_v1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.UpdateAccessTokenVersionRequest.access_token_v1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateAccessTokenVersionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.UpdateAccessTokenVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.UpdateAccessTokenVersionRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.UpdateAccessTokenVersionRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token_v1 = 3;
  if (this->access_token_v1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token_v1().data(), static_cast<int>(this->_internal_access_token_v1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.UpdateAccessTokenVersionRequest.access_token_v1");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token_v1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.UpdateAccessTokenVersionRequest)
  return target;
}

size_t UpdateAccessTokenVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.UpdateAccessTokenVersionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token_v1 = 3;
  if (this->access_token_v1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token_v1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAccessTokenVersionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.UpdateAccessTokenVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateAccessTokenVersionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateAccessTokenVersionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.UpdateAccessTokenVersionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.UpdateAccessTokenVersionRequest)
    MergeFrom(*source);
  }
}

void UpdateAccessTokenVersionRequest::MergeFrom(const UpdateAccessTokenVersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.UpdateAccessTokenVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token_v1().size() > 0) {

    access_token_v1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_v1_);
  }
}

void UpdateAccessTokenVersionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.UpdateAccessTokenVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAccessTokenVersionRequest::CopyFrom(const UpdateAccessTokenVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.UpdateAccessTokenVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAccessTokenVersionRequest::IsInitialized() const {
  return true;
}

void UpdateAccessTokenVersionRequest::InternalSwap(UpdateAccessTokenVersionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_v1_.Swap(&other->access_token_v1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateAccessTokenVersionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateAccessTokenVersionResponse::InitAsDefaultInstance() {
}
class UpdateAccessTokenVersionResponse::_Internal {
 public:
};

UpdateAccessTokenVersionResponse::UpdateAccessTokenVersionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.UpdateAccessTokenVersionResponse)
}
UpdateAccessTokenVersionResponse::UpdateAccessTokenVersionResponse(const UpdateAccessTokenVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_item_id().empty()) {
    item_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.UpdateAccessTokenVersionResponse)
}

void UpdateAccessTokenVersionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateAccessTokenVersionResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateAccessTokenVersionResponse::~UpdateAccessTokenVersionResponse() {
  // @@protoc_insertion_point(destructor:plaid.UpdateAccessTokenVersionResponse)
  SharedDtor();
}

void UpdateAccessTokenVersionResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateAccessTokenVersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateAccessTokenVersionResponse& UpdateAccessTokenVersionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateAccessTokenVersionResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void UpdateAccessTokenVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.UpdateAccessTokenVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* UpdateAccessTokenVersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.UpdateAccessTokenVersionResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.UpdateAccessTokenVersionResponse.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_item_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.UpdateAccessTokenVersionResponse.item_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateAccessTokenVersionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.UpdateAccessTokenVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.UpdateAccessTokenVersionResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string access_token = 2;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.UpdateAccessTokenVersionResponse.access_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_access_token(), target);
  }

  // string item_id = 3;
  if (this->item_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item_id().data(), static_cast<int>(this->_internal_item_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.UpdateAccessTokenVersionResponse.item_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.UpdateAccessTokenVersionResponse)
  return target;
}

size_t UpdateAccessTokenVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.UpdateAccessTokenVersionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string access_token = 2;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  // string item_id = 3;
  if (this->item_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAccessTokenVersionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.UpdateAccessTokenVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateAccessTokenVersionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateAccessTokenVersionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.UpdateAccessTokenVersionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.UpdateAccessTokenVersionResponse)
    MergeFrom(*source);
  }
}

void UpdateAccessTokenVersionResponse::MergeFrom(const UpdateAccessTokenVersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.UpdateAccessTokenVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  if (from.item_id().size() > 0) {

    item_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
}

void UpdateAccessTokenVersionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.UpdateAccessTokenVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAccessTokenVersionResponse::CopyFrom(const UpdateAccessTokenVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.UpdateAccessTokenVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAccessTokenVersionResponse::IsInitialized() const {
  return true;
}

void UpdateAccessTokenVersionResponse::InternalSwap(UpdateAccessTokenVersionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  item_id_.Swap(&other->item_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateAccessTokenVersionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePublicTokenRequest::InitAsDefaultInstance() {
}
class CreatePublicTokenRequest::_Internal {
 public:
};

CreatePublicTokenRequest::CreatePublicTokenRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.CreatePublicTokenRequest)
}
CreatePublicTokenRequest::CreatePublicTokenRequest(const CreatePublicTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.CreatePublicTokenRequest)
}

void CreatePublicTokenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePublicTokenRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreatePublicTokenRequest::~CreatePublicTokenRequest() {
  // @@protoc_insertion_point(destructor:plaid.CreatePublicTokenRequest)
  SharedDtor();
}

void CreatePublicTokenRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreatePublicTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePublicTokenRequest& CreatePublicTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePublicTokenRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void CreatePublicTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.CreatePublicTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreatePublicTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePublicTokenRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePublicTokenRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePublicTokenRequest.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePublicTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.CreatePublicTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePublicTokenRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePublicTokenRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePublicTokenRequest.access_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.CreatePublicTokenRequest)
  return target;
}

size_t CreatePublicTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.CreatePublicTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePublicTokenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.CreatePublicTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePublicTokenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePublicTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.CreatePublicTokenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.CreatePublicTokenRequest)
    MergeFrom(*source);
  }
}

void CreatePublicTokenRequest::MergeFrom(const CreatePublicTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.CreatePublicTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
}

void CreatePublicTokenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.CreatePublicTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePublicTokenRequest::CopyFrom(const CreatePublicTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.CreatePublicTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePublicTokenRequest::IsInitialized() const {
  return true;
}

void CreatePublicTokenRequest::InternalSwap(CreatePublicTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePublicTokenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePublicTokenResponse::InitAsDefaultInstance() {
}
class CreatePublicTokenResponse::_Internal {
 public:
};

CreatePublicTokenResponse::CreatePublicTokenResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.CreatePublicTokenResponse)
}
CreatePublicTokenResponse::CreatePublicTokenResponse(const CreatePublicTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  public_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_token().empty()) {
    public_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_token_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.CreatePublicTokenResponse)
}

void CreatePublicTokenResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePublicTokenResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreatePublicTokenResponse::~CreatePublicTokenResponse() {
  // @@protoc_insertion_point(destructor:plaid.CreatePublicTokenResponse)
  SharedDtor();
}

void CreatePublicTokenResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreatePublicTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePublicTokenResponse& CreatePublicTokenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePublicTokenResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void CreatePublicTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.CreatePublicTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreatePublicTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePublicTokenResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_public_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePublicTokenResponse.public_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePublicTokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.CreatePublicTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePublicTokenResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string public_token = 2;
  if (this->public_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_token().data(), static_cast<int>(this->_internal_public_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePublicTokenResponse.public_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_public_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.CreatePublicTokenResponse)
  return target;
}

size_t CreatePublicTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.CreatePublicTokenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string public_token = 2;
  if (this->public_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePublicTokenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.CreatePublicTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePublicTokenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePublicTokenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.CreatePublicTokenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.CreatePublicTokenResponse)
    MergeFrom(*source);
  }
}

void CreatePublicTokenResponse::MergeFrom(const CreatePublicTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.CreatePublicTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.public_token().size() > 0) {

    public_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_token_);
  }
}

void CreatePublicTokenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.CreatePublicTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePublicTokenResponse::CopyFrom(const CreatePublicTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.CreatePublicTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePublicTokenResponse::IsInitialized() const {
  return true;
}

void CreatePublicTokenResponse::InternalSwap(CreatePublicTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_token_.Swap(&other->public_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePublicTokenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExchangePublicTokenRequest::InitAsDefaultInstance() {
}
class ExchangePublicTokenRequest::_Internal {
 public:
};

ExchangePublicTokenRequest::ExchangePublicTokenRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.ExchangePublicTokenRequest)
}
ExchangePublicTokenRequest::ExchangePublicTokenRequest(const ExchangePublicTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  public_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_token().empty()) {
    public_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_token_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.ExchangePublicTokenRequest)
}

void ExchangePublicTokenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExchangePublicTokenRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExchangePublicTokenRequest::~ExchangePublicTokenRequest() {
  // @@protoc_insertion_point(destructor:plaid.ExchangePublicTokenRequest)
  SharedDtor();
}

void ExchangePublicTokenRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExchangePublicTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExchangePublicTokenRequest& ExchangePublicTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExchangePublicTokenRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void ExchangePublicTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.ExchangePublicTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ExchangePublicTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ExchangePublicTokenRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ExchangePublicTokenRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_public_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ExchangePublicTokenRequest.public_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExchangePublicTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.ExchangePublicTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ExchangePublicTokenRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ExchangePublicTokenRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string public_token = 3;
  if (this->public_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_token().data(), static_cast<int>(this->_internal_public_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ExchangePublicTokenRequest.public_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_public_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.ExchangePublicTokenRequest)
  return target;
}

size_t ExchangePublicTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.ExchangePublicTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string public_token = 3;
  if (this->public_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangePublicTokenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.ExchangePublicTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangePublicTokenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExchangePublicTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.ExchangePublicTokenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.ExchangePublicTokenRequest)
    MergeFrom(*source);
  }
}

void ExchangePublicTokenRequest::MergeFrom(const ExchangePublicTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.ExchangePublicTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.public_token().size() > 0) {

    public_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_token_);
  }
}

void ExchangePublicTokenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.ExchangePublicTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangePublicTokenRequest::CopyFrom(const ExchangePublicTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.ExchangePublicTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangePublicTokenRequest::IsInitialized() const {
  return true;
}

void ExchangePublicTokenRequest::InternalSwap(ExchangePublicTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_token_.Swap(&other->public_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangePublicTokenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExchangePublicTokenResponse::InitAsDefaultInstance() {
}
class ExchangePublicTokenResponse::_Internal {
 public:
};

ExchangePublicTokenResponse::ExchangePublicTokenResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.ExchangePublicTokenResponse)
}
ExchangePublicTokenResponse::ExchangePublicTokenResponse(const ExchangePublicTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_item_id().empty()) {
    item_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.ExchangePublicTokenResponse)
}

void ExchangePublicTokenResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExchangePublicTokenResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExchangePublicTokenResponse::~ExchangePublicTokenResponse() {
  // @@protoc_insertion_point(destructor:plaid.ExchangePublicTokenResponse)
  SharedDtor();
}

void ExchangePublicTokenResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExchangePublicTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExchangePublicTokenResponse& ExchangePublicTokenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExchangePublicTokenResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void ExchangePublicTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.ExchangePublicTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ExchangePublicTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ExchangePublicTokenResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ExchangePublicTokenResponse.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_item_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ExchangePublicTokenResponse.item_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExchangePublicTokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.ExchangePublicTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ExchangePublicTokenResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string access_token = 2;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ExchangePublicTokenResponse.access_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_access_token(), target);
  }

  // string item_id = 3;
  if (this->item_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item_id().data(), static_cast<int>(this->_internal_item_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ExchangePublicTokenResponse.item_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.ExchangePublicTokenResponse)
  return target;
}

size_t ExchangePublicTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.ExchangePublicTokenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string access_token = 2;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  // string item_id = 3;
  if (this->item_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangePublicTokenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.ExchangePublicTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangePublicTokenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExchangePublicTokenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.ExchangePublicTokenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.ExchangePublicTokenResponse)
    MergeFrom(*source);
  }
}

void ExchangePublicTokenResponse::MergeFrom(const ExchangePublicTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.ExchangePublicTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  if (from.item_id().size() > 0) {

    item_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
}

void ExchangePublicTokenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.ExchangePublicTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangePublicTokenResponse::CopyFrom(const ExchangePublicTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.ExchangePublicTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangePublicTokenResponse::IsInitialized() const {
  return true;
}

void ExchangePublicTokenResponse::InternalSwap(ExchangePublicTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  item_id_.Swap(&other->item_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangePublicTokenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StudentLoanLiability::InitAsDefaultInstance() {
  ::plaid::_StudentLoanLiability_default_instance_._instance.get_mutable()->loan_status_ = const_cast< ::plaid::StudentLoanStatus*>(
      ::plaid::StudentLoanStatus::internal_default_instance());
  ::plaid::_StudentLoanLiability_default_instance_._instance.get_mutable()->pslf_status_ = const_cast< ::plaid::PSLFStatus*>(
      ::plaid::PSLFStatus::internal_default_instance());
  ::plaid::_StudentLoanLiability_default_instance_._instance.get_mutable()->repayment_plan_ = const_cast< ::plaid::StudentLoanRepaymentPlan*>(
      ::plaid::StudentLoanRepaymentPlan::internal_default_instance());
  ::plaid::_StudentLoanLiability_default_instance_._instance.get_mutable()->servicer_address_ = const_cast< ::plaid::StudentLoanServicerAddress*>(
      ::plaid::StudentLoanServicerAddress::internal_default_instance());
}
class StudentLoanLiability::_Internal {
 public:
  static const ::plaid::StudentLoanStatus& loan_status(const StudentLoanLiability* msg);
  static const ::plaid::PSLFStatus& pslf_status(const StudentLoanLiability* msg);
  static const ::plaid::StudentLoanRepaymentPlan& repayment_plan(const StudentLoanLiability* msg);
  static const ::plaid::StudentLoanServicerAddress& servicer_address(const StudentLoanLiability* msg);
};

const ::plaid::StudentLoanStatus&
StudentLoanLiability::_Internal::loan_status(const StudentLoanLiability* msg) {
  return *msg->loan_status_;
}
const ::plaid::PSLFStatus&
StudentLoanLiability::_Internal::pslf_status(const StudentLoanLiability* msg) {
  return *msg->pslf_status_;
}
const ::plaid::StudentLoanRepaymentPlan&
StudentLoanLiability::_Internal::repayment_plan(const StudentLoanLiability* msg) {
  return *msg->repayment_plan_;
}
const ::plaid::StudentLoanServicerAddress&
StudentLoanLiability::_Internal::servicer_address(const StudentLoanLiability* msg) {
  return *msg->servicer_address_;
}
StudentLoanLiability::StudentLoanLiability()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.StudentLoanLiability)
}
StudentLoanLiability::StudentLoanLiability(const StudentLoanLiability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      disbursement_dates_(from.disbursement_dates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  account_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_number().empty()) {
    account_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_number_);
  }
  expected_payoff_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expected_payoff_date().empty()) {
    expected_payoff_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expected_payoff_date_);
  }
  guarantor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_guarantor().empty()) {
    guarantor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guarantor_);
  }
  last_payment_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_payment_date().empty()) {
    last_payment_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_payment_date_);
  }
  last_statement_issue_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_statement_issue_date().empty()) {
    last_statement_issue_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_statement_issue_date_);
  }
  loan_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loan_name().empty()) {
    loan_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.loan_name_);
  }
  next_payment_due_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_payment_due_date().empty()) {
    next_payment_due_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_payment_due_date_);
  }
  origination_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_origination_date().empty()) {
    origination_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.origination_date_);
  }
  payment_reference_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_reference_number().empty()) {
    payment_reference_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_reference_number_);
  }
  sequence_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sequence_number().empty()) {
    sequence_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sequence_number_);
  }
  if (from._internal_has_loan_status()) {
    loan_status_ = new ::plaid::StudentLoanStatus(*from.loan_status_);
  } else {
    loan_status_ = nullptr;
  }
  if (from._internal_has_pslf_status()) {
    pslf_status_ = new ::plaid::PSLFStatus(*from.pslf_status_);
  } else {
    pslf_status_ = nullptr;
  }
  if (from._internal_has_repayment_plan()) {
    repayment_plan_ = new ::plaid::StudentLoanRepaymentPlan(*from.repayment_plan_);
  } else {
    repayment_plan_ = nullptr;
  }
  if (from._internal_has_servicer_address()) {
    servicer_address_ = new ::plaid::StudentLoanServicerAddress(*from.servicer_address_);
  } else {
    servicer_address_ = nullptr;
  }
  ::memcpy(&interest_rate_percentage_, &from.interest_rate_percentage_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_overdue_) -
    reinterpret_cast<char*>(&interest_rate_percentage_)) + sizeof(is_overdue_));
  // @@protoc_insertion_point(copy_constructor:plaid.StudentLoanLiability)
}

void StudentLoanLiability::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StudentLoanLiability_plaid_2eproto.base);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expected_payoff_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guarantor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_payment_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_statement_issue_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loan_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_payment_due_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  origination_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_reference_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&loan_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_overdue_) -
      reinterpret_cast<char*>(&loan_status_)) + sizeof(is_overdue_));
}

StudentLoanLiability::~StudentLoanLiability() {
  // @@protoc_insertion_point(destructor:plaid.StudentLoanLiability)
  SharedDtor();
}

void StudentLoanLiability::SharedDtor() {
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expected_payoff_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guarantor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_payment_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_statement_issue_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loan_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_payment_due_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  origination_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_reference_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete loan_status_;
  if (this != internal_default_instance()) delete pslf_status_;
  if (this != internal_default_instance()) delete repayment_plan_;
  if (this != internal_default_instance()) delete servicer_address_;
}

void StudentLoanLiability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StudentLoanLiability& StudentLoanLiability::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StudentLoanLiability_plaid_2eproto.base);
  return *internal_default_instance();
}


void StudentLoanLiability::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.StudentLoanLiability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disbursement_dates_.Clear();
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expected_payoff_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guarantor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_payment_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_statement_issue_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loan_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_payment_due_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  origination_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_reference_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && loan_status_ != nullptr) {
    delete loan_status_;
  }
  loan_status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pslf_status_ != nullptr) {
    delete pslf_status_;
  }
  pslf_status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && repayment_plan_ != nullptr) {
    delete repayment_plan_;
  }
  repayment_plan_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && servicer_address_ != nullptr) {
    delete servicer_address_;
  }
  servicer_address_ = nullptr;
  ::memset(&interest_rate_percentage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_overdue_) -
      reinterpret_cast<char*>(&interest_rate_percentage_)) + sizeof(is_overdue_));
  _internal_metadata_.Clear();
}

const char* StudentLoanLiability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanLiability.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanLiability.account_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string disbursement_dates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_disbursement_dates();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanLiability.disbursement_dates"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string expected_payoff_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_expected_payoff_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanLiability.expected_payoff_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string guarantor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_guarantor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanLiability.guarantor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double interest_rate_percentage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          interest_rate_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool is_overdue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_overdue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double last_payment_amount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          last_payment_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string last_payment_date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_last_payment_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanLiability.last_payment_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double last_satement_balance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          last_satement_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string last_statement_issue_date = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_last_statement_issue_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanLiability.last_statement_issue_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string loan_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_loan_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanLiability.loan_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.StudentLoanStatus loan_status = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_loan_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double minimum_payment_amount = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          minimum_payment_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string next_payment_due_date = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_next_payment_due_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanLiability.next_payment_due_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string origination_date = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_origination_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanLiability.origination_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double origination_principal_amount = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          origination_principal_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double outstanding_interest_amount = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          outstanding_interest_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string payment_reference_number = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_payment_reference_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanLiability.payment_reference_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.PSLFStatus pslf_status = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_pslf_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.StudentLoanRepaymentPlan repayment_plan = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_repayment_plan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sequence_number = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_sequence_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanLiability.sequence_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.StudentLoanServicerAddress servicer_address = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_servicer_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ytd_interest_paid = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          ytd_interest_paid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ytd_principal_paid = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          ytd_principal_paid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StudentLoanLiability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.StudentLoanLiability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanLiability.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string account_number = 2;
  if (this->account_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_number().data(), static_cast<int>(this->_internal_account_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanLiability.account_number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account_number(), target);
  }

  // repeated string disbursement_dates = 3;
  for (int i = 0, n = this->_internal_disbursement_dates_size(); i < n; i++) {
    const auto& s = this->_internal_disbursement_dates(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanLiability.disbursement_dates");
    target = stream->WriteString(3, s, target);
  }

  // string expected_payoff_date = 4;
  if (this->expected_payoff_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expected_payoff_date().data(), static_cast<int>(this->_internal_expected_payoff_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanLiability.expected_payoff_date");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_expected_payoff_date(), target);
  }

  // string guarantor = 5;
  if (this->guarantor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guarantor().data(), static_cast<int>(this->_internal_guarantor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanLiability.guarantor");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_guarantor(), target);
  }

  // double interest_rate_percentage = 6;
  if (!(this->interest_rate_percentage() <= 0 && this->interest_rate_percentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_interest_rate_percentage(), target);
  }

  // bool is_overdue = 7;
  if (this->is_overdue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_overdue(), target);
  }

  // double last_payment_amount = 8;
  if (!(this->last_payment_amount() <= 0 && this->last_payment_amount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_last_payment_amount(), target);
  }

  // string last_payment_date = 9;
  if (this->last_payment_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_payment_date().data(), static_cast<int>(this->_internal_last_payment_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanLiability.last_payment_date");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_last_payment_date(), target);
  }

  // double last_satement_balance = 10;
  if (!(this->last_satement_balance() <= 0 && this->last_satement_balance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_last_satement_balance(), target);
  }

  // string last_statement_issue_date = 11;
  if (this->last_statement_issue_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_statement_issue_date().data(), static_cast<int>(this->_internal_last_statement_issue_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanLiability.last_statement_issue_date");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_last_statement_issue_date(), target);
  }

  // string loan_name = 12;
  if (this->loan_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loan_name().data(), static_cast<int>(this->_internal_loan_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanLiability.loan_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_loan_name(), target);
  }

  // .plaid.StudentLoanStatus loan_status = 13;
  if (this->has_loan_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::loan_status(this), target, stream);
  }

  // double minimum_payment_amount = 14;
  if (!(this->minimum_payment_amount() <= 0 && this->minimum_payment_amount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_minimum_payment_amount(), target);
  }

  // string next_payment_due_date = 15;
  if (this->next_payment_due_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_payment_due_date().data(), static_cast<int>(this->_internal_next_payment_due_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanLiability.next_payment_due_date");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_next_payment_due_date(), target);
  }

  // string origination_date = 16;
  if (this->origination_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_origination_date().data(), static_cast<int>(this->_internal_origination_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanLiability.origination_date");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_origination_date(), target);
  }

  // double origination_principal_amount = 17;
  if (!(this->origination_principal_amount() <= 0 && this->origination_principal_amount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_origination_principal_amount(), target);
  }

  // double outstanding_interest_amount = 18;
  if (!(this->outstanding_interest_amount() <= 0 && this->outstanding_interest_amount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_outstanding_interest_amount(), target);
  }

  // string payment_reference_number = 19;
  if (this->payment_reference_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_reference_number().data(), static_cast<int>(this->_internal_payment_reference_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanLiability.payment_reference_number");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_payment_reference_number(), target);
  }

  // .plaid.PSLFStatus pslf_status = 20;
  if (this->has_pslf_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::pslf_status(this), target, stream);
  }

  // .plaid.StudentLoanRepaymentPlan repayment_plan = 21;
  if (this->has_repayment_plan()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::repayment_plan(this), target, stream);
  }

  // string sequence_number = 22;
  if (this->sequence_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence_number().data(), static_cast<int>(this->_internal_sequence_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanLiability.sequence_number");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_sequence_number(), target);
  }

  // .plaid.StudentLoanServicerAddress servicer_address = 23;
  if (this->has_servicer_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::servicer_address(this), target, stream);
  }

  // double ytd_interest_paid = 24;
  if (!(this->ytd_interest_paid() <= 0 && this->ytd_interest_paid() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_ytd_interest_paid(), target);
  }

  // double ytd_principal_paid = 25;
  if (!(this->ytd_principal_paid() <= 0 && this->ytd_principal_paid() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_ytd_principal_paid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.StudentLoanLiability)
  return target;
}

size_t StudentLoanLiability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.StudentLoanLiability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string disbursement_dates = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(disbursement_dates_.size());
  for (int i = 0, n = disbursement_dates_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      disbursement_dates_.Get(i));
  }

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string account_number = 2;
  if (this->account_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_number());
  }

  // string expected_payoff_date = 4;
  if (this->expected_payoff_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expected_payoff_date());
  }

  // string guarantor = 5;
  if (this->guarantor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guarantor());
  }

  // string last_payment_date = 9;
  if (this->last_payment_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_payment_date());
  }

  // string last_statement_issue_date = 11;
  if (this->last_statement_issue_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_statement_issue_date());
  }

  // string loan_name = 12;
  if (this->loan_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loan_name());
  }

  // string next_payment_due_date = 15;
  if (this->next_payment_due_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_payment_due_date());
  }

  // string origination_date = 16;
  if (this->origination_date().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_origination_date());
  }

  // string payment_reference_number = 19;
  if (this->payment_reference_number().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_reference_number());
  }

  // string sequence_number = 22;
  if (this->sequence_number().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence_number());
  }

  // .plaid.StudentLoanStatus loan_status = 13;
  if (this->has_loan_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loan_status_);
  }

  // .plaid.PSLFStatus pslf_status = 20;
  if (this->has_pslf_status()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pslf_status_);
  }

  // .plaid.StudentLoanRepaymentPlan repayment_plan = 21;
  if (this->has_repayment_plan()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *repayment_plan_);
  }

  // .plaid.StudentLoanServicerAddress servicer_address = 23;
  if (this->has_servicer_address()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *servicer_address_);
  }

  // double interest_rate_percentage = 6;
  if (!(this->interest_rate_percentage() <= 0 && this->interest_rate_percentage() >= 0)) {
    total_size += 1 + 8;
  }

  // double last_payment_amount = 8;
  if (!(this->last_payment_amount() <= 0 && this->last_payment_amount() >= 0)) {
    total_size += 1 + 8;
  }

  // double last_satement_balance = 10;
  if (!(this->last_satement_balance() <= 0 && this->last_satement_balance() >= 0)) {
    total_size += 1 + 8;
  }

  // double minimum_payment_amount = 14;
  if (!(this->minimum_payment_amount() <= 0 && this->minimum_payment_amount() >= 0)) {
    total_size += 1 + 8;
  }

  // double origination_principal_amount = 17;
  if (!(this->origination_principal_amount() <= 0 && this->origination_principal_amount() >= 0)) {
    total_size += 2 + 8;
  }

  // double outstanding_interest_amount = 18;
  if (!(this->outstanding_interest_amount() <= 0 && this->outstanding_interest_amount() >= 0)) {
    total_size += 2 + 8;
  }

  // double ytd_interest_paid = 24;
  if (!(this->ytd_interest_paid() <= 0 && this->ytd_interest_paid() >= 0)) {
    total_size += 2 + 8;
  }

  // double ytd_principal_paid = 25;
  if (!(this->ytd_principal_paid() <= 0 && this->ytd_principal_paid() >= 0)) {
    total_size += 2 + 8;
  }

  // bool is_overdue = 7;
  if (this->is_overdue() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StudentLoanLiability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.StudentLoanLiability)
  GOOGLE_DCHECK_NE(&from, this);
  const StudentLoanLiability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StudentLoanLiability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.StudentLoanLiability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.StudentLoanLiability)
    MergeFrom(*source);
  }
}

void StudentLoanLiability::MergeFrom(const StudentLoanLiability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.StudentLoanLiability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disbursement_dates_.MergeFrom(from.disbursement_dates_);
  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.account_number().size() > 0) {

    account_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_number_);
  }
  if (from.expected_payoff_date().size() > 0) {

    expected_payoff_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expected_payoff_date_);
  }
  if (from.guarantor().size() > 0) {

    guarantor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guarantor_);
  }
  if (from.last_payment_date().size() > 0) {

    last_payment_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_payment_date_);
  }
  if (from.last_statement_issue_date().size() > 0) {

    last_statement_issue_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_statement_issue_date_);
  }
  if (from.loan_name().size() > 0) {

    loan_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.loan_name_);
  }
  if (from.next_payment_due_date().size() > 0) {

    next_payment_due_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_payment_due_date_);
  }
  if (from.origination_date().size() > 0) {

    origination_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.origination_date_);
  }
  if (from.payment_reference_number().size() > 0) {

    payment_reference_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_reference_number_);
  }
  if (from.sequence_number().size() > 0) {

    sequence_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sequence_number_);
  }
  if (from.has_loan_status()) {
    _internal_mutable_loan_status()->::plaid::StudentLoanStatus::MergeFrom(from._internal_loan_status());
  }
  if (from.has_pslf_status()) {
    _internal_mutable_pslf_status()->::plaid::PSLFStatus::MergeFrom(from._internal_pslf_status());
  }
  if (from.has_repayment_plan()) {
    _internal_mutable_repayment_plan()->::plaid::StudentLoanRepaymentPlan::MergeFrom(from._internal_repayment_plan());
  }
  if (from.has_servicer_address()) {
    _internal_mutable_servicer_address()->::plaid::StudentLoanServicerAddress::MergeFrom(from._internal_servicer_address());
  }
  if (!(from.interest_rate_percentage() <= 0 && from.interest_rate_percentage() >= 0)) {
    _internal_set_interest_rate_percentage(from._internal_interest_rate_percentage());
  }
  if (!(from.last_payment_amount() <= 0 && from.last_payment_amount() >= 0)) {
    _internal_set_last_payment_amount(from._internal_last_payment_amount());
  }
  if (!(from.last_satement_balance() <= 0 && from.last_satement_balance() >= 0)) {
    _internal_set_last_satement_balance(from._internal_last_satement_balance());
  }
  if (!(from.minimum_payment_amount() <= 0 && from.minimum_payment_amount() >= 0)) {
    _internal_set_minimum_payment_amount(from._internal_minimum_payment_amount());
  }
  if (!(from.origination_principal_amount() <= 0 && from.origination_principal_amount() >= 0)) {
    _internal_set_origination_principal_amount(from._internal_origination_principal_amount());
  }
  if (!(from.outstanding_interest_amount() <= 0 && from.outstanding_interest_amount() >= 0)) {
    _internal_set_outstanding_interest_amount(from._internal_outstanding_interest_amount());
  }
  if (!(from.ytd_interest_paid() <= 0 && from.ytd_interest_paid() >= 0)) {
    _internal_set_ytd_interest_paid(from._internal_ytd_interest_paid());
  }
  if (!(from.ytd_principal_paid() <= 0 && from.ytd_principal_paid() >= 0)) {
    _internal_set_ytd_principal_paid(from._internal_ytd_principal_paid());
  }
  if (from.is_overdue() != 0) {
    _internal_set_is_overdue(from._internal_is_overdue());
  }
}

void StudentLoanLiability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.StudentLoanLiability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StudentLoanLiability::CopyFrom(const StudentLoanLiability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.StudentLoanLiability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StudentLoanLiability::IsInitialized() const {
  return true;
}

void StudentLoanLiability::InternalSwap(StudentLoanLiability* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  disbursement_dates_.InternalSwap(&other->disbursement_dates_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_number_.Swap(&other->account_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  expected_payoff_date_.Swap(&other->expected_payoff_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guarantor_.Swap(&other->guarantor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_payment_date_.Swap(&other->last_payment_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_statement_issue_date_.Swap(&other->last_statement_issue_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  loan_name_.Swap(&other->loan_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  next_payment_due_date_.Swap(&other->next_payment_due_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  origination_date_.Swap(&other->origination_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_reference_number_.Swap(&other->payment_reference_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sequence_number_.Swap(&other->sequence_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(loan_status_, other->loan_status_);
  swap(pslf_status_, other->pslf_status_);
  swap(repayment_plan_, other->repayment_plan_);
  swap(servicer_address_, other->servicer_address_);
  swap(interest_rate_percentage_, other->interest_rate_percentage_);
  swap(last_payment_amount_, other->last_payment_amount_);
  swap(last_satement_balance_, other->last_satement_balance_);
  swap(minimum_payment_amount_, other->minimum_payment_amount_);
  swap(origination_principal_amount_, other->origination_principal_amount_);
  swap(outstanding_interest_amount_, other->outstanding_interest_amount_);
  swap(ytd_interest_paid_, other->ytd_interest_paid_);
  swap(ytd_principal_paid_, other->ytd_principal_paid_);
  swap(is_overdue_, other->is_overdue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StudentLoanLiability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PSLFStatus::InitAsDefaultInstance() {
}
class PSLFStatus::_Internal {
 public:
};

PSLFStatus::PSLFStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.PSLFStatus)
}
PSLFStatus::PSLFStatus(const PSLFStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  estimated_eligibility_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_estimated_eligibility_date().empty()) {
    estimated_eligibility_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.estimated_eligibility_date_);
  }
  ::memcpy(&payments_made_, &from.payments_made_,
    static_cast<size_t>(reinterpret_cast<char*>(&payments_remaining_) -
    reinterpret_cast<char*>(&payments_made_)) + sizeof(payments_remaining_));
  // @@protoc_insertion_point(copy_constructor:plaid.PSLFStatus)
}

void PSLFStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PSLFStatus_plaid_2eproto.base);
  estimated_eligibility_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&payments_made_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&payments_remaining_) -
      reinterpret_cast<char*>(&payments_made_)) + sizeof(payments_remaining_));
}

PSLFStatus::~PSLFStatus() {
  // @@protoc_insertion_point(destructor:plaid.PSLFStatus)
  SharedDtor();
}

void PSLFStatus::SharedDtor() {
  estimated_eligibility_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PSLFStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PSLFStatus& PSLFStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PSLFStatus_plaid_2eproto.base);
  return *internal_default_instance();
}


void PSLFStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.PSLFStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  estimated_eligibility_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&payments_made_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&payments_remaining_) -
      reinterpret_cast<char*>(&payments_made_)) + sizeof(payments_remaining_));
  _internal_metadata_.Clear();
}

const char* PSLFStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string estimated_eligibility_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_estimated_eligibility_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.PSLFStatus.estimated_eligibility_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 payments_made = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          payments_made_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 payments_remaining = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          payments_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PSLFStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.PSLFStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string estimated_eligibility_date = 1;
  if (this->estimated_eligibility_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_estimated_eligibility_date().data(), static_cast<int>(this->_internal_estimated_eligibility_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.PSLFStatus.estimated_eligibility_date");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_estimated_eligibility_date(), target);
  }

  // int64 payments_made = 2;
  if (this->payments_made() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_payments_made(), target);
  }

  // int64 payments_remaining = 3;
  if (this->payments_remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_payments_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.PSLFStatus)
  return target;
}

size_t PSLFStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.PSLFStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string estimated_eligibility_date = 1;
  if (this->estimated_eligibility_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_estimated_eligibility_date());
  }

  // int64 payments_made = 2;
  if (this->payments_made() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_payments_made());
  }

  // int64 payments_remaining = 3;
  if (this->payments_remaining() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_payments_remaining());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PSLFStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.PSLFStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PSLFStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PSLFStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.PSLFStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.PSLFStatus)
    MergeFrom(*source);
  }
}

void PSLFStatus::MergeFrom(const PSLFStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.PSLFStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.estimated_eligibility_date().size() > 0) {

    estimated_eligibility_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.estimated_eligibility_date_);
  }
  if (from.payments_made() != 0) {
    _internal_set_payments_made(from._internal_payments_made());
  }
  if (from.payments_remaining() != 0) {
    _internal_set_payments_remaining(from._internal_payments_remaining());
  }
}

void PSLFStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.PSLFStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSLFStatus::CopyFrom(const PSLFStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.PSLFStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSLFStatus::IsInitialized() const {
  return true;
}

void PSLFStatus::InternalSwap(PSLFStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  estimated_eligibility_date_.Swap(&other->estimated_eligibility_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(payments_made_, other->payments_made_);
  swap(payments_remaining_, other->payments_remaining_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PSLFStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StudentLoanServicerAddress::InitAsDefaultInstance() {
}
class StudentLoanServicerAddress::_Internal {
 public:
};

StudentLoanServicerAddress::StudentLoanServicerAddress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.StudentLoanServicerAddress)
}
StudentLoanServicerAddress::StudentLoanServicerAddress(const StudentLoanServicerAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_city().empty()) {
    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  postal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_postal_code().empty()) {
    postal_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.postal_code_);
  }
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_region().empty()) {
    region_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  street_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_street().empty()) {
    street_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.street_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.StudentLoanServicerAddress)
}

void StudentLoanServicerAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StudentLoanServicerAddress_plaid_2eproto.base);
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  street_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StudentLoanServicerAddress::~StudentLoanServicerAddress() {
  // @@protoc_insertion_point(destructor:plaid.StudentLoanServicerAddress)
  SharedDtor();
}

void StudentLoanServicerAddress::SharedDtor() {
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  street_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StudentLoanServicerAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StudentLoanServicerAddress& StudentLoanServicerAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StudentLoanServicerAddress_plaid_2eproto.base);
  return *internal_default_instance();
}


void StudentLoanServicerAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.StudentLoanServicerAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  street_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* StudentLoanServicerAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string city = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_city();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanServicerAddress.city"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanServicerAddress.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string postal_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_postal_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanServicerAddress.postal_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string region = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanServicerAddress.region"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string street = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_street();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanServicerAddress.street"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StudentLoanServicerAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.StudentLoanServicerAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string city = 1;
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanServicerAddress.city");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_city(), target);
  }

  // string country = 2;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanServicerAddress.country");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_country(), target);
  }

  // string postal_code = 3;
  if (this->postal_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_postal_code().data(), static_cast<int>(this->_internal_postal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanServicerAddress.postal_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_postal_code(), target);
  }

  // string region = 4;
  if (this->region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanServicerAddress.region");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_region(), target);
  }

  // string street = 5;
  if (this->street().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_street().data(), static_cast<int>(this->_internal_street().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanServicerAddress.street");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_street(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.StudentLoanServicerAddress)
  return target;
}

size_t StudentLoanServicerAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.StudentLoanServicerAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string city = 1;
  if (this->city().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string country = 2;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string postal_code = 3;
  if (this->postal_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_postal_code());
  }

  // string region = 4;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string street = 5;
  if (this->street().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_street());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StudentLoanServicerAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.StudentLoanServicerAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const StudentLoanServicerAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StudentLoanServicerAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.StudentLoanServicerAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.StudentLoanServicerAddress)
    MergeFrom(*source);
  }
}

void StudentLoanServicerAddress::MergeFrom(const StudentLoanServicerAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.StudentLoanServicerAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.city().size() > 0) {

    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.postal_code().size() > 0) {

    postal_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.postal_code_);
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.street().size() > 0) {

    street_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.street_);
  }
}

void StudentLoanServicerAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.StudentLoanServicerAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StudentLoanServicerAddress::CopyFrom(const StudentLoanServicerAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.StudentLoanServicerAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StudentLoanServicerAddress::IsInitialized() const {
  return true;
}

void StudentLoanServicerAddress::InternalSwap(StudentLoanServicerAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  postal_code_.Swap(&other->postal_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  street_.Swap(&other->street_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StudentLoanServicerAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StudentLoanStatus::InitAsDefaultInstance() {
}
class StudentLoanStatus::_Internal {
 public:
};

StudentLoanStatus::StudentLoanStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.StudentLoanStatus)
}
StudentLoanStatus::StudentLoanStatus(const StudentLoanStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_date().empty()) {
    end_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_date_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.StudentLoanStatus)
}

void StudentLoanStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StudentLoanStatus_plaid_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StudentLoanStatus::~StudentLoanStatus() {
  // @@protoc_insertion_point(destructor:plaid.StudentLoanStatus)
  SharedDtor();
}

void StudentLoanStatus::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StudentLoanStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StudentLoanStatus& StudentLoanStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StudentLoanStatus_plaid_2eproto.base);
  return *internal_default_instance();
}


void StudentLoanStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.StudentLoanStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* StudentLoanStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanStatus.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_end_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanStatus.end_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StudentLoanStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.StudentLoanStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanStatus.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string end_date = 2;
  if (this->end_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_date().data(), static_cast<int>(this->_internal_end_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanStatus.end_date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_end_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.StudentLoanStatus)
  return target;
}

size_t StudentLoanStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.StudentLoanStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string end_date = 2;
  if (this->end_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StudentLoanStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.StudentLoanStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const StudentLoanStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StudentLoanStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.StudentLoanStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.StudentLoanStatus)
    MergeFrom(*source);
  }
}

void StudentLoanStatus::MergeFrom(const StudentLoanStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.StudentLoanStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.end_date().size() > 0) {

    end_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_date_);
  }
}

void StudentLoanStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.StudentLoanStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StudentLoanStatus::CopyFrom(const StudentLoanStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.StudentLoanStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StudentLoanStatus::IsInitialized() const {
  return true;
}

void StudentLoanStatus::InternalSwap(StudentLoanStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_date_.Swap(&other->end_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StudentLoanStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StudentLoanRepaymentPlan::InitAsDefaultInstance() {
}
class StudentLoanRepaymentPlan::_Internal {
 public:
};

StudentLoanRepaymentPlan::StudentLoanRepaymentPlan()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.StudentLoanRepaymentPlan)
}
StudentLoanRepaymentPlan::StudentLoanRepaymentPlan(const StudentLoanRepaymentPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.StudentLoanRepaymentPlan)
}

void StudentLoanRepaymentPlan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StudentLoanRepaymentPlan_plaid_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StudentLoanRepaymentPlan::~StudentLoanRepaymentPlan() {
  // @@protoc_insertion_point(destructor:plaid.StudentLoanRepaymentPlan)
  SharedDtor();
}

void StudentLoanRepaymentPlan::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StudentLoanRepaymentPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StudentLoanRepaymentPlan& StudentLoanRepaymentPlan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StudentLoanRepaymentPlan_plaid_2eproto.base);
  return *internal_default_instance();
}


void StudentLoanRepaymentPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.StudentLoanRepaymentPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* StudentLoanRepaymentPlan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanRepaymentPlan.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.StudentLoanRepaymentPlan.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StudentLoanRepaymentPlan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.StudentLoanRepaymentPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanRepaymentPlan.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.StudentLoanRepaymentPlan.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.StudentLoanRepaymentPlan)
  return target;
}

size_t StudentLoanRepaymentPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.StudentLoanRepaymentPlan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StudentLoanRepaymentPlan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.StudentLoanRepaymentPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const StudentLoanRepaymentPlan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StudentLoanRepaymentPlan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.StudentLoanRepaymentPlan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.StudentLoanRepaymentPlan)
    MergeFrom(*source);
  }
}

void StudentLoanRepaymentPlan::MergeFrom(const StudentLoanRepaymentPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.StudentLoanRepaymentPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void StudentLoanRepaymentPlan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.StudentLoanRepaymentPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StudentLoanRepaymentPlan::CopyFrom(const StudentLoanRepaymentPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.StudentLoanRepaymentPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StudentLoanRepaymentPlan::IsInitialized() const {
  return true;
}

void StudentLoanRepaymentPlan::InternalSwap(StudentLoanRepaymentPlan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StudentLoanRepaymentPlan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLiabilitiesRequestOptions::InitAsDefaultInstance() {
}
class GetLiabilitiesRequestOptions::_Internal {
 public:
};

GetLiabilitiesRequestOptions::GetLiabilitiesRequestOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetLiabilitiesRequestOptions)
}
GetLiabilitiesRequestOptions::GetLiabilitiesRequestOptions(const GetLiabilitiesRequestOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plaid.GetLiabilitiesRequestOptions)
}

void GetLiabilitiesRequestOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLiabilitiesRequestOptions_plaid_2eproto.base);
}

GetLiabilitiesRequestOptions::~GetLiabilitiesRequestOptions() {
  // @@protoc_insertion_point(destructor:plaid.GetLiabilitiesRequestOptions)
  SharedDtor();
}

void GetLiabilitiesRequestOptions::SharedDtor() {
}

void GetLiabilitiesRequestOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLiabilitiesRequestOptions& GetLiabilitiesRequestOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLiabilitiesRequestOptions_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetLiabilitiesRequestOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetLiabilitiesRequestOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* GetLiabilitiesRequestOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_account_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetLiabilitiesRequestOptions.account_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLiabilitiesRequestOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetLiabilitiesRequestOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    const auto& s = this->_internal_account_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetLiabilitiesRequestOptions.account_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetLiabilitiesRequestOptions)
  return target;
}

size_t GetLiabilitiesRequestOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetLiabilitiesRequestOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(account_ids_.size());
  for (int i = 0, n = account_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      account_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLiabilitiesRequestOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetLiabilitiesRequestOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLiabilitiesRequestOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLiabilitiesRequestOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetLiabilitiesRequestOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetLiabilitiesRequestOptions)
    MergeFrom(*source);
  }
}

void GetLiabilitiesRequestOptions::MergeFrom(const GetLiabilitiesRequestOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetLiabilitiesRequestOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void GetLiabilitiesRequestOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetLiabilitiesRequestOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLiabilitiesRequestOptions::CopyFrom(const GetLiabilitiesRequestOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetLiabilitiesRequestOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLiabilitiesRequestOptions::IsInitialized() const {
  return true;
}

void GetLiabilitiesRequestOptions::InternalSwap(GetLiabilitiesRequestOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLiabilitiesRequestOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLiabilitiesRequest::InitAsDefaultInstance() {
  ::plaid::_GetLiabilitiesRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::plaid::GetLiabilitiesRequestOptions*>(
      ::plaid::GetLiabilitiesRequestOptions::internal_default_instance());
}
class GetLiabilitiesRequest::_Internal {
 public:
  static const ::plaid::GetLiabilitiesRequestOptions& options(const GetLiabilitiesRequest* msg);
};

const ::plaid::GetLiabilitiesRequestOptions&
GetLiabilitiesRequest::_Internal::options(const GetLiabilitiesRequest* msg) {
  return *msg->options_;
}
GetLiabilitiesRequest::GetLiabilitiesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetLiabilitiesRequest)
}
GetLiabilitiesRequest::GetLiabilitiesRequest(const GetLiabilitiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  if (from._internal_has_options()) {
    options_ = new ::plaid::GetLiabilitiesRequestOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetLiabilitiesRequest)
}

void GetLiabilitiesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLiabilitiesRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  options_ = nullptr;
}

GetLiabilitiesRequest::~GetLiabilitiesRequest() {
  // @@protoc_insertion_point(destructor:plaid.GetLiabilitiesRequest)
  SharedDtor();
}

void GetLiabilitiesRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void GetLiabilitiesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLiabilitiesRequest& GetLiabilitiesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLiabilitiesRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetLiabilitiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetLiabilitiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetLiabilitiesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetLiabilitiesRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetLiabilitiesRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetLiabilitiesRequest.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.GetLiabilitiesRequestOptions options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLiabilitiesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetLiabilitiesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetLiabilitiesRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetLiabilitiesRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetLiabilitiesRequest.access_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token(), target);
  }

  // .plaid.GetLiabilitiesRequestOptions options = 4;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetLiabilitiesRequest)
  return target;
}

size_t GetLiabilitiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetLiabilitiesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  // .plaid.GetLiabilitiesRequestOptions options = 4;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLiabilitiesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetLiabilitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLiabilitiesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLiabilitiesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetLiabilitiesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetLiabilitiesRequest)
    MergeFrom(*source);
  }
}

void GetLiabilitiesRequest::MergeFrom(const GetLiabilitiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetLiabilitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  if (from.has_options()) {
    _internal_mutable_options()->::plaid::GetLiabilitiesRequestOptions::MergeFrom(from._internal_options());
  }
}

void GetLiabilitiesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetLiabilitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLiabilitiesRequest::CopyFrom(const GetLiabilitiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetLiabilitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLiabilitiesRequest::IsInitialized() const {
  return true;
}

void GetLiabilitiesRequest::InternalSwap(GetLiabilitiesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLiabilitiesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLiabilitiesResponse::InitAsDefaultInstance() {
  ::plaid::_GetLiabilitiesResponse_default_instance_._instance.get_mutable()->item_ = const_cast< ::plaid::Item*>(
      ::plaid::Item::internal_default_instance());
  ::plaid::_GetLiabilitiesResponse_default_instance_._instance.get_mutable()->liabilities_ = const_cast< ::plaid::Liabilities*>(
      ::plaid::Liabilities::internal_default_instance());
}
class GetLiabilitiesResponse::_Internal {
 public:
  static const ::plaid::Item& item(const GetLiabilitiesResponse* msg);
  static const ::plaid::Liabilities& liabilities(const GetLiabilitiesResponse* msg);
};

const ::plaid::Item&
GetLiabilitiesResponse::_Internal::item(const GetLiabilitiesResponse* msg) {
  return *msg->item_;
}
const ::plaid::Liabilities&
GetLiabilitiesResponse::_Internal::liabilities(const GetLiabilitiesResponse* msg) {
  return *msg->liabilities_;
}
GetLiabilitiesResponse::GetLiabilitiesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetLiabilitiesResponse)
}
GetLiabilitiesResponse::GetLiabilitiesResponse(const GetLiabilitiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from._internal_has_item()) {
    item_ = new ::plaid::Item(*from.item_);
  } else {
    item_ = nullptr;
  }
  if (from._internal_has_liabilities()) {
    liabilities_ = new ::plaid::Liabilities(*from.liabilities_);
  } else {
    liabilities_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetLiabilitiesResponse)
}

void GetLiabilitiesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLiabilitiesResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&liabilities_) -
      reinterpret_cast<char*>(&item_)) + sizeof(liabilities_));
}

GetLiabilitiesResponse::~GetLiabilitiesResponse() {
  // @@protoc_insertion_point(destructor:plaid.GetLiabilitiesResponse)
  SharedDtor();
}

void GetLiabilitiesResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete item_;
  if (this != internal_default_instance()) delete liabilities_;
}

void GetLiabilitiesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLiabilitiesResponse& GetLiabilitiesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLiabilitiesResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetLiabilitiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetLiabilitiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && liabilities_ != nullptr) {
    delete liabilities_;
  }
  liabilities_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetLiabilitiesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetLiabilitiesResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .plaid.Account accounts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .plaid.Item item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.Liabilities liabilities = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_liabilities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLiabilitiesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetLiabilitiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetLiabilitiesResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // repeated .plaid.Account accounts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_accounts(i), target, stream);
  }

  // .plaid.Item item = 3;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::item(this), target, stream);
  }

  // .plaid.Liabilities liabilities = 4;
  if (this->has_liabilities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::liabilities(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetLiabilitiesResponse)
  return target;
}

size_t GetLiabilitiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetLiabilitiesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.Account accounts = 2;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .plaid.Item item = 3;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  // .plaid.Liabilities liabilities = 4;
  if (this->has_liabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *liabilities_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLiabilitiesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetLiabilitiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLiabilitiesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLiabilitiesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetLiabilitiesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetLiabilitiesResponse)
    MergeFrom(*source);
  }
}

void GetLiabilitiesResponse::MergeFrom(const GetLiabilitiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetLiabilitiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_item()) {
    _internal_mutable_item()->::plaid::Item::MergeFrom(from._internal_item());
  }
  if (from.has_liabilities()) {
    _internal_mutable_liabilities()->::plaid::Liabilities::MergeFrom(from._internal_liabilities());
  }
}

void GetLiabilitiesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetLiabilitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLiabilitiesResponse::CopyFrom(const GetLiabilitiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetLiabilitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLiabilitiesResponse::IsInitialized() const {
  return true;
}

void GetLiabilitiesResponse::InternalSwap(GetLiabilitiesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(item_, other->item_);
  swap(liabilities_, other->liabilities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLiabilitiesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Liabilities::InitAsDefaultInstance() {
}
class Liabilities::_Internal {
 public:
};

Liabilities::Liabilities()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.Liabilities)
}
Liabilities::Liabilities(const Liabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      student_(from.student_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plaid.Liabilities)
}

void Liabilities::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Liabilities_plaid_2eproto.base);
}

Liabilities::~Liabilities() {
  // @@protoc_insertion_point(destructor:plaid.Liabilities)
  SharedDtor();
}

void Liabilities::SharedDtor() {
}

void Liabilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Liabilities& Liabilities::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Liabilities_plaid_2eproto.base);
  return *internal_default_instance();
}


void Liabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.Liabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  student_.Clear();
  _internal_metadata_.Clear();
}

const char* Liabilities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .plaid.StudentLoanLiability student = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_student(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Liabilities::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.Liabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .plaid.StudentLoanLiability student = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_student_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_student(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.Liabilities)
  return target;
}

size_t Liabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.Liabilities)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.StudentLoanLiability student = 1;
  total_size += 1UL * this->_internal_student_size();
  for (const auto& msg : this->student_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Liabilities::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.Liabilities)
  GOOGLE_DCHECK_NE(&from, this);
  const Liabilities* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Liabilities>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.Liabilities)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.Liabilities)
    MergeFrom(*source);
  }
}

void Liabilities::MergeFrom(const Liabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.Liabilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  student_.MergeFrom(from.student_);
}

void Liabilities::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.Liabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Liabilities::CopyFrom(const Liabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.Liabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Liabilities::IsInitialized() const {
  return true;
}

void Liabilities::InternalSwap(Liabilities* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  student_.InternalSwap(&other->student_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Liabilities::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLiabilitiesOptions::InitAsDefaultInstance() {
}
class GetLiabilitiesOptions::_Internal {
 public:
};

GetLiabilitiesOptions::GetLiabilitiesOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetLiabilitiesOptions)
}
GetLiabilitiesOptions::GetLiabilitiesOptions(const GetLiabilitiesOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plaid.GetLiabilitiesOptions)
}

void GetLiabilitiesOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLiabilitiesOptions_plaid_2eproto.base);
}

GetLiabilitiesOptions::~GetLiabilitiesOptions() {
  // @@protoc_insertion_point(destructor:plaid.GetLiabilitiesOptions)
  SharedDtor();
}

void GetLiabilitiesOptions::SharedDtor() {
}

void GetLiabilitiesOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLiabilitiesOptions& GetLiabilitiesOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLiabilitiesOptions_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetLiabilitiesOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetLiabilitiesOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* GetLiabilitiesOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_account_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetLiabilitiesOptions.account_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLiabilitiesOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetLiabilitiesOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    const auto& s = this->_internal_account_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetLiabilitiesOptions.account_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetLiabilitiesOptions)
  return target;
}

size_t GetLiabilitiesOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetLiabilitiesOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(account_ids_.size());
  for (int i = 0, n = account_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      account_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLiabilitiesOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetLiabilitiesOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLiabilitiesOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLiabilitiesOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetLiabilitiesOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetLiabilitiesOptions)
    MergeFrom(*source);
  }
}

void GetLiabilitiesOptions::MergeFrom(const GetLiabilitiesOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetLiabilitiesOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void GetLiabilitiesOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetLiabilitiesOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLiabilitiesOptions::CopyFrom(const GetLiabilitiesOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetLiabilitiesOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLiabilitiesOptions::IsInitialized() const {
  return true;
}

void GetLiabilitiesOptions::InternalSwap(GetLiabilitiesOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLiabilitiesOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PaymentRecipientAddress::InitAsDefaultInstance() {
}
class PaymentRecipientAddress::_Internal {
 public:
};

PaymentRecipientAddress::PaymentRecipientAddress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.PaymentRecipientAddress)
}
PaymentRecipientAddress::PaymentRecipientAddress(const PaymentRecipientAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      street_(from.street_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_city().empty()) {
    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  postal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_postal_code().empty()) {
    postal_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.postal_code_);
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.PaymentRecipientAddress)
}

void PaymentRecipientAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PaymentRecipientAddress_plaid_2eproto.base);
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PaymentRecipientAddress::~PaymentRecipientAddress() {
  // @@protoc_insertion_point(destructor:plaid.PaymentRecipientAddress)
  SharedDtor();
}

void PaymentRecipientAddress::SharedDtor() {
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PaymentRecipientAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PaymentRecipientAddress& PaymentRecipientAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PaymentRecipientAddress_plaid_2eproto.base);
  return *internal_default_instance();
}


void PaymentRecipientAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.PaymentRecipientAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  street_.Clear();
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PaymentRecipientAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string street = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_street();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.PaymentRecipientAddress.street"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string city = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_city();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.PaymentRecipientAddress.city"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string postal_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_postal_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.PaymentRecipientAddress.postal_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.PaymentRecipientAddress.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaymentRecipientAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.PaymentRecipientAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string street = 1;
  for (int i = 0, n = this->_internal_street_size(); i < n; i++) {
    const auto& s = this->_internal_street(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.PaymentRecipientAddress.street");
    target = stream->WriteString(1, s, target);
  }

  // string city = 2;
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.PaymentRecipientAddress.city");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_city(), target);
  }

  // string postal_code = 3;
  if (this->postal_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_postal_code().data(), static_cast<int>(this->_internal_postal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.PaymentRecipientAddress.postal_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_postal_code(), target);
  }

  // string country = 4;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.PaymentRecipientAddress.country");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.PaymentRecipientAddress)
  return target;
}

size_t PaymentRecipientAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.PaymentRecipientAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string street = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(street_.size());
  for (int i = 0, n = street_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      street_.Get(i));
  }

  // string city = 2;
  if (this->city().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string postal_code = 3;
  if (this->postal_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_postal_code());
  }

  // string country = 4;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaymentRecipientAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.PaymentRecipientAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const PaymentRecipientAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PaymentRecipientAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.PaymentRecipientAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.PaymentRecipientAddress)
    MergeFrom(*source);
  }
}

void PaymentRecipientAddress::MergeFrom(const PaymentRecipientAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.PaymentRecipientAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  street_.MergeFrom(from.street_);
  if (from.city().size() > 0) {

    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  if (from.postal_code().size() > 0) {

    postal_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.postal_code_);
  }
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
}

void PaymentRecipientAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.PaymentRecipientAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaymentRecipientAddress::CopyFrom(const PaymentRecipientAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.PaymentRecipientAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentRecipientAddress::IsInitialized() const {
  return true;
}

void PaymentRecipientAddress::InternalSwap(PaymentRecipientAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  street_.InternalSwap(&other->street_);
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  postal_code_.Swap(&other->postal_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentRecipientAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePaymentRecipientRequest::InitAsDefaultInstance() {
}
class CreatePaymentRecipientRequest::_Internal {
 public:
};

CreatePaymentRecipientRequest::CreatePaymentRecipientRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.CreatePaymentRecipientRequest)
}
CreatePaymentRecipientRequest::CreatePaymentRecipientRequest(const CreatePaymentRecipientRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  iban_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iban().empty()) {
    iban_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iban_);
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.CreatePaymentRecipientRequest)
}

void CreatePaymentRecipientRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePaymentRecipientRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iban_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreatePaymentRecipientRequest::~CreatePaymentRecipientRequest() {
  // @@protoc_insertion_point(destructor:plaid.CreatePaymentRecipientRequest)
  SharedDtor();
}

void CreatePaymentRecipientRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iban_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreatePaymentRecipientRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePaymentRecipientRequest& CreatePaymentRecipientRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePaymentRecipientRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void CreatePaymentRecipientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.CreatePaymentRecipientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iban_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreatePaymentRecipientRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentRecipientRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentRecipientRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentRecipientRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iban = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_iban();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentRecipientRequest.iban"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentRecipientRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePaymentRecipientRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.CreatePaymentRecipientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentRecipientRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentRecipientRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentRecipientRequest.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string iban = 4;
  if (this->iban().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iban().data(), static_cast<int>(this->_internal_iban().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentRecipientRequest.iban");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_iban(), target);
  }

  // string address = 5;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentRecipientRequest.address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.CreatePaymentRecipientRequest)
  return target;
}

size_t CreatePaymentRecipientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.CreatePaymentRecipientRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string iban = 4;
  if (this->iban().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iban());
  }

  // string address = 5;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePaymentRecipientRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.CreatePaymentRecipientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePaymentRecipientRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePaymentRecipientRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.CreatePaymentRecipientRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.CreatePaymentRecipientRequest)
    MergeFrom(*source);
  }
}

void CreatePaymentRecipientRequest::MergeFrom(const CreatePaymentRecipientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.CreatePaymentRecipientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.iban().size() > 0) {

    iban_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iban_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void CreatePaymentRecipientRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.CreatePaymentRecipientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePaymentRecipientRequest::CopyFrom(const CreatePaymentRecipientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.CreatePaymentRecipientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePaymentRecipientRequest::IsInitialized() const {
  return true;
}

void CreatePaymentRecipientRequest::InternalSwap(CreatePaymentRecipientRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  iban_.Swap(&other->iban_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePaymentRecipientRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePaymentRecipientResponse::InitAsDefaultInstance() {
}
class CreatePaymentRecipientResponse::_Internal {
 public:
};

CreatePaymentRecipientResponse::CreatePaymentRecipientResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.CreatePaymentRecipientResponse)
}
CreatePaymentRecipientResponse::CreatePaymentRecipientResponse(const CreatePaymentRecipientResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  recipient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_id().empty()) {
    recipient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recipient_id_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.CreatePaymentRecipientResponse)
}

void CreatePaymentRecipientResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePaymentRecipientResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreatePaymentRecipientResponse::~CreatePaymentRecipientResponse() {
  // @@protoc_insertion_point(destructor:plaid.CreatePaymentRecipientResponse)
  SharedDtor();
}

void CreatePaymentRecipientResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreatePaymentRecipientResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePaymentRecipientResponse& CreatePaymentRecipientResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePaymentRecipientResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void CreatePaymentRecipientResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.CreatePaymentRecipientResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreatePaymentRecipientResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentRecipientResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recipient_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_recipient_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentRecipientResponse.recipient_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePaymentRecipientResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.CreatePaymentRecipientResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentRecipientResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string recipient_id = 2;
  if (this->recipient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient_id().data(), static_cast<int>(this->_internal_recipient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentRecipientResponse.recipient_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_recipient_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.CreatePaymentRecipientResponse)
  return target;
}

size_t CreatePaymentRecipientResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.CreatePaymentRecipientResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string recipient_id = 2;
  if (this->recipient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePaymentRecipientResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.CreatePaymentRecipientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePaymentRecipientResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePaymentRecipientResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.CreatePaymentRecipientResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.CreatePaymentRecipientResponse)
    MergeFrom(*source);
  }
}

void CreatePaymentRecipientResponse::MergeFrom(const CreatePaymentRecipientResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.CreatePaymentRecipientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.recipient_id().size() > 0) {

    recipient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recipient_id_);
  }
}

void CreatePaymentRecipientResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.CreatePaymentRecipientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePaymentRecipientResponse::CopyFrom(const CreatePaymentRecipientResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.CreatePaymentRecipientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePaymentRecipientResponse::IsInitialized() const {
  return true;
}

void CreatePaymentRecipientResponse::InternalSwap(CreatePaymentRecipientResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recipient_id_.Swap(&other->recipient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePaymentRecipientResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPaymentRecipientRequest::InitAsDefaultInstance() {
}
class GetPaymentRecipientRequest::_Internal {
 public:
};

GetPaymentRecipientRequest::GetPaymentRecipientRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetPaymentRecipientRequest)
}
GetPaymentRecipientRequest::GetPaymentRecipientRequest(const GetPaymentRecipientRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  recipient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_id().empty()) {
    recipient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recipient_id_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetPaymentRecipientRequest)
}

void GetPaymentRecipientRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPaymentRecipientRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetPaymentRecipientRequest::~GetPaymentRecipientRequest() {
  // @@protoc_insertion_point(destructor:plaid.GetPaymentRecipientRequest)
  SharedDtor();
}

void GetPaymentRecipientRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPaymentRecipientRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPaymentRecipientRequest& GetPaymentRecipientRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPaymentRecipientRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetPaymentRecipientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetPaymentRecipientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetPaymentRecipientRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentRecipientRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentRecipientRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recipient_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recipient_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentRecipientRequest.recipient_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPaymentRecipientRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetPaymentRecipientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentRecipientRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentRecipientRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string recipient_id = 3;
  if (this->recipient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient_id().data(), static_cast<int>(this->_internal_recipient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentRecipientRequest.recipient_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recipient_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetPaymentRecipientRequest)
  return target;
}

size_t GetPaymentRecipientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetPaymentRecipientRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string recipient_id = 3;
  if (this->recipient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPaymentRecipientRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetPaymentRecipientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPaymentRecipientRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPaymentRecipientRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetPaymentRecipientRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetPaymentRecipientRequest)
    MergeFrom(*source);
  }
}

void GetPaymentRecipientRequest::MergeFrom(const GetPaymentRecipientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetPaymentRecipientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.recipient_id().size() > 0) {

    recipient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recipient_id_);
  }
}

void GetPaymentRecipientRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetPaymentRecipientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPaymentRecipientRequest::CopyFrom(const GetPaymentRecipientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetPaymentRecipientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPaymentRecipientRequest::IsInitialized() const {
  return true;
}

void GetPaymentRecipientRequest::InternalSwap(GetPaymentRecipientRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recipient_id_.Swap(&other->recipient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPaymentRecipientRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPaymentRecipientResponse::InitAsDefaultInstance() {
}
class GetPaymentRecipientResponse::_Internal {
 public:
};

GetPaymentRecipientResponse::GetPaymentRecipientResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetPaymentRecipientResponse)
}
GetPaymentRecipientResponse::GetPaymentRecipientResponse(const GetPaymentRecipientResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  recipient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_id().empty()) {
    recipient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recipient_id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  iban_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iban().empty()) {
    iban_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iban_);
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetPaymentRecipientResponse)
}

void GetPaymentRecipientResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPaymentRecipientResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iban_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetPaymentRecipientResponse::~GetPaymentRecipientResponse() {
  // @@protoc_insertion_point(destructor:plaid.GetPaymentRecipientResponse)
  SharedDtor();
}

void GetPaymentRecipientResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iban_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPaymentRecipientResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPaymentRecipientResponse& GetPaymentRecipientResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPaymentRecipientResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetPaymentRecipientResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetPaymentRecipientResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iban_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetPaymentRecipientResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentRecipientResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recipient_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_recipient_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentRecipientResponse.recipient_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentRecipientResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iban = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_iban();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentRecipientResponse.iban"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentRecipientResponse.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPaymentRecipientResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetPaymentRecipientResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentRecipientResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string recipient_id = 2;
  if (this->recipient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient_id().data(), static_cast<int>(this->_internal_recipient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentRecipientResponse.recipient_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_recipient_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentRecipientResponse.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string iban = 4;
  if (this->iban().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iban().data(), static_cast<int>(this->_internal_iban().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentRecipientResponse.iban");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_iban(), target);
  }

  // string address = 5;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentRecipientResponse.address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetPaymentRecipientResponse)
  return target;
}

size_t GetPaymentRecipientResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetPaymentRecipientResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string recipient_id = 2;
  if (this->recipient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient_id());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string iban = 4;
  if (this->iban().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iban());
  }

  // string address = 5;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPaymentRecipientResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetPaymentRecipientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPaymentRecipientResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPaymentRecipientResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetPaymentRecipientResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetPaymentRecipientResponse)
    MergeFrom(*source);
  }
}

void GetPaymentRecipientResponse::MergeFrom(const GetPaymentRecipientResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetPaymentRecipientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.recipient_id().size() > 0) {

    recipient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recipient_id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.iban().size() > 0) {

    iban_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iban_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void GetPaymentRecipientResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetPaymentRecipientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPaymentRecipientResponse::CopyFrom(const GetPaymentRecipientResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetPaymentRecipientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPaymentRecipientResponse::IsInitialized() const {
  return true;
}

void GetPaymentRecipientResponse::InternalSwap(GetPaymentRecipientResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recipient_id_.Swap(&other->recipient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  iban_.Swap(&other->iban_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPaymentRecipientResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPaymentRecipientsRequest::InitAsDefaultInstance() {
}
class ListPaymentRecipientsRequest::_Internal {
 public:
};

ListPaymentRecipientsRequest::ListPaymentRecipientsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.ListPaymentRecipientsRequest)
}
ListPaymentRecipientsRequest::ListPaymentRecipientsRequest(const ListPaymentRecipientsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.ListPaymentRecipientsRequest)
}

void ListPaymentRecipientsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPaymentRecipientsRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListPaymentRecipientsRequest::~ListPaymentRecipientsRequest() {
  // @@protoc_insertion_point(destructor:plaid.ListPaymentRecipientsRequest)
  SharedDtor();
}

void ListPaymentRecipientsRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPaymentRecipientsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPaymentRecipientsRequest& ListPaymentRecipientsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPaymentRecipientsRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void ListPaymentRecipientsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.ListPaymentRecipientsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListPaymentRecipientsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ListPaymentRecipientsRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ListPaymentRecipientsRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPaymentRecipientsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.ListPaymentRecipientsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ListPaymentRecipientsRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ListPaymentRecipientsRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.ListPaymentRecipientsRequest)
  return target;
}

size_t ListPaymentRecipientsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.ListPaymentRecipientsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPaymentRecipientsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.ListPaymentRecipientsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPaymentRecipientsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPaymentRecipientsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.ListPaymentRecipientsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.ListPaymentRecipientsRequest)
    MergeFrom(*source);
  }
}

void ListPaymentRecipientsRequest::MergeFrom(const ListPaymentRecipientsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.ListPaymentRecipientsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
}

void ListPaymentRecipientsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.ListPaymentRecipientsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPaymentRecipientsRequest::CopyFrom(const ListPaymentRecipientsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.ListPaymentRecipientsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPaymentRecipientsRequest::IsInitialized() const {
  return true;
}

void ListPaymentRecipientsRequest::InternalSwap(ListPaymentRecipientsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPaymentRecipientsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Recipient::InitAsDefaultInstance() {
}
class Recipient::_Internal {
 public:
};

Recipient::Recipient()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.Recipient)
}
Recipient::Recipient(const Recipient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  recipient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_id().empty()) {
    recipient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recipient_id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  iban_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iban().empty()) {
    iban_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iban_);
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.Recipient)
}

void Recipient::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Recipient_plaid_2eproto.base);
  recipient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iban_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Recipient::~Recipient() {
  // @@protoc_insertion_point(destructor:plaid.Recipient)
  SharedDtor();
}

void Recipient::SharedDtor() {
  recipient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iban_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Recipient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Recipient& Recipient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Recipient_plaid_2eproto.base);
  return *internal_default_instance();
}


void Recipient::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.Recipient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iban_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Recipient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string recipient_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_recipient_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Recipient.recipient_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Recipient.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iban = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_iban();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Recipient.iban"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Recipient.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Recipient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.Recipient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string recipient_id = 1;
  if (this->recipient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient_id().data(), static_cast<int>(this->_internal_recipient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Recipient.recipient_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_recipient_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Recipient.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string iban = 3;
  if (this->iban().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iban().data(), static_cast<int>(this->_internal_iban().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Recipient.iban");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_iban(), target);
  }

  // string address = 4;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Recipient.address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.Recipient)
  return target;
}

size_t Recipient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.Recipient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string recipient_id = 1;
  if (this->recipient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string iban = 3;
  if (this->iban().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iban());
  }

  // string address = 4;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Recipient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.Recipient)
  GOOGLE_DCHECK_NE(&from, this);
  const Recipient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Recipient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.Recipient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.Recipient)
    MergeFrom(*source);
  }
}

void Recipient::MergeFrom(const Recipient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.Recipient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recipient_id().size() > 0) {

    recipient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recipient_id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.iban().size() > 0) {

    iban_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iban_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void Recipient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.Recipient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Recipient::CopyFrom(const Recipient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.Recipient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Recipient::IsInitialized() const {
  return true;
}

void Recipient::InternalSwap(Recipient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  recipient_id_.Swap(&other->recipient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  iban_.Swap(&other->iban_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Recipient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPaymentRecipientsResponse::InitAsDefaultInstance() {
}
class ListPaymentRecipientsResponse::_Internal {
 public:
};

ListPaymentRecipientsResponse::ListPaymentRecipientsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.ListPaymentRecipientsResponse)
}
ListPaymentRecipientsResponse::ListPaymentRecipientsResponse(const ListPaymentRecipientsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      recipients_(from.recipients_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.ListPaymentRecipientsResponse)
}

void ListPaymentRecipientsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPaymentRecipientsResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListPaymentRecipientsResponse::~ListPaymentRecipientsResponse() {
  // @@protoc_insertion_point(destructor:plaid.ListPaymentRecipientsResponse)
  SharedDtor();
}

void ListPaymentRecipientsResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPaymentRecipientsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPaymentRecipientsResponse& ListPaymentRecipientsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPaymentRecipientsResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void ListPaymentRecipientsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.ListPaymentRecipientsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipients_.Clear();
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListPaymentRecipientsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ListPaymentRecipientsResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .plaid.Recipient recipients = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recipients(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPaymentRecipientsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.ListPaymentRecipientsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ListPaymentRecipientsResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // repeated .plaid.Recipient recipients = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_recipients_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_recipients(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.ListPaymentRecipientsResponse)
  return target;
}

size_t ListPaymentRecipientsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.ListPaymentRecipientsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.Recipient recipients = 2;
  total_size += 1UL * this->_internal_recipients_size();
  for (const auto& msg : this->recipients_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPaymentRecipientsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.ListPaymentRecipientsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPaymentRecipientsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPaymentRecipientsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.ListPaymentRecipientsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.ListPaymentRecipientsResponse)
    MergeFrom(*source);
  }
}

void ListPaymentRecipientsResponse::MergeFrom(const ListPaymentRecipientsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.ListPaymentRecipientsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recipients_.MergeFrom(from.recipients_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
}

void ListPaymentRecipientsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.ListPaymentRecipientsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPaymentRecipientsResponse::CopyFrom(const ListPaymentRecipientsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.ListPaymentRecipientsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPaymentRecipientsResponse::IsInitialized() const {
  return true;
}

void ListPaymentRecipientsResponse::InternalSwap(ListPaymentRecipientsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  recipients_.InternalSwap(&other->recipients_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPaymentRecipientsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PaymentAmount::InitAsDefaultInstance() {
}
class PaymentAmount::_Internal {
 public:
};

PaymentAmount::PaymentAmount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.PaymentAmount)
}
PaymentAmount::PaymentAmount(const PaymentAmount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:plaid.PaymentAmount)
}

void PaymentAmount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PaymentAmount_plaid_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

PaymentAmount::~PaymentAmount() {
  // @@protoc_insertion_point(destructor:plaid.PaymentAmount)
  SharedDtor();
}

void PaymentAmount::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PaymentAmount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PaymentAmount& PaymentAmount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PaymentAmount_plaid_2eproto.base);
  return *internal_default_instance();
}


void PaymentAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.PaymentAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  _internal_metadata_.Clear();
}

const char* PaymentAmount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.PaymentAmount.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaymentAmount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.PaymentAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.PaymentAmount.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.PaymentAmount)
  return target;
}

size_t PaymentAmount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.PaymentAmount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaymentAmount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.PaymentAmount)
  GOOGLE_DCHECK_NE(&from, this);
  const PaymentAmount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PaymentAmount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.PaymentAmount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.PaymentAmount)
    MergeFrom(*source);
  }
}

void PaymentAmount::MergeFrom(const PaymentAmount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.PaymentAmount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void PaymentAmount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.PaymentAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaymentAmount::CopyFrom(const PaymentAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.PaymentAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentAmount::IsInitialized() const {
  return true;
}

void PaymentAmount::InternalSwap(PaymentAmount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentAmount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePaymentRequest::InitAsDefaultInstance() {
  ::plaid::_CreatePaymentRequest_default_instance_._instance.get_mutable()->amount_ = const_cast< ::plaid::PaymentAmount*>(
      ::plaid::PaymentAmount::internal_default_instance());
}
class CreatePaymentRequest::_Internal {
 public:
  static const ::plaid::PaymentAmount& amount(const CreatePaymentRequest* msg);
};

const ::plaid::PaymentAmount&
CreatePaymentRequest::_Internal::amount(const CreatePaymentRequest* msg) {
  return *msg->amount_;
}
CreatePaymentRequest::CreatePaymentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.CreatePaymentRequest)
}
CreatePaymentRequest::CreatePaymentRequest(const CreatePaymentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  recipient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_id().empty()) {
    recipient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recipient_id_);
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from._internal_has_amount()) {
    amount_ = new ::plaid::PaymentAmount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.CreatePaymentRequest)
}

void CreatePaymentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePaymentRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = nullptr;
}

CreatePaymentRequest::~CreatePaymentRequest() {
  // @@protoc_insertion_point(destructor:plaid.CreatePaymentRequest)
  SharedDtor();
}

void CreatePaymentRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void CreatePaymentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePaymentRequest& CreatePaymentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePaymentRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void CreatePaymentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.CreatePaymentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CreatePaymentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recipient_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recipient_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentRequest.recipient_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentRequest.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.PaymentAmount amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePaymentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.CreatePaymentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string recipient_id = 3;
  if (this->recipient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient_id().data(), static_cast<int>(this->_internal_recipient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentRequest.recipient_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recipient_id(), target);
  }

  // string reference = 4;
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentRequest.reference");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reference(), target);
  }

  // .plaid.PaymentAmount amount = 5;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::amount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.CreatePaymentRequest)
  return target;
}

size_t CreatePaymentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.CreatePaymentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string recipient_id = 3;
  if (this->recipient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient_id());
  }

  // string reference = 4;
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // .plaid.PaymentAmount amount = 5;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePaymentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.CreatePaymentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePaymentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePaymentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.CreatePaymentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.CreatePaymentRequest)
    MergeFrom(*source);
  }
}

void CreatePaymentRequest::MergeFrom(const CreatePaymentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.CreatePaymentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.recipient_id().size() > 0) {

    recipient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recipient_id_);
  }
  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::plaid::PaymentAmount::MergeFrom(from._internal_amount());
  }
}

void CreatePaymentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.CreatePaymentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePaymentRequest::CopyFrom(const CreatePaymentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.CreatePaymentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePaymentRequest::IsInitialized() const {
  return true;
}

void CreatePaymentRequest::InternalSwap(CreatePaymentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recipient_id_.Swap(&other->recipient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePaymentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePaymentResponse::InitAsDefaultInstance() {
}
class CreatePaymentResponse::_Internal {
 public:
};

CreatePaymentResponse::CreatePaymentResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.CreatePaymentResponse)
}
CreatePaymentResponse::CreatePaymentResponse(const CreatePaymentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  payment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_id().empty()) {
    payment_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_id_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.CreatePaymentResponse)
}

void CreatePaymentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePaymentResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreatePaymentResponse::~CreatePaymentResponse() {
  // @@protoc_insertion_point(destructor:plaid.CreatePaymentResponse)
  SharedDtor();
}

void CreatePaymentResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreatePaymentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePaymentResponse& CreatePaymentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePaymentResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void CreatePaymentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.CreatePaymentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreatePaymentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payment_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentResponse.payment_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePaymentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.CreatePaymentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string payment_id = 2;
  if (this->payment_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_id().data(), static_cast<int>(this->_internal_payment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentResponse.payment_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payment_id(), target);
  }

  // string status = 3;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentResponse.status");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.CreatePaymentResponse)
  return target;
}

size_t CreatePaymentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.CreatePaymentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string payment_id = 2;
  if (this->payment_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_id());
  }

  // string status = 3;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePaymentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.CreatePaymentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePaymentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePaymentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.CreatePaymentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.CreatePaymentResponse)
    MergeFrom(*source);
  }
}

void CreatePaymentResponse::MergeFrom(const CreatePaymentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.CreatePaymentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.payment_id().size() > 0) {

    payment_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_id_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void CreatePaymentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.CreatePaymentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePaymentResponse::CopyFrom(const CreatePaymentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.CreatePaymentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePaymentResponse::IsInitialized() const {
  return true;
}

void CreatePaymentResponse::InternalSwap(CreatePaymentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_id_.Swap(&other->payment_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePaymentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePaymentTokenRequest::InitAsDefaultInstance() {
}
class CreatePaymentTokenRequest::_Internal {
 public:
};

CreatePaymentTokenRequest::CreatePaymentTokenRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.CreatePaymentTokenRequest)
}
CreatePaymentTokenRequest::CreatePaymentTokenRequest(const CreatePaymentTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  payment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_id().empty()) {
    payment_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_id_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.CreatePaymentTokenRequest)
}

void CreatePaymentTokenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePaymentTokenRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreatePaymentTokenRequest::~CreatePaymentTokenRequest() {
  // @@protoc_insertion_point(destructor:plaid.CreatePaymentTokenRequest)
  SharedDtor();
}

void CreatePaymentTokenRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreatePaymentTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePaymentTokenRequest& CreatePaymentTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePaymentTokenRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void CreatePaymentTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.CreatePaymentTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreatePaymentTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentTokenRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentTokenRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payment_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentTokenRequest.payment_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePaymentTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.CreatePaymentTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentTokenRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentTokenRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string payment_id = 3;
  if (this->payment_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_id().data(), static_cast<int>(this->_internal_payment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentTokenRequest.payment_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payment_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.CreatePaymentTokenRequest)
  return target;
}

size_t CreatePaymentTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.CreatePaymentTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string payment_id = 3;
  if (this->payment_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePaymentTokenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.CreatePaymentTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePaymentTokenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePaymentTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.CreatePaymentTokenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.CreatePaymentTokenRequest)
    MergeFrom(*source);
  }
}

void CreatePaymentTokenRequest::MergeFrom(const CreatePaymentTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.CreatePaymentTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.payment_id().size() > 0) {

    payment_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_id_);
  }
}

void CreatePaymentTokenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.CreatePaymentTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePaymentTokenRequest::CopyFrom(const CreatePaymentTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.CreatePaymentTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePaymentTokenRequest::IsInitialized() const {
  return true;
}

void CreatePaymentTokenRequest::InternalSwap(CreatePaymentTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_id_.Swap(&other->payment_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePaymentTokenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePaymentTokenResponse::InitAsDefaultInstance() {
}
class CreatePaymentTokenResponse::_Internal {
 public:
};

CreatePaymentTokenResponse::CreatePaymentTokenResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.CreatePaymentTokenResponse)
}
CreatePaymentTokenResponse::CreatePaymentTokenResponse(const CreatePaymentTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  payment_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_token().empty()) {
    payment_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_token_);
  }
  payment_token_expiration_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_token_expiration_time().empty()) {
    payment_token_expiration_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_token_expiration_time_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.CreatePaymentTokenResponse)
}

void CreatePaymentTokenResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePaymentTokenResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_expiration_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreatePaymentTokenResponse::~CreatePaymentTokenResponse() {
  // @@protoc_insertion_point(destructor:plaid.CreatePaymentTokenResponse)
  SharedDtor();
}

void CreatePaymentTokenResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_expiration_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreatePaymentTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePaymentTokenResponse& CreatePaymentTokenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePaymentTokenResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void CreatePaymentTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.CreatePaymentTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_expiration_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreatePaymentTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentTokenResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payment_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentTokenResponse.payment_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_token_expiration_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payment_token_expiration_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreatePaymentTokenResponse.payment_token_expiration_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePaymentTokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.CreatePaymentTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentTokenResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string payment_token = 2;
  if (this->payment_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_token().data(), static_cast<int>(this->_internal_payment_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentTokenResponse.payment_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payment_token(), target);
  }

  // string payment_token_expiration_time = 3;
  if (this->payment_token_expiration_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_token_expiration_time().data(), static_cast<int>(this->_internal_payment_token_expiration_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreatePaymentTokenResponse.payment_token_expiration_time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payment_token_expiration_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.CreatePaymentTokenResponse)
  return target;
}

size_t CreatePaymentTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.CreatePaymentTokenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string payment_token = 2;
  if (this->payment_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_token());
  }

  // string payment_token_expiration_time = 3;
  if (this->payment_token_expiration_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_token_expiration_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePaymentTokenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.CreatePaymentTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePaymentTokenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePaymentTokenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.CreatePaymentTokenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.CreatePaymentTokenResponse)
    MergeFrom(*source);
  }
}

void CreatePaymentTokenResponse::MergeFrom(const CreatePaymentTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.CreatePaymentTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.payment_token().size() > 0) {

    payment_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_token_);
  }
  if (from.payment_token_expiration_time().size() > 0) {

    payment_token_expiration_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_token_expiration_time_);
  }
}

void CreatePaymentTokenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.CreatePaymentTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePaymentTokenResponse::CopyFrom(const CreatePaymentTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.CreatePaymentTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePaymentTokenResponse::IsInitialized() const {
  return true;
}

void CreatePaymentTokenResponse::InternalSwap(CreatePaymentTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_token_.Swap(&other->payment_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_token_expiration_time_.Swap(&other->payment_token_expiration_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePaymentTokenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPaymentRequest::InitAsDefaultInstance() {
}
class GetPaymentRequest::_Internal {
 public:
};

GetPaymentRequest::GetPaymentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetPaymentRequest)
}
GetPaymentRequest::GetPaymentRequest(const GetPaymentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  payment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_id().empty()) {
    payment_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_id_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetPaymentRequest)
}

void GetPaymentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPaymentRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetPaymentRequest::~GetPaymentRequest() {
  // @@protoc_insertion_point(destructor:plaid.GetPaymentRequest)
  SharedDtor();
}

void GetPaymentRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPaymentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPaymentRequest& GetPaymentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPaymentRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetPaymentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetPaymentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetPaymentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payment_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentRequest.payment_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPaymentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetPaymentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string payment_id = 3;
  if (this->payment_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_id().data(), static_cast<int>(this->_internal_payment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentRequest.payment_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payment_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetPaymentRequest)
  return target;
}

size_t GetPaymentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetPaymentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string payment_id = 3;
  if (this->payment_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPaymentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetPaymentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPaymentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPaymentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetPaymentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetPaymentRequest)
    MergeFrom(*source);
  }
}

void GetPaymentRequest::MergeFrom(const GetPaymentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetPaymentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.payment_id().size() > 0) {

    payment_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_id_);
  }
}

void GetPaymentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetPaymentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPaymentRequest::CopyFrom(const GetPaymentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetPaymentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPaymentRequest::IsInitialized() const {
  return true;
}

void GetPaymentRequest::InternalSwap(GetPaymentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_id_.Swap(&other->payment_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPaymentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPaymentResponse::InitAsDefaultInstance() {
  ::plaid::_GetPaymentResponse_default_instance_._instance.get_mutable()->amount_ = const_cast< ::plaid::PaymentAmount*>(
      ::plaid::PaymentAmount::internal_default_instance());
}
class GetPaymentResponse::_Internal {
 public:
  static const ::plaid::PaymentAmount& amount(const GetPaymentResponse* msg);
};

const ::plaid::PaymentAmount&
GetPaymentResponse::_Internal::amount(const GetPaymentResponse* msg) {
  return *msg->amount_;
}
GetPaymentResponse::GetPaymentResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetPaymentResponse)
}
GetPaymentResponse::GetPaymentResponse(const GetPaymentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  payment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_id().empty()) {
    payment_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_id_);
  }
  payment_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_token().empty()) {
    payment_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_token_);
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  last_status_update_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_status_update().empty()) {
    last_status_update_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_status_update_);
  }
  payment_token_expiration_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_token_expiration_time().empty()) {
    payment_token_expiration_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_token_expiration_time_);
  }
  recipient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_id().empty()) {
    recipient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recipient_id_);
  }
  if (from._internal_has_amount()) {
    amount_ = new ::plaid::PaymentAmount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetPaymentResponse)
}

void GetPaymentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPaymentResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_status_update_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_expiration_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = nullptr;
}

GetPaymentResponse::~GetPaymentResponse() {
  // @@protoc_insertion_point(destructor:plaid.GetPaymentResponse)
  SharedDtor();
}

void GetPaymentResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_status_update_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_expiration_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void GetPaymentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPaymentResponse& GetPaymentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPaymentResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetPaymentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetPaymentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_status_update_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_expiration_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetPaymentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payment_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentResponse.payment_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payment_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentResponse.payment_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentResponse.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.PaymentAmount amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_status_update = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_last_status_update();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentResponse.last_status_update"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_token_expiration_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_payment_token_expiration_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentResponse.payment_token_expiration_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recipient_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_recipient_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetPaymentResponse.recipient_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPaymentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetPaymentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string payment_id = 2;
  if (this->payment_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_id().data(), static_cast<int>(this->_internal_payment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentResponse.payment_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payment_id(), target);
  }

  // string payment_token = 3;
  if (this->payment_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_token().data(), static_cast<int>(this->_internal_payment_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentResponse.payment_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payment_token(), target);
  }

  // string reference = 4;
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentResponse.reference");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reference(), target);
  }

  // .plaid.PaymentAmount amount = 5;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::amount(this), target, stream);
  }

  // string status = 6;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentResponse.status");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_status(), target);
  }

  // string last_status_update = 7;
  if (this->last_status_update().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_status_update().data(), static_cast<int>(this->_internal_last_status_update().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentResponse.last_status_update");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_last_status_update(), target);
  }

  // string payment_token_expiration_time = 8;
  if (this->payment_token_expiration_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_token_expiration_time().data(), static_cast<int>(this->_internal_payment_token_expiration_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentResponse.payment_token_expiration_time");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_payment_token_expiration_time(), target);
  }

  // string recipient_id = 9;
  if (this->recipient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient_id().data(), static_cast<int>(this->_internal_recipient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetPaymentResponse.recipient_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_recipient_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetPaymentResponse)
  return target;
}

size_t GetPaymentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetPaymentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string payment_id = 2;
  if (this->payment_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_id());
  }

  // string payment_token = 3;
  if (this->payment_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_token());
  }

  // string reference = 4;
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // string status = 6;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string last_status_update = 7;
  if (this->last_status_update().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_status_update());
  }

  // string payment_token_expiration_time = 8;
  if (this->payment_token_expiration_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_token_expiration_time());
  }

  // string recipient_id = 9;
  if (this->recipient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient_id());
  }

  // .plaid.PaymentAmount amount = 5;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPaymentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetPaymentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPaymentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPaymentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetPaymentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetPaymentResponse)
    MergeFrom(*source);
  }
}

void GetPaymentResponse::MergeFrom(const GetPaymentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetPaymentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.payment_id().size() > 0) {

    payment_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_id_);
  }
  if (from.payment_token().size() > 0) {

    payment_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_token_);
  }
  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.last_status_update().size() > 0) {

    last_status_update_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_status_update_);
  }
  if (from.payment_token_expiration_time().size() > 0) {

    payment_token_expiration_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_token_expiration_time_);
  }
  if (from.recipient_id().size() > 0) {

    recipient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recipient_id_);
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::plaid::PaymentAmount::MergeFrom(from._internal_amount());
  }
}

void GetPaymentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetPaymentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPaymentResponse::CopyFrom(const GetPaymentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetPaymentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPaymentResponse::IsInitialized() const {
  return true;
}

void GetPaymentResponse::InternalSwap(GetPaymentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_id_.Swap(&other->payment_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_token_.Swap(&other->payment_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_status_update_.Swap(&other->last_status_update_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_token_expiration_time_.Swap(&other->payment_token_expiration_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recipient_id_.Swap(&other->recipient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPaymentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPaymentsRequest::InitAsDefaultInstance() {
}
class ListPaymentsRequest::_Internal {
 public:
};

ListPaymentsRequest::ListPaymentsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.ListPaymentsRequest)
}
ListPaymentsRequest::ListPaymentsRequest(const ListPaymentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:plaid.ListPaymentsRequest)
}

void ListPaymentsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPaymentsRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = PROTOBUF_LONGLONG(0);
}

ListPaymentsRequest::~ListPaymentsRequest() {
  // @@protoc_insertion_point(destructor:plaid.ListPaymentsRequest)
  SharedDtor();
}

void ListPaymentsRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPaymentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPaymentsRequest& ListPaymentsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPaymentsRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void ListPaymentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.ListPaymentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* ListPaymentsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ListPaymentsRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ListPaymentsRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ListPaymentsRequest.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPaymentsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.ListPaymentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ListPaymentsRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ListPaymentsRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // int64 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_count(), target);
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ListPaymentsRequest.cursor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.ListPaymentsRequest)
  return target;
}

size_t ListPaymentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.ListPaymentsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string cursor = 4;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // int64 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPaymentsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.ListPaymentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPaymentsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPaymentsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.ListPaymentsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.ListPaymentsRequest)
    MergeFrom(*source);
  }
}

void ListPaymentsRequest::MergeFrom(const ListPaymentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.ListPaymentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ListPaymentsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.ListPaymentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPaymentsRequest::CopyFrom(const ListPaymentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.ListPaymentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPaymentsRequest::IsInitialized() const {
  return true;
}

void ListPaymentsRequest::InternalSwap(ListPaymentsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPaymentsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Payment::InitAsDefaultInstance() {
  ::plaid::_Payment_default_instance_._instance.get_mutable()->amount_ = const_cast< ::plaid::PaymentAmount*>(
      ::plaid::PaymentAmount::internal_default_instance());
}
class Payment::_Internal {
 public:
  static const ::plaid::PaymentAmount& amount(const Payment* msg);
};

const ::plaid::PaymentAmount&
Payment::_Internal::amount(const Payment* msg) {
  return *msg->amount_;
}
Payment::Payment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.Payment)
}
Payment::Payment(const Payment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_id().empty()) {
    payment_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_id_);
  }
  payment_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_token().empty()) {
    payment_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_token_);
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  last_status_update_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_status_update().empty()) {
    last_status_update_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_status_update_);
  }
  payment_token_expiration_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_token_expiration_time().empty()) {
    payment_token_expiration_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_token_expiration_time_);
  }
  recipient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_id().empty()) {
    recipient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recipient_id_);
  }
  if (from._internal_has_amount()) {
    amount_ = new ::plaid::PaymentAmount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.Payment)
}

void Payment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Payment_plaid_2eproto.base);
  payment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_status_update_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_expiration_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = nullptr;
}

Payment::~Payment() {
  // @@protoc_insertion_point(destructor:plaid.Payment)
  SharedDtor();
}

void Payment::SharedDtor() {
  payment_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_status_update_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_expiration_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void Payment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Payment& Payment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Payment_plaid_2eproto.base);
  return *internal_default_instance();
}


void Payment::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.Payment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payment_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_status_update_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_token_expiration_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Payment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string payment_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_payment_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Payment.payment_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payment_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Payment.payment_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Payment.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.PaymentAmount amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Payment.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_status_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_last_status_update();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Payment.last_status_update"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_token_expiration_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_payment_token_expiration_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Payment.payment_token_expiration_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recipient_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_recipient_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Payment.recipient_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.Payment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string payment_id = 1;
  if (this->payment_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_id().data(), static_cast<int>(this->_internal_payment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Payment.payment_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_payment_id(), target);
  }

  // string payment_token = 2;
  if (this->payment_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_token().data(), static_cast<int>(this->_internal_payment_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Payment.payment_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payment_token(), target);
  }

  // string reference = 3;
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Payment.reference");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reference(), target);
  }

  // .plaid.PaymentAmount amount = 4;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::amount(this), target, stream);
  }

  // string status = 5;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Payment.status");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_status(), target);
  }

  // string last_status_update = 6;
  if (this->last_status_update().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_status_update().data(), static_cast<int>(this->_internal_last_status_update().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Payment.last_status_update");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_last_status_update(), target);
  }

  // string payment_token_expiration_time = 7;
  if (this->payment_token_expiration_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_token_expiration_time().data(), static_cast<int>(this->_internal_payment_token_expiration_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Payment.payment_token_expiration_time");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_payment_token_expiration_time(), target);
  }

  // string recipient_id = 8;
  if (this->recipient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recipient_id().data(), static_cast<int>(this->_internal_recipient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Payment.recipient_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_recipient_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.Payment)
  return target;
}

size_t Payment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.Payment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payment_id = 1;
  if (this->payment_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_id());
  }

  // string payment_token = 2;
  if (this->payment_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_token());
  }

  // string reference = 3;
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // string status = 5;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string last_status_update = 6;
  if (this->last_status_update().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_status_update());
  }

  // string payment_token_expiration_time = 7;
  if (this->payment_token_expiration_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_token_expiration_time());
  }

  // string recipient_id = 8;
  if (this->recipient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recipient_id());
  }

  // .plaid.PaymentAmount amount = 4;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Payment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.Payment)
  GOOGLE_DCHECK_NE(&from, this);
  const Payment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Payment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.Payment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.Payment)
    MergeFrom(*source);
  }
}

void Payment::MergeFrom(const Payment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.Payment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payment_id().size() > 0) {

    payment_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_id_);
  }
  if (from.payment_token().size() > 0) {

    payment_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_token_);
  }
  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.last_status_update().size() > 0) {

    last_status_update_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_status_update_);
  }
  if (from.payment_token_expiration_time().size() > 0) {

    payment_token_expiration_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_token_expiration_time_);
  }
  if (from.recipient_id().size() > 0) {

    recipient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recipient_id_);
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::plaid::PaymentAmount::MergeFrom(from._internal_amount());
  }
}

void Payment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.Payment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Payment::CopyFrom(const Payment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.Payment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payment::IsInitialized() const {
  return true;
}

void Payment::InternalSwap(Payment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  payment_id_.Swap(&other->payment_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_token_.Swap(&other->payment_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_status_update_.Swap(&other->last_status_update_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_token_expiration_time_.Swap(&other->payment_token_expiration_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recipient_id_.Swap(&other->recipient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPaymentsResponse::InitAsDefaultInstance() {
}
class ListPaymentsResponse::_Internal {
 public:
};

ListPaymentsResponse::ListPaymentsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.ListPaymentsResponse)
}
ListPaymentsResponse::ListPaymentsResponse(const ListPaymentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      payments_(from.payments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  next_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_cursor().empty()) {
    next_cursor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_cursor_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.ListPaymentsResponse)
}

void ListPaymentsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPaymentsResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListPaymentsResponse::~ListPaymentsResponse() {
  // @@protoc_insertion_point(destructor:plaid.ListPaymentsResponse)
  SharedDtor();
}

void ListPaymentsResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPaymentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPaymentsResponse& ListPaymentsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPaymentsResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void ListPaymentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.ListPaymentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payments_.Clear();
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_cursor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListPaymentsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ListPaymentsResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .plaid.Payment payments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_payments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string next_cursor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_next_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ListPaymentsResponse.next_cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPaymentsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.ListPaymentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ListPaymentsResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // repeated .plaid.Payment payments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_payments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_payments(i), target, stream);
  }

  // string next_cursor = 3;
  if (this->next_cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_cursor().data(), static_cast<int>(this->_internal_next_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ListPaymentsResponse.next_cursor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.ListPaymentsResponse)
  return target;
}

size_t ListPaymentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.ListPaymentsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.Payment payments = 2;
  total_size += 1UL * this->_internal_payments_size();
  for (const auto& msg : this->payments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string next_cursor = 3;
  if (this->next_cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_cursor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPaymentsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.ListPaymentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPaymentsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPaymentsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.ListPaymentsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.ListPaymentsResponse)
    MergeFrom(*source);
  }
}

void ListPaymentsResponse::MergeFrom(const ListPaymentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.ListPaymentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  payments_.MergeFrom(from.payments_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.next_cursor().size() > 0) {

    next_cursor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_cursor_);
  }
}

void ListPaymentsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.ListPaymentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPaymentsResponse::CopyFrom(const ListPaymentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.ListPaymentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPaymentsResponse::IsInitialized() const {
  return true;
}

void ListPaymentsResponse::InternalSwap(ListPaymentsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  payments_.InternalSwap(&other->payments_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  next_cursor_.Swap(&other->next_cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPaymentsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPaymentsOptions::InitAsDefaultInstance() {
}
class ListPaymentsOptions::_Internal {
 public:
};

ListPaymentsOptions::ListPaymentsOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.ListPaymentsOptions)
}
ListPaymentsOptions::ListPaymentsOptions(const ListPaymentsOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:plaid.ListPaymentsOptions)
}

void ListPaymentsOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPaymentsOptions_plaid_2eproto.base);
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = PROTOBUF_LONGLONG(0);
}

ListPaymentsOptions::~ListPaymentsOptions() {
  // @@protoc_insertion_point(destructor:plaid.ListPaymentsOptions)
  SharedDtor();
}

void ListPaymentsOptions::SharedDtor() {
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPaymentsOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPaymentsOptions& ListPaymentsOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPaymentsOptions_plaid_2eproto.base);
  return *internal_default_instance();
}


void ListPaymentsOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.ListPaymentsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cursor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* ListPaymentsOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ListPaymentsOptions.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPaymentsOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.ListPaymentsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_count(), target);
  }

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ListPaymentsOptions.cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.ListPaymentsOptions)
  return target;
}

size_t ListPaymentsOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.ListPaymentsOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // int64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPaymentsOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.ListPaymentsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPaymentsOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPaymentsOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.ListPaymentsOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.ListPaymentsOptions)
    MergeFrom(*source);
  }
}

void ListPaymentsOptions::MergeFrom(const ListPaymentsOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.ListPaymentsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ListPaymentsOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.ListPaymentsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPaymentsOptions::CopyFrom(const ListPaymentsOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.ListPaymentsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPaymentsOptions::IsInitialized() const {
  return true;
}

void ListPaymentsOptions::InternalSwap(ListPaymentsOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPaymentsOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateProcessorTokenRequest::InitAsDefaultInstance() {
}
class CreateProcessorTokenRequest::_Internal {
 public:
};

CreateProcessorTokenRequest::CreateProcessorTokenRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.CreateProcessorTokenRequest)
}
CreateProcessorTokenRequest::CreateProcessorTokenRequest(const CreateProcessorTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.CreateProcessorTokenRequest)
}

void CreateProcessorTokenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateProcessorTokenRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateProcessorTokenRequest::~CreateProcessorTokenRequest() {
  // @@protoc_insertion_point(destructor:plaid.CreateProcessorTokenRequest)
  SharedDtor();
}

void CreateProcessorTokenRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateProcessorTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateProcessorTokenRequest& CreateProcessorTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateProcessorTokenRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void CreateProcessorTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.CreateProcessorTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreateProcessorTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateProcessorTokenRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateProcessorTokenRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateProcessorTokenRequest.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateProcessorTokenRequest.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateProcessorTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.CreateProcessorTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateProcessorTokenRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateProcessorTokenRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateProcessorTokenRequest.access_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token(), target);
  }

  // string account_id = 4;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateProcessorTokenRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.CreateProcessorTokenRequest)
  return target;
}

size_t CreateProcessorTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.CreateProcessorTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  // string account_id = 4;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateProcessorTokenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.CreateProcessorTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateProcessorTokenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateProcessorTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.CreateProcessorTokenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.CreateProcessorTokenRequest)
    MergeFrom(*source);
  }
}

void CreateProcessorTokenRequest::MergeFrom(const CreateProcessorTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.CreateProcessorTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
}

void CreateProcessorTokenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.CreateProcessorTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateProcessorTokenRequest::CopyFrom(const CreateProcessorTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.CreateProcessorTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateProcessorTokenRequest::IsInitialized() const {
  return true;
}

void CreateProcessorTokenRequest::InternalSwap(CreateProcessorTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateProcessorTokenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateProcessorTokenResponse::InitAsDefaultInstance() {
}
class CreateProcessorTokenResponse::_Internal {
 public:
};

CreateProcessorTokenResponse::CreateProcessorTokenResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.CreateProcessorTokenResponse)
}
CreateProcessorTokenResponse::CreateProcessorTokenResponse(const CreateProcessorTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  processor_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_processor_token().empty()) {
    processor_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.processor_token_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.CreateProcessorTokenResponse)
}

void CreateProcessorTokenResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateProcessorTokenResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  processor_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateProcessorTokenResponse::~CreateProcessorTokenResponse() {
  // @@protoc_insertion_point(destructor:plaid.CreateProcessorTokenResponse)
  SharedDtor();
}

void CreateProcessorTokenResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  processor_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateProcessorTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateProcessorTokenResponse& CreateProcessorTokenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateProcessorTokenResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void CreateProcessorTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.CreateProcessorTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  processor_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreateProcessorTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateProcessorTokenResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string processor_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_processor_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateProcessorTokenResponse.processor_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateProcessorTokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.CreateProcessorTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateProcessorTokenResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string processor_token = 2;
  if (this->processor_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processor_token().data(), static_cast<int>(this->_internal_processor_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateProcessorTokenResponse.processor_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_processor_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.CreateProcessorTokenResponse)
  return target;
}

size_t CreateProcessorTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.CreateProcessorTokenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string processor_token = 2;
  if (this->processor_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processor_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateProcessorTokenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.CreateProcessorTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateProcessorTokenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateProcessorTokenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.CreateProcessorTokenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.CreateProcessorTokenResponse)
    MergeFrom(*source);
  }
}

void CreateProcessorTokenResponse::MergeFrom(const CreateProcessorTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.CreateProcessorTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.processor_token().size() > 0) {

    processor_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.processor_token_);
  }
}

void CreateProcessorTokenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.CreateProcessorTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateProcessorTokenResponse::CopyFrom(const CreateProcessorTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.CreateProcessorTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateProcessorTokenResponse::IsInitialized() const {
  return true;
}

void CreateProcessorTokenResponse::InternalSwap(CreateProcessorTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  processor_token_.Swap(&other->processor_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateProcessorTokenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateStripeTokenRequest::InitAsDefaultInstance() {
}
class CreateStripeTokenRequest::_Internal {
 public:
};

CreateStripeTokenRequest::CreateStripeTokenRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.CreateStripeTokenRequest)
}
CreateStripeTokenRequest::CreateStripeTokenRequest(const CreateStripeTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.CreateStripeTokenRequest)
}

void CreateStripeTokenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateStripeTokenRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateStripeTokenRequest::~CreateStripeTokenRequest() {
  // @@protoc_insertion_point(destructor:plaid.CreateStripeTokenRequest)
  SharedDtor();
}

void CreateStripeTokenRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateStripeTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateStripeTokenRequest& CreateStripeTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateStripeTokenRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void CreateStripeTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.CreateStripeTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreateStripeTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateStripeTokenRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateStripeTokenRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateStripeTokenRequest.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateStripeTokenRequest.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateStripeTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.CreateStripeTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateStripeTokenRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateStripeTokenRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateStripeTokenRequest.access_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token(), target);
  }

  // string account_id = 4;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateStripeTokenRequest.account_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.CreateStripeTokenRequest)
  return target;
}

size_t CreateStripeTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.CreateStripeTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  // string account_id = 4;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateStripeTokenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.CreateStripeTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateStripeTokenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateStripeTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.CreateStripeTokenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.CreateStripeTokenRequest)
    MergeFrom(*source);
  }
}

void CreateStripeTokenRequest::MergeFrom(const CreateStripeTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.CreateStripeTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
}

void CreateStripeTokenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.CreateStripeTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStripeTokenRequest::CopyFrom(const CreateStripeTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.CreateStripeTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStripeTokenRequest::IsInitialized() const {
  return true;
}

void CreateStripeTokenRequest::InternalSwap(CreateStripeTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateStripeTokenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateStripeTokenResponse::InitAsDefaultInstance() {
}
class CreateStripeTokenResponse::_Internal {
 public:
};

CreateStripeTokenResponse::CreateStripeTokenResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.CreateStripeTokenResponse)
}
CreateStripeTokenResponse::CreateStripeTokenResponse(const CreateStripeTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  stripe_bank_account_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stripe_bank_account_token().empty()) {
    stripe_bank_account_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stripe_bank_account_token_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.CreateStripeTokenResponse)
}

void CreateStripeTokenResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateStripeTokenResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stripe_bank_account_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateStripeTokenResponse::~CreateStripeTokenResponse() {
  // @@protoc_insertion_point(destructor:plaid.CreateStripeTokenResponse)
  SharedDtor();
}

void CreateStripeTokenResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stripe_bank_account_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateStripeTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateStripeTokenResponse& CreateStripeTokenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateStripeTokenResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void CreateStripeTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.CreateStripeTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stripe_bank_account_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreateStripeTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateStripeTokenResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stripe_bank_account_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stripe_bank_account_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateStripeTokenResponse.stripe_bank_account_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateStripeTokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.CreateStripeTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateStripeTokenResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string stripe_bank_account_token = 2;
  if (this->stripe_bank_account_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stripe_bank_account_token().data(), static_cast<int>(this->_internal_stripe_bank_account_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateStripeTokenResponse.stripe_bank_account_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stripe_bank_account_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.CreateStripeTokenResponse)
  return target;
}

size_t CreateStripeTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.CreateStripeTokenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string stripe_bank_account_token = 2;
  if (this->stripe_bank_account_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stripe_bank_account_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateStripeTokenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.CreateStripeTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateStripeTokenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateStripeTokenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.CreateStripeTokenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.CreateStripeTokenResponse)
    MergeFrom(*source);
  }
}

void CreateStripeTokenResponse::MergeFrom(const CreateStripeTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.CreateStripeTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.stripe_bank_account_token().size() > 0) {

    stripe_bank_account_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stripe_bank_account_token_);
  }
}

void CreateStripeTokenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.CreateStripeTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStripeTokenResponse::CopyFrom(const CreateStripeTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.CreateStripeTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStripeTokenResponse::IsInitialized() const {
  return true;
}

void CreateStripeTokenResponse::InternalSwap(CreateStripeTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stripe_bank_account_token_.Swap(&other->stripe_bank_account_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateStripeTokenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateSandboxPublicTokenRequest::InitAsDefaultInstance() {
}
class CreateSandboxPublicTokenRequest::_Internal {
 public:
};

CreateSandboxPublicTokenRequest::CreateSandboxPublicTokenRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.CreateSandboxPublicTokenRequest)
}
CreateSandboxPublicTokenRequest::CreateSandboxPublicTokenRequest(const CreateSandboxPublicTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      inital_products_(from.inital_products_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  institution_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_institution_id().empty()) {
    institution_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_id_);
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.CreateSandboxPublicTokenRequest)
}

void CreateSandboxPublicTokenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateSandboxPublicTokenRequest_plaid_2eproto.base);
  institution_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateSandboxPublicTokenRequest::~CreateSandboxPublicTokenRequest() {
  // @@protoc_insertion_point(destructor:plaid.CreateSandboxPublicTokenRequest)
  SharedDtor();
}

void CreateSandboxPublicTokenRequest::SharedDtor() {
  institution_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateSandboxPublicTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSandboxPublicTokenRequest& CreateSandboxPublicTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateSandboxPublicTokenRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void CreateSandboxPublicTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.CreateSandboxPublicTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inital_products_.Clear();
  institution_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreateSandboxPublicTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string institution_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_institution_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateSandboxPublicTokenRequest.institution_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string inital_products = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inital_products();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateSandboxPublicTokenRequest.inital_products"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string public_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateSandboxPublicTokenRequest.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSandboxPublicTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.CreateSandboxPublicTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string institution_id = 1;
  if (this->institution_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_institution_id().data(), static_cast<int>(this->_internal_institution_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateSandboxPublicTokenRequest.institution_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_institution_id(), target);
  }

  // repeated string inital_products = 2;
  for (int i = 0, n = this->_internal_inital_products_size(); i < n; i++) {
    const auto& s = this->_internal_inital_products(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateSandboxPublicTokenRequest.inital_products");
    target = stream->WriteString(2, s, target);
  }

  // string public_key = 3;
  if (this->public_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateSandboxPublicTokenRequest.public_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.CreateSandboxPublicTokenRequest)
  return target;
}

size_t CreateSandboxPublicTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.CreateSandboxPublicTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string inital_products = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(inital_products_.size());
  for (int i = 0, n = inital_products_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      inital_products_.Get(i));
  }

  // string institution_id = 1;
  if (this->institution_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_institution_id());
  }

  // string public_key = 3;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSandboxPublicTokenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.CreateSandboxPublicTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSandboxPublicTokenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateSandboxPublicTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.CreateSandboxPublicTokenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.CreateSandboxPublicTokenRequest)
    MergeFrom(*source);
  }
}

void CreateSandboxPublicTokenRequest::MergeFrom(const CreateSandboxPublicTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.CreateSandboxPublicTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inital_products_.MergeFrom(from.inital_products_);
  if (from.institution_id().size() > 0) {

    institution_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.institution_id_);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
}

void CreateSandboxPublicTokenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.CreateSandboxPublicTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSandboxPublicTokenRequest::CopyFrom(const CreateSandboxPublicTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.CreateSandboxPublicTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSandboxPublicTokenRequest::IsInitialized() const {
  return true;
}

void CreateSandboxPublicTokenRequest::InternalSwap(CreateSandboxPublicTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inital_products_.InternalSwap(&other->inital_products_);
  institution_id_.Swap(&other->institution_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSandboxPublicTokenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateSandboxPublicTokenResponse::InitAsDefaultInstance() {
}
class CreateSandboxPublicTokenResponse::_Internal {
 public:
};

CreateSandboxPublicTokenResponse::CreateSandboxPublicTokenResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.CreateSandboxPublicTokenResponse)
}
CreateSandboxPublicTokenResponse::CreateSandboxPublicTokenResponse(const CreateSandboxPublicTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  public_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_token().empty()) {
    public_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_token_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.CreateSandboxPublicTokenResponse)
}

void CreateSandboxPublicTokenResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateSandboxPublicTokenResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateSandboxPublicTokenResponse::~CreateSandboxPublicTokenResponse() {
  // @@protoc_insertion_point(destructor:plaid.CreateSandboxPublicTokenResponse)
  SharedDtor();
}

void CreateSandboxPublicTokenResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateSandboxPublicTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSandboxPublicTokenResponse& CreateSandboxPublicTokenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateSandboxPublicTokenResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void CreateSandboxPublicTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.CreateSandboxPublicTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreateSandboxPublicTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateSandboxPublicTokenResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_public_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.CreateSandboxPublicTokenResponse.public_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSandboxPublicTokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.CreateSandboxPublicTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateSandboxPublicTokenResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string public_token = 2;
  if (this->public_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_token().data(), static_cast<int>(this->_internal_public_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.CreateSandboxPublicTokenResponse.public_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_public_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.CreateSandboxPublicTokenResponse)
  return target;
}

size_t CreateSandboxPublicTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.CreateSandboxPublicTokenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string public_token = 2;
  if (this->public_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSandboxPublicTokenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.CreateSandboxPublicTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSandboxPublicTokenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateSandboxPublicTokenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.CreateSandboxPublicTokenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.CreateSandboxPublicTokenResponse)
    MergeFrom(*source);
  }
}

void CreateSandboxPublicTokenResponse::MergeFrom(const CreateSandboxPublicTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.CreateSandboxPublicTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.public_token().size() > 0) {

    public_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_token_);
  }
}

void CreateSandboxPublicTokenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.CreateSandboxPublicTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSandboxPublicTokenResponse::CopyFrom(const CreateSandboxPublicTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.CreateSandboxPublicTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSandboxPublicTokenResponse::IsInitialized() const {
  return true;
}

void CreateSandboxPublicTokenResponse::InternalSwap(CreateSandboxPublicTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_token_.Swap(&other->public_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSandboxPublicTokenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetSandboxItemRequest::InitAsDefaultInstance() {
}
class ResetSandboxItemRequest::_Internal {
 public:
};

ResetSandboxItemRequest::ResetSandboxItemRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.ResetSandboxItemRequest)
}
ResetSandboxItemRequest::ResetSandboxItemRequest(const ResetSandboxItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.ResetSandboxItemRequest)
}

void ResetSandboxItemRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResetSandboxItemRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResetSandboxItemRequest::~ResetSandboxItemRequest() {
  // @@protoc_insertion_point(destructor:plaid.ResetSandboxItemRequest)
  SharedDtor();
}

void ResetSandboxItemRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResetSandboxItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetSandboxItemRequest& ResetSandboxItemRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetSandboxItemRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void ResetSandboxItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.ResetSandboxItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ResetSandboxItemRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ResetSandboxItemRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ResetSandboxItemRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ResetSandboxItemRequest.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetSandboxItemRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.ResetSandboxItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ResetSandboxItemRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ResetSandboxItemRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ResetSandboxItemRequest.access_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.ResetSandboxItemRequest)
  return target;
}

size_t ResetSandboxItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.ResetSandboxItemRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetSandboxItemRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.ResetSandboxItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetSandboxItemRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetSandboxItemRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.ResetSandboxItemRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.ResetSandboxItemRequest)
    MergeFrom(*source);
  }
}

void ResetSandboxItemRequest::MergeFrom(const ResetSandboxItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.ResetSandboxItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
}

void ResetSandboxItemRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.ResetSandboxItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetSandboxItemRequest::CopyFrom(const ResetSandboxItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.ResetSandboxItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetSandboxItemRequest::IsInitialized() const {
  return true;
}

void ResetSandboxItemRequest::InternalSwap(ResetSandboxItemRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetSandboxItemRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetSandboxItemResponse::InitAsDefaultInstance() {
}
class ResetSandboxItemResponse::_Internal {
 public:
};

ResetSandboxItemResponse::ResetSandboxItemResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.ResetSandboxItemResponse)
}
ResetSandboxItemResponse::ResetSandboxItemResponse(const ResetSandboxItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  reset_login_ = from.reset_login_;
  // @@protoc_insertion_point(copy_constructor:plaid.ResetSandboxItemResponse)
}

void ResetSandboxItemResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResetSandboxItemResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_login_ = false;
}

ResetSandboxItemResponse::~ResetSandboxItemResponse() {
  // @@protoc_insertion_point(destructor:plaid.ResetSandboxItemResponse)
  SharedDtor();
}

void ResetSandboxItemResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResetSandboxItemResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetSandboxItemResponse& ResetSandboxItemResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetSandboxItemResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void ResetSandboxItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.ResetSandboxItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_login_ = false;
  _internal_metadata_.Clear();
}

const char* ResetSandboxItemResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.ResetSandboxItemResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reset_login = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reset_login_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetSandboxItemResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.ResetSandboxItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.ResetSandboxItemResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool reset_login = 2;
  if (this->reset_login() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_reset_login(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.ResetSandboxItemResponse)
  return target;
}

size_t ResetSandboxItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.ResetSandboxItemResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // bool reset_login = 2;
  if (this->reset_login() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetSandboxItemResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.ResetSandboxItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetSandboxItemResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetSandboxItemResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.ResetSandboxItemResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.ResetSandboxItemResponse)
    MergeFrom(*source);
  }
}

void ResetSandboxItemResponse::MergeFrom(const ResetSandboxItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.ResetSandboxItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.reset_login() != 0) {
    _internal_set_reset_login(from._internal_reset_login());
  }
}

void ResetSandboxItemResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.ResetSandboxItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetSandboxItemResponse::CopyFrom(const ResetSandboxItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.ResetSandboxItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetSandboxItemResponse::IsInitialized() const {
  return true;
}

void ResetSandboxItemResponse::InternalSwap(ResetSandboxItemResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reset_login_, other->reset_login_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetSandboxItemResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transaction::InitAsDefaultInstance() {
  ::plaid::_Transaction_default_instance_._instance.get_mutable()->location_ = const_cast< ::plaid::Location*>(
      ::plaid::Location::internal_default_instance());
  ::plaid::_Transaction_default_instance_._instance.get_mutable()->payment_meta_ = const_cast< ::plaid::PaymentMeta*>(
      ::plaid::PaymentMeta::internal_default_instance());
}
class Transaction::_Internal {
 public:
  static const ::plaid::Location& location(const Transaction* msg);
  static const ::plaid::PaymentMeta& payment_meta(const Transaction* msg);
};

const ::plaid::Location&
Transaction::_Internal::location(const Transaction* msg) {
  return *msg->location_;
}
const ::plaid::PaymentMeta&
Transaction::_Internal::payment_meta(const Transaction* msg) {
  return *msg->payment_meta_;
}
Transaction::Transaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      category_(from.category_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  iso_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iso_currency_code().empty()) {
    iso_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iso_currency_code_);
  }
  unofficial_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unofficial_currency_code().empty()) {
    unofficial_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unofficial_currency_code_);
  }
  category_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_category_id().empty()) {
    category_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_id_);
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  pending_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pending_transaction_id().empty()) {
    pending_transaction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_transaction_id_);
  }
  account_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_owner().empty()) {
    account_owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_owner_);
  }
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_id().empty()) {
    transaction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
  }
  transaction_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_type().empty()) {
    transaction_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_type_);
  }
  if (from._internal_has_location()) {
    location_ = new ::plaid::Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_payment_meta()) {
    payment_meta_ = new ::plaid::PaymentMeta(*from.payment_meta_);
  } else {
    payment_meta_ = nullptr;
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&pending_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(pending_));
  // @@protoc_insertion_point(copy_constructor:plaid.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_plaid_2eproto.base);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iso_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unofficial_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pending_) -
      reinterpret_cast<char*>(&location_)) + sizeof(pending_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:plaid.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iso_currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unofficial_currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete payment_meta_;
}

void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_plaid_2eproto.base);
  return *internal_default_instance();
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_.Clear();
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iso_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unofficial_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_transaction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && payment_meta_ != nullptr) {
    delete payment_meta_;
  }
  payment_meta_ = nullptr;
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pending_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(pending_));
  _internal_metadata_.Clear();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Transaction.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string iso_currency_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_iso_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Transaction.iso_currency_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unofficial_currency_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_unofficial_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Transaction.unofficial_currency_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string category = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_category();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Transaction.category"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string category_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_category_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Transaction.category_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Transaction.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.Location location = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Transaction.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.PaymentMeta payment_meta = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_payment_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pending = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pending_transaction_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_pending_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Transaction.pending_transaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account_owner = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_account_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Transaction.account_owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string transaction_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Transaction.transaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string transaction_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_transaction_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Transaction.transaction_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Transaction.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // double amount = 2;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_amount(), target);
  }

  // string iso_currency_code = 3;
  if (this->iso_currency_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iso_currency_code().data(), static_cast<int>(this->_internal_iso_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Transaction.iso_currency_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_iso_currency_code(), target);
  }

  // string unofficial_currency_code = 4;
  if (this->unofficial_currency_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unofficial_currency_code().data(), static_cast<int>(this->_internal_unofficial_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Transaction.unofficial_currency_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_unofficial_currency_code(), target);
  }

  // repeated string category = 5;
  for (int i = 0, n = this->_internal_category_size(); i < n; i++) {
    const auto& s = this->_internal_category(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Transaction.category");
    target = stream->WriteString(5, s, target);
  }

  // string category_id = 6;
  if (this->category_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category_id().data(), static_cast<int>(this->_internal_category_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Transaction.category_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_category_id(), target);
  }

  // string date = 7;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Transaction.date");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_date(), target);
  }

  // .plaid.Location location = 8;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::location(this), target, stream);
  }

  // string name = 9;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Transaction.name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_name(), target);
  }

  // .plaid.PaymentMeta payment_meta = 10;
  if (this->has_payment_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::payment_meta(this), target, stream);
  }

  // bool pending = 11;
  if (this->pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_pending(), target);
  }

  // string pending_transaction_id = 12;
  if (this->pending_transaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pending_transaction_id().data(), static_cast<int>(this->_internal_pending_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Transaction.pending_transaction_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_pending_transaction_id(), target);
  }

  // string account_owner = 13;
  if (this->account_owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_owner().data(), static_cast<int>(this->_internal_account_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Transaction.account_owner");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_account_owner(), target);
  }

  // string transaction_id = 14;
  if (this->transaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transaction_id().data(), static_cast<int>(this->_internal_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Transaction.transaction_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_transaction_id(), target);
  }

  // string transaction_type = 15;
  if (this->transaction_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transaction_type().data(), static_cast<int>(this->_internal_transaction_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Transaction.transaction_type");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_transaction_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string category = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(category_.size());
  for (int i = 0, n = category_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      category_.Get(i));
  }

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string iso_currency_code = 3;
  if (this->iso_currency_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iso_currency_code());
  }

  // string unofficial_currency_code = 4;
  if (this->unofficial_currency_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unofficial_currency_code());
  }

  // string category_id = 6;
  if (this->category_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category_id());
  }

  // string date = 7;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // string name = 9;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string pending_transaction_id = 12;
  if (this->pending_transaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pending_transaction_id());
  }

  // string account_owner = 13;
  if (this->account_owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_owner());
  }

  // string transaction_id = 14;
  if (this->transaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transaction_id());
  }

  // string transaction_type = 15;
  if (this->transaction_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transaction_type());
  }

  // .plaid.Location location = 8;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .plaid.PaymentMeta payment_meta = 10;
  if (this->has_payment_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payment_meta_);
  }

  // double amount = 2;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    total_size += 1 + 8;
  }

  // bool pending = 11;
  if (this->pending() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_.MergeFrom(from.category_);
  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.iso_currency_code().size() > 0) {

    iso_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iso_currency_code_);
  }
  if (from.unofficial_currency_code().size() > 0) {

    unofficial_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unofficial_currency_code_);
  }
  if (from.category_id().size() > 0) {

    category_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_id_);
  }
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.pending_transaction_id().size() > 0) {

    pending_transaction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_transaction_id_);
  }
  if (from.account_owner().size() > 0) {

    account_owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_owner_);
  }
  if (from.transaction_id().size() > 0) {

    transaction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
  }
  if (from.transaction_type().size() > 0) {

    transaction_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_type_);
  }
  if (from.has_location()) {
    _internal_mutable_location()->::plaid::Location::MergeFrom(from._internal_location());
  }
  if (from.has_payment_meta()) {
    _internal_mutable_payment_meta()->::plaid::PaymentMeta::MergeFrom(from._internal_payment_meta());
  }
  if (!(from.amount() <= 0 && from.amount() >= 0)) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.pending() != 0) {
    _internal_set_pending(from._internal_pending());
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  category_.InternalSwap(&other->category_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  iso_currency_code_.Swap(&other->iso_currency_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unofficial_currency_code_.Swap(&other->unofficial_currency_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  category_id_.Swap(&other->category_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pending_transaction_id_.Swap(&other->pending_transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_owner_.Swap(&other->account_owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transaction_id_.Swap(&other->transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transaction_type_.Swap(&other->transaction_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(location_, other->location_);
  swap(payment_meta_, other->payment_meta_);
  swap(amount_, other->amount_);
  swap(pending_, other->pending_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Location::InitAsDefaultInstance() {
}
class Location::_Internal {
 public:
};

Location::Location()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addreess_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addreess().empty()) {
    addreess_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.addreess_);
  }
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_city().empty()) {
    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_region().empty()) {
    region_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  store_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_store_number().empty()) {
    store_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_number_);
  }
  postal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_postal_code().empty()) {
    postal_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.postal_code_);
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lon_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  // @@protoc_insertion_point(copy_constructor:plaid.Location)
}

void Location::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Location_plaid_2eproto.base);
  addreess_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:plaid.Location)
  SharedDtor();
}

void Location::SharedDtor() {
  addreess_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Location& Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Location_plaid_2eproto.base);
  return *internal_default_instance();
}


void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addreess_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  _internal_metadata_.Clear();
}

const char* Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string addreess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_addreess();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Location.addreess"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string city = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_city();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Location.city"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double lat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string region = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Location.region"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string store_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_store_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Location.store_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string postal_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_postal_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Location.postal_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.Location.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addreess = 1;
  if (this->addreess().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addreess().data(), static_cast<int>(this->_internal_addreess().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Location.addreess");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addreess(), target);
  }

  // string city = 2;
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Location.city");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_city(), target);
  }

  // double lat = 3;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_lat(), target);
  }

  // double lon = 4;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_lon(), target);
  }

  // string region = 5;
  if (this->region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Location.region");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_region(), target);
  }

  // string store_number = 6;
  if (this->store_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_store_number().data(), static_cast<int>(this->_internal_store_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Location.store_number");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_store_number(), target);
  }

  // string postal_code = 7;
  if (this->postal_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_postal_code().data(), static_cast<int>(this->_internal_postal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Location.postal_code");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_postal_code(), target);
  }

  // string country = 8;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.Location.country");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addreess = 1;
  if (this->addreess().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addreess());
  }

  // string city = 2;
  if (this->city().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string region = 5;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string store_number = 6;
  if (this->store_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_store_number());
  }

  // string postal_code = 7;
  if (this->postal_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_postal_code());
  }

  // string country = 8;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // double lat = 3;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double lon = 4;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.Location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addreess().size() > 0) {

    addreess_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.addreess_);
  }
  if (from.city().size() > 0) {

    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.store_number().size() > 0) {

    store_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_number_);
  }
  if (from.postal_code().size() > 0) {

    postal_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.postal_code_);
  }
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    _internal_set_lon(from._internal_lon());
  }
}

void Location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addreess_.Swap(&other->addreess_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  store_number_.Swap(&other->store_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  postal_code_.Swap(&other->postal_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PaymentMeta::InitAsDefaultInstance() {
}
class PaymentMeta::_Internal {
 public:
};

PaymentMeta::PaymentMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.PaymentMeta)
}
PaymentMeta::PaymentMeta(const PaymentMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  by_order_of_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_by_order_of().empty()) {
    by_order_of_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.by_order_of_);
  }
  payee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payee().empty()) {
    payee_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payee_);
  }
  payer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payer().empty()) {
    payer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payer_);
  }
  payment_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_method().empty()) {
    payment_method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_method_);
  }
  payment_processor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_processor().empty()) {
    payment_processor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_processor_);
  }
  ppd_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ppd_id().empty()) {
    ppd_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ppd_id_);
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  reference_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference_number().empty()) {
    reference_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_number_);
  }
  // @@protoc_insertion_point(copy_constructor:plaid.PaymentMeta)
}

void PaymentMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PaymentMeta_plaid_2eproto.base);
  by_order_of_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_processor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ppd_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PaymentMeta::~PaymentMeta() {
  // @@protoc_insertion_point(destructor:plaid.PaymentMeta)
  SharedDtor();
}

void PaymentMeta::SharedDtor() {
  by_order_of_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_processor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ppd_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PaymentMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PaymentMeta& PaymentMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PaymentMeta_plaid_2eproto.base);
  return *internal_default_instance();
}


void PaymentMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.PaymentMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_order_of_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payee_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_processor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ppd_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PaymentMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string by_order_of = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_by_order_of();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.PaymentMeta.by_order_of"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.PaymentMeta.payee"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.PaymentMeta.payer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_method = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_payment_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.PaymentMeta.payment_method"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_processor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_payment_processor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.PaymentMeta.payment_processor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ppd_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_ppd_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.PaymentMeta.ppd_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.PaymentMeta.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference_number = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_reference_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.PaymentMeta.reference_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaymentMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.PaymentMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string by_order_of = 1;
  if (this->by_order_of().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_by_order_of().data(), static_cast<int>(this->_internal_by_order_of().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.PaymentMeta.by_order_of");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_by_order_of(), target);
  }

  // string payee = 2;
  if (this->payee().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payee().data(), static_cast<int>(this->_internal_payee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.PaymentMeta.payee");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payee(), target);
  }

  // string payer = 3;
  if (this->payer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payer().data(), static_cast<int>(this->_internal_payer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.PaymentMeta.payer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payer(), target);
  }

  // string payment_method = 4;
  if (this->payment_method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_method().data(), static_cast<int>(this->_internal_payment_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.PaymentMeta.payment_method");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_payment_method(), target);
  }

  // string payment_processor = 5;
  if (this->payment_processor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_processor().data(), static_cast<int>(this->_internal_payment_processor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.PaymentMeta.payment_processor");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_payment_processor(), target);
  }

  // string ppd_id = 6;
  if (this->ppd_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ppd_id().data(), static_cast<int>(this->_internal_ppd_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.PaymentMeta.ppd_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ppd_id(), target);
  }

  // string reason = 7;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.PaymentMeta.reason");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_reason(), target);
  }

  // string reference_number = 8;
  if (this->reference_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference_number().data(), static_cast<int>(this->_internal_reference_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.PaymentMeta.reference_number");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_reference_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.PaymentMeta)
  return target;
}

size_t PaymentMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.PaymentMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string by_order_of = 1;
  if (this->by_order_of().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_by_order_of());
  }

  // string payee = 2;
  if (this->payee().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payee());
  }

  // string payer = 3;
  if (this->payer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payer());
  }

  // string payment_method = 4;
  if (this->payment_method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_method());
  }

  // string payment_processor = 5;
  if (this->payment_processor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_processor());
  }

  // string ppd_id = 6;
  if (this->ppd_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ppd_id());
  }

  // string reason = 7;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // string reference_number = 8;
  if (this->reference_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaymentMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.PaymentMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const PaymentMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PaymentMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.PaymentMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.PaymentMeta)
    MergeFrom(*source);
  }
}

void PaymentMeta::MergeFrom(const PaymentMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.PaymentMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.by_order_of().size() > 0) {

    by_order_of_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.by_order_of_);
  }
  if (from.payee().size() > 0) {

    payee_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payee_);
  }
  if (from.payer().size() > 0) {

    payer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payer_);
  }
  if (from.payment_method().size() > 0) {

    payment_method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_method_);
  }
  if (from.payment_processor().size() > 0) {

    payment_processor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_processor_);
  }
  if (from.ppd_id().size() > 0) {

    ppd_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ppd_id_);
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.reference_number().size() > 0) {

    reference_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_number_);
  }
}

void PaymentMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.PaymentMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaymentMeta::CopyFrom(const PaymentMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.PaymentMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentMeta::IsInitialized() const {
  return true;
}

void PaymentMeta::InternalSwap(PaymentMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  by_order_of_.Swap(&other->by_order_of_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payee_.Swap(&other->payee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payer_.Swap(&other->payer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_method_.Swap(&other->payment_method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_processor_.Swap(&other->payment_processor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ppd_id_.Swap(&other->ppd_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reference_number_.Swap(&other->reference_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTransactionsRequestOptions::InitAsDefaultInstance() {
}
class GetTransactionsRequestOptions::_Internal {
 public:
};

GetTransactionsRequestOptions::GetTransactionsRequestOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetTransactionsRequestOptions)
}
GetTransactionsRequestOptions::GetTransactionsRequestOptions(const GetTransactionsRequestOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&count_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:plaid.GetTransactionsRequestOptions)
}

void GetTransactionsRequestOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTransactionsRequestOptions_plaid_2eproto.base);
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&count_)) + sizeof(offset_));
}

GetTransactionsRequestOptions::~GetTransactionsRequestOptions() {
  // @@protoc_insertion_point(destructor:plaid.GetTransactionsRequestOptions)
  SharedDtor();
}

void GetTransactionsRequestOptions::SharedDtor() {
}

void GetTransactionsRequestOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTransactionsRequestOptions& GetTransactionsRequestOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTransactionsRequestOptions_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetTransactionsRequestOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetTransactionsRequestOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&count_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

const char* GetTransactionsRequestOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_account_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetTransactionsRequestOptions.account_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTransactionsRequestOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetTransactionsRequestOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    const auto& s = this->_internal_account_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetTransactionsRequestOptions.account_ids");
    target = stream->WriteString(1, s, target);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_count(), target);
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetTransactionsRequestOptions)
  return target;
}

size_t GetTransactionsRequestOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetTransactionsRequestOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string account_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(account_ids_.size());
  for (int i = 0, n = account_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      account_ids_.Get(i));
  }

  // int64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTransactionsRequestOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetTransactionsRequestOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTransactionsRequestOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTransactionsRequestOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetTransactionsRequestOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetTransactionsRequestOptions)
    MergeFrom(*source);
  }
}

void GetTransactionsRequestOptions::MergeFrom(const GetTransactionsRequestOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetTransactionsRequestOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void GetTransactionsRequestOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetTransactionsRequestOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransactionsRequestOptions::CopyFrom(const GetTransactionsRequestOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetTransactionsRequestOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionsRequestOptions::IsInitialized() const {
  return true;
}

void GetTransactionsRequestOptions::InternalSwap(GetTransactionsRequestOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
  swap(count_, other->count_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTransactionsRequestOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTransactionsRequest::InitAsDefaultInstance() {
  ::plaid::_GetTransactionsRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::plaid::GetTransactionsRequestOptions*>(
      ::plaid::GetTransactionsRequestOptions::internal_default_instance());
}
class GetTransactionsRequest::_Internal {
 public:
  static const ::plaid::GetTransactionsRequestOptions& options(const GetTransactionsRequest* msg);
};

const ::plaid::GetTransactionsRequestOptions&
GetTransactionsRequest::_Internal::options(const GetTransactionsRequest* msg) {
  return *msg->options_;
}
GetTransactionsRequest::GetTransactionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetTransactionsRequest)
}
GetTransactionsRequest::GetTransactionsRequest(const GetTransactionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_token().empty()) {
    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_date().empty()) {
    start_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_date_);
  }
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_date().empty()) {
    end_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_date_);
  }
  if (from._internal_has_options()) {
    options_ = new ::plaid::GetTransactionsRequestOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plaid.GetTransactionsRequest)
}

void GetTransactionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTransactionsRequest_plaid_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  options_ = nullptr;
}

GetTransactionsRequest::~GetTransactionsRequest() {
  // @@protoc_insertion_point(destructor:plaid.GetTransactionsRequest)
  SharedDtor();
}

void GetTransactionsRequest::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void GetTransactionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTransactionsRequest& GetTransactionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTransactionsRequest_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetTransactionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetTransactionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetTransactionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetTransactionsRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetTransactionsRequest.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string access_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetTransactionsRequest.access_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string start_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_start_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetTransactionsRequest.start_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_end_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetTransactionsRequest.end_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plaid.GetTransactionsRequestOptions options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTransactionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetTransactionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetTransactionsRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetTransactionsRequest.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetTransactionsRequest.access_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_access_token(), target);
  }

  // string start_date = 4;
  if (this->start_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_date().data(), static_cast<int>(this->_internal_start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetTransactionsRequest.start_date");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_start_date(), target);
  }

  // string end_date = 5;
  if (this->end_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_date().data(), static_cast<int>(this->_internal_end_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetTransactionsRequest.end_date");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_end_date(), target);
  }

  // .plaid.GetTransactionsRequestOptions options = 6;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetTransactionsRequest)
  return target;
}

size_t GetTransactionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetTransactionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string access_token = 3;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  // string start_date = 4;
  if (this->start_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_date());
  }

  // string end_date = 5;
  if (this->end_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_date());
  }

  // .plaid.GetTransactionsRequestOptions options = 6;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTransactionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetTransactionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTransactionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTransactionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetTransactionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetTransactionsRequest)
    MergeFrom(*source);
  }
}

void GetTransactionsRequest::MergeFrom(const GetTransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetTransactionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  if (from.start_date().size() > 0) {

    start_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_date_);
  }
  if (from.end_date().size() > 0) {

    end_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_date_);
  }
  if (from.has_options()) {
    _internal_mutable_options()->::plaid::GetTransactionsRequestOptions::MergeFrom(from._internal_options());
  }
}

void GetTransactionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetTransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransactionsRequest::CopyFrom(const GetTransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetTransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionsRequest::IsInitialized() const {
  return true;
}

void GetTransactionsRequest::InternalSwap(GetTransactionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  access_token_.Swap(&other->access_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_date_.Swap(&other->start_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_date_.Swap(&other->end_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTransactionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTransactionsResponse::InitAsDefaultInstance() {
  ::plaid::_GetTransactionsResponse_default_instance_._instance.get_mutable()->item_ = const_cast< ::plaid::Item*>(
      ::plaid::Item::internal_default_instance());
}
class GetTransactionsResponse::_Internal {
 public:
  static const ::plaid::Item& item(const GetTransactionsResponse* msg);
};

const ::plaid::Item&
GetTransactionsResponse::_Internal::item(const GetTransactionsResponse* msg) {
  return *msg->item_;
}
GetTransactionsResponse::GetTransactionsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetTransactionsResponse)
}
GetTransactionsResponse::GetTransactionsResponse(const GetTransactionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      accounts_(from.accounts_),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from._internal_has_item()) {
    item_ = new ::plaid::Item(*from.item_);
  } else {
    item_ = nullptr;
  }
  total_transactions_ = from.total_transactions_;
  // @@protoc_insertion_point(copy_constructor:plaid.GetTransactionsResponse)
}

void GetTransactionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTransactionsResponse_plaid_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_transactions_) -
      reinterpret_cast<char*>(&item_)) + sizeof(total_transactions_));
}

GetTransactionsResponse::~GetTransactionsResponse() {
  // @@protoc_insertion_point(destructor:plaid.GetTransactionsResponse)
  SharedDtor();
}

void GetTransactionsResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete item_;
}

void GetTransactionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTransactionsResponse& GetTransactionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTransactionsResponse_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetTransactionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetTransactionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  transactions_.Clear();
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  total_transactions_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GetTransactionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetTransactionsResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .plaid.Account accounts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .plaid.Item item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .plaid.Transaction transactions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 total_transactions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_transactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTransactionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetTransactionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetTransactionsResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // repeated .plaid.Account accounts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_accounts(i), target, stream);
  }

  // .plaid.Item item = 3;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::item(this), target, stream);
  }

  // repeated .plaid.Transaction transactions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_transactions(i), target, stream);
  }

  // int64 total_transactions = 5;
  if (this->total_transactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_total_transactions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetTransactionsResponse)
  return target;
}

size_t GetTransactionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetTransactionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .plaid.Account accounts = 2;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .plaid.Transaction transactions = 4;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .plaid.Item item = 3;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  // int64 total_transactions = 5;
  if (this->total_transactions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_transactions());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTransactionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetTransactionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTransactionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTransactionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetTransactionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetTransactionsResponse)
    MergeFrom(*source);
  }
}

void GetTransactionsResponse::MergeFrom(const GetTransactionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetTransactionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
  transactions_.MergeFrom(from.transactions_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_item()) {
    _internal_mutable_item()->::plaid::Item::MergeFrom(from._internal_item());
  }
  if (from.total_transactions() != 0) {
    _internal_set_total_transactions(from._internal_total_transactions());
  }
}

void GetTransactionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetTransactionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransactionsResponse::CopyFrom(const GetTransactionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetTransactionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionsResponse::IsInitialized() const {
  return true;
}

void GetTransactionsResponse::InternalSwap(GetTransactionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
  transactions_.InternalSwap(&other->transactions_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(item_, other->item_);
  swap(total_transactions_, other->total_transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTransactionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTransactionsOptions::InitAsDefaultInstance() {
}
class GetTransactionsOptions::_Internal {
 public:
};

GetTransactionsOptions::GetTransactionsOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:plaid.GetTransactionsOptions)
}
GetTransactionsOptions::GetTransactionsOptions(const GetTransactionsOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_date().empty()) {
    start_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_date_);
  }
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_date().empty()) {
    end_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_date_);
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&count_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:plaid.GetTransactionsOptions)
}

void GetTransactionsOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTransactionsOptions_plaid_2eproto.base);
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&count_)) + sizeof(offset_));
}

GetTransactionsOptions::~GetTransactionsOptions() {
  // @@protoc_insertion_point(destructor:plaid.GetTransactionsOptions)
  SharedDtor();
}

void GetTransactionsOptions::SharedDtor() {
  start_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTransactionsOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTransactionsOptions& GetTransactionsOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTransactionsOptions_plaid_2eproto.base);
  return *internal_default_instance();
}


void GetTransactionsOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:plaid.GetTransactionsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  start_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&count_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

const char* GetTransactionsOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string start_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetTransactionsOptions.start_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_end_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetTransactionsOptions.end_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string account_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_account_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plaid.GetTransactionsOptions.account_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTransactionsOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plaid.GetTransactionsOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start_date = 1;
  if (this->start_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_date().data(), static_cast<int>(this->_internal_start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetTransactionsOptions.start_date");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start_date(), target);
  }

  // string end_date = 2;
  if (this->end_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_date().data(), static_cast<int>(this->_internal_end_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetTransactionsOptions.end_date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_end_date(), target);
  }

  // repeated string account_ids = 3;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    const auto& s = this->_internal_account_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plaid.GetTransactionsOptions.account_ids");
    target = stream->WriteString(3, s, target);
  }

  // int64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_count(), target);
  }

  // int64 offset = 5;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plaid.GetTransactionsOptions)
  return target;
}

size_t GetTransactionsOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plaid.GetTransactionsOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string account_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(account_ids_.size());
  for (int i = 0, n = account_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      account_ids_.Get(i));
  }

  // string start_date = 1;
  if (this->start_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_date());
  }

  // string end_date = 2;
  if (this->end_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_date());
  }

  // int64 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  // int64 offset = 5;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTransactionsOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plaid.GetTransactionsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTransactionsOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTransactionsOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plaid.GetTransactionsOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plaid.GetTransactionsOptions)
    MergeFrom(*source);
  }
}

void GetTransactionsOptions::MergeFrom(const GetTransactionsOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plaid.GetTransactionsOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  if (from.start_date().size() > 0) {

    start_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_date_);
  }
  if (from.end_date().size() > 0) {

    end_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_date_);
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void GetTransactionsOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plaid.GetTransactionsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransactionsOptions::CopyFrom(const GetTransactionsOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plaid.GetTransactionsOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionsOptions::IsInitialized() const {
  return true;
}

void GetTransactionsOptions::InternalSwap(GetTransactionsOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
  start_date_.Swap(&other->start_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_date_.Swap(&other->end_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTransactionsOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace plaid
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::plaid::Account* Arena::CreateMaybeMessage< ::plaid::Account >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::Account >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::AccountBalances* Arena::CreateMaybeMessage< ::plaid::AccountBalances >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::AccountBalances >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::ACHNumber* Arena::CreateMaybeMessage< ::plaid::ACHNumber >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::ACHNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::EFTNumber* Arena::CreateMaybeMessage< ::plaid::EFTNumber >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::EFTNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::IBANNumber* Arena::CreateMaybeMessage< ::plaid::IBANNumber >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::IBANNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::BACSNumber* Arena::CreateMaybeMessage< ::plaid::BACSNumber >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::BACSNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetBalancesRequestOptions* Arena::CreateMaybeMessage< ::plaid::GetBalancesRequestOptions >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetBalancesRequestOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetBalancesRequest* Arena::CreateMaybeMessage< ::plaid::GetBalancesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetBalancesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetBalancesResponse* Arena::CreateMaybeMessage< ::plaid::GetBalancesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetBalancesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetAccountsRequestOptions* Arena::CreateMaybeMessage< ::plaid::GetAccountsRequestOptions >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetAccountsRequestOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetAccountsRequest* Arena::CreateMaybeMessage< ::plaid::GetAccountsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetAccountsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetAccountsResponse* Arena::CreateMaybeMessage< ::plaid::GetAccountsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetAccountsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetAccountsOptions* Arena::CreateMaybeMessage< ::plaid::GetAccountsOptions >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetAccountsOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetBalancesOptions* Arena::CreateMaybeMessage< ::plaid::GetBalancesOptions >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetBalancesOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::AssetReport* Arena::CreateMaybeMessage< ::plaid::AssetReport >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::AssetReport >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::AssetReportItem* Arena::CreateMaybeMessage< ::plaid::AssetReportItem >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::AssetReportItem >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::AssetReportUser* Arena::CreateMaybeMessage< ::plaid::AssetReportUser >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::AssetReportUser >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetAssetReportRequest* Arena::CreateMaybeMessage< ::plaid::GetAssetReportRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetAssetReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetAssetReportResponse* Arena::CreateMaybeMessage< ::plaid::GetAssetReportResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetAssetReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::RemoveAssetReportRequest* Arena::CreateMaybeMessage< ::plaid::RemoveAssetReportRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::RemoveAssetReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::RemoveAssetReportResponse* Arena::CreateMaybeMessage< ::plaid::RemoveAssetReportResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::RemoveAssetReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::CreateAuditCopyRequest* Arena::CreateMaybeMessage< ::plaid::CreateAuditCopyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::CreateAuditCopyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::CreateAuditCopyTokenResponse* Arena::CreateMaybeMessage< ::plaid::CreateAuditCopyTokenResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::CreateAuditCopyTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetAuthRequestOptions* Arena::CreateMaybeMessage< ::plaid::GetAuthRequestOptions >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetAuthRequestOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetAuthRequest* Arena::CreateMaybeMessage< ::plaid::GetAuthRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetAuthRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::AccountNumberCollection* Arena::CreateMaybeMessage< ::plaid::AccountNumberCollection >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::AccountNumberCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetAuthResponse* Arena::CreateMaybeMessage< ::plaid::GetAuthResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetAuthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetAuthOptions* Arena::CreateMaybeMessage< ::plaid::GetAuthOptions >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetAuthOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::Category* Arena::CreateMaybeMessage< ::plaid::Category >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::Category >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetCategoriesResponse* Arena::CreateMaybeMessage< ::plaid::GetCategoriesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetCategoriesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::Error* Arena::CreateMaybeMessage< ::plaid::Error >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::Security* Arena::CreateMaybeMessage< ::plaid::Security >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::Security >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::Holding* Arena::CreateMaybeMessage< ::plaid::Holding >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::Holding >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetHoldingsRequest* Arena::CreateMaybeMessage< ::plaid::GetHoldingsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetHoldingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetHoldingsOptions* Arena::CreateMaybeMessage< ::plaid::GetHoldingsOptions >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetHoldingsOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetHoldingsResponse* Arena::CreateMaybeMessage< ::plaid::GetHoldingsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetHoldingsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::Identity* Arena::CreateMaybeMessage< ::plaid::Identity >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::Identity >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::Address* Arena::CreateMaybeMessage< ::plaid::Address >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::Address >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::AddressData* Arena::CreateMaybeMessage< ::plaid::AddressData >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::AddressData >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::Email* Arena::CreateMaybeMessage< ::plaid::Email >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::Email >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::PhoneNumber* Arena::CreateMaybeMessage< ::plaid::PhoneNumber >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::PhoneNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetIdentityRequest* Arena::CreateMaybeMessage< ::plaid::GetIdentityRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetIdentityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::AccountWithOwners* Arena::CreateMaybeMessage< ::plaid::AccountWithOwners >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::AccountWithOwners >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetIdentityResponse* Arena::CreateMaybeMessage< ::plaid::GetIdentityResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetIdentityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::Income* Arena::CreateMaybeMessage< ::plaid::Income >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::Income >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::IncomeStream* Arena::CreateMaybeMessage< ::plaid::IncomeStream >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::IncomeStream >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetIncomeRequest* Arena::CreateMaybeMessage< ::plaid::GetIncomeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetIncomeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetIncomeResponse* Arena::CreateMaybeMessage< ::plaid::GetIncomeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetIncomeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::Institution* Arena::CreateMaybeMessage< ::plaid::Institution >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::Institution >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::InstitutionStatus* Arena::CreateMaybeMessage< ::plaid::InstitutionStatus >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::InstitutionStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::ItemLogins* Arena::CreateMaybeMessage< ::plaid::ItemLogins >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::ItemLogins >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::InstitutionStatusBreakdown* Arena::CreateMaybeMessage< ::plaid::InstitutionStatusBreakdown >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::InstitutionStatusBreakdown >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::Credential* Arena::CreateMaybeMessage< ::plaid::Credential >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::Credential >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetInstitutionsRequest* Arena::CreateMaybeMessage< ::plaid::GetInstitutionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetInstitutionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetInstitutionsOptions* Arena::CreateMaybeMessage< ::plaid::GetInstitutionsOptions >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetInstitutionsOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetInstitutionsResponse* Arena::CreateMaybeMessage< ::plaid::GetInstitutionsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetInstitutionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetInstitutionByIDRequest* Arena::CreateMaybeMessage< ::plaid::GetInstitutionByIDRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetInstitutionByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetInstitutionByIDOptions* Arena::CreateMaybeMessage< ::plaid::GetInstitutionByIDOptions >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetInstitutionByIDOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetInstitutionByIDResponse* Arena::CreateMaybeMessage< ::plaid::GetInstitutionByIDResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetInstitutionByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::SearchInstitutionsRequest* Arena::CreateMaybeMessage< ::plaid::SearchInstitutionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::SearchInstitutionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::SearchInstitutionsOptions* Arena::CreateMaybeMessage< ::plaid::SearchInstitutionsOptions >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::SearchInstitutionsOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::SearchInstitutionsResponse* Arena::CreateMaybeMessage< ::plaid::SearchInstitutionsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::SearchInstitutionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::InvestmentTransaction* Arena::CreateMaybeMessage< ::plaid::InvestmentTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::InvestmentTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetInvestmentTransactionsResponse* Arena::CreateMaybeMessage< ::plaid::GetInvestmentTransactionsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetInvestmentTransactionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetInvestmentTransactionsOptions* Arena::CreateMaybeMessage< ::plaid::GetInvestmentTransactionsOptions >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetInvestmentTransactionsOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetInvestmentTransactionsRequest* Arena::CreateMaybeMessage< ::plaid::GetInvestmentTransactionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetInvestmentTransactionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetInvestmentTransactionsRequestOptions* Arena::CreateMaybeMessage< ::plaid::GetInvestmentTransactionsRequestOptions >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetInvestmentTransactionsRequestOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::Item* Arena::CreateMaybeMessage< ::plaid::Item >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::Item >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetItemRequest* Arena::CreateMaybeMessage< ::plaid::GetItemRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetItemResponse* Arena::CreateMaybeMessage< ::plaid::GetItemResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetItemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::RemoveItemRequest* Arena::CreateMaybeMessage< ::plaid::RemoveItemRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::RemoveItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::RemoveItemResponse* Arena::CreateMaybeMessage< ::plaid::RemoveItemResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::RemoveItemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::UpdateItemWebhookRequest* Arena::CreateMaybeMessage< ::plaid::UpdateItemWebhookRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::UpdateItemWebhookRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::UpdateItemWebhookResponse* Arena::CreateMaybeMessage< ::plaid::UpdateItemWebhookResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::UpdateItemWebhookResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::InvalidateAccessTokenRequest* Arena::CreateMaybeMessage< ::plaid::InvalidateAccessTokenRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::InvalidateAccessTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::InvalidateAccessTokenResponse* Arena::CreateMaybeMessage< ::plaid::InvalidateAccessTokenResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::InvalidateAccessTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::UpdateAccessTokenVersionRequest* Arena::CreateMaybeMessage< ::plaid::UpdateAccessTokenVersionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::UpdateAccessTokenVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::UpdateAccessTokenVersionResponse* Arena::CreateMaybeMessage< ::plaid::UpdateAccessTokenVersionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::UpdateAccessTokenVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::CreatePublicTokenRequest* Arena::CreateMaybeMessage< ::plaid::CreatePublicTokenRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::CreatePublicTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::CreatePublicTokenResponse* Arena::CreateMaybeMessage< ::plaid::CreatePublicTokenResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::CreatePublicTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::ExchangePublicTokenRequest* Arena::CreateMaybeMessage< ::plaid::ExchangePublicTokenRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::ExchangePublicTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::ExchangePublicTokenResponse* Arena::CreateMaybeMessage< ::plaid::ExchangePublicTokenResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::ExchangePublicTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::StudentLoanLiability* Arena::CreateMaybeMessage< ::plaid::StudentLoanLiability >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::StudentLoanLiability >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::PSLFStatus* Arena::CreateMaybeMessage< ::plaid::PSLFStatus >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::PSLFStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::StudentLoanServicerAddress* Arena::CreateMaybeMessage< ::plaid::StudentLoanServicerAddress >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::StudentLoanServicerAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::StudentLoanStatus* Arena::CreateMaybeMessage< ::plaid::StudentLoanStatus >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::StudentLoanStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::StudentLoanRepaymentPlan* Arena::CreateMaybeMessage< ::plaid::StudentLoanRepaymentPlan >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::StudentLoanRepaymentPlan >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetLiabilitiesRequestOptions* Arena::CreateMaybeMessage< ::plaid::GetLiabilitiesRequestOptions >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetLiabilitiesRequestOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetLiabilitiesRequest* Arena::CreateMaybeMessage< ::plaid::GetLiabilitiesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetLiabilitiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetLiabilitiesResponse* Arena::CreateMaybeMessage< ::plaid::GetLiabilitiesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetLiabilitiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::Liabilities* Arena::CreateMaybeMessage< ::plaid::Liabilities >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::Liabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetLiabilitiesOptions* Arena::CreateMaybeMessage< ::plaid::GetLiabilitiesOptions >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetLiabilitiesOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::PaymentRecipientAddress* Arena::CreateMaybeMessage< ::plaid::PaymentRecipientAddress >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::PaymentRecipientAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::CreatePaymentRecipientRequest* Arena::CreateMaybeMessage< ::plaid::CreatePaymentRecipientRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::CreatePaymentRecipientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::CreatePaymentRecipientResponse* Arena::CreateMaybeMessage< ::plaid::CreatePaymentRecipientResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::CreatePaymentRecipientResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetPaymentRecipientRequest* Arena::CreateMaybeMessage< ::plaid::GetPaymentRecipientRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetPaymentRecipientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetPaymentRecipientResponse* Arena::CreateMaybeMessage< ::plaid::GetPaymentRecipientResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetPaymentRecipientResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::ListPaymentRecipientsRequest* Arena::CreateMaybeMessage< ::plaid::ListPaymentRecipientsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::ListPaymentRecipientsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::Recipient* Arena::CreateMaybeMessage< ::plaid::Recipient >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::Recipient >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::ListPaymentRecipientsResponse* Arena::CreateMaybeMessage< ::plaid::ListPaymentRecipientsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::ListPaymentRecipientsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::PaymentAmount* Arena::CreateMaybeMessage< ::plaid::PaymentAmount >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::PaymentAmount >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::CreatePaymentRequest* Arena::CreateMaybeMessage< ::plaid::CreatePaymentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::CreatePaymentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::CreatePaymentResponse* Arena::CreateMaybeMessage< ::plaid::CreatePaymentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::CreatePaymentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::CreatePaymentTokenRequest* Arena::CreateMaybeMessage< ::plaid::CreatePaymentTokenRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::CreatePaymentTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::CreatePaymentTokenResponse* Arena::CreateMaybeMessage< ::plaid::CreatePaymentTokenResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::CreatePaymentTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetPaymentRequest* Arena::CreateMaybeMessage< ::plaid::GetPaymentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetPaymentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetPaymentResponse* Arena::CreateMaybeMessage< ::plaid::GetPaymentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetPaymentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::ListPaymentsRequest* Arena::CreateMaybeMessage< ::plaid::ListPaymentsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::ListPaymentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::Payment* Arena::CreateMaybeMessage< ::plaid::Payment >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::Payment >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::ListPaymentsResponse* Arena::CreateMaybeMessage< ::plaid::ListPaymentsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::ListPaymentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::ListPaymentsOptions* Arena::CreateMaybeMessage< ::plaid::ListPaymentsOptions >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::ListPaymentsOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::CreateProcessorTokenRequest* Arena::CreateMaybeMessage< ::plaid::CreateProcessorTokenRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::CreateProcessorTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::CreateProcessorTokenResponse* Arena::CreateMaybeMessage< ::plaid::CreateProcessorTokenResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::CreateProcessorTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::CreateStripeTokenRequest* Arena::CreateMaybeMessage< ::plaid::CreateStripeTokenRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::CreateStripeTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::CreateStripeTokenResponse* Arena::CreateMaybeMessage< ::plaid::CreateStripeTokenResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::CreateStripeTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::CreateSandboxPublicTokenRequest* Arena::CreateMaybeMessage< ::plaid::CreateSandboxPublicTokenRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::CreateSandboxPublicTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::CreateSandboxPublicTokenResponse* Arena::CreateMaybeMessage< ::plaid::CreateSandboxPublicTokenResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::CreateSandboxPublicTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::ResetSandboxItemRequest* Arena::CreateMaybeMessage< ::plaid::ResetSandboxItemRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::ResetSandboxItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::ResetSandboxItemResponse* Arena::CreateMaybeMessage< ::plaid::ResetSandboxItemResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::ResetSandboxItemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::Transaction* Arena::CreateMaybeMessage< ::plaid::Transaction >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::Location* Arena::CreateMaybeMessage< ::plaid::Location >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::PaymentMeta* Arena::CreateMaybeMessage< ::plaid::PaymentMeta >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::PaymentMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetTransactionsRequestOptions* Arena::CreateMaybeMessage< ::plaid::GetTransactionsRequestOptions >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetTransactionsRequestOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetTransactionsRequest* Arena::CreateMaybeMessage< ::plaid::GetTransactionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetTransactionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetTransactionsResponse* Arena::CreateMaybeMessage< ::plaid::GetTransactionsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetTransactionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::plaid::GetTransactionsOptions* Arena::CreateMaybeMessage< ::plaid::GetTransactionsOptions >(Arena* arena) {
  return Arena::CreateInternal< ::plaid::GetTransactionsOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
