// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plaid.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_plaid_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_plaid_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_plaid_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_plaid_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[107]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_plaid_2eproto;
namespace plaid {
class ACHNumber;
class ACHNumberDefaultTypeInternal;
extern ACHNumberDefaultTypeInternal _ACHNumber_default_instance_;
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class AccountBalances;
class AccountBalancesDefaultTypeInternal;
extern AccountBalancesDefaultTypeInternal _AccountBalances_default_instance_;
class AccountNumberCollection;
class AccountNumberCollectionDefaultTypeInternal;
extern AccountNumberCollectionDefaultTypeInternal _AccountNumberCollection_default_instance_;
class AccountWithOwners;
class AccountWithOwnersDefaultTypeInternal;
extern AccountWithOwnersDefaultTypeInternal _AccountWithOwners_default_instance_;
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class AddressData;
class AddressDataDefaultTypeInternal;
extern AddressDataDefaultTypeInternal _AddressData_default_instance_;
class AssetReport;
class AssetReportDefaultTypeInternal;
extern AssetReportDefaultTypeInternal _AssetReport_default_instance_;
class AssetReportItem;
class AssetReportItemDefaultTypeInternal;
extern AssetReportItemDefaultTypeInternal _AssetReportItem_default_instance_;
class AssetReportUser;
class AssetReportUserDefaultTypeInternal;
extern AssetReportUserDefaultTypeInternal _AssetReportUser_default_instance_;
class BACSNumber;
class BACSNumberDefaultTypeInternal;
extern BACSNumberDefaultTypeInternal _BACSNumber_default_instance_;
class Category;
class CategoryDefaultTypeInternal;
extern CategoryDefaultTypeInternal _Category_default_instance_;
class CreateAuditCopyRequest;
class CreateAuditCopyRequestDefaultTypeInternal;
extern CreateAuditCopyRequestDefaultTypeInternal _CreateAuditCopyRequest_default_instance_;
class CreateAuditCopyTokenResponse;
class CreateAuditCopyTokenResponseDefaultTypeInternal;
extern CreateAuditCopyTokenResponseDefaultTypeInternal _CreateAuditCopyTokenResponse_default_instance_;
class CreateProcessorTokenRequest;
class CreateProcessorTokenRequestDefaultTypeInternal;
extern CreateProcessorTokenRequestDefaultTypeInternal _CreateProcessorTokenRequest_default_instance_;
class CreateProcessorTokenResponse;
class CreateProcessorTokenResponseDefaultTypeInternal;
extern CreateProcessorTokenResponseDefaultTypeInternal _CreateProcessorTokenResponse_default_instance_;
class CreatePublicTokenRequest;
class CreatePublicTokenRequestDefaultTypeInternal;
extern CreatePublicTokenRequestDefaultTypeInternal _CreatePublicTokenRequest_default_instance_;
class CreatePublicTokenResponse;
class CreatePublicTokenResponseDefaultTypeInternal;
extern CreatePublicTokenResponseDefaultTypeInternal _CreatePublicTokenResponse_default_instance_;
class CreateSandboxPublicTokenRequest;
class CreateSandboxPublicTokenRequestDefaultTypeInternal;
extern CreateSandboxPublicTokenRequestDefaultTypeInternal _CreateSandboxPublicTokenRequest_default_instance_;
class CreateSandboxPublicTokenResponse;
class CreateSandboxPublicTokenResponseDefaultTypeInternal;
extern CreateSandboxPublicTokenResponseDefaultTypeInternal _CreateSandboxPublicTokenResponse_default_instance_;
class CreateStripeTokenRequest;
class CreateStripeTokenRequestDefaultTypeInternal;
extern CreateStripeTokenRequestDefaultTypeInternal _CreateStripeTokenRequest_default_instance_;
class CreateStripeTokenResponse;
class CreateStripeTokenResponseDefaultTypeInternal;
extern CreateStripeTokenResponseDefaultTypeInternal _CreateStripeTokenResponse_default_instance_;
class Credential;
class CredentialDefaultTypeInternal;
extern CredentialDefaultTypeInternal _Credential_default_instance_;
class EFTNumber;
class EFTNumberDefaultTypeInternal;
extern EFTNumberDefaultTypeInternal _EFTNumber_default_instance_;
class Email;
class EmailDefaultTypeInternal;
extern EmailDefaultTypeInternal _Email_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class ExchangePublicTokenRequest;
class ExchangePublicTokenRequestDefaultTypeInternal;
extern ExchangePublicTokenRequestDefaultTypeInternal _ExchangePublicTokenRequest_default_instance_;
class ExchangePublicTokenResponse;
class ExchangePublicTokenResponseDefaultTypeInternal;
extern ExchangePublicTokenResponseDefaultTypeInternal _ExchangePublicTokenResponse_default_instance_;
class GetAccountsOptions;
class GetAccountsOptionsDefaultTypeInternal;
extern GetAccountsOptionsDefaultTypeInternal _GetAccountsOptions_default_instance_;
class GetAccountsRequest;
class GetAccountsRequestDefaultTypeInternal;
extern GetAccountsRequestDefaultTypeInternal _GetAccountsRequest_default_instance_;
class GetAccountsRequestOptions;
class GetAccountsRequestOptionsDefaultTypeInternal;
extern GetAccountsRequestOptionsDefaultTypeInternal _GetAccountsRequestOptions_default_instance_;
class GetAccountsResponse;
class GetAccountsResponseDefaultTypeInternal;
extern GetAccountsResponseDefaultTypeInternal _GetAccountsResponse_default_instance_;
class GetAssetReportRequest;
class GetAssetReportRequestDefaultTypeInternal;
extern GetAssetReportRequestDefaultTypeInternal _GetAssetReportRequest_default_instance_;
class GetAssetReportResponse;
class GetAssetReportResponseDefaultTypeInternal;
extern GetAssetReportResponseDefaultTypeInternal _GetAssetReportResponse_default_instance_;
class GetAuthOptions;
class GetAuthOptionsDefaultTypeInternal;
extern GetAuthOptionsDefaultTypeInternal _GetAuthOptions_default_instance_;
class GetAuthRequest;
class GetAuthRequestDefaultTypeInternal;
extern GetAuthRequestDefaultTypeInternal _GetAuthRequest_default_instance_;
class GetAuthRequestOptions;
class GetAuthRequestOptionsDefaultTypeInternal;
extern GetAuthRequestOptionsDefaultTypeInternal _GetAuthRequestOptions_default_instance_;
class GetAuthResponse;
class GetAuthResponseDefaultTypeInternal;
extern GetAuthResponseDefaultTypeInternal _GetAuthResponse_default_instance_;
class GetBalancesOptions;
class GetBalancesOptionsDefaultTypeInternal;
extern GetBalancesOptionsDefaultTypeInternal _GetBalancesOptions_default_instance_;
class GetBalancesRequest;
class GetBalancesRequestDefaultTypeInternal;
extern GetBalancesRequestDefaultTypeInternal _GetBalancesRequest_default_instance_;
class GetBalancesRequestOptions;
class GetBalancesRequestOptionsDefaultTypeInternal;
extern GetBalancesRequestOptionsDefaultTypeInternal _GetBalancesRequestOptions_default_instance_;
class GetBalancesResponse;
class GetBalancesResponseDefaultTypeInternal;
extern GetBalancesResponseDefaultTypeInternal _GetBalancesResponse_default_instance_;
class GetCategoriesResponse;
class GetCategoriesResponseDefaultTypeInternal;
extern GetCategoriesResponseDefaultTypeInternal _GetCategoriesResponse_default_instance_;
class GetHoldingsOptions;
class GetHoldingsOptionsDefaultTypeInternal;
extern GetHoldingsOptionsDefaultTypeInternal _GetHoldingsOptions_default_instance_;
class GetHoldingsRequest;
class GetHoldingsRequestDefaultTypeInternal;
extern GetHoldingsRequestDefaultTypeInternal _GetHoldingsRequest_default_instance_;
class GetHoldingsResponse;
class GetHoldingsResponseDefaultTypeInternal;
extern GetHoldingsResponseDefaultTypeInternal _GetHoldingsResponse_default_instance_;
class GetIdentityRequest;
class GetIdentityRequestDefaultTypeInternal;
extern GetIdentityRequestDefaultTypeInternal _GetIdentityRequest_default_instance_;
class GetIdentityResponse;
class GetIdentityResponseDefaultTypeInternal;
extern GetIdentityResponseDefaultTypeInternal _GetIdentityResponse_default_instance_;
class GetIncomeRequest;
class GetIncomeRequestDefaultTypeInternal;
extern GetIncomeRequestDefaultTypeInternal _GetIncomeRequest_default_instance_;
class GetIncomeResponse;
class GetIncomeResponseDefaultTypeInternal;
extern GetIncomeResponseDefaultTypeInternal _GetIncomeResponse_default_instance_;
class GetInstitutionByIDOptions;
class GetInstitutionByIDOptionsDefaultTypeInternal;
extern GetInstitutionByIDOptionsDefaultTypeInternal _GetInstitutionByIDOptions_default_instance_;
class GetInstitutionByIDRequest;
class GetInstitutionByIDRequestDefaultTypeInternal;
extern GetInstitutionByIDRequestDefaultTypeInternal _GetInstitutionByIDRequest_default_instance_;
class GetInstitutionByIDResponse;
class GetInstitutionByIDResponseDefaultTypeInternal;
extern GetInstitutionByIDResponseDefaultTypeInternal _GetInstitutionByIDResponse_default_instance_;
class GetInstitutionsOptions;
class GetInstitutionsOptionsDefaultTypeInternal;
extern GetInstitutionsOptionsDefaultTypeInternal _GetInstitutionsOptions_default_instance_;
class GetInstitutionsRequest;
class GetInstitutionsRequestDefaultTypeInternal;
extern GetInstitutionsRequestDefaultTypeInternal _GetInstitutionsRequest_default_instance_;
class GetInstitutionsResponse;
class GetInstitutionsResponseDefaultTypeInternal;
extern GetInstitutionsResponseDefaultTypeInternal _GetInstitutionsResponse_default_instance_;
class GetInvestmentTransactionsOptions;
class GetInvestmentTransactionsOptionsDefaultTypeInternal;
extern GetInvestmentTransactionsOptionsDefaultTypeInternal _GetInvestmentTransactionsOptions_default_instance_;
class GetInvestmentTransactionsRequest;
class GetInvestmentTransactionsRequestDefaultTypeInternal;
extern GetInvestmentTransactionsRequestDefaultTypeInternal _GetInvestmentTransactionsRequest_default_instance_;
class GetInvestmentTransactionsRequestOptions;
class GetInvestmentTransactionsRequestOptionsDefaultTypeInternal;
extern GetInvestmentTransactionsRequestOptionsDefaultTypeInternal _GetInvestmentTransactionsRequestOptions_default_instance_;
class GetInvestmentTransactionsResponse;
class GetInvestmentTransactionsResponseDefaultTypeInternal;
extern GetInvestmentTransactionsResponseDefaultTypeInternal _GetInvestmentTransactionsResponse_default_instance_;
class GetItemRequest;
class GetItemRequestDefaultTypeInternal;
extern GetItemRequestDefaultTypeInternal _GetItemRequest_default_instance_;
class GetItemResponse;
class GetItemResponseDefaultTypeInternal;
extern GetItemResponseDefaultTypeInternal _GetItemResponse_default_instance_;
class GetLiabilitiesOptions;
class GetLiabilitiesOptionsDefaultTypeInternal;
extern GetLiabilitiesOptionsDefaultTypeInternal _GetLiabilitiesOptions_default_instance_;
class GetLiabilitiesRequest;
class GetLiabilitiesRequestDefaultTypeInternal;
extern GetLiabilitiesRequestDefaultTypeInternal _GetLiabilitiesRequest_default_instance_;
class GetLiabilitiesRequestOptions;
class GetLiabilitiesRequestOptionsDefaultTypeInternal;
extern GetLiabilitiesRequestOptionsDefaultTypeInternal _GetLiabilitiesRequestOptions_default_instance_;
class GetLiabilitiesResponse;
class GetLiabilitiesResponseDefaultTypeInternal;
extern GetLiabilitiesResponseDefaultTypeInternal _GetLiabilitiesResponse_default_instance_;
class GetTransactionOptions;
class GetTransactionOptionsDefaultTypeInternal;
extern GetTransactionOptionsDefaultTypeInternal _GetTransactionOptions_default_instance_;
class GetTransactionsRequest;
class GetTransactionsRequestDefaultTypeInternal;
extern GetTransactionsRequestDefaultTypeInternal _GetTransactionsRequest_default_instance_;
class GetTransactionsRequestOptions;
class GetTransactionsRequestOptionsDefaultTypeInternal;
extern GetTransactionsRequestOptionsDefaultTypeInternal _GetTransactionsRequestOptions_default_instance_;
class GetTransactionsResponse;
class GetTransactionsResponseDefaultTypeInternal;
extern GetTransactionsResponseDefaultTypeInternal _GetTransactionsResponse_default_instance_;
class Holding;
class HoldingDefaultTypeInternal;
extern HoldingDefaultTypeInternal _Holding_default_instance_;
class IBANNumber;
class IBANNumberDefaultTypeInternal;
extern IBANNumberDefaultTypeInternal _IBANNumber_default_instance_;
class Identity;
class IdentityDefaultTypeInternal;
extern IdentityDefaultTypeInternal _Identity_default_instance_;
class Income;
class IncomeDefaultTypeInternal;
extern IncomeDefaultTypeInternal _Income_default_instance_;
class IncomeStream;
class IncomeStreamDefaultTypeInternal;
extern IncomeStreamDefaultTypeInternal _IncomeStream_default_instance_;
class Institution;
class InstitutionDefaultTypeInternal;
extern InstitutionDefaultTypeInternal _Institution_default_instance_;
class InstitutionStatus;
class InstitutionStatusDefaultTypeInternal;
extern InstitutionStatusDefaultTypeInternal _InstitutionStatus_default_instance_;
class InstitutionStatusBreakdown;
class InstitutionStatusBreakdownDefaultTypeInternal;
extern InstitutionStatusBreakdownDefaultTypeInternal _InstitutionStatusBreakdown_default_instance_;
class InvalidateAccessTokenRequest;
class InvalidateAccessTokenRequestDefaultTypeInternal;
extern InvalidateAccessTokenRequestDefaultTypeInternal _InvalidateAccessTokenRequest_default_instance_;
class InvalidateAccessTokenResponse;
class InvalidateAccessTokenResponseDefaultTypeInternal;
extern InvalidateAccessTokenResponseDefaultTypeInternal _InvalidateAccessTokenResponse_default_instance_;
class InvestmentTransaction;
class InvestmentTransactionDefaultTypeInternal;
extern InvestmentTransactionDefaultTypeInternal _InvestmentTransaction_default_instance_;
class Item;
class ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class ItemLogins;
class ItemLoginsDefaultTypeInternal;
extern ItemLoginsDefaultTypeInternal _ItemLogins_default_instance_;
class Liabilities;
class LiabilitiesDefaultTypeInternal;
extern LiabilitiesDefaultTypeInternal _Liabilities_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class PSLFStatus;
class PSLFStatusDefaultTypeInternal;
extern PSLFStatusDefaultTypeInternal _PSLFStatus_default_instance_;
class PaymentMeta;
class PaymentMetaDefaultTypeInternal;
extern PaymentMetaDefaultTypeInternal _PaymentMeta_default_instance_;
class PhoneNumber;
class PhoneNumberDefaultTypeInternal;
extern PhoneNumberDefaultTypeInternal _PhoneNumber_default_instance_;
class RemoveAssetReportRequest;
class RemoveAssetReportRequestDefaultTypeInternal;
extern RemoveAssetReportRequestDefaultTypeInternal _RemoveAssetReportRequest_default_instance_;
class RemoveAssetReportResponse;
class RemoveAssetReportResponseDefaultTypeInternal;
extern RemoveAssetReportResponseDefaultTypeInternal _RemoveAssetReportResponse_default_instance_;
class RemoveItemRequest;
class RemoveItemRequestDefaultTypeInternal;
extern RemoveItemRequestDefaultTypeInternal _RemoveItemRequest_default_instance_;
class RemoveItemResponse;
class RemoveItemResponseDefaultTypeInternal;
extern RemoveItemResponseDefaultTypeInternal _RemoveItemResponse_default_instance_;
class ResetSandboxItemRequest;
class ResetSandboxItemRequestDefaultTypeInternal;
extern ResetSandboxItemRequestDefaultTypeInternal _ResetSandboxItemRequest_default_instance_;
class ResetSandboxItemResponse;
class ResetSandboxItemResponseDefaultTypeInternal;
extern ResetSandboxItemResponseDefaultTypeInternal _ResetSandboxItemResponse_default_instance_;
class SearchInstitutionsOptions;
class SearchInstitutionsOptionsDefaultTypeInternal;
extern SearchInstitutionsOptionsDefaultTypeInternal _SearchInstitutionsOptions_default_instance_;
class SearchInstitutionsRequest;
class SearchInstitutionsRequestDefaultTypeInternal;
extern SearchInstitutionsRequestDefaultTypeInternal _SearchInstitutionsRequest_default_instance_;
class SearchInstitutionsResponse;
class SearchInstitutionsResponseDefaultTypeInternal;
extern SearchInstitutionsResponseDefaultTypeInternal _SearchInstitutionsResponse_default_instance_;
class Security;
class SecurityDefaultTypeInternal;
extern SecurityDefaultTypeInternal _Security_default_instance_;
class StudentLoanLiability;
class StudentLoanLiabilityDefaultTypeInternal;
extern StudentLoanLiabilityDefaultTypeInternal _StudentLoanLiability_default_instance_;
class StudentLoanRepaymentPlan;
class StudentLoanRepaymentPlanDefaultTypeInternal;
extern StudentLoanRepaymentPlanDefaultTypeInternal _StudentLoanRepaymentPlan_default_instance_;
class StudentLoanServicerAddress;
class StudentLoanServicerAddressDefaultTypeInternal;
extern StudentLoanServicerAddressDefaultTypeInternal _StudentLoanServicerAddress_default_instance_;
class StudentLoanStatus;
class StudentLoanStatusDefaultTypeInternal;
extern StudentLoanStatusDefaultTypeInternal _StudentLoanStatus_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class UpdateAccessTokenVersionRequest;
class UpdateAccessTokenVersionRequestDefaultTypeInternal;
extern UpdateAccessTokenVersionRequestDefaultTypeInternal _UpdateAccessTokenVersionRequest_default_instance_;
class UpdateAccessTokenVersionResponse;
class UpdateAccessTokenVersionResponseDefaultTypeInternal;
extern UpdateAccessTokenVersionResponseDefaultTypeInternal _UpdateAccessTokenVersionResponse_default_instance_;
class UpdateItemWebhookRequest;
class UpdateItemWebhookRequestDefaultTypeInternal;
extern UpdateItemWebhookRequestDefaultTypeInternal _UpdateItemWebhookRequest_default_instance_;
class UpdateItemWebhookResponse;
class UpdateItemWebhookResponseDefaultTypeInternal;
extern UpdateItemWebhookResponseDefaultTypeInternal _UpdateItemWebhookResponse_default_instance_;
}  // namespace plaid
PROTOBUF_NAMESPACE_OPEN
template<> ::plaid::ACHNumber* Arena::CreateMaybeMessage<::plaid::ACHNumber>(Arena*);
template<> ::plaid::Account* Arena::CreateMaybeMessage<::plaid::Account>(Arena*);
template<> ::plaid::AccountBalances* Arena::CreateMaybeMessage<::plaid::AccountBalances>(Arena*);
template<> ::plaid::AccountNumberCollection* Arena::CreateMaybeMessage<::plaid::AccountNumberCollection>(Arena*);
template<> ::plaid::AccountWithOwners* Arena::CreateMaybeMessage<::plaid::AccountWithOwners>(Arena*);
template<> ::plaid::Address* Arena::CreateMaybeMessage<::plaid::Address>(Arena*);
template<> ::plaid::AddressData* Arena::CreateMaybeMessage<::plaid::AddressData>(Arena*);
template<> ::plaid::AssetReport* Arena::CreateMaybeMessage<::plaid::AssetReport>(Arena*);
template<> ::plaid::AssetReportItem* Arena::CreateMaybeMessage<::plaid::AssetReportItem>(Arena*);
template<> ::plaid::AssetReportUser* Arena::CreateMaybeMessage<::plaid::AssetReportUser>(Arena*);
template<> ::plaid::BACSNumber* Arena::CreateMaybeMessage<::plaid::BACSNumber>(Arena*);
template<> ::plaid::Category* Arena::CreateMaybeMessage<::plaid::Category>(Arena*);
template<> ::plaid::CreateAuditCopyRequest* Arena::CreateMaybeMessage<::plaid::CreateAuditCopyRequest>(Arena*);
template<> ::plaid::CreateAuditCopyTokenResponse* Arena::CreateMaybeMessage<::plaid::CreateAuditCopyTokenResponse>(Arena*);
template<> ::plaid::CreateProcessorTokenRequest* Arena::CreateMaybeMessage<::plaid::CreateProcessorTokenRequest>(Arena*);
template<> ::plaid::CreateProcessorTokenResponse* Arena::CreateMaybeMessage<::plaid::CreateProcessorTokenResponse>(Arena*);
template<> ::plaid::CreatePublicTokenRequest* Arena::CreateMaybeMessage<::plaid::CreatePublicTokenRequest>(Arena*);
template<> ::plaid::CreatePublicTokenResponse* Arena::CreateMaybeMessage<::plaid::CreatePublicTokenResponse>(Arena*);
template<> ::plaid::CreateSandboxPublicTokenRequest* Arena::CreateMaybeMessage<::plaid::CreateSandboxPublicTokenRequest>(Arena*);
template<> ::plaid::CreateSandboxPublicTokenResponse* Arena::CreateMaybeMessage<::plaid::CreateSandboxPublicTokenResponse>(Arena*);
template<> ::plaid::CreateStripeTokenRequest* Arena::CreateMaybeMessage<::plaid::CreateStripeTokenRequest>(Arena*);
template<> ::plaid::CreateStripeTokenResponse* Arena::CreateMaybeMessage<::plaid::CreateStripeTokenResponse>(Arena*);
template<> ::plaid::Credential* Arena::CreateMaybeMessage<::plaid::Credential>(Arena*);
template<> ::plaid::EFTNumber* Arena::CreateMaybeMessage<::plaid::EFTNumber>(Arena*);
template<> ::plaid::Email* Arena::CreateMaybeMessage<::plaid::Email>(Arena*);
template<> ::plaid::Error* Arena::CreateMaybeMessage<::plaid::Error>(Arena*);
template<> ::plaid::ExchangePublicTokenRequest* Arena::CreateMaybeMessage<::plaid::ExchangePublicTokenRequest>(Arena*);
template<> ::plaid::ExchangePublicTokenResponse* Arena::CreateMaybeMessage<::plaid::ExchangePublicTokenResponse>(Arena*);
template<> ::plaid::GetAccountsOptions* Arena::CreateMaybeMessage<::plaid::GetAccountsOptions>(Arena*);
template<> ::plaid::GetAccountsRequest* Arena::CreateMaybeMessage<::plaid::GetAccountsRequest>(Arena*);
template<> ::plaid::GetAccountsRequestOptions* Arena::CreateMaybeMessage<::plaid::GetAccountsRequestOptions>(Arena*);
template<> ::plaid::GetAccountsResponse* Arena::CreateMaybeMessage<::plaid::GetAccountsResponse>(Arena*);
template<> ::plaid::GetAssetReportRequest* Arena::CreateMaybeMessage<::plaid::GetAssetReportRequest>(Arena*);
template<> ::plaid::GetAssetReportResponse* Arena::CreateMaybeMessage<::plaid::GetAssetReportResponse>(Arena*);
template<> ::plaid::GetAuthOptions* Arena::CreateMaybeMessage<::plaid::GetAuthOptions>(Arena*);
template<> ::plaid::GetAuthRequest* Arena::CreateMaybeMessage<::plaid::GetAuthRequest>(Arena*);
template<> ::plaid::GetAuthRequestOptions* Arena::CreateMaybeMessage<::plaid::GetAuthRequestOptions>(Arena*);
template<> ::plaid::GetAuthResponse* Arena::CreateMaybeMessage<::plaid::GetAuthResponse>(Arena*);
template<> ::plaid::GetBalancesOptions* Arena::CreateMaybeMessage<::plaid::GetBalancesOptions>(Arena*);
template<> ::plaid::GetBalancesRequest* Arena::CreateMaybeMessage<::plaid::GetBalancesRequest>(Arena*);
template<> ::plaid::GetBalancesRequestOptions* Arena::CreateMaybeMessage<::plaid::GetBalancesRequestOptions>(Arena*);
template<> ::plaid::GetBalancesResponse* Arena::CreateMaybeMessage<::plaid::GetBalancesResponse>(Arena*);
template<> ::plaid::GetCategoriesResponse* Arena::CreateMaybeMessage<::plaid::GetCategoriesResponse>(Arena*);
template<> ::plaid::GetHoldingsOptions* Arena::CreateMaybeMessage<::plaid::GetHoldingsOptions>(Arena*);
template<> ::plaid::GetHoldingsRequest* Arena::CreateMaybeMessage<::plaid::GetHoldingsRequest>(Arena*);
template<> ::plaid::GetHoldingsResponse* Arena::CreateMaybeMessage<::plaid::GetHoldingsResponse>(Arena*);
template<> ::plaid::GetIdentityRequest* Arena::CreateMaybeMessage<::plaid::GetIdentityRequest>(Arena*);
template<> ::plaid::GetIdentityResponse* Arena::CreateMaybeMessage<::plaid::GetIdentityResponse>(Arena*);
template<> ::plaid::GetIncomeRequest* Arena::CreateMaybeMessage<::plaid::GetIncomeRequest>(Arena*);
template<> ::plaid::GetIncomeResponse* Arena::CreateMaybeMessage<::plaid::GetIncomeResponse>(Arena*);
template<> ::plaid::GetInstitutionByIDOptions* Arena::CreateMaybeMessage<::plaid::GetInstitutionByIDOptions>(Arena*);
template<> ::plaid::GetInstitutionByIDRequest* Arena::CreateMaybeMessage<::plaid::GetInstitutionByIDRequest>(Arena*);
template<> ::plaid::GetInstitutionByIDResponse* Arena::CreateMaybeMessage<::plaid::GetInstitutionByIDResponse>(Arena*);
template<> ::plaid::GetInstitutionsOptions* Arena::CreateMaybeMessage<::plaid::GetInstitutionsOptions>(Arena*);
template<> ::plaid::GetInstitutionsRequest* Arena::CreateMaybeMessage<::plaid::GetInstitutionsRequest>(Arena*);
template<> ::plaid::GetInstitutionsResponse* Arena::CreateMaybeMessage<::plaid::GetInstitutionsResponse>(Arena*);
template<> ::plaid::GetInvestmentTransactionsOptions* Arena::CreateMaybeMessage<::plaid::GetInvestmentTransactionsOptions>(Arena*);
template<> ::plaid::GetInvestmentTransactionsRequest* Arena::CreateMaybeMessage<::plaid::GetInvestmentTransactionsRequest>(Arena*);
template<> ::plaid::GetInvestmentTransactionsRequestOptions* Arena::CreateMaybeMessage<::plaid::GetInvestmentTransactionsRequestOptions>(Arena*);
template<> ::plaid::GetInvestmentTransactionsResponse* Arena::CreateMaybeMessage<::plaid::GetInvestmentTransactionsResponse>(Arena*);
template<> ::plaid::GetItemRequest* Arena::CreateMaybeMessage<::plaid::GetItemRequest>(Arena*);
template<> ::plaid::GetItemResponse* Arena::CreateMaybeMessage<::plaid::GetItemResponse>(Arena*);
template<> ::plaid::GetLiabilitiesOptions* Arena::CreateMaybeMessage<::plaid::GetLiabilitiesOptions>(Arena*);
template<> ::plaid::GetLiabilitiesRequest* Arena::CreateMaybeMessage<::plaid::GetLiabilitiesRequest>(Arena*);
template<> ::plaid::GetLiabilitiesRequestOptions* Arena::CreateMaybeMessage<::plaid::GetLiabilitiesRequestOptions>(Arena*);
template<> ::plaid::GetLiabilitiesResponse* Arena::CreateMaybeMessage<::plaid::GetLiabilitiesResponse>(Arena*);
template<> ::plaid::GetTransactionOptions* Arena::CreateMaybeMessage<::plaid::GetTransactionOptions>(Arena*);
template<> ::plaid::GetTransactionsRequest* Arena::CreateMaybeMessage<::plaid::GetTransactionsRequest>(Arena*);
template<> ::plaid::GetTransactionsRequestOptions* Arena::CreateMaybeMessage<::plaid::GetTransactionsRequestOptions>(Arena*);
template<> ::plaid::GetTransactionsResponse* Arena::CreateMaybeMessage<::plaid::GetTransactionsResponse>(Arena*);
template<> ::plaid::Holding* Arena::CreateMaybeMessage<::plaid::Holding>(Arena*);
template<> ::plaid::IBANNumber* Arena::CreateMaybeMessage<::plaid::IBANNumber>(Arena*);
template<> ::plaid::Identity* Arena::CreateMaybeMessage<::plaid::Identity>(Arena*);
template<> ::plaid::Income* Arena::CreateMaybeMessage<::plaid::Income>(Arena*);
template<> ::plaid::IncomeStream* Arena::CreateMaybeMessage<::plaid::IncomeStream>(Arena*);
template<> ::plaid::Institution* Arena::CreateMaybeMessage<::plaid::Institution>(Arena*);
template<> ::plaid::InstitutionStatus* Arena::CreateMaybeMessage<::plaid::InstitutionStatus>(Arena*);
template<> ::plaid::InstitutionStatusBreakdown* Arena::CreateMaybeMessage<::plaid::InstitutionStatusBreakdown>(Arena*);
template<> ::plaid::InvalidateAccessTokenRequest* Arena::CreateMaybeMessage<::plaid::InvalidateAccessTokenRequest>(Arena*);
template<> ::plaid::InvalidateAccessTokenResponse* Arena::CreateMaybeMessage<::plaid::InvalidateAccessTokenResponse>(Arena*);
template<> ::plaid::InvestmentTransaction* Arena::CreateMaybeMessage<::plaid::InvestmentTransaction>(Arena*);
template<> ::plaid::Item* Arena::CreateMaybeMessage<::plaid::Item>(Arena*);
template<> ::plaid::ItemLogins* Arena::CreateMaybeMessage<::plaid::ItemLogins>(Arena*);
template<> ::plaid::Liabilities* Arena::CreateMaybeMessage<::plaid::Liabilities>(Arena*);
template<> ::plaid::Location* Arena::CreateMaybeMessage<::plaid::Location>(Arena*);
template<> ::plaid::PSLFStatus* Arena::CreateMaybeMessage<::plaid::PSLFStatus>(Arena*);
template<> ::plaid::PaymentMeta* Arena::CreateMaybeMessage<::plaid::PaymentMeta>(Arena*);
template<> ::plaid::PhoneNumber* Arena::CreateMaybeMessage<::plaid::PhoneNumber>(Arena*);
template<> ::plaid::RemoveAssetReportRequest* Arena::CreateMaybeMessage<::plaid::RemoveAssetReportRequest>(Arena*);
template<> ::plaid::RemoveAssetReportResponse* Arena::CreateMaybeMessage<::plaid::RemoveAssetReportResponse>(Arena*);
template<> ::plaid::RemoveItemRequest* Arena::CreateMaybeMessage<::plaid::RemoveItemRequest>(Arena*);
template<> ::plaid::RemoveItemResponse* Arena::CreateMaybeMessage<::plaid::RemoveItemResponse>(Arena*);
template<> ::plaid::ResetSandboxItemRequest* Arena::CreateMaybeMessage<::plaid::ResetSandboxItemRequest>(Arena*);
template<> ::plaid::ResetSandboxItemResponse* Arena::CreateMaybeMessage<::plaid::ResetSandboxItemResponse>(Arena*);
template<> ::plaid::SearchInstitutionsOptions* Arena::CreateMaybeMessage<::plaid::SearchInstitutionsOptions>(Arena*);
template<> ::plaid::SearchInstitutionsRequest* Arena::CreateMaybeMessage<::plaid::SearchInstitutionsRequest>(Arena*);
template<> ::plaid::SearchInstitutionsResponse* Arena::CreateMaybeMessage<::plaid::SearchInstitutionsResponse>(Arena*);
template<> ::plaid::Security* Arena::CreateMaybeMessage<::plaid::Security>(Arena*);
template<> ::plaid::StudentLoanLiability* Arena::CreateMaybeMessage<::plaid::StudentLoanLiability>(Arena*);
template<> ::plaid::StudentLoanRepaymentPlan* Arena::CreateMaybeMessage<::plaid::StudentLoanRepaymentPlan>(Arena*);
template<> ::plaid::StudentLoanServicerAddress* Arena::CreateMaybeMessage<::plaid::StudentLoanServicerAddress>(Arena*);
template<> ::plaid::StudentLoanStatus* Arena::CreateMaybeMessage<::plaid::StudentLoanStatus>(Arena*);
template<> ::plaid::Transaction* Arena::CreateMaybeMessage<::plaid::Transaction>(Arena*);
template<> ::plaid::UpdateAccessTokenVersionRequest* Arena::CreateMaybeMessage<::plaid::UpdateAccessTokenVersionRequest>(Arena*);
template<> ::plaid::UpdateAccessTokenVersionResponse* Arena::CreateMaybeMessage<::plaid::UpdateAccessTokenVersionResponse>(Arena*);
template<> ::plaid::UpdateItemWebhookRequest* Arena::CreateMaybeMessage<::plaid::UpdateItemWebhookRequest>(Arena*);
template<> ::plaid::UpdateItemWebhookResponse* Arena::CreateMaybeMessage<::plaid::UpdateItemWebhookResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace plaid {

// ===================================================================

class Account :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.Account) */ {
 public:
  Account();
  virtual ~Account();

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.Account";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kMaskFieldNumber = 3,
    kNameFieldNumber = 4,
    kOfficialNameFieldNumber = 5,
    kSubtypeFieldNumber = 6,
    kTypeFieldNumber = 7,
    kVerificationStatusFieldNumber = 8,
    kBalancesFieldNumber = 2,
  };
  // string account_id = 1;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string mask = 3;
  void clear_mask();
  const std::string& mask() const;
  void set_mask(const std::string& value);
  void set_mask(std::string&& value);
  void set_mask(const char* value);
  void set_mask(const char* value, size_t size);
  std::string* mutable_mask();
  std::string* release_mask();
  void set_allocated_mask(std::string* mask);
  private:
  const std::string& _internal_mask() const;
  void _internal_set_mask(const std::string& value);
  std::string* _internal_mutable_mask();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string official_name = 5;
  void clear_official_name();
  const std::string& official_name() const;
  void set_official_name(const std::string& value);
  void set_official_name(std::string&& value);
  void set_official_name(const char* value);
  void set_official_name(const char* value, size_t size);
  std::string* mutable_official_name();
  std::string* release_official_name();
  void set_allocated_official_name(std::string* official_name);
  private:
  const std::string& _internal_official_name() const;
  void _internal_set_official_name(const std::string& value);
  std::string* _internal_mutable_official_name();
  public:

  // string subtype = 6;
  void clear_subtype();
  const std::string& subtype() const;
  void set_subtype(const std::string& value);
  void set_subtype(std::string&& value);
  void set_subtype(const char* value);
  void set_subtype(const char* value, size_t size);
  std::string* mutable_subtype();
  std::string* release_subtype();
  void set_allocated_subtype(std::string* subtype);
  private:
  const std::string& _internal_subtype() const;
  void _internal_set_subtype(const std::string& value);
  std::string* _internal_mutable_subtype();
  public:

  // string type = 7;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string verification_status = 8;
  void clear_verification_status();
  const std::string& verification_status() const;
  void set_verification_status(const std::string& value);
  void set_verification_status(std::string&& value);
  void set_verification_status(const char* value);
  void set_verification_status(const char* value, size_t size);
  std::string* mutable_verification_status();
  std::string* release_verification_status();
  void set_allocated_verification_status(std::string* verification_status);
  private:
  const std::string& _internal_verification_status() const;
  void _internal_set_verification_status(const std::string& value);
  std::string* _internal_mutable_verification_status();
  public:

  // .plaid.AccountBalances balances = 2;
  bool has_balances() const;
  private:
  bool _internal_has_balances() const;
  public:
  void clear_balances();
  const ::plaid::AccountBalances& balances() const;
  ::plaid::AccountBalances* release_balances();
  ::plaid::AccountBalances* mutable_balances();
  void set_allocated_balances(::plaid::AccountBalances* balances);
  private:
  const ::plaid::AccountBalances& _internal_balances() const;
  ::plaid::AccountBalances* _internal_mutable_balances();
  public:

  // @@protoc_insertion_point(class_scope:plaid.Account)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mask_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr official_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verification_status_;
  ::plaid::AccountBalances* balances_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class AccountBalances :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.AccountBalances) */ {
 public:
  AccountBalances();
  virtual ~AccountBalances();

  AccountBalances(const AccountBalances& from);
  AccountBalances(AccountBalances&& from) noexcept
    : AccountBalances() {
    *this = ::std::move(from);
  }

  inline AccountBalances& operator=(const AccountBalances& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountBalances& operator=(AccountBalances&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountBalances& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountBalances* internal_default_instance() {
    return reinterpret_cast<const AccountBalances*>(
               &_AccountBalances_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AccountBalances& a, AccountBalances& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountBalances* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountBalances* New() const final {
    return CreateMaybeMessage<AccountBalances>(nullptr);
  }

  AccountBalances* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountBalances>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountBalances& from);
  void MergeFrom(const AccountBalances& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountBalances* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.AccountBalances";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsoCurrencyCodeFieldNumber = 4,
    kUnofficialCurrencyCodeFieldNumber = 5,
    kAvailableFieldNumber = 1,
    kCurrentFieldNumber = 2,
    kLimitFieldNumber = 3,
  };
  // string iso_currency_code = 4;
  void clear_iso_currency_code();
  const std::string& iso_currency_code() const;
  void set_iso_currency_code(const std::string& value);
  void set_iso_currency_code(std::string&& value);
  void set_iso_currency_code(const char* value);
  void set_iso_currency_code(const char* value, size_t size);
  std::string* mutable_iso_currency_code();
  std::string* release_iso_currency_code();
  void set_allocated_iso_currency_code(std::string* iso_currency_code);
  private:
  const std::string& _internal_iso_currency_code() const;
  void _internal_set_iso_currency_code(const std::string& value);
  std::string* _internal_mutable_iso_currency_code();
  public:

  // string unofficial_currency_code = 5;
  void clear_unofficial_currency_code();
  const std::string& unofficial_currency_code() const;
  void set_unofficial_currency_code(const std::string& value);
  void set_unofficial_currency_code(std::string&& value);
  void set_unofficial_currency_code(const char* value);
  void set_unofficial_currency_code(const char* value, size_t size);
  std::string* mutable_unofficial_currency_code();
  std::string* release_unofficial_currency_code();
  void set_allocated_unofficial_currency_code(std::string* unofficial_currency_code);
  private:
  const std::string& _internal_unofficial_currency_code() const;
  void _internal_set_unofficial_currency_code(const std::string& value);
  std::string* _internal_mutable_unofficial_currency_code();
  public:

  // double available = 1;
  void clear_available();
  double available() const;
  void set_available(double value);
  private:
  double _internal_available() const;
  void _internal_set_available(double value);
  public:

  // double current = 2;
  void clear_current();
  double current() const;
  void set_current(double value);
  private:
  double _internal_current() const;
  void _internal_set_current(double value);
  public:

  // double limit = 3;
  void clear_limit();
  double limit() const;
  void set_limit(double value);
  private:
  double _internal_limit() const;
  void _internal_set_limit(double value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.AccountBalances)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iso_currency_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unofficial_currency_code_;
  double available_;
  double current_;
  double limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class ACHNumber :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.ACHNumber) */ {
 public:
  ACHNumber();
  virtual ~ACHNumber();

  ACHNumber(const ACHNumber& from);
  ACHNumber(ACHNumber&& from) noexcept
    : ACHNumber() {
    *this = ::std::move(from);
  }

  inline ACHNumber& operator=(const ACHNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline ACHNumber& operator=(ACHNumber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ACHNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ACHNumber* internal_default_instance() {
    return reinterpret_cast<const ACHNumber*>(
               &_ACHNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ACHNumber& a, ACHNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(ACHNumber* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ACHNumber* New() const final {
    return CreateMaybeMessage<ACHNumber>(nullptr);
  }

  ACHNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ACHNumber>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ACHNumber& from);
  void MergeFrom(const ACHNumber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ACHNumber* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.ACHNumber";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kRoutingFieldNumber = 3,
    kWireRoutingFieldNumber = 4,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string account_id = 2;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string routing = 3;
  void clear_routing();
  const std::string& routing() const;
  void set_routing(const std::string& value);
  void set_routing(std::string&& value);
  void set_routing(const char* value);
  void set_routing(const char* value, size_t size);
  std::string* mutable_routing();
  std::string* release_routing();
  void set_allocated_routing(std::string* routing);
  private:
  const std::string& _internal_routing() const;
  void _internal_set_routing(const std::string& value);
  std::string* _internal_mutable_routing();
  public:

  // string wire_routing = 4;
  void clear_wire_routing();
  const std::string& wire_routing() const;
  void set_wire_routing(const std::string& value);
  void set_wire_routing(std::string&& value);
  void set_wire_routing(const char* value);
  void set_wire_routing(const char* value, size_t size);
  std::string* mutable_wire_routing();
  std::string* release_wire_routing();
  void set_allocated_wire_routing(std::string* wire_routing);
  private:
  const std::string& _internal_wire_routing() const;
  void _internal_set_wire_routing(const std::string& value);
  std::string* _internal_mutable_wire_routing();
  public:

  // @@protoc_insertion_point(class_scope:plaid.ACHNumber)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routing_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wire_routing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class EFTNumber :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.EFTNumber) */ {
 public:
  EFTNumber();
  virtual ~EFTNumber();

  EFTNumber(const EFTNumber& from);
  EFTNumber(EFTNumber&& from) noexcept
    : EFTNumber() {
    *this = ::std::move(from);
  }

  inline EFTNumber& operator=(const EFTNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline EFTNumber& operator=(EFTNumber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EFTNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EFTNumber* internal_default_instance() {
    return reinterpret_cast<const EFTNumber*>(
               &_EFTNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EFTNumber& a, EFTNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(EFTNumber* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EFTNumber* New() const final {
    return CreateMaybeMessage<EFTNumber>(nullptr);
  }

  EFTNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EFTNumber>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EFTNumber& from);
  void MergeFrom(const EFTNumber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EFTNumber* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.EFTNumber";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kInstitutionFieldNumber = 3,
    kBranchFieldNumber = 4,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string account_id = 2;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string institution = 3;
  void clear_institution();
  const std::string& institution() const;
  void set_institution(const std::string& value);
  void set_institution(std::string&& value);
  void set_institution(const char* value);
  void set_institution(const char* value, size_t size);
  std::string* mutable_institution();
  std::string* release_institution();
  void set_allocated_institution(std::string* institution);
  private:
  const std::string& _internal_institution() const;
  void _internal_set_institution(const std::string& value);
  std::string* _internal_mutable_institution();
  public:

  // string branch = 4;
  void clear_branch();
  const std::string& branch() const;
  void set_branch(const std::string& value);
  void set_branch(std::string&& value);
  void set_branch(const char* value);
  void set_branch(const char* value, size_t size);
  std::string* mutable_branch();
  std::string* release_branch();
  void set_allocated_branch(std::string* branch);
  private:
  const std::string& _internal_branch() const;
  void _internal_set_branch(const std::string& value);
  std::string* _internal_mutable_branch();
  public:

  // @@protoc_insertion_point(class_scope:plaid.EFTNumber)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr institution_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class IBANNumber :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.IBANNumber) */ {
 public:
  IBANNumber();
  virtual ~IBANNumber();

  IBANNumber(const IBANNumber& from);
  IBANNumber(IBANNumber&& from) noexcept
    : IBANNumber() {
    *this = ::std::move(from);
  }

  inline IBANNumber& operator=(const IBANNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline IBANNumber& operator=(IBANNumber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IBANNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IBANNumber* internal_default_instance() {
    return reinterpret_cast<const IBANNumber*>(
               &_IBANNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IBANNumber& a, IBANNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(IBANNumber* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IBANNumber* New() const final {
    return CreateMaybeMessage<IBANNumber>(nullptr);
  }

  IBANNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IBANNumber>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IBANNumber& from);
  void MergeFrom(const IBANNumber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IBANNumber* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.IBANNumber";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kIbanFieldNumber = 2,
    kBicFieldNumber = 3,
  };
  // string account_id = 1;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string iban = 2;
  void clear_iban();
  const std::string& iban() const;
  void set_iban(const std::string& value);
  void set_iban(std::string&& value);
  void set_iban(const char* value);
  void set_iban(const char* value, size_t size);
  std::string* mutable_iban();
  std::string* release_iban();
  void set_allocated_iban(std::string* iban);
  private:
  const std::string& _internal_iban() const;
  void _internal_set_iban(const std::string& value);
  std::string* _internal_mutable_iban();
  public:

  // string bic = 3;
  void clear_bic();
  const std::string& bic() const;
  void set_bic(const std::string& value);
  void set_bic(std::string&& value);
  void set_bic(const char* value);
  void set_bic(const char* value, size_t size);
  std::string* mutable_bic();
  std::string* release_bic();
  void set_allocated_bic(std::string* bic);
  private:
  const std::string& _internal_bic() const;
  void _internal_set_bic(const std::string& value);
  std::string* _internal_mutable_bic();
  public:

  // @@protoc_insertion_point(class_scope:plaid.IBANNumber)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iban_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class BACSNumber :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.BACSNumber) */ {
 public:
  BACSNumber();
  virtual ~BACSNumber();

  BACSNumber(const BACSNumber& from);
  BACSNumber(BACSNumber&& from) noexcept
    : BACSNumber() {
    *this = ::std::move(from);
  }

  inline BACSNumber& operator=(const BACSNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline BACSNumber& operator=(BACSNumber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BACSNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BACSNumber* internal_default_instance() {
    return reinterpret_cast<const BACSNumber*>(
               &_BACSNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BACSNumber& a, BACSNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(BACSNumber* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BACSNumber* New() const final {
    return CreateMaybeMessage<BACSNumber>(nullptr);
  }

  BACSNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BACSNumber>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BACSNumber& from);
  void MergeFrom(const BACSNumber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BACSNumber* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.BACSNumber";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kAccountFieldNumber = 2,
    kSortCodeFieldNumber = 3,
  };
  // string account_id = 1;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string account = 2;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string sort_code = 3;
  void clear_sort_code();
  const std::string& sort_code() const;
  void set_sort_code(const std::string& value);
  void set_sort_code(std::string&& value);
  void set_sort_code(const char* value);
  void set_sort_code(const char* value, size_t size);
  std::string* mutable_sort_code();
  std::string* release_sort_code();
  void set_allocated_sort_code(std::string* sort_code);
  private:
  const std::string& _internal_sort_code() const;
  void _internal_set_sort_code(const std::string& value);
  std::string* _internal_mutable_sort_code();
  public:

  // @@protoc_insertion_point(class_scope:plaid.BACSNumber)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sort_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetBalancesRequestOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetBalancesRequestOptions) */ {
 public:
  GetBalancesRequestOptions();
  virtual ~GetBalancesRequestOptions();

  GetBalancesRequestOptions(const GetBalancesRequestOptions& from);
  GetBalancesRequestOptions(GetBalancesRequestOptions&& from) noexcept
    : GetBalancesRequestOptions() {
    *this = ::std::move(from);
  }

  inline GetBalancesRequestOptions& operator=(const GetBalancesRequestOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBalancesRequestOptions& operator=(GetBalancesRequestOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBalancesRequestOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBalancesRequestOptions* internal_default_instance() {
    return reinterpret_cast<const GetBalancesRequestOptions*>(
               &_GetBalancesRequestOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetBalancesRequestOptions& a, GetBalancesRequestOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBalancesRequestOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBalancesRequestOptions* New() const final {
    return CreateMaybeMessage<GetBalancesRequestOptions>(nullptr);
  }

  GetBalancesRequestOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBalancesRequestOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBalancesRequestOptions& from);
  void MergeFrom(const GetBalancesRequestOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBalancesRequestOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetBalancesRequestOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
  };
  // repeated string account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  const std::string& account_ids(int index) const;
  std::string* mutable_account_ids(int index);
  void set_account_ids(int index, const std::string& value);
  void set_account_ids(int index, std::string&& value);
  void set_account_ids(int index, const char* value);
  void set_account_ids(int index, const char* value, size_t size);
  std::string* add_account_ids();
  void add_account_ids(const std::string& value);
  void add_account_ids(std::string&& value);
  void add_account_ids(const char* value);
  void add_account_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_account_ids();
  private:
  const std::string& _internal_account_ids(int index) const;
  std::string* _internal_add_account_ids();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetBalancesRequestOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> account_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetBalancesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetBalancesRequest) */ {
 public:
  GetBalancesRequest();
  virtual ~GetBalancesRequest();

  GetBalancesRequest(const GetBalancesRequest& from);
  GetBalancesRequest(GetBalancesRequest&& from) noexcept
    : GetBalancesRequest() {
    *this = ::std::move(from);
  }

  inline GetBalancesRequest& operator=(const GetBalancesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBalancesRequest& operator=(GetBalancesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBalancesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBalancesRequest* internal_default_instance() {
    return reinterpret_cast<const GetBalancesRequest*>(
               &_GetBalancesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetBalancesRequest& a, GetBalancesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBalancesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBalancesRequest* New() const final {
    return CreateMaybeMessage<GetBalancesRequest>(nullptr);
  }

  GetBalancesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBalancesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBalancesRequest& from);
  void MergeFrom(const GetBalancesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBalancesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetBalancesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
    kOptionsFieldNumber = 4,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // .plaid.GetBalancesRequestOptions options = 4;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::plaid::GetBalancesRequestOptions& options() const;
  ::plaid::GetBalancesRequestOptions* release_options();
  ::plaid::GetBalancesRequestOptions* mutable_options();
  void set_allocated_options(::plaid::GetBalancesRequestOptions* options);
  private:
  const ::plaid::GetBalancesRequestOptions& _internal_options() const;
  ::plaid::GetBalancesRequestOptions* _internal_mutable_options();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetBalancesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::plaid::GetBalancesRequestOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetBalancesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetBalancesResponse) */ {
 public:
  GetBalancesResponse();
  virtual ~GetBalancesResponse();

  GetBalancesResponse(const GetBalancesResponse& from);
  GetBalancesResponse(GetBalancesResponse&& from) noexcept
    : GetBalancesResponse() {
    *this = ::std::move(from);
  }

  inline GetBalancesResponse& operator=(const GetBalancesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBalancesResponse& operator=(GetBalancesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBalancesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBalancesResponse* internal_default_instance() {
    return reinterpret_cast<const GetBalancesResponse*>(
               &_GetBalancesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetBalancesResponse& a, GetBalancesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBalancesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBalancesResponse* New() const final {
    return CreateMaybeMessage<GetBalancesResponse>(nullptr);
  }

  GetBalancesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBalancesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBalancesResponse& from);
  void MergeFrom(const GetBalancesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBalancesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetBalancesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // repeated .plaid.Account accounts = 2;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::plaid::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >*
      mutable_accounts();
  private:
  const ::plaid::Account& _internal_accounts(int index) const;
  ::plaid::Account* _internal_add_accounts();
  public:
  const ::plaid::Account& accounts(int index) const;
  ::plaid::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >&
      accounts() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetBalancesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account > accounts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetAccountsRequestOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetAccountsRequestOptions) */ {
 public:
  GetAccountsRequestOptions();
  virtual ~GetAccountsRequestOptions();

  GetAccountsRequestOptions(const GetAccountsRequestOptions& from);
  GetAccountsRequestOptions(GetAccountsRequestOptions&& from) noexcept
    : GetAccountsRequestOptions() {
    *this = ::std::move(from);
  }

  inline GetAccountsRequestOptions& operator=(const GetAccountsRequestOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountsRequestOptions& operator=(GetAccountsRequestOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAccountsRequestOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountsRequestOptions* internal_default_instance() {
    return reinterpret_cast<const GetAccountsRequestOptions*>(
               &_GetAccountsRequestOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetAccountsRequestOptions& a, GetAccountsRequestOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccountsRequestOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAccountsRequestOptions* New() const final {
    return CreateMaybeMessage<GetAccountsRequestOptions>(nullptr);
  }

  GetAccountsRequestOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountsRequestOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAccountsRequestOptions& from);
  void MergeFrom(const GetAccountsRequestOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountsRequestOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetAccountsRequestOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
  };
  // repeated string account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  const std::string& account_ids(int index) const;
  std::string* mutable_account_ids(int index);
  void set_account_ids(int index, const std::string& value);
  void set_account_ids(int index, std::string&& value);
  void set_account_ids(int index, const char* value);
  void set_account_ids(int index, const char* value, size_t size);
  std::string* add_account_ids();
  void add_account_ids(const std::string& value);
  void add_account_ids(std::string&& value);
  void add_account_ids(const char* value);
  void add_account_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_account_ids();
  private:
  const std::string& _internal_account_ids(int index) const;
  std::string* _internal_add_account_ids();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetAccountsRequestOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> account_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetAccountsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetAccountsRequest) */ {
 public:
  GetAccountsRequest();
  virtual ~GetAccountsRequest();

  GetAccountsRequest(const GetAccountsRequest& from);
  GetAccountsRequest(GetAccountsRequest&& from) noexcept
    : GetAccountsRequest() {
    *this = ::std::move(from);
  }

  inline GetAccountsRequest& operator=(const GetAccountsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountsRequest& operator=(GetAccountsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAccountsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountsRequest* internal_default_instance() {
    return reinterpret_cast<const GetAccountsRequest*>(
               &_GetAccountsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetAccountsRequest& a, GetAccountsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccountsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAccountsRequest* New() const final {
    return CreateMaybeMessage<GetAccountsRequest>(nullptr);
  }

  GetAccountsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAccountsRequest& from);
  void MergeFrom(const GetAccountsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetAccountsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
    kOptionsFieldNumber = 4,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // .plaid.GetAccountsRequestOptions options = 4;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::plaid::GetAccountsRequestOptions& options() const;
  ::plaid::GetAccountsRequestOptions* release_options();
  ::plaid::GetAccountsRequestOptions* mutable_options();
  void set_allocated_options(::plaid::GetAccountsRequestOptions* options);
  private:
  const ::plaid::GetAccountsRequestOptions& _internal_options() const;
  ::plaid::GetAccountsRequestOptions* _internal_mutable_options();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetAccountsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::plaid::GetAccountsRequestOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetAccountsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetAccountsResponse) */ {
 public:
  GetAccountsResponse();
  virtual ~GetAccountsResponse();

  GetAccountsResponse(const GetAccountsResponse& from);
  GetAccountsResponse(GetAccountsResponse&& from) noexcept
    : GetAccountsResponse() {
    *this = ::std::move(from);
  }

  inline GetAccountsResponse& operator=(const GetAccountsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountsResponse& operator=(GetAccountsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAccountsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountsResponse* internal_default_instance() {
    return reinterpret_cast<const GetAccountsResponse*>(
               &_GetAccountsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetAccountsResponse& a, GetAccountsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccountsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAccountsResponse* New() const final {
    return CreateMaybeMessage<GetAccountsResponse>(nullptr);
  }

  GetAccountsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAccountsResponse& from);
  void MergeFrom(const GetAccountsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetAccountsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 2,
    kRequestIdFieldNumber = 1,
    kItemFieldNumber = 3,
  };
  // repeated .plaid.Account accounts = 2;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::plaid::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >*
      mutable_accounts();
  private:
  const ::plaid::Account& _internal_accounts(int index) const;
  ::plaid::Account* _internal_add_accounts();
  public:
  const ::plaid::Account& accounts(int index) const;
  ::plaid::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >&
      accounts() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .plaid.Item item = 3;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::plaid::Item& item() const;
  ::plaid::Item* release_item();
  ::plaid::Item* mutable_item();
  void set_allocated_item(::plaid::Item* item);
  private:
  const ::plaid::Item& _internal_item() const;
  ::plaid::Item* _internal_mutable_item();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetAccountsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account > accounts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::plaid::Item* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetAccountsOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetAccountsOptions) */ {
 public:
  GetAccountsOptions();
  virtual ~GetAccountsOptions();

  GetAccountsOptions(const GetAccountsOptions& from);
  GetAccountsOptions(GetAccountsOptions&& from) noexcept
    : GetAccountsOptions() {
    *this = ::std::move(from);
  }

  inline GetAccountsOptions& operator=(const GetAccountsOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccountsOptions& operator=(GetAccountsOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAccountsOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountsOptions* internal_default_instance() {
    return reinterpret_cast<const GetAccountsOptions*>(
               &_GetAccountsOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetAccountsOptions& a, GetAccountsOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccountsOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAccountsOptions* New() const final {
    return CreateMaybeMessage<GetAccountsOptions>(nullptr);
  }

  GetAccountsOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountsOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAccountsOptions& from);
  void MergeFrom(const GetAccountsOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountsOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetAccountsOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
  };
  // repeated string account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  const std::string& account_ids(int index) const;
  std::string* mutable_account_ids(int index);
  void set_account_ids(int index, const std::string& value);
  void set_account_ids(int index, std::string&& value);
  void set_account_ids(int index, const char* value);
  void set_account_ids(int index, const char* value, size_t size);
  std::string* add_account_ids();
  void add_account_ids(const std::string& value);
  void add_account_ids(std::string&& value);
  void add_account_ids(const char* value);
  void add_account_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_account_ids();
  private:
  const std::string& _internal_account_ids(int index) const;
  std::string* _internal_add_account_ids();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetAccountsOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> account_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetBalancesOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetBalancesOptions) */ {
 public:
  GetBalancesOptions();
  virtual ~GetBalancesOptions();

  GetBalancesOptions(const GetBalancesOptions& from);
  GetBalancesOptions(GetBalancesOptions&& from) noexcept
    : GetBalancesOptions() {
    *this = ::std::move(from);
  }

  inline GetBalancesOptions& operator=(const GetBalancesOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBalancesOptions& operator=(GetBalancesOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBalancesOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBalancesOptions* internal_default_instance() {
    return reinterpret_cast<const GetBalancesOptions*>(
               &_GetBalancesOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetBalancesOptions& a, GetBalancesOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBalancesOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBalancesOptions* New() const final {
    return CreateMaybeMessage<GetBalancesOptions>(nullptr);
  }

  GetBalancesOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBalancesOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBalancesOptions& from);
  void MergeFrom(const GetBalancesOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBalancesOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetBalancesOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
  };
  // repeated string account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  const std::string& account_ids(int index) const;
  std::string* mutable_account_ids(int index);
  void set_account_ids(int index, const std::string& value);
  void set_account_ids(int index, std::string&& value);
  void set_account_ids(int index, const char* value);
  void set_account_ids(int index, const char* value, size_t size);
  std::string* add_account_ids();
  void add_account_ids(const std::string& value);
  void add_account_ids(std::string&& value);
  void add_account_ids(const char* value);
  void add_account_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_account_ids();
  private:
  const std::string& _internal_account_ids(int index) const;
  std::string* _internal_add_account_ids();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetBalancesOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> account_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class AssetReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.AssetReport) */ {
 public:
  AssetReport();
  virtual ~AssetReport();

  AssetReport(const AssetReport& from);
  AssetReport(AssetReport&& from) noexcept
    : AssetReport() {
    *this = ::std::move(from);
  }

  inline AssetReport& operator=(const AssetReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetReport& operator=(AssetReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssetReport* internal_default_instance() {
    return reinterpret_cast<const AssetReport*>(
               &_AssetReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AssetReport& a, AssetReport& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetReport* New() const final {
    return CreateMaybeMessage<AssetReport>(nullptr);
  }

  AssetReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetReport& from);
  void MergeFrom(const AssetReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.AssetReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 5,
    kAssetReportIdFieldNumber = 1,
    kClientReportIdFieldNumber = 2,
    kDateGeneratedFieldNumber = 3,
    kUserFieldNumber = 6,
    kDaysRequestedFieldNumber = 4,
  };
  // repeated .plaid.AssetReportItem items = 5;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::plaid::AssetReportItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::AssetReportItem >*
      mutable_items();
  private:
  const ::plaid::AssetReportItem& _internal_items(int index) const;
  ::plaid::AssetReportItem* _internal_add_items();
  public:
  const ::plaid::AssetReportItem& items(int index) const;
  ::plaid::AssetReportItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::AssetReportItem >&
      items() const;

  // string asset_report_id = 1;
  void clear_asset_report_id();
  const std::string& asset_report_id() const;
  void set_asset_report_id(const std::string& value);
  void set_asset_report_id(std::string&& value);
  void set_asset_report_id(const char* value);
  void set_asset_report_id(const char* value, size_t size);
  std::string* mutable_asset_report_id();
  std::string* release_asset_report_id();
  void set_allocated_asset_report_id(std::string* asset_report_id);
  private:
  const std::string& _internal_asset_report_id() const;
  void _internal_set_asset_report_id(const std::string& value);
  std::string* _internal_mutable_asset_report_id();
  public:

  // string client_report_id = 2;
  void clear_client_report_id();
  const std::string& client_report_id() const;
  void set_client_report_id(const std::string& value);
  void set_client_report_id(std::string&& value);
  void set_client_report_id(const char* value);
  void set_client_report_id(const char* value, size_t size);
  std::string* mutable_client_report_id();
  std::string* release_client_report_id();
  void set_allocated_client_report_id(std::string* client_report_id);
  private:
  const std::string& _internal_client_report_id() const;
  void _internal_set_client_report_id(const std::string& value);
  std::string* _internal_mutable_client_report_id();
  public:

  // string date_generated = 3;
  void clear_date_generated();
  const std::string& date_generated() const;
  void set_date_generated(const std::string& value);
  void set_date_generated(std::string&& value);
  void set_date_generated(const char* value);
  void set_date_generated(const char* value, size_t size);
  std::string* mutable_date_generated();
  std::string* release_date_generated();
  void set_allocated_date_generated(std::string* date_generated);
  private:
  const std::string& _internal_date_generated() const;
  void _internal_set_date_generated(const std::string& value);
  std::string* _internal_mutable_date_generated();
  public:

  // .plaid.AssetReportUser user = 6;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::plaid::AssetReportUser& user() const;
  ::plaid::AssetReportUser* release_user();
  ::plaid::AssetReportUser* mutable_user();
  void set_allocated_user(::plaid::AssetReportUser* user);
  private:
  const ::plaid::AssetReportUser& _internal_user() const;
  ::plaid::AssetReportUser* _internal_mutable_user();
  public:

  // int64 days_requested = 4;
  void clear_days_requested();
  ::PROTOBUF_NAMESPACE_ID::int64 days_requested() const;
  void set_days_requested(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_days_requested() const;
  void _internal_set_days_requested(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.AssetReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::AssetReportItem > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_report_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_report_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_generated_;
  ::plaid::AssetReportUser* user_;
  ::PROTOBUF_NAMESPACE_ID::int64 days_requested_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class AssetReportItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.AssetReportItem) */ {
 public:
  AssetReportItem();
  virtual ~AssetReportItem();

  AssetReportItem(const AssetReportItem& from);
  AssetReportItem(AssetReportItem&& from) noexcept
    : AssetReportItem() {
    *this = ::std::move(from);
  }

  inline AssetReportItem& operator=(const AssetReportItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetReportItem& operator=(AssetReportItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetReportItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssetReportItem* internal_default_instance() {
    return reinterpret_cast<const AssetReportItem*>(
               &_AssetReportItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AssetReportItem& a, AssetReportItem& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetReportItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetReportItem* New() const final {
    return CreateMaybeMessage<AssetReportItem>(nullptr);
  }

  AssetReportItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetReportItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetReportItem& from);
  void MergeFrom(const AssetReportItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetReportItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.AssetReportItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
    kDateLastUpdatedFieldNumber = 2,
    kInstitutionIdFieldNumber = 3,
    kInstitutionNameFieldNumber = 4,
    kItemIdFieldNumber = 5,
  };
  // repeated .plaid.Account accounts = 1;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::plaid::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >*
      mutable_accounts();
  private:
  const ::plaid::Account& _internal_accounts(int index) const;
  ::plaid::Account* _internal_add_accounts();
  public:
  const ::plaid::Account& accounts(int index) const;
  ::plaid::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >&
      accounts() const;

  // string date_last_updated = 2;
  void clear_date_last_updated();
  const std::string& date_last_updated() const;
  void set_date_last_updated(const std::string& value);
  void set_date_last_updated(std::string&& value);
  void set_date_last_updated(const char* value);
  void set_date_last_updated(const char* value, size_t size);
  std::string* mutable_date_last_updated();
  std::string* release_date_last_updated();
  void set_allocated_date_last_updated(std::string* date_last_updated);
  private:
  const std::string& _internal_date_last_updated() const;
  void _internal_set_date_last_updated(const std::string& value);
  std::string* _internal_mutable_date_last_updated();
  public:

  // string institution_id = 3;
  void clear_institution_id();
  const std::string& institution_id() const;
  void set_institution_id(const std::string& value);
  void set_institution_id(std::string&& value);
  void set_institution_id(const char* value);
  void set_institution_id(const char* value, size_t size);
  std::string* mutable_institution_id();
  std::string* release_institution_id();
  void set_allocated_institution_id(std::string* institution_id);
  private:
  const std::string& _internal_institution_id() const;
  void _internal_set_institution_id(const std::string& value);
  std::string* _internal_mutable_institution_id();
  public:

  // string institution_name = 4;
  void clear_institution_name();
  const std::string& institution_name() const;
  void set_institution_name(const std::string& value);
  void set_institution_name(std::string&& value);
  void set_institution_name(const char* value);
  void set_institution_name(const char* value, size_t size);
  std::string* mutable_institution_name();
  std::string* release_institution_name();
  void set_allocated_institution_name(std::string* institution_name);
  private:
  const std::string& _internal_institution_name() const;
  void _internal_set_institution_name(const std::string& value);
  std::string* _internal_mutable_institution_name();
  public:

  // string item_id = 5;
  void clear_item_id();
  const std::string& item_id() const;
  void set_item_id(const std::string& value);
  void set_item_id(std::string&& value);
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  std::string* mutable_item_id();
  std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // @@protoc_insertion_point(class_scope:plaid.AssetReportItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account > accounts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_last_updated_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr institution_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr institution_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class AssetReportUser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.AssetReportUser) */ {
 public:
  AssetReportUser();
  virtual ~AssetReportUser();

  AssetReportUser(const AssetReportUser& from);
  AssetReportUser(AssetReportUser&& from) noexcept
    : AssetReportUser() {
    *this = ::std::move(from);
  }

  inline AssetReportUser& operator=(const AssetReportUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetReportUser& operator=(AssetReportUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetReportUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssetReportUser* internal_default_instance() {
    return reinterpret_cast<const AssetReportUser*>(
               &_AssetReportUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AssetReportUser& a, AssetReportUser& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetReportUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetReportUser* New() const final {
    return CreateMaybeMessage<AssetReportUser>(nullptr);
  }

  AssetReportUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetReportUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetReportUser& from);
  void MergeFrom(const AssetReportUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetReportUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.AssetReportUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientUserIdFieldNumber = 1,
    kEmailFieldNumber = 2,
    kFirstNameFieldNumber = 3,
    kLastNameFieldNumber = 4,
    kMiddleNameFieldNumber = 5,
    kPhoneNumberFieldNumber = 6,
    kSsnFieldNumber = 7,
  };
  // string client_user_id = 1;
  void clear_client_user_id();
  const std::string& client_user_id() const;
  void set_client_user_id(const std::string& value);
  void set_client_user_id(std::string&& value);
  void set_client_user_id(const char* value);
  void set_client_user_id(const char* value, size_t size);
  std::string* mutable_client_user_id();
  std::string* release_client_user_id();
  void set_allocated_client_user_id(std::string* client_user_id);
  private:
  const std::string& _internal_client_user_id() const;
  void _internal_set_client_user_id(const std::string& value);
  std::string* _internal_mutable_client_user_id();
  public:

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string first_name = 3;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 4;
  void clear_last_name();
  const std::string& last_name() const;
  void set_last_name(const std::string& value);
  void set_last_name(std::string&& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  std::string* mutable_last_name();
  std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string middle_name = 5;
  void clear_middle_name();
  const std::string& middle_name() const;
  void set_middle_name(const std::string& value);
  void set_middle_name(std::string&& value);
  void set_middle_name(const char* value);
  void set_middle_name(const char* value, size_t size);
  std::string* mutable_middle_name();
  std::string* release_middle_name();
  void set_allocated_middle_name(std::string* middle_name);
  private:
  const std::string& _internal_middle_name() const;
  void _internal_set_middle_name(const std::string& value);
  std::string* _internal_mutable_middle_name();
  public:

  // string phone_number = 6;
  void clear_phone_number();
  const std::string& phone_number() const;
  void set_phone_number(const std::string& value);
  void set_phone_number(std::string&& value);
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  std::string* mutable_phone_number();
  std::string* release_phone_number();
  void set_allocated_phone_number(std::string* phone_number);
  private:
  const std::string& _internal_phone_number() const;
  void _internal_set_phone_number(const std::string& value);
  std::string* _internal_mutable_phone_number();
  public:

  // string ssn = 7;
  void clear_ssn();
  const std::string& ssn() const;
  void set_ssn(const std::string& value);
  void set_ssn(std::string&& value);
  void set_ssn(const char* value);
  void set_ssn(const char* value, size_t size);
  std::string* mutable_ssn();
  std::string* release_ssn();
  void set_allocated_ssn(std::string* ssn);
  private:
  const std::string& _internal_ssn() const;
  void _internal_set_ssn(const std::string& value);
  std::string* _internal_mutable_ssn();
  public:

  // @@protoc_insertion_point(class_scope:plaid.AssetReportUser)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr middle_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetAssetReportRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetAssetReportRequest) */ {
 public:
  GetAssetReportRequest();
  virtual ~GetAssetReportRequest();

  GetAssetReportRequest(const GetAssetReportRequest& from);
  GetAssetReportRequest(GetAssetReportRequest&& from) noexcept
    : GetAssetReportRequest() {
    *this = ::std::move(from);
  }

  inline GetAssetReportRequest& operator=(const GetAssetReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAssetReportRequest& operator=(GetAssetReportRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAssetReportRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAssetReportRequest* internal_default_instance() {
    return reinterpret_cast<const GetAssetReportRequest*>(
               &_GetAssetReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetAssetReportRequest& a, GetAssetReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAssetReportRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAssetReportRequest* New() const final {
    return CreateMaybeMessage<GetAssetReportRequest>(nullptr);
  }

  GetAssetReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAssetReportRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAssetReportRequest& from);
  void MergeFrom(const GetAssetReportRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAssetReportRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetAssetReportRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAssetReportTokenFieldNumber = 3,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string asset_report_token = 3;
  void clear_asset_report_token();
  const std::string& asset_report_token() const;
  void set_asset_report_token(const std::string& value);
  void set_asset_report_token(std::string&& value);
  void set_asset_report_token(const char* value);
  void set_asset_report_token(const char* value, size_t size);
  std::string* mutable_asset_report_token();
  std::string* release_asset_report_token();
  void set_allocated_asset_report_token(std::string* asset_report_token);
  private:
  const std::string& _internal_asset_report_token() const;
  void _internal_set_asset_report_token(const std::string& value);
  std::string* _internal_mutable_asset_report_token();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetAssetReportRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_report_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetAssetReportResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetAssetReportResponse) */ {
 public:
  GetAssetReportResponse();
  virtual ~GetAssetReportResponse();

  GetAssetReportResponse(const GetAssetReportResponse& from);
  GetAssetReportResponse(GetAssetReportResponse&& from) noexcept
    : GetAssetReportResponse() {
    *this = ::std::move(from);
  }

  inline GetAssetReportResponse& operator=(const GetAssetReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAssetReportResponse& operator=(GetAssetReportResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAssetReportResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAssetReportResponse* internal_default_instance() {
    return reinterpret_cast<const GetAssetReportResponse*>(
               &_GetAssetReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetAssetReportResponse& a, GetAssetReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAssetReportResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAssetReportResponse* New() const final {
    return CreateMaybeMessage<GetAssetReportResponse>(nullptr);
  }

  GetAssetReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAssetReportResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAssetReportResponse& from);
  void MergeFrom(const GetAssetReportResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAssetReportResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetAssetReportResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWarningsFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kReportFieldNumber = 2,
  };
  // repeated string warnings = 3;
  int warnings_size() const;
  private:
  int _internal_warnings_size() const;
  public:
  void clear_warnings();
  const std::string& warnings(int index) const;
  std::string* mutable_warnings(int index);
  void set_warnings(int index, const std::string& value);
  void set_warnings(int index, std::string&& value);
  void set_warnings(int index, const char* value);
  void set_warnings(int index, const char* value, size_t size);
  std::string* add_warnings();
  void add_warnings(const std::string& value);
  void add_warnings(std::string&& value);
  void add_warnings(const char* value);
  void add_warnings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& warnings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_warnings();
  private:
  const std::string& _internal_warnings(int index) const;
  std::string* _internal_add_warnings();
  public:

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .plaid.AssetReport report = 2;
  bool has_report() const;
  private:
  bool _internal_has_report() const;
  public:
  void clear_report();
  const ::plaid::AssetReport& report() const;
  ::plaid::AssetReport* release_report();
  ::plaid::AssetReport* mutable_report();
  void set_allocated_report(::plaid::AssetReport* report);
  private:
  const ::plaid::AssetReport& _internal_report() const;
  ::plaid::AssetReport* _internal_mutable_report();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetAssetReportResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> warnings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::plaid::AssetReport* report_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class RemoveAssetReportRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.RemoveAssetReportRequest) */ {
 public:
  RemoveAssetReportRequest();
  virtual ~RemoveAssetReportRequest();

  RemoveAssetReportRequest(const RemoveAssetReportRequest& from);
  RemoveAssetReportRequest(RemoveAssetReportRequest&& from) noexcept
    : RemoveAssetReportRequest() {
    *this = ::std::move(from);
  }

  inline RemoveAssetReportRequest& operator=(const RemoveAssetReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveAssetReportRequest& operator=(RemoveAssetReportRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveAssetReportRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveAssetReportRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveAssetReportRequest*>(
               &_RemoveAssetReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RemoveAssetReportRequest& a, RemoveAssetReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveAssetReportRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveAssetReportRequest* New() const final {
    return CreateMaybeMessage<RemoveAssetReportRequest>(nullptr);
  }

  RemoveAssetReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveAssetReportRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveAssetReportRequest& from);
  void MergeFrom(const RemoveAssetReportRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveAssetReportRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.RemoveAssetReportRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAssetReportTokenFieldNumber = 3,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string asset_report_token = 3;
  void clear_asset_report_token();
  const std::string& asset_report_token() const;
  void set_asset_report_token(const std::string& value);
  void set_asset_report_token(std::string&& value);
  void set_asset_report_token(const char* value);
  void set_asset_report_token(const char* value, size_t size);
  std::string* mutable_asset_report_token();
  std::string* release_asset_report_token();
  void set_allocated_asset_report_token(std::string* asset_report_token);
  private:
  const std::string& _internal_asset_report_token() const;
  void _internal_set_asset_report_token(const std::string& value);
  std::string* _internal_mutable_asset_report_token();
  public:

  // @@protoc_insertion_point(class_scope:plaid.RemoveAssetReportRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_report_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class RemoveAssetReportResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.RemoveAssetReportResponse) */ {
 public:
  RemoveAssetReportResponse();
  virtual ~RemoveAssetReportResponse();

  RemoveAssetReportResponse(const RemoveAssetReportResponse& from);
  RemoveAssetReportResponse(RemoveAssetReportResponse&& from) noexcept
    : RemoveAssetReportResponse() {
    *this = ::std::move(from);
  }

  inline RemoveAssetReportResponse& operator=(const RemoveAssetReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveAssetReportResponse& operator=(RemoveAssetReportResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveAssetReportResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveAssetReportResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveAssetReportResponse*>(
               &_RemoveAssetReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RemoveAssetReportResponse& a, RemoveAssetReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveAssetReportResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveAssetReportResponse* New() const final {
    return CreateMaybeMessage<RemoveAssetReportResponse>(nullptr);
  }

  RemoveAssetReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveAssetReportResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveAssetReportResponse& from);
  void MergeFrom(const RemoveAssetReportResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveAssetReportResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.RemoveAssetReportResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kRemovedFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // bool removed = 2;
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.RemoveAssetReportResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  bool removed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class CreateAuditCopyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.CreateAuditCopyRequest) */ {
 public:
  CreateAuditCopyRequest();
  virtual ~CreateAuditCopyRequest();

  CreateAuditCopyRequest(const CreateAuditCopyRequest& from);
  CreateAuditCopyRequest(CreateAuditCopyRequest&& from) noexcept
    : CreateAuditCopyRequest() {
    *this = ::std::move(from);
  }

  inline CreateAuditCopyRequest& operator=(const CreateAuditCopyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAuditCopyRequest& operator=(CreateAuditCopyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAuditCopyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAuditCopyRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAuditCopyRequest*>(
               &_CreateAuditCopyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CreateAuditCopyRequest& a, CreateAuditCopyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAuditCopyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAuditCopyRequest* New() const final {
    return CreateMaybeMessage<CreateAuditCopyRequest>(nullptr);
  }

  CreateAuditCopyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAuditCopyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAuditCopyRequest& from);
  void MergeFrom(const CreateAuditCopyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAuditCopyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.CreateAuditCopyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAssetReportTokenFieldNumber = 3,
    kAuditorIdFieldNumber = 4,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string asset_report_token = 3;
  void clear_asset_report_token();
  const std::string& asset_report_token() const;
  void set_asset_report_token(const std::string& value);
  void set_asset_report_token(std::string&& value);
  void set_asset_report_token(const char* value);
  void set_asset_report_token(const char* value, size_t size);
  std::string* mutable_asset_report_token();
  std::string* release_asset_report_token();
  void set_allocated_asset_report_token(std::string* asset_report_token);
  private:
  const std::string& _internal_asset_report_token() const;
  void _internal_set_asset_report_token(const std::string& value);
  std::string* _internal_mutable_asset_report_token();
  public:

  // string auditor_id = 4;
  void clear_auditor_id();
  const std::string& auditor_id() const;
  void set_auditor_id(const std::string& value);
  void set_auditor_id(std::string&& value);
  void set_auditor_id(const char* value);
  void set_auditor_id(const char* value, size_t size);
  std::string* mutable_auditor_id();
  std::string* release_auditor_id();
  void set_allocated_auditor_id(std::string* auditor_id);
  private:
  const std::string& _internal_auditor_id() const;
  void _internal_set_auditor_id(const std::string& value);
  std::string* _internal_mutable_auditor_id();
  public:

  // @@protoc_insertion_point(class_scope:plaid.CreateAuditCopyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_report_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auditor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class CreateAuditCopyTokenResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.CreateAuditCopyTokenResponse) */ {
 public:
  CreateAuditCopyTokenResponse();
  virtual ~CreateAuditCopyTokenResponse();

  CreateAuditCopyTokenResponse(const CreateAuditCopyTokenResponse& from);
  CreateAuditCopyTokenResponse(CreateAuditCopyTokenResponse&& from) noexcept
    : CreateAuditCopyTokenResponse() {
    *this = ::std::move(from);
  }

  inline CreateAuditCopyTokenResponse& operator=(const CreateAuditCopyTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAuditCopyTokenResponse& operator=(CreateAuditCopyTokenResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAuditCopyTokenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAuditCopyTokenResponse* internal_default_instance() {
    return reinterpret_cast<const CreateAuditCopyTokenResponse*>(
               &_CreateAuditCopyTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CreateAuditCopyTokenResponse& a, CreateAuditCopyTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAuditCopyTokenResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAuditCopyTokenResponse* New() const final {
    return CreateMaybeMessage<CreateAuditCopyTokenResponse>(nullptr);
  }

  CreateAuditCopyTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAuditCopyTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAuditCopyTokenResponse& from);
  void MergeFrom(const CreateAuditCopyTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAuditCopyTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.CreateAuditCopyTokenResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kAuditCopyTokenFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string audit_copy_token = 2;
  void clear_audit_copy_token();
  const std::string& audit_copy_token() const;
  void set_audit_copy_token(const std::string& value);
  void set_audit_copy_token(std::string&& value);
  void set_audit_copy_token(const char* value);
  void set_audit_copy_token(const char* value, size_t size);
  std::string* mutable_audit_copy_token();
  std::string* release_audit_copy_token();
  void set_allocated_audit_copy_token(std::string* audit_copy_token);
  private:
  const std::string& _internal_audit_copy_token() const;
  void _internal_set_audit_copy_token(const std::string& value);
  std::string* _internal_mutable_audit_copy_token();
  public:

  // @@protoc_insertion_point(class_scope:plaid.CreateAuditCopyTokenResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audit_copy_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetAuthRequestOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetAuthRequestOptions) */ {
 public:
  GetAuthRequestOptions();
  virtual ~GetAuthRequestOptions();

  GetAuthRequestOptions(const GetAuthRequestOptions& from);
  GetAuthRequestOptions(GetAuthRequestOptions&& from) noexcept
    : GetAuthRequestOptions() {
    *this = ::std::move(from);
  }

  inline GetAuthRequestOptions& operator=(const GetAuthRequestOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthRequestOptions& operator=(GetAuthRequestOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAuthRequestOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAuthRequestOptions* internal_default_instance() {
    return reinterpret_cast<const GetAuthRequestOptions*>(
               &_GetAuthRequestOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetAuthRequestOptions& a, GetAuthRequestOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthRequestOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAuthRequestOptions* New() const final {
    return CreateMaybeMessage<GetAuthRequestOptions>(nullptr);
  }

  GetAuthRequestOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAuthRequestOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAuthRequestOptions& from);
  void MergeFrom(const GetAuthRequestOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAuthRequestOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetAuthRequestOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
  };
  // repeated string account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  const std::string& account_ids(int index) const;
  std::string* mutable_account_ids(int index);
  void set_account_ids(int index, const std::string& value);
  void set_account_ids(int index, std::string&& value);
  void set_account_ids(int index, const char* value);
  void set_account_ids(int index, const char* value, size_t size);
  std::string* add_account_ids();
  void add_account_ids(const std::string& value);
  void add_account_ids(std::string&& value);
  void add_account_ids(const char* value);
  void add_account_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_account_ids();
  private:
  const std::string& _internal_account_ids(int index) const;
  std::string* _internal_add_account_ids();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetAuthRequestOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> account_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetAuthRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetAuthRequest) */ {
 public:
  GetAuthRequest();
  virtual ~GetAuthRequest();

  GetAuthRequest(const GetAuthRequest& from);
  GetAuthRequest(GetAuthRequest&& from) noexcept
    : GetAuthRequest() {
    *this = ::std::move(from);
  }

  inline GetAuthRequest& operator=(const GetAuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthRequest& operator=(GetAuthRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAuthRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAuthRequest* internal_default_instance() {
    return reinterpret_cast<const GetAuthRequest*>(
               &_GetAuthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetAuthRequest& a, GetAuthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAuthRequest* New() const final {
    return CreateMaybeMessage<GetAuthRequest>(nullptr);
  }

  GetAuthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAuthRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAuthRequest& from);
  void MergeFrom(const GetAuthRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAuthRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetAuthRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
    kOptionsFieldNumber = 4,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // .plaid.GetAuthRequestOptions options = 4;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::plaid::GetAuthRequestOptions& options() const;
  ::plaid::GetAuthRequestOptions* release_options();
  ::plaid::GetAuthRequestOptions* mutable_options();
  void set_allocated_options(::plaid::GetAuthRequestOptions* options);
  private:
  const ::plaid::GetAuthRequestOptions& _internal_options() const;
  ::plaid::GetAuthRequestOptions* _internal_mutable_options();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetAuthRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::plaid::GetAuthRequestOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class AccountNumberCollection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.AccountNumberCollection) */ {
 public:
  AccountNumberCollection();
  virtual ~AccountNumberCollection();

  AccountNumberCollection(const AccountNumberCollection& from);
  AccountNumberCollection(AccountNumberCollection&& from) noexcept
    : AccountNumberCollection() {
    *this = ::std::move(from);
  }

  inline AccountNumberCollection& operator=(const AccountNumberCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountNumberCollection& operator=(AccountNumberCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountNumberCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountNumberCollection* internal_default_instance() {
    return reinterpret_cast<const AccountNumberCollection*>(
               &_AccountNumberCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(AccountNumberCollection& a, AccountNumberCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountNumberCollection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountNumberCollection* New() const final {
    return CreateMaybeMessage<AccountNumberCollection>(nullptr);
  }

  AccountNumberCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountNumberCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountNumberCollection& from);
  void MergeFrom(const AccountNumberCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountNumberCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.AccountNumberCollection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAchFieldNumber = 1,
    kEftFieldNumber = 2,
    kInternationalFieldNumber = 3,
    kBacsFieldNumber = 4,
  };
  // repeated .plaid.ACHNumber ach = 1;
  int ach_size() const;
  private:
  int _internal_ach_size() const;
  public:
  void clear_ach();
  ::plaid::ACHNumber* mutable_ach(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::ACHNumber >*
      mutable_ach();
  private:
  const ::plaid::ACHNumber& _internal_ach(int index) const;
  ::plaid::ACHNumber* _internal_add_ach();
  public:
  const ::plaid::ACHNumber& ach(int index) const;
  ::plaid::ACHNumber* add_ach();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::ACHNumber >&
      ach() const;

  // repeated .plaid.EFTNumber eft = 2;
  int eft_size() const;
  private:
  int _internal_eft_size() const;
  public:
  void clear_eft();
  ::plaid::EFTNumber* mutable_eft(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::EFTNumber >*
      mutable_eft();
  private:
  const ::plaid::EFTNumber& _internal_eft(int index) const;
  ::plaid::EFTNumber* _internal_add_eft();
  public:
  const ::plaid::EFTNumber& eft(int index) const;
  ::plaid::EFTNumber* add_eft();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::EFTNumber >&
      eft() const;

  // repeated .plaid.IBANNumber international = 3;
  int international_size() const;
  private:
  int _internal_international_size() const;
  public:
  void clear_international();
  ::plaid::IBANNumber* mutable_international(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::IBANNumber >*
      mutable_international();
  private:
  const ::plaid::IBANNumber& _internal_international(int index) const;
  ::plaid::IBANNumber* _internal_add_international();
  public:
  const ::plaid::IBANNumber& international(int index) const;
  ::plaid::IBANNumber* add_international();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::IBANNumber >&
      international() const;

  // repeated .plaid.BACSNumber bacs = 4;
  int bacs_size() const;
  private:
  int _internal_bacs_size() const;
  public:
  void clear_bacs();
  ::plaid::BACSNumber* mutable_bacs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::BACSNumber >*
      mutable_bacs();
  private:
  const ::plaid::BACSNumber& _internal_bacs(int index) const;
  ::plaid::BACSNumber* _internal_add_bacs();
  public:
  const ::plaid::BACSNumber& bacs(int index) const;
  ::plaid::BACSNumber* add_bacs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::BACSNumber >&
      bacs() const;

  // @@protoc_insertion_point(class_scope:plaid.AccountNumberCollection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::ACHNumber > ach_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::EFTNumber > eft_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::IBANNumber > international_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::BACSNumber > bacs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetAuthResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetAuthResponse) */ {
 public:
  GetAuthResponse();
  virtual ~GetAuthResponse();

  GetAuthResponse(const GetAuthResponse& from);
  GetAuthResponse(GetAuthResponse&& from) noexcept
    : GetAuthResponse() {
    *this = ::std::move(from);
  }

  inline GetAuthResponse& operator=(const GetAuthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthResponse& operator=(GetAuthResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAuthResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAuthResponse* internal_default_instance() {
    return reinterpret_cast<const GetAuthResponse*>(
               &_GetAuthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetAuthResponse& a, GetAuthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAuthResponse* New() const final {
    return CreateMaybeMessage<GetAuthResponse>(nullptr);
  }

  GetAuthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAuthResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAuthResponse& from);
  void MergeFrom(const GetAuthResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAuthResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetAuthResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 2,
    kRequestIdFieldNumber = 1,
    kNumbersFieldNumber = 3,
  };
  // repeated .plaid.Account accounts = 2;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::plaid::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >*
      mutable_accounts();
  private:
  const ::plaid::Account& _internal_accounts(int index) const;
  ::plaid::Account* _internal_add_accounts();
  public:
  const ::plaid::Account& accounts(int index) const;
  ::plaid::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >&
      accounts() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .plaid.AccountNumberCollection numbers = 3;
  bool has_numbers() const;
  private:
  bool _internal_has_numbers() const;
  public:
  void clear_numbers();
  const ::plaid::AccountNumberCollection& numbers() const;
  ::plaid::AccountNumberCollection* release_numbers();
  ::plaid::AccountNumberCollection* mutable_numbers();
  void set_allocated_numbers(::plaid::AccountNumberCollection* numbers);
  private:
  const ::plaid::AccountNumberCollection& _internal_numbers() const;
  ::plaid::AccountNumberCollection* _internal_mutable_numbers();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetAuthResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account > accounts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::plaid::AccountNumberCollection* numbers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetAuthOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetAuthOptions) */ {
 public:
  GetAuthOptions();
  virtual ~GetAuthOptions();

  GetAuthOptions(const GetAuthOptions& from);
  GetAuthOptions(GetAuthOptions&& from) noexcept
    : GetAuthOptions() {
    *this = ::std::move(from);
  }

  inline GetAuthOptions& operator=(const GetAuthOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthOptions& operator=(GetAuthOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAuthOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAuthOptions* internal_default_instance() {
    return reinterpret_cast<const GetAuthOptions*>(
               &_GetAuthOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetAuthOptions& a, GetAuthOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAuthOptions* New() const final {
    return CreateMaybeMessage<GetAuthOptions>(nullptr);
  }

  GetAuthOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAuthOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAuthOptions& from);
  void MergeFrom(const GetAuthOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAuthOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetAuthOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
  };
  // repeated string account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  const std::string& account_ids(int index) const;
  std::string* mutable_account_ids(int index);
  void set_account_ids(int index, const std::string& value);
  void set_account_ids(int index, std::string&& value);
  void set_account_ids(int index, const char* value);
  void set_account_ids(int index, const char* value, size_t size);
  std::string* add_account_ids();
  void add_account_ids(const std::string& value);
  void add_account_ids(std::string&& value);
  void add_account_ids(const char* value);
  void add_account_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_account_ids();
  private:
  const std::string& _internal_account_ids(int index) const;
  std::string* _internal_add_account_ids();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetAuthOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> account_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class Category :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.Category) */ {
 public:
  Category();
  virtual ~Category();

  Category(const Category& from);
  Category(Category&& from) noexcept
    : Category() {
    *this = ::std::move(from);
  }

  inline Category& operator=(const Category& from) {
    CopyFrom(from);
    return *this;
  }
  inline Category& operator=(Category&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Category& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Category* internal_default_instance() {
    return reinterpret_cast<const Category*>(
               &_Category_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Category& a, Category& b) {
    a.Swap(&b);
  }
  inline void Swap(Category* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Category* New() const final {
    return CreateMaybeMessage<Category>(nullptr);
  }

  Category* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Category>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Category& from);
  void MergeFrom(const Category& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Category* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.Category";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHierarchyFieldNumber = 3,
    kCategoryIdFieldNumber = 1,
    kGroupFieldNumber = 2,
  };
  // repeated string hierarchy = 3;
  int hierarchy_size() const;
  private:
  int _internal_hierarchy_size() const;
  public:
  void clear_hierarchy();
  const std::string& hierarchy(int index) const;
  std::string* mutable_hierarchy(int index);
  void set_hierarchy(int index, const std::string& value);
  void set_hierarchy(int index, std::string&& value);
  void set_hierarchy(int index, const char* value);
  void set_hierarchy(int index, const char* value, size_t size);
  std::string* add_hierarchy();
  void add_hierarchy(const std::string& value);
  void add_hierarchy(std::string&& value);
  void add_hierarchy(const char* value);
  void add_hierarchy(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hierarchy() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hierarchy();
  private:
  const std::string& _internal_hierarchy(int index) const;
  std::string* _internal_add_hierarchy();
  public:

  // string category_id = 1;
  void clear_category_id();
  const std::string& category_id() const;
  void set_category_id(const std::string& value);
  void set_category_id(std::string&& value);
  void set_category_id(const char* value);
  void set_category_id(const char* value, size_t size);
  std::string* mutable_category_id();
  std::string* release_category_id();
  void set_allocated_category_id(std::string* category_id);
  private:
  const std::string& _internal_category_id() const;
  void _internal_set_category_id(const std::string& value);
  std::string* _internal_mutable_category_id();
  public:

  // string group = 2;
  void clear_group();
  const std::string& group() const;
  void set_group(const std::string& value);
  void set_group(std::string&& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  std::string* mutable_group();
  std::string* release_group();
  void set_allocated_group(std::string* group);
  private:
  const std::string& _internal_group() const;
  void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // @@protoc_insertion_point(class_scope:plaid.Category)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hierarchy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetCategoriesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetCategoriesResponse) */ {
 public:
  GetCategoriesResponse();
  virtual ~GetCategoriesResponse();

  GetCategoriesResponse(const GetCategoriesResponse& from);
  GetCategoriesResponse(GetCategoriesResponse&& from) noexcept
    : GetCategoriesResponse() {
    *this = ::std::move(from);
  }

  inline GetCategoriesResponse& operator=(const GetCategoriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCategoriesResponse& operator=(GetCategoriesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCategoriesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCategoriesResponse* internal_default_instance() {
    return reinterpret_cast<const GetCategoriesResponse*>(
               &_GetCategoriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetCategoriesResponse& a, GetCategoriesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCategoriesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCategoriesResponse* New() const final {
    return CreateMaybeMessage<GetCategoriesResponse>(nullptr);
  }

  GetCategoriesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCategoriesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCategoriesResponse& from);
  void MergeFrom(const GetCategoriesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCategoriesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetCategoriesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoriesFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // repeated .plaid.Category categories = 2;
  int categories_size() const;
  private:
  int _internal_categories_size() const;
  public:
  void clear_categories();
  ::plaid::Category* mutable_categories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Category >*
      mutable_categories();
  private:
  const ::plaid::Category& _internal_categories(int index) const;
  ::plaid::Category* _internal_add_categories();
  public:
  const ::plaid::Category& categories(int index) const;
  ::plaid::Category* add_categories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Category >&
      categories() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetCategoriesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Category > categories_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class Error :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return CreateMaybeMessage<Error>(nullptr);
  }

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.Error";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrorTypeFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
    kErrorMessageFieldNumber = 4,
    kDisplayMessageFieldNumber = 5,
    kStatusCodeFieldNumber = 6,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string error_type = 2;
  void clear_error_type();
  const std::string& error_type() const;
  void set_error_type(const std::string& value);
  void set_error_type(std::string&& value);
  void set_error_type(const char* value);
  void set_error_type(const char* value, size_t size);
  std::string* mutable_error_type();
  std::string* release_error_type();
  void set_allocated_error_type(std::string* error_type);
  private:
  const std::string& _internal_error_type() const;
  void _internal_set_error_type(const std::string& value);
  std::string* _internal_mutable_error_type();
  public:

  // string error_code = 3;
  void clear_error_code();
  const std::string& error_code() const;
  void set_error_code(const std::string& value);
  void set_error_code(std::string&& value);
  void set_error_code(const char* value);
  void set_error_code(const char* value, size_t size);
  std::string* mutable_error_code();
  std::string* release_error_code();
  void set_allocated_error_code(std::string* error_code);
  private:
  const std::string& _internal_error_code() const;
  void _internal_set_error_code(const std::string& value);
  std::string* _internal_mutable_error_code();
  public:

  // string error_message = 4;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // string display_message = 5;
  void clear_display_message();
  const std::string& display_message() const;
  void set_display_message(const std::string& value);
  void set_display_message(std::string&& value);
  void set_display_message(const char* value);
  void set_display_message(const char* value, size_t size);
  std::string* mutable_display_message();
  std::string* release_display_message();
  void set_allocated_display_message(std::string* display_message);
  private:
  const std::string& _internal_display_message() const;
  void _internal_set_display_message(const std::string& value);
  std::string* _internal_mutable_display_message();
  public:

  // int64 status_code = 6;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int64 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.Error)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_message_;
  ::PROTOBUF_NAMESPACE_ID::int64 status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class Security :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.Security) */ {
 public:
  Security();
  virtual ~Security();

  Security(const Security& from);
  Security(Security&& from) noexcept
    : Security() {
    *this = ::std::move(from);
  }

  inline Security& operator=(const Security& from) {
    CopyFrom(from);
    return *this;
  }
  inline Security& operator=(Security&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Security& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Security* internal_default_instance() {
    return reinterpret_cast<const Security*>(
               &_Security_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Security& a, Security& b) {
    a.Swap(&b);
  }
  inline void Swap(Security* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Security* New() const final {
    return CreateMaybeMessage<Security>(nullptr);
  }

  Security* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Security>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Security& from);
  void MergeFrom(const Security& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Security* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.Security";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecurityIdFieldNumber = 1,
    kCusipFieldNumber = 2,
    kSedolFieldNumber = 3,
    kIsinFieldNumber = 4,
    kInstitutionSecurityIdFieldNumber = 5,
    kInstitutionIdFieldNumber = 6,
    kProxySecurityIdFieldNumber = 7,
    kNameFieldNumber = 8,
    kTickerSymbolFieldNumber = 9,
    kTypeFieldNumber = 11,
    kClosePriceAsOfFieldNumber = 13,
    kIsoCurrencyCodeFieldNumber = 14,
    kUnofficialCurrencyCodeFieldNumber = 15,
    kClosePriceFieldNumber = 12,
    kIsCashEquivalentFieldNumber = 10,
  };
  // string security_id = 1;
  void clear_security_id();
  const std::string& security_id() const;
  void set_security_id(const std::string& value);
  void set_security_id(std::string&& value);
  void set_security_id(const char* value);
  void set_security_id(const char* value, size_t size);
  std::string* mutable_security_id();
  std::string* release_security_id();
  void set_allocated_security_id(std::string* security_id);
  private:
  const std::string& _internal_security_id() const;
  void _internal_set_security_id(const std::string& value);
  std::string* _internal_mutable_security_id();
  public:

  // string cusip = 2;
  void clear_cusip();
  const std::string& cusip() const;
  void set_cusip(const std::string& value);
  void set_cusip(std::string&& value);
  void set_cusip(const char* value);
  void set_cusip(const char* value, size_t size);
  std::string* mutable_cusip();
  std::string* release_cusip();
  void set_allocated_cusip(std::string* cusip);
  private:
  const std::string& _internal_cusip() const;
  void _internal_set_cusip(const std::string& value);
  std::string* _internal_mutable_cusip();
  public:

  // string sedol = 3;
  void clear_sedol();
  const std::string& sedol() const;
  void set_sedol(const std::string& value);
  void set_sedol(std::string&& value);
  void set_sedol(const char* value);
  void set_sedol(const char* value, size_t size);
  std::string* mutable_sedol();
  std::string* release_sedol();
  void set_allocated_sedol(std::string* sedol);
  private:
  const std::string& _internal_sedol() const;
  void _internal_set_sedol(const std::string& value);
  std::string* _internal_mutable_sedol();
  public:

  // string isin = 4;
  void clear_isin();
  const std::string& isin() const;
  void set_isin(const std::string& value);
  void set_isin(std::string&& value);
  void set_isin(const char* value);
  void set_isin(const char* value, size_t size);
  std::string* mutable_isin();
  std::string* release_isin();
  void set_allocated_isin(std::string* isin);
  private:
  const std::string& _internal_isin() const;
  void _internal_set_isin(const std::string& value);
  std::string* _internal_mutable_isin();
  public:

  // string institution_security_id = 5;
  void clear_institution_security_id();
  const std::string& institution_security_id() const;
  void set_institution_security_id(const std::string& value);
  void set_institution_security_id(std::string&& value);
  void set_institution_security_id(const char* value);
  void set_institution_security_id(const char* value, size_t size);
  std::string* mutable_institution_security_id();
  std::string* release_institution_security_id();
  void set_allocated_institution_security_id(std::string* institution_security_id);
  private:
  const std::string& _internal_institution_security_id() const;
  void _internal_set_institution_security_id(const std::string& value);
  std::string* _internal_mutable_institution_security_id();
  public:

  // string institution_id = 6;
  void clear_institution_id();
  const std::string& institution_id() const;
  void set_institution_id(const std::string& value);
  void set_institution_id(std::string&& value);
  void set_institution_id(const char* value);
  void set_institution_id(const char* value, size_t size);
  std::string* mutable_institution_id();
  std::string* release_institution_id();
  void set_allocated_institution_id(std::string* institution_id);
  private:
  const std::string& _internal_institution_id() const;
  void _internal_set_institution_id(const std::string& value);
  std::string* _internal_mutable_institution_id();
  public:

  // string proxy_security_id = 7;
  void clear_proxy_security_id();
  const std::string& proxy_security_id() const;
  void set_proxy_security_id(const std::string& value);
  void set_proxy_security_id(std::string&& value);
  void set_proxy_security_id(const char* value);
  void set_proxy_security_id(const char* value, size_t size);
  std::string* mutable_proxy_security_id();
  std::string* release_proxy_security_id();
  void set_allocated_proxy_security_id(std::string* proxy_security_id);
  private:
  const std::string& _internal_proxy_security_id() const;
  void _internal_set_proxy_security_id(const std::string& value);
  std::string* _internal_mutable_proxy_security_id();
  public:

  // string name = 8;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ticker_symbol = 9;
  void clear_ticker_symbol();
  const std::string& ticker_symbol() const;
  void set_ticker_symbol(const std::string& value);
  void set_ticker_symbol(std::string&& value);
  void set_ticker_symbol(const char* value);
  void set_ticker_symbol(const char* value, size_t size);
  std::string* mutable_ticker_symbol();
  std::string* release_ticker_symbol();
  void set_allocated_ticker_symbol(std::string* ticker_symbol);
  private:
  const std::string& _internal_ticker_symbol() const;
  void _internal_set_ticker_symbol(const std::string& value);
  std::string* _internal_mutable_ticker_symbol();
  public:

  // string type = 11;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string close_price_as_of = 13;
  void clear_close_price_as_of();
  const std::string& close_price_as_of() const;
  void set_close_price_as_of(const std::string& value);
  void set_close_price_as_of(std::string&& value);
  void set_close_price_as_of(const char* value);
  void set_close_price_as_of(const char* value, size_t size);
  std::string* mutable_close_price_as_of();
  std::string* release_close_price_as_of();
  void set_allocated_close_price_as_of(std::string* close_price_as_of);
  private:
  const std::string& _internal_close_price_as_of() const;
  void _internal_set_close_price_as_of(const std::string& value);
  std::string* _internal_mutable_close_price_as_of();
  public:

  // string iso_currency_code = 14;
  void clear_iso_currency_code();
  const std::string& iso_currency_code() const;
  void set_iso_currency_code(const std::string& value);
  void set_iso_currency_code(std::string&& value);
  void set_iso_currency_code(const char* value);
  void set_iso_currency_code(const char* value, size_t size);
  std::string* mutable_iso_currency_code();
  std::string* release_iso_currency_code();
  void set_allocated_iso_currency_code(std::string* iso_currency_code);
  private:
  const std::string& _internal_iso_currency_code() const;
  void _internal_set_iso_currency_code(const std::string& value);
  std::string* _internal_mutable_iso_currency_code();
  public:

  // string unofficial_currency_code = 15;
  void clear_unofficial_currency_code();
  const std::string& unofficial_currency_code() const;
  void set_unofficial_currency_code(const std::string& value);
  void set_unofficial_currency_code(std::string&& value);
  void set_unofficial_currency_code(const char* value);
  void set_unofficial_currency_code(const char* value, size_t size);
  std::string* mutable_unofficial_currency_code();
  std::string* release_unofficial_currency_code();
  void set_allocated_unofficial_currency_code(std::string* unofficial_currency_code);
  private:
  const std::string& _internal_unofficial_currency_code() const;
  void _internal_set_unofficial_currency_code(const std::string& value);
  std::string* _internal_mutable_unofficial_currency_code();
  public:

  // double close_price = 12;
  void clear_close_price();
  double close_price() const;
  void set_close_price(double value);
  private:
  double _internal_close_price() const;
  void _internal_set_close_price(double value);
  public:

  // bool is_cash_equivalent = 10;
  void clear_is_cash_equivalent();
  bool is_cash_equivalent() const;
  void set_is_cash_equivalent(bool value);
  private:
  bool _internal_is_cash_equivalent() const;
  void _internal_set_is_cash_equivalent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.Security)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr security_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cusip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sedol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr institution_security_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr institution_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proxy_security_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticker_symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr close_price_as_of_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iso_currency_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unofficial_currency_code_;
  double close_price_;
  bool is_cash_equivalent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class Holding :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.Holding) */ {
 public:
  Holding();
  virtual ~Holding();

  Holding(const Holding& from);
  Holding(Holding&& from) noexcept
    : Holding() {
    *this = ::std::move(from);
  }

  inline Holding& operator=(const Holding& from) {
    CopyFrom(from);
    return *this;
  }
  inline Holding& operator=(Holding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Holding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Holding* internal_default_instance() {
    return reinterpret_cast<const Holding*>(
               &_Holding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Holding& a, Holding& b) {
    a.Swap(&b);
  }
  inline void Swap(Holding* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Holding* New() const final {
    return CreateMaybeMessage<Holding>(nullptr);
  }

  Holding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Holding>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Holding& from);
  void MergeFrom(const Holding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Holding* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.Holding";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kSecurityIdFieldNumber = 2,
    kInstitutionPriceAsOfFieldNumber = 6,
    kIsoCurrencyCodeFieldNumber = 8,
    kUnofficialCurrencyCodeFieldNumber = 9,
    kInstitutionValueFieldNumber = 3,
    kInstitutionPriceFieldNumber = 4,
    kQuantityFieldNumber = 5,
    kCostBasisFieldNumber = 7,
  };
  // string account_id = 1;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string security_id = 2;
  void clear_security_id();
  const std::string& security_id() const;
  void set_security_id(const std::string& value);
  void set_security_id(std::string&& value);
  void set_security_id(const char* value);
  void set_security_id(const char* value, size_t size);
  std::string* mutable_security_id();
  std::string* release_security_id();
  void set_allocated_security_id(std::string* security_id);
  private:
  const std::string& _internal_security_id() const;
  void _internal_set_security_id(const std::string& value);
  std::string* _internal_mutable_security_id();
  public:

  // string institution_price_as_of = 6;
  void clear_institution_price_as_of();
  const std::string& institution_price_as_of() const;
  void set_institution_price_as_of(const std::string& value);
  void set_institution_price_as_of(std::string&& value);
  void set_institution_price_as_of(const char* value);
  void set_institution_price_as_of(const char* value, size_t size);
  std::string* mutable_institution_price_as_of();
  std::string* release_institution_price_as_of();
  void set_allocated_institution_price_as_of(std::string* institution_price_as_of);
  private:
  const std::string& _internal_institution_price_as_of() const;
  void _internal_set_institution_price_as_of(const std::string& value);
  std::string* _internal_mutable_institution_price_as_of();
  public:

  // string iso_currency_code = 8;
  void clear_iso_currency_code();
  const std::string& iso_currency_code() const;
  void set_iso_currency_code(const std::string& value);
  void set_iso_currency_code(std::string&& value);
  void set_iso_currency_code(const char* value);
  void set_iso_currency_code(const char* value, size_t size);
  std::string* mutable_iso_currency_code();
  std::string* release_iso_currency_code();
  void set_allocated_iso_currency_code(std::string* iso_currency_code);
  private:
  const std::string& _internal_iso_currency_code() const;
  void _internal_set_iso_currency_code(const std::string& value);
  std::string* _internal_mutable_iso_currency_code();
  public:

  // string unofficial_currency_code = 9;
  void clear_unofficial_currency_code();
  const std::string& unofficial_currency_code() const;
  void set_unofficial_currency_code(const std::string& value);
  void set_unofficial_currency_code(std::string&& value);
  void set_unofficial_currency_code(const char* value);
  void set_unofficial_currency_code(const char* value, size_t size);
  std::string* mutable_unofficial_currency_code();
  std::string* release_unofficial_currency_code();
  void set_allocated_unofficial_currency_code(std::string* unofficial_currency_code);
  private:
  const std::string& _internal_unofficial_currency_code() const;
  void _internal_set_unofficial_currency_code(const std::string& value);
  std::string* _internal_mutable_unofficial_currency_code();
  public:

  // double institution_value = 3;
  void clear_institution_value();
  double institution_value() const;
  void set_institution_value(double value);
  private:
  double _internal_institution_value() const;
  void _internal_set_institution_value(double value);
  public:

  // double institution_price = 4;
  void clear_institution_price();
  double institution_price() const;
  void set_institution_price(double value);
  private:
  double _internal_institution_price() const;
  void _internal_set_institution_price(double value);
  public:

  // double quantity = 5;
  void clear_quantity();
  double quantity() const;
  void set_quantity(double value);
  private:
  double _internal_quantity() const;
  void _internal_set_quantity(double value);
  public:

  // double cost_basis = 7;
  void clear_cost_basis();
  double cost_basis() const;
  void set_cost_basis(double value);
  private:
  double _internal_cost_basis() const;
  void _internal_set_cost_basis(double value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.Holding)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr security_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr institution_price_as_of_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iso_currency_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unofficial_currency_code_;
  double institution_value_;
  double institution_price_;
  double quantity_;
  double cost_basis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetHoldingsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetHoldingsRequest) */ {
 public:
  GetHoldingsRequest();
  virtual ~GetHoldingsRequest();

  GetHoldingsRequest(const GetHoldingsRequest& from);
  GetHoldingsRequest(GetHoldingsRequest&& from) noexcept
    : GetHoldingsRequest() {
    *this = ::std::move(from);
  }

  inline GetHoldingsRequest& operator=(const GetHoldingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHoldingsRequest& operator=(GetHoldingsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHoldingsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHoldingsRequest* internal_default_instance() {
    return reinterpret_cast<const GetHoldingsRequest*>(
               &_GetHoldingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetHoldingsRequest& a, GetHoldingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHoldingsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHoldingsRequest* New() const final {
    return CreateMaybeMessage<GetHoldingsRequest>(nullptr);
  }

  GetHoldingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHoldingsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHoldingsRequest& from);
  void MergeFrom(const GetHoldingsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHoldingsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetHoldingsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
    kOptionsFieldNumber = 4,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // .plaid.GetHoldingsOptions options = 4;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::plaid::GetHoldingsOptions& options() const;
  ::plaid::GetHoldingsOptions* release_options();
  ::plaid::GetHoldingsOptions* mutable_options();
  void set_allocated_options(::plaid::GetHoldingsOptions* options);
  private:
  const ::plaid::GetHoldingsOptions& _internal_options() const;
  ::plaid::GetHoldingsOptions* _internal_mutable_options();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetHoldingsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::plaid::GetHoldingsOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetHoldingsOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetHoldingsOptions) */ {
 public:
  GetHoldingsOptions();
  virtual ~GetHoldingsOptions();

  GetHoldingsOptions(const GetHoldingsOptions& from);
  GetHoldingsOptions(GetHoldingsOptions&& from) noexcept
    : GetHoldingsOptions() {
    *this = ::std::move(from);
  }

  inline GetHoldingsOptions& operator=(const GetHoldingsOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHoldingsOptions& operator=(GetHoldingsOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHoldingsOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHoldingsOptions* internal_default_instance() {
    return reinterpret_cast<const GetHoldingsOptions*>(
               &_GetHoldingsOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetHoldingsOptions& a, GetHoldingsOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHoldingsOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHoldingsOptions* New() const final {
    return CreateMaybeMessage<GetHoldingsOptions>(nullptr);
  }

  GetHoldingsOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHoldingsOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHoldingsOptions& from);
  void MergeFrom(const GetHoldingsOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHoldingsOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetHoldingsOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
  };
  // repeated string account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  const std::string& account_ids(int index) const;
  std::string* mutable_account_ids(int index);
  void set_account_ids(int index, const std::string& value);
  void set_account_ids(int index, std::string&& value);
  void set_account_ids(int index, const char* value);
  void set_account_ids(int index, const char* value, size_t size);
  std::string* add_account_ids();
  void add_account_ids(const std::string& value);
  void add_account_ids(std::string&& value);
  void add_account_ids(const char* value);
  void add_account_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_account_ids();
  private:
  const std::string& _internal_account_ids(int index) const;
  std::string* _internal_add_account_ids();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetHoldingsOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> account_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetHoldingsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetHoldingsResponse) */ {
 public:
  GetHoldingsResponse();
  virtual ~GetHoldingsResponse();

  GetHoldingsResponse(const GetHoldingsResponse& from);
  GetHoldingsResponse(GetHoldingsResponse&& from) noexcept
    : GetHoldingsResponse() {
    *this = ::std::move(from);
  }

  inline GetHoldingsResponse& operator=(const GetHoldingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHoldingsResponse& operator=(GetHoldingsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHoldingsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHoldingsResponse* internal_default_instance() {
    return reinterpret_cast<const GetHoldingsResponse*>(
               &_GetHoldingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetHoldingsResponse& a, GetHoldingsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHoldingsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHoldingsResponse* New() const final {
    return CreateMaybeMessage<GetHoldingsResponse>(nullptr);
  }

  GetHoldingsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHoldingsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHoldingsResponse& from);
  void MergeFrom(const GetHoldingsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHoldingsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetHoldingsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 2,
    kSecuritiesFieldNumber = 4,
    kHoldingsFieldNumber = 5,
    kRequestIdFieldNumber = 1,
    kItemFieldNumber = 3,
  };
  // repeated .plaid.Account accounts = 2;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::plaid::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >*
      mutable_accounts();
  private:
  const ::plaid::Account& _internal_accounts(int index) const;
  ::plaid::Account* _internal_add_accounts();
  public:
  const ::plaid::Account& accounts(int index) const;
  ::plaid::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >&
      accounts() const;

  // repeated .plaid.Security securities = 4;
  int securities_size() const;
  private:
  int _internal_securities_size() const;
  public:
  void clear_securities();
  ::plaid::Security* mutable_securities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Security >*
      mutable_securities();
  private:
  const ::plaid::Security& _internal_securities(int index) const;
  ::plaid::Security* _internal_add_securities();
  public:
  const ::plaid::Security& securities(int index) const;
  ::plaid::Security* add_securities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Security >&
      securities() const;

  // repeated .plaid.Holding holdings = 5;
  int holdings_size() const;
  private:
  int _internal_holdings_size() const;
  public:
  void clear_holdings();
  ::plaid::Holding* mutable_holdings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Holding >*
      mutable_holdings();
  private:
  const ::plaid::Holding& _internal_holdings(int index) const;
  ::plaid::Holding* _internal_add_holdings();
  public:
  const ::plaid::Holding& holdings(int index) const;
  ::plaid::Holding* add_holdings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Holding >&
      holdings() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .plaid.Item item = 3;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::plaid::Item& item() const;
  ::plaid::Item* release_item();
  ::plaid::Item* mutable_item();
  void set_allocated_item(::plaid::Item* item);
  private:
  const ::plaid::Item& _internal_item() const;
  ::plaid::Item* _internal_mutable_item();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetHoldingsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account > accounts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Security > securities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Holding > holdings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::plaid::Item* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class Identity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.Identity) */ {
 public:
  Identity();
  virtual ~Identity();

  Identity(const Identity& from);
  Identity(Identity&& from) noexcept
    : Identity() {
    *this = ::std::move(from);
  }

  inline Identity& operator=(const Identity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identity& operator=(Identity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Identity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identity* internal_default_instance() {
    return reinterpret_cast<const Identity*>(
               &_Identity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(Identity& a, Identity& b) {
    a.Swap(&b);
  }
  inline void Swap(Identity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Identity* New() const final {
    return CreateMaybeMessage<Identity>(nullptr);
  }

  Identity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Identity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Identity& from);
  void MergeFrom(const Identity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.Identity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
    kEmailsFieldNumber = 2,
    kNamesFieldNumber = 3,
    kPhoneNumbersFieldNumber = 4,
  };
  // repeated .plaid.Address addresses = 1;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  ::plaid::Address* mutable_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Address >*
      mutable_addresses();
  private:
  const ::plaid::Address& _internal_addresses(int index) const;
  ::plaid::Address* _internal_add_addresses();
  public:
  const ::plaid::Address& addresses(int index) const;
  ::plaid::Address* add_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Address >&
      addresses() const;

  // repeated .plaid.Email emails = 2;
  int emails_size() const;
  private:
  int _internal_emails_size() const;
  public:
  void clear_emails();
  ::plaid::Email* mutable_emails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Email >*
      mutable_emails();
  private:
  const ::plaid::Email& _internal_emails(int index) const;
  ::plaid::Email* _internal_add_emails();
  public:
  const ::plaid::Email& emails(int index) const;
  ::plaid::Email* add_emails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Email >&
      emails() const;

  // repeated string names = 3;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // repeated .plaid.PhoneNumber phone_numbers = 4;
  int phone_numbers_size() const;
  private:
  int _internal_phone_numbers_size() const;
  public:
  void clear_phone_numbers();
  ::plaid::PhoneNumber* mutable_phone_numbers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::PhoneNumber >*
      mutable_phone_numbers();
  private:
  const ::plaid::PhoneNumber& _internal_phone_numbers(int index) const;
  ::plaid::PhoneNumber* _internal_add_phone_numbers();
  public:
  const ::plaid::PhoneNumber& phone_numbers(int index) const;
  ::plaid::PhoneNumber* add_phone_numbers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::PhoneNumber >&
      phone_numbers() const;

  // @@protoc_insertion_point(class_scope:plaid.Identity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Address > addresses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Email > emails_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::PhoneNumber > phone_numbers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class Address :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(nullptr);
  }

  Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.Address";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kPrimaryFieldNumber = 2,
  };
  // .plaid.AddressData data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::plaid::AddressData& data() const;
  ::plaid::AddressData* release_data();
  ::plaid::AddressData* mutable_data();
  void set_allocated_data(::plaid::AddressData* data);
  private:
  const ::plaid::AddressData& _internal_data() const;
  ::plaid::AddressData* _internal_mutable_data();
  public:

  // bool primary = 2;
  void clear_primary();
  bool primary() const;
  void set_primary(bool value);
  private:
  bool _internal_primary() const;
  void _internal_set_primary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.Address)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::plaid::AddressData* data_;
  bool primary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class AddressData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.AddressData) */ {
 public:
  AddressData();
  virtual ~AddressData();

  AddressData(const AddressData& from);
  AddressData(AddressData&& from) noexcept
    : AddressData() {
    *this = ::std::move(from);
  }

  inline AddressData& operator=(const AddressData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressData& operator=(AddressData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddressData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressData* internal_default_instance() {
    return reinterpret_cast<const AddressData*>(
               &_AddressData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(AddressData& a, AddressData& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddressData* New() const final {
    return CreateMaybeMessage<AddressData>(nullptr);
  }

  AddressData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddressData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddressData& from);
  void MergeFrom(const AddressData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.AddressData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCityFieldNumber = 1,
    kRegionFieldNumber = 2,
    kStreetFieldNumber = 3,
    kPostalCodeFieldNumber = 4,
    kCountryFieldNumber = 5,
  };
  // string city = 1;
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string region = 2;
  void clear_region();
  const std::string& region() const;
  void set_region(const std::string& value);
  void set_region(std::string&& value);
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  std::string* mutable_region();
  std::string* release_region();
  void set_allocated_region(std::string* region);
  private:
  const std::string& _internal_region() const;
  void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // string street = 3;
  void clear_street();
  const std::string& street() const;
  void set_street(const std::string& value);
  void set_street(std::string&& value);
  void set_street(const char* value);
  void set_street(const char* value, size_t size);
  std::string* mutable_street();
  std::string* release_street();
  void set_allocated_street(std::string* street);
  private:
  const std::string& _internal_street() const;
  void _internal_set_street(const std::string& value);
  std::string* _internal_mutable_street();
  public:

  // string postal_code = 4;
  void clear_postal_code();
  const std::string& postal_code() const;
  void set_postal_code(const std::string& value);
  void set_postal_code(std::string&& value);
  void set_postal_code(const char* value);
  void set_postal_code(const char* value, size_t size);
  std::string* mutable_postal_code();
  std::string* release_postal_code();
  void set_allocated_postal_code(std::string* postal_code);
  private:
  const std::string& _internal_postal_code() const;
  void _internal_set_postal_code(const std::string& value);
  std::string* _internal_mutable_postal_code();
  public:

  // string country = 5;
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // @@protoc_insertion_point(class_scope:plaid.AddressData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr street_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postal_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class Email :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.Email) */ {
 public:
  Email();
  virtual ~Email();

  Email(const Email& from);
  Email(Email&& from) noexcept
    : Email() {
    *this = ::std::move(from);
  }

  inline Email& operator=(const Email& from) {
    CopyFrom(from);
    return *this;
  }
  inline Email& operator=(Email&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Email& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Email* internal_default_instance() {
    return reinterpret_cast<const Email*>(
               &_Email_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(Email& a, Email& b) {
    a.Swap(&b);
  }
  inline void Swap(Email* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Email* New() const final {
    return CreateMaybeMessage<Email>(nullptr);
  }

  Email* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Email>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Email& from);
  void MergeFrom(const Email& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Email* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.Email";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kTypeFieldNumber = 3,
    kPrimaryFieldNumber = 2,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bool primary = 2;
  void clear_primary();
  bool primary() const;
  void set_primary(bool value);
  private:
  bool _internal_primary() const;
  void _internal_set_primary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.Email)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  bool primary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class PhoneNumber :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.PhoneNumber) */ {
 public:
  PhoneNumber();
  virtual ~PhoneNumber();

  PhoneNumber(const PhoneNumber& from);
  PhoneNumber(PhoneNumber&& from) noexcept
    : PhoneNumber() {
    *this = ::std::move(from);
  }

  inline PhoneNumber& operator=(const PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneNumber& operator=(PhoneNumber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhoneNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneNumber* internal_default_instance() {
    return reinterpret_cast<const PhoneNumber*>(
               &_PhoneNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(PhoneNumber& a, PhoneNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(PhoneNumber* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhoneNumber* New() const final {
    return CreateMaybeMessage<PhoneNumber>(nullptr);
  }

  PhoneNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhoneNumber>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhoneNumber& from);
  void MergeFrom(const PhoneNumber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhoneNumber* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.PhoneNumber";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kDataFieldNumber = 3,
    kPrimaryFieldNumber = 1,
  };
  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bool primary = 1;
  void clear_primary();
  bool primary() const;
  void set_primary(bool value);
  private:
  bool _internal_primary() const;
  void _internal_set_primary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.PhoneNumber)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  bool primary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetIdentityRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetIdentityRequest) */ {
 public:
  GetIdentityRequest();
  virtual ~GetIdentityRequest();

  GetIdentityRequest(const GetIdentityRequest& from);
  GetIdentityRequest(GetIdentityRequest&& from) noexcept
    : GetIdentityRequest() {
    *this = ::std::move(from);
  }

  inline GetIdentityRequest& operator=(const GetIdentityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentityRequest& operator=(GetIdentityRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdentityRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdentityRequest* internal_default_instance() {
    return reinterpret_cast<const GetIdentityRequest*>(
               &_GetIdentityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GetIdentityRequest& a, GetIdentityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentityRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentityRequest* New() const final {
    return CreateMaybeMessage<GetIdentityRequest>(nullptr);
  }

  GetIdentityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentityRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentityRequest& from);
  void MergeFrom(const GetIdentityRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentityRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetIdentityRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetIdentityRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class AccountWithOwners :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.AccountWithOwners) */ {
 public:
  AccountWithOwners();
  virtual ~AccountWithOwners();

  AccountWithOwners(const AccountWithOwners& from);
  AccountWithOwners(AccountWithOwners&& from) noexcept
    : AccountWithOwners() {
    *this = ::std::move(from);
  }

  inline AccountWithOwners& operator=(const AccountWithOwners& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountWithOwners& operator=(AccountWithOwners&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountWithOwners& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountWithOwners* internal_default_instance() {
    return reinterpret_cast<const AccountWithOwners*>(
               &_AccountWithOwners_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(AccountWithOwners& a, AccountWithOwners& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountWithOwners* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountWithOwners* New() const final {
    return CreateMaybeMessage<AccountWithOwners>(nullptr);
  }

  AccountWithOwners* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountWithOwners>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountWithOwners& from);
  void MergeFrom(const AccountWithOwners& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountWithOwners* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.AccountWithOwners";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnersFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kMaskFieldNumber = 4,
    kNameFieldNumber = 5,
    kOfficialNameFieldNumber = 6,
    kSubtypeFieldNumber = 7,
    kTypeFieldNumber = 8,
    kVerificationStatusFieldNumber = 9,
    kBalancesFieldNumber = 3,
  };
  // repeated .plaid.Identity owners = 1;
  int owners_size() const;
  private:
  int _internal_owners_size() const;
  public:
  void clear_owners();
  ::plaid::Identity* mutable_owners(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Identity >*
      mutable_owners();
  private:
  const ::plaid::Identity& _internal_owners(int index) const;
  ::plaid::Identity* _internal_add_owners();
  public:
  const ::plaid::Identity& owners(int index) const;
  ::plaid::Identity* add_owners();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Identity >&
      owners() const;

  // string account_id = 2;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string mask = 4;
  void clear_mask();
  const std::string& mask() const;
  void set_mask(const std::string& value);
  void set_mask(std::string&& value);
  void set_mask(const char* value);
  void set_mask(const char* value, size_t size);
  std::string* mutable_mask();
  std::string* release_mask();
  void set_allocated_mask(std::string* mask);
  private:
  const std::string& _internal_mask() const;
  void _internal_set_mask(const std::string& value);
  std::string* _internal_mutable_mask();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string official_name = 6;
  void clear_official_name();
  const std::string& official_name() const;
  void set_official_name(const std::string& value);
  void set_official_name(std::string&& value);
  void set_official_name(const char* value);
  void set_official_name(const char* value, size_t size);
  std::string* mutable_official_name();
  std::string* release_official_name();
  void set_allocated_official_name(std::string* official_name);
  private:
  const std::string& _internal_official_name() const;
  void _internal_set_official_name(const std::string& value);
  std::string* _internal_mutable_official_name();
  public:

  // string subtype = 7;
  void clear_subtype();
  const std::string& subtype() const;
  void set_subtype(const std::string& value);
  void set_subtype(std::string&& value);
  void set_subtype(const char* value);
  void set_subtype(const char* value, size_t size);
  std::string* mutable_subtype();
  std::string* release_subtype();
  void set_allocated_subtype(std::string* subtype);
  private:
  const std::string& _internal_subtype() const;
  void _internal_set_subtype(const std::string& value);
  std::string* _internal_mutable_subtype();
  public:

  // string type = 8;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string verification_status = 9;
  void clear_verification_status();
  const std::string& verification_status() const;
  void set_verification_status(const std::string& value);
  void set_verification_status(std::string&& value);
  void set_verification_status(const char* value);
  void set_verification_status(const char* value, size_t size);
  std::string* mutable_verification_status();
  std::string* release_verification_status();
  void set_allocated_verification_status(std::string* verification_status);
  private:
  const std::string& _internal_verification_status() const;
  void _internal_set_verification_status(const std::string& value);
  std::string* _internal_mutable_verification_status();
  public:

  // .plaid.AccountBalances balances = 3;
  bool has_balances() const;
  private:
  bool _internal_has_balances() const;
  public:
  void clear_balances();
  const ::plaid::AccountBalances& balances() const;
  ::plaid::AccountBalances* release_balances();
  ::plaid::AccountBalances* mutable_balances();
  void set_allocated_balances(::plaid::AccountBalances* balances);
  private:
  const ::plaid::AccountBalances& _internal_balances() const;
  ::plaid::AccountBalances* _internal_mutable_balances();
  public:

  // @@protoc_insertion_point(class_scope:plaid.AccountWithOwners)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Identity > owners_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mask_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr official_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verification_status_;
  ::plaid::AccountBalances* balances_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetIdentityResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetIdentityResponse) */ {
 public:
  GetIdentityResponse();
  virtual ~GetIdentityResponse();

  GetIdentityResponse(const GetIdentityResponse& from);
  GetIdentityResponse(GetIdentityResponse&& from) noexcept
    : GetIdentityResponse() {
    *this = ::std::move(from);
  }

  inline GetIdentityResponse& operator=(const GetIdentityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentityResponse& operator=(GetIdentityResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIdentityResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdentityResponse* internal_default_instance() {
    return reinterpret_cast<const GetIdentityResponse*>(
               &_GetIdentityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GetIdentityResponse& a, GetIdentityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentityResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentityResponse* New() const final {
    return CreateMaybeMessage<GetIdentityResponse>(nullptr);
  }

  GetIdentityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentityResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentityResponse& from);
  void MergeFrom(const GetIdentityResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentityResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetIdentityResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 2,
    kRequestIdFieldNumber = 1,
    kItemFieldNumber = 3,
  };
  // repeated .plaid.AccountWithOwners accounts = 2;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::plaid::AccountWithOwners* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::AccountWithOwners >*
      mutable_accounts();
  private:
  const ::plaid::AccountWithOwners& _internal_accounts(int index) const;
  ::plaid::AccountWithOwners* _internal_add_accounts();
  public:
  const ::plaid::AccountWithOwners& accounts(int index) const;
  ::plaid::AccountWithOwners* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::AccountWithOwners >&
      accounts() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .plaid.Item item = 3;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::plaid::Item& item() const;
  ::plaid::Item* release_item();
  ::plaid::Item* mutable_item();
  void set_allocated_item(::plaid::Item* item);
  private:
  const ::plaid::Item& _internal_item() const;
  ::plaid::Item* _internal_mutable_item();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetIdentityResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::AccountWithOwners > accounts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::plaid::Item* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class Income :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.Income) */ {
 public:
  Income();
  virtual ~Income();

  Income(const Income& from);
  Income(Income&& from) noexcept
    : Income() {
    *this = ::std::move(from);
  }

  inline Income& operator=(const Income& from) {
    CopyFrom(from);
    return *this;
  }
  inline Income& operator=(Income&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Income& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Income* internal_default_instance() {
    return reinterpret_cast<const Income*>(
               &_Income_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Income& a, Income& b) {
    a.Swap(&b);
  }
  inline void Swap(Income* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Income* New() const final {
    return CreateMaybeMessage<Income>(nullptr);
  }

  Income* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Income>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Income& from);
  void MergeFrom(const Income& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Income* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.Income";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncomeStreamsFieldNumber = 1,
    kLastYearIncomeFieldNumber = 2,
    kLastYearIncomeBeforeTaxFieldNumber = 3,
    kProjectedYearlyIncomeFieldNumber = 4,
    kProjectedYearlyIncomeBeforeTaxFieldNumber = 5,
    kMaxNumberOfOverlappingIncomeStreamsFieldNumber = 6,
    kNumberOfIncomeStreamsFieldNumber = 7,
  };
  // repeated .plaid.IncomeStream income_streams = 1;
  int income_streams_size() const;
  private:
  int _internal_income_streams_size() const;
  public:
  void clear_income_streams();
  ::plaid::IncomeStream* mutable_income_streams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::IncomeStream >*
      mutable_income_streams();
  private:
  const ::plaid::IncomeStream& _internal_income_streams(int index) const;
  ::plaid::IncomeStream* _internal_add_income_streams();
  public:
  const ::plaid::IncomeStream& income_streams(int index) const;
  ::plaid::IncomeStream* add_income_streams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::IncomeStream >&
      income_streams() const;

  // int64 last_year_income = 2;
  void clear_last_year_income();
  ::PROTOBUF_NAMESPACE_ID::int64 last_year_income() const;
  void set_last_year_income(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_year_income() const;
  void _internal_set_last_year_income(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 last_year_income_before_tax = 3;
  void clear_last_year_income_before_tax();
  ::PROTOBUF_NAMESPACE_ID::int64 last_year_income_before_tax() const;
  void set_last_year_income_before_tax(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_year_income_before_tax() const;
  void _internal_set_last_year_income_before_tax(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 projected_yearly_income = 4;
  void clear_projected_yearly_income();
  ::PROTOBUF_NAMESPACE_ID::int64 projected_yearly_income() const;
  void set_projected_yearly_income(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_projected_yearly_income() const;
  void _internal_set_projected_yearly_income(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 projected_yearly_income_before_tax = 5;
  void clear_projected_yearly_income_before_tax();
  ::PROTOBUF_NAMESPACE_ID::int64 projected_yearly_income_before_tax() const;
  void set_projected_yearly_income_before_tax(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_projected_yearly_income_before_tax() const;
  void _internal_set_projected_yearly_income_before_tax(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_number_of_overlapping_income_streams = 6;
  void clear_max_number_of_overlapping_income_streams();
  ::PROTOBUF_NAMESPACE_ID::int64 max_number_of_overlapping_income_streams() const;
  void set_max_number_of_overlapping_income_streams(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_number_of_overlapping_income_streams() const;
  void _internal_set_max_number_of_overlapping_income_streams(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 number_of_income_streams = 7;
  void clear_number_of_income_streams();
  ::PROTOBUF_NAMESPACE_ID::int64 number_of_income_streams() const;
  void set_number_of_income_streams(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_number_of_income_streams() const;
  void _internal_set_number_of_income_streams(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.Income)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::IncomeStream > income_streams_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_year_income_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_year_income_before_tax_;
  ::PROTOBUF_NAMESPACE_ID::int64 projected_yearly_income_;
  ::PROTOBUF_NAMESPACE_ID::int64 projected_yearly_income_before_tax_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_number_of_overlapping_income_streams_;
  ::PROTOBUF_NAMESPACE_ID::int64 number_of_income_streams_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class IncomeStream :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.IncomeStream) */ {
 public:
  IncomeStream();
  virtual ~IncomeStream();

  IncomeStream(const IncomeStream& from);
  IncomeStream(IncomeStream&& from) noexcept
    : IncomeStream() {
    *this = ::std::move(from);
  }

  inline IncomeStream& operator=(const IncomeStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncomeStream& operator=(IncomeStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IncomeStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncomeStream* internal_default_instance() {
    return reinterpret_cast<const IncomeStream*>(
               &_IncomeStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(IncomeStream& a, IncomeStream& b) {
    a.Swap(&b);
  }
  inline void Swap(IncomeStream* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncomeStream* New() const final {
    return CreateMaybeMessage<IncomeStream>(nullptr);
  }

  IncomeStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncomeStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IncomeStream& from);
  void MergeFrom(const IncomeStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncomeStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.IncomeStream";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kConfidenceFieldNumber = 1,
    kDaysFieldNumber = 2,
    kMonthlyIncomeFieldNumber = 3,
  };
  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double confidence = 1;
  void clear_confidence();
  double confidence() const;
  void set_confidence(double value);
  private:
  double _internal_confidence() const;
  void _internal_set_confidence(double value);
  public:

  // int64 days = 2;
  void clear_days();
  ::PROTOBUF_NAMESPACE_ID::int64 days() const;
  void set_days(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_days() const;
  void _internal_set_days(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 monthly_income = 3;
  void clear_monthly_income();
  ::PROTOBUF_NAMESPACE_ID::int64 monthly_income() const;
  void set_monthly_income(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_monthly_income() const;
  void _internal_set_monthly_income(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.IncomeStream)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double confidence_;
  ::PROTOBUF_NAMESPACE_ID::int64 days_;
  ::PROTOBUF_NAMESPACE_ID::int64 monthly_income_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetIncomeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetIncomeRequest) */ {
 public:
  GetIncomeRequest();
  virtual ~GetIncomeRequest();

  GetIncomeRequest(const GetIncomeRequest& from);
  GetIncomeRequest(GetIncomeRequest&& from) noexcept
    : GetIncomeRequest() {
    *this = ::std::move(from);
  }

  inline GetIncomeRequest& operator=(const GetIncomeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIncomeRequest& operator=(GetIncomeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIncomeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIncomeRequest* internal_default_instance() {
    return reinterpret_cast<const GetIncomeRequest*>(
               &_GetIncomeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GetIncomeRequest& a, GetIncomeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIncomeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIncomeRequest* New() const final {
    return CreateMaybeMessage<GetIncomeRequest>(nullptr);
  }

  GetIncomeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIncomeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIncomeRequest& from);
  void MergeFrom(const GetIncomeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIncomeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetIncomeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetIncomeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetIncomeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetIncomeResponse) */ {
 public:
  GetIncomeResponse();
  virtual ~GetIncomeResponse();

  GetIncomeResponse(const GetIncomeResponse& from);
  GetIncomeResponse(GetIncomeResponse&& from) noexcept
    : GetIncomeResponse() {
    *this = ::std::move(from);
  }

  inline GetIncomeResponse& operator=(const GetIncomeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIncomeResponse& operator=(GetIncomeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIncomeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIncomeResponse* internal_default_instance() {
    return reinterpret_cast<const GetIncomeResponse*>(
               &_GetIncomeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GetIncomeResponse& a, GetIncomeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIncomeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIncomeResponse* New() const final {
    return CreateMaybeMessage<GetIncomeResponse>(nullptr);
  }

  GetIncomeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIncomeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIncomeResponse& from);
  void MergeFrom(const GetIncomeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIncomeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetIncomeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kIncomeFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .plaid.Income income = 2;
  bool has_income() const;
  private:
  bool _internal_has_income() const;
  public:
  void clear_income();
  const ::plaid::Income& income() const;
  ::plaid::Income* release_income();
  ::plaid::Income* mutable_income();
  void set_allocated_income(::plaid::Income* income);
  private:
  const ::plaid::Income& _internal_income() const;
  ::plaid::Income* _internal_mutable_income();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetIncomeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::plaid::Income* income_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class Institution :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.Institution) */ {
 public:
  Institution();
  virtual ~Institution();

  Institution(const Institution& from);
  Institution(Institution&& from) noexcept
    : Institution() {
    *this = ::std::move(from);
  }

  inline Institution& operator=(const Institution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Institution& operator=(Institution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Institution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Institution* internal_default_instance() {
    return reinterpret_cast<const Institution*>(
               &_Institution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(Institution& a, Institution& b) {
    a.Swap(&b);
  }
  inline void Swap(Institution* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Institution* New() const final {
    return CreateMaybeMessage<Institution>(nullptr);
  }

  Institution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Institution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Institution& from);
  void MergeFrom(const Institution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Institution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.Institution";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCredentialsFieldNumber = 1,
    kMfaFieldNumber = 4,
    kProductsFieldNumber = 6,
    kCountryCodesFieldNumber = 7,
    kInstitutionIdFieldNumber = 3,
    kNameFieldNumber = 5,
    kPrimaryColorFieldNumber = 9,
    kUrlFieldNumber = 10,
    kLogoFieldNumber = 11,
    kStatusFieldNumber = 8,
    kHasMfaFieldNumber = 2,
  };
  // repeated .plaid.Credential credentials = 1;
  int credentials_size() const;
  private:
  int _internal_credentials_size() const;
  public:
  void clear_credentials();
  ::plaid::Credential* mutable_credentials(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Credential >*
      mutable_credentials();
  private:
  const ::plaid::Credential& _internal_credentials(int index) const;
  ::plaid::Credential* _internal_add_credentials();
  public:
  const ::plaid::Credential& credentials(int index) const;
  ::plaid::Credential* add_credentials();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Credential >&
      credentials() const;

  // repeated string mfa = 4;
  int mfa_size() const;
  private:
  int _internal_mfa_size() const;
  public:
  void clear_mfa();
  const std::string& mfa(int index) const;
  std::string* mutable_mfa(int index);
  void set_mfa(int index, const std::string& value);
  void set_mfa(int index, std::string&& value);
  void set_mfa(int index, const char* value);
  void set_mfa(int index, const char* value, size_t size);
  std::string* add_mfa();
  void add_mfa(const std::string& value);
  void add_mfa(std::string&& value);
  void add_mfa(const char* value);
  void add_mfa(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mfa() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mfa();
  private:
  const std::string& _internal_mfa(int index) const;
  std::string* _internal_add_mfa();
  public:

  // repeated string products = 6;
  int products_size() const;
  private:
  int _internal_products_size() const;
  public:
  void clear_products();
  const std::string& products(int index) const;
  std::string* mutable_products(int index);
  void set_products(int index, const std::string& value);
  void set_products(int index, std::string&& value);
  void set_products(int index, const char* value);
  void set_products(int index, const char* value, size_t size);
  std::string* add_products();
  void add_products(const std::string& value);
  void add_products(std::string&& value);
  void add_products(const char* value);
  void add_products(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& products() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_products();
  private:
  const std::string& _internal_products(int index) const;
  std::string* _internal_add_products();
  public:

  // repeated string country_codes = 7;
  int country_codes_size() const;
  private:
  int _internal_country_codes_size() const;
  public:
  void clear_country_codes();
  const std::string& country_codes(int index) const;
  std::string* mutable_country_codes(int index);
  void set_country_codes(int index, const std::string& value);
  void set_country_codes(int index, std::string&& value);
  void set_country_codes(int index, const char* value);
  void set_country_codes(int index, const char* value, size_t size);
  std::string* add_country_codes();
  void add_country_codes(const std::string& value);
  void add_country_codes(std::string&& value);
  void add_country_codes(const char* value);
  void add_country_codes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& country_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_country_codes();
  private:
  const std::string& _internal_country_codes(int index) const;
  std::string* _internal_add_country_codes();
  public:

  // string institution_id = 3;
  void clear_institution_id();
  const std::string& institution_id() const;
  void set_institution_id(const std::string& value);
  void set_institution_id(std::string&& value);
  void set_institution_id(const char* value);
  void set_institution_id(const char* value, size_t size);
  std::string* mutable_institution_id();
  std::string* release_institution_id();
  void set_allocated_institution_id(std::string* institution_id);
  private:
  const std::string& _internal_institution_id() const;
  void _internal_set_institution_id(const std::string& value);
  std::string* _internal_mutable_institution_id();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string primary_color = 9;
  void clear_primary_color();
  const std::string& primary_color() const;
  void set_primary_color(const std::string& value);
  void set_primary_color(std::string&& value);
  void set_primary_color(const char* value);
  void set_primary_color(const char* value, size_t size);
  std::string* mutable_primary_color();
  std::string* release_primary_color();
  void set_allocated_primary_color(std::string* primary_color);
  private:
  const std::string& _internal_primary_color() const;
  void _internal_set_primary_color(const std::string& value);
  std::string* _internal_mutable_primary_color();
  public:

  // string url = 10;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string logo = 11;
  void clear_logo();
  const std::string& logo() const;
  void set_logo(const std::string& value);
  void set_logo(std::string&& value);
  void set_logo(const char* value);
  void set_logo(const char* value, size_t size);
  std::string* mutable_logo();
  std::string* release_logo();
  void set_allocated_logo(std::string* logo);
  private:
  const std::string& _internal_logo() const;
  void _internal_set_logo(const std::string& value);
  std::string* _internal_mutable_logo();
  public:

  // .plaid.InstitutionStatus status = 8;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::plaid::InstitutionStatus& status() const;
  ::plaid::InstitutionStatus* release_status();
  ::plaid::InstitutionStatus* mutable_status();
  void set_allocated_status(::plaid::InstitutionStatus* status);
  private:
  const ::plaid::InstitutionStatus& _internal_status() const;
  ::plaid::InstitutionStatus* _internal_mutable_status();
  public:

  // bool has_mfa = 2;
  void clear_has_mfa();
  bool has_mfa() const;
  void set_has_mfa(bool value);
  private:
  bool _internal_has_mfa() const;
  void _internal_set_has_mfa(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.Institution)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Credential > credentials_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mfa_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> products_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> country_codes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr institution_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_;
  ::plaid::InstitutionStatus* status_;
  bool has_mfa_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class InstitutionStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.InstitutionStatus) */ {
 public:
  InstitutionStatus();
  virtual ~InstitutionStatus();

  InstitutionStatus(const InstitutionStatus& from);
  InstitutionStatus(InstitutionStatus&& from) noexcept
    : InstitutionStatus() {
    *this = ::std::move(from);
  }

  inline InstitutionStatus& operator=(const InstitutionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstitutionStatus& operator=(InstitutionStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstitutionStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstitutionStatus* internal_default_instance() {
    return reinterpret_cast<const InstitutionStatus*>(
               &_InstitutionStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(InstitutionStatus& a, InstitutionStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(InstitutionStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstitutionStatus* New() const final {
    return CreateMaybeMessage<InstitutionStatus>(nullptr);
  }

  InstitutionStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstitutionStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstitutionStatus& from);
  void MergeFrom(const InstitutionStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstitutionStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.InstitutionStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemLoginsFieldNumber = 1,
  };
  // .plaid.ItemLogins item_logins = 1;
  bool has_item_logins() const;
  private:
  bool _internal_has_item_logins() const;
  public:
  void clear_item_logins();
  const ::plaid::ItemLogins& item_logins() const;
  ::plaid::ItemLogins* release_item_logins();
  ::plaid::ItemLogins* mutable_item_logins();
  void set_allocated_item_logins(::plaid::ItemLogins* item_logins);
  private:
  const ::plaid::ItemLogins& _internal_item_logins() const;
  ::plaid::ItemLogins* _internal_mutable_item_logins();
  public:

  // @@protoc_insertion_point(class_scope:plaid.InstitutionStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::plaid::ItemLogins* item_logins_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class ItemLogins :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.ItemLogins) */ {
 public:
  ItemLogins();
  virtual ~ItemLogins();

  ItemLogins(const ItemLogins& from);
  ItemLogins(ItemLogins&& from) noexcept
    : ItemLogins() {
    *this = ::std::move(from);
  }

  inline ItemLogins& operator=(const ItemLogins& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemLogins& operator=(ItemLogins&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemLogins& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemLogins* internal_default_instance() {
    return reinterpret_cast<const ItemLogins*>(
               &_ItemLogins_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ItemLogins& a, ItemLogins& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemLogins* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemLogins* New() const final {
    return CreateMaybeMessage<ItemLogins>(nullptr);
  }

  ItemLogins* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemLogins>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemLogins& from);
  void MergeFrom(const ItemLogins& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemLogins* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.ItemLogins";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kLastStatusChangeFieldNumber = 2,
    kBreakdownFieldNumber = 3,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string last_status_change = 2;
  void clear_last_status_change();
  const std::string& last_status_change() const;
  void set_last_status_change(const std::string& value);
  void set_last_status_change(std::string&& value);
  void set_last_status_change(const char* value);
  void set_last_status_change(const char* value, size_t size);
  std::string* mutable_last_status_change();
  std::string* release_last_status_change();
  void set_allocated_last_status_change(std::string* last_status_change);
  private:
  const std::string& _internal_last_status_change() const;
  void _internal_set_last_status_change(const std::string& value);
  std::string* _internal_mutable_last_status_change();
  public:

  // .plaid.InstitutionStatusBreakdown breakdown = 3;
  bool has_breakdown() const;
  private:
  bool _internal_has_breakdown() const;
  public:
  void clear_breakdown();
  const ::plaid::InstitutionStatusBreakdown& breakdown() const;
  ::plaid::InstitutionStatusBreakdown* release_breakdown();
  ::plaid::InstitutionStatusBreakdown* mutable_breakdown();
  void set_allocated_breakdown(::plaid::InstitutionStatusBreakdown* breakdown);
  private:
  const ::plaid::InstitutionStatusBreakdown& _internal_breakdown() const;
  ::plaid::InstitutionStatusBreakdown* _internal_mutable_breakdown();
  public:

  // @@protoc_insertion_point(class_scope:plaid.ItemLogins)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_status_change_;
  ::plaid::InstitutionStatusBreakdown* breakdown_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class InstitutionStatusBreakdown :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.InstitutionStatusBreakdown) */ {
 public:
  InstitutionStatusBreakdown();
  virtual ~InstitutionStatusBreakdown();

  InstitutionStatusBreakdown(const InstitutionStatusBreakdown& from);
  InstitutionStatusBreakdown(InstitutionStatusBreakdown&& from) noexcept
    : InstitutionStatusBreakdown() {
    *this = ::std::move(from);
  }

  inline InstitutionStatusBreakdown& operator=(const InstitutionStatusBreakdown& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstitutionStatusBreakdown& operator=(InstitutionStatusBreakdown&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstitutionStatusBreakdown& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstitutionStatusBreakdown* internal_default_instance() {
    return reinterpret_cast<const InstitutionStatusBreakdown*>(
               &_InstitutionStatusBreakdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(InstitutionStatusBreakdown& a, InstitutionStatusBreakdown& b) {
    a.Swap(&b);
  }
  inline void Swap(InstitutionStatusBreakdown* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstitutionStatusBreakdown* New() const final {
    return CreateMaybeMessage<InstitutionStatusBreakdown>(nullptr);
  }

  InstitutionStatusBreakdown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstitutionStatusBreakdown>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstitutionStatusBreakdown& from);
  void MergeFrom(const InstitutionStatusBreakdown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstitutionStatusBreakdown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.InstitutionStatusBreakdown";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kErrorPlaidFieldNumber = 2,
    kErrorInstitutionFieldNumber = 3,
  };
  // double success = 1;
  void clear_success();
  double success() const;
  void set_success(double value);
  private:
  double _internal_success() const;
  void _internal_set_success(double value);
  public:

  // double error_plaid = 2;
  void clear_error_plaid();
  double error_plaid() const;
  void set_error_plaid(double value);
  private:
  double _internal_error_plaid() const;
  void _internal_set_error_plaid(double value);
  public:

  // double error_institution = 3;
  void clear_error_institution();
  double error_institution() const;
  void set_error_institution(double value);
  private:
  double _internal_error_institution() const;
  void _internal_set_error_institution(double value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.InstitutionStatusBreakdown)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double success_;
  double error_plaid_;
  double error_institution_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class Credential :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.Credential) */ {
 public:
  Credential();
  virtual ~Credential();

  Credential(const Credential& from);
  Credential(Credential&& from) noexcept
    : Credential() {
    *this = ::std::move(from);
  }

  inline Credential& operator=(const Credential& from) {
    CopyFrom(from);
    return *this;
  }
  inline Credential& operator=(Credential&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Credential& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Credential* internal_default_instance() {
    return reinterpret_cast<const Credential*>(
               &_Credential_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(Credential& a, Credential& b) {
    a.Swap(&b);
  }
  inline void Swap(Credential* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Credential* New() const final {
    return CreateMaybeMessage<Credential>(nullptr);
  }

  Credential* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Credential>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Credential& from);
  void MergeFrom(const Credential& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Credential* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.Credential";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:plaid.Credential)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetInstitutionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetInstitutionsRequest) */ {
 public:
  GetInstitutionsRequest();
  virtual ~GetInstitutionsRequest();

  GetInstitutionsRequest(const GetInstitutionsRequest& from);
  GetInstitutionsRequest(GetInstitutionsRequest&& from) noexcept
    : GetInstitutionsRequest() {
    *this = ::std::move(from);
  }

  inline GetInstitutionsRequest& operator=(const GetInstitutionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInstitutionsRequest& operator=(GetInstitutionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInstitutionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInstitutionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetInstitutionsRequest*>(
               &_GetInstitutionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GetInstitutionsRequest& a, GetInstitutionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInstitutionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInstitutionsRequest* New() const final {
    return CreateMaybeMessage<GetInstitutionsRequest>(nullptr);
  }

  GetInstitutionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInstitutionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInstitutionsRequest& from);
  void MergeFrom(const GetInstitutionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInstitutionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetInstitutionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kOptionsFieldNumber = 5,
    kCountFieldNumber = 3,
    kOffsetFieldNumber = 4,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // .plaid.GetInstitutionsOptions options = 5;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::plaid::GetInstitutionsOptions& options() const;
  ::plaid::GetInstitutionsOptions* release_options();
  ::plaid::GetInstitutionsOptions* mutable_options();
  void set_allocated_options(::plaid::GetInstitutionsOptions* options);
  private:
  const ::plaid::GetInstitutionsOptions& _internal_options() const;
  ::plaid::GetInstitutionsOptions* _internal_mutable_options();
  public:

  // int64 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offset = 4;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetInstitutionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::plaid::GetInstitutionsOptions* options_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetInstitutionsOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetInstitutionsOptions) */ {
 public:
  GetInstitutionsOptions();
  virtual ~GetInstitutionsOptions();

  GetInstitutionsOptions(const GetInstitutionsOptions& from);
  GetInstitutionsOptions(GetInstitutionsOptions&& from) noexcept
    : GetInstitutionsOptions() {
    *this = ::std::move(from);
  }

  inline GetInstitutionsOptions& operator=(const GetInstitutionsOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInstitutionsOptions& operator=(GetInstitutionsOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInstitutionsOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInstitutionsOptions* internal_default_instance() {
    return reinterpret_cast<const GetInstitutionsOptions*>(
               &_GetInstitutionsOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetInstitutionsOptions& a, GetInstitutionsOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInstitutionsOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInstitutionsOptions* New() const final {
    return CreateMaybeMessage<GetInstitutionsOptions>(nullptr);
  }

  GetInstitutionsOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInstitutionsOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInstitutionsOptions& from);
  void MergeFrom(const GetInstitutionsOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInstitutionsOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetInstitutionsOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductsFieldNumber = 1,
    kCountryCodesFieldNumber = 3,
    kIncludeOptionalMetadataFieldNumber = 2,
  };
  // repeated string products = 1;
  int products_size() const;
  private:
  int _internal_products_size() const;
  public:
  void clear_products();
  const std::string& products(int index) const;
  std::string* mutable_products(int index);
  void set_products(int index, const std::string& value);
  void set_products(int index, std::string&& value);
  void set_products(int index, const char* value);
  void set_products(int index, const char* value, size_t size);
  std::string* add_products();
  void add_products(const std::string& value);
  void add_products(std::string&& value);
  void add_products(const char* value);
  void add_products(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& products() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_products();
  private:
  const std::string& _internal_products(int index) const;
  std::string* _internal_add_products();
  public:

  // repeated string country_codes = 3;
  int country_codes_size() const;
  private:
  int _internal_country_codes_size() const;
  public:
  void clear_country_codes();
  const std::string& country_codes(int index) const;
  std::string* mutable_country_codes(int index);
  void set_country_codes(int index, const std::string& value);
  void set_country_codes(int index, std::string&& value);
  void set_country_codes(int index, const char* value);
  void set_country_codes(int index, const char* value, size_t size);
  std::string* add_country_codes();
  void add_country_codes(const std::string& value);
  void add_country_codes(std::string&& value);
  void add_country_codes(const char* value);
  void add_country_codes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& country_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_country_codes();
  private:
  const std::string& _internal_country_codes(int index) const;
  std::string* _internal_add_country_codes();
  public:

  // bool include_optional_metadata = 2;
  void clear_include_optional_metadata();
  bool include_optional_metadata() const;
  void set_include_optional_metadata(bool value);
  private:
  bool _internal_include_optional_metadata() const;
  void _internal_set_include_optional_metadata(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetInstitutionsOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> products_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> country_codes_;
  bool include_optional_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetInstitutionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetInstitutionsResponse) */ {
 public:
  GetInstitutionsResponse();
  virtual ~GetInstitutionsResponse();

  GetInstitutionsResponse(const GetInstitutionsResponse& from);
  GetInstitutionsResponse(GetInstitutionsResponse&& from) noexcept
    : GetInstitutionsResponse() {
    *this = ::std::move(from);
  }

  inline GetInstitutionsResponse& operator=(const GetInstitutionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInstitutionsResponse& operator=(GetInstitutionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInstitutionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInstitutionsResponse* internal_default_instance() {
    return reinterpret_cast<const GetInstitutionsResponse*>(
               &_GetInstitutionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetInstitutionsResponse& a, GetInstitutionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInstitutionsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInstitutionsResponse* New() const final {
    return CreateMaybeMessage<GetInstitutionsResponse>(nullptr);
  }

  GetInstitutionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInstitutionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInstitutionsResponse& from);
  void MergeFrom(const GetInstitutionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInstitutionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetInstitutionsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstitutionsFieldNumber = 2,
    kRequestIdFieldNumber = 1,
    kTotalFieldNumber = 3,
  };
  // repeated .plaid.Institution institutions = 2;
  int institutions_size() const;
  private:
  int _internal_institutions_size() const;
  public:
  void clear_institutions();
  ::plaid::Institution* mutable_institutions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Institution >*
      mutable_institutions();
  private:
  const ::plaid::Institution& _internal_institutions(int index) const;
  ::plaid::Institution* _internal_add_institutions();
  public:
  const ::plaid::Institution& institutions(int index) const;
  ::plaid::Institution* add_institutions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Institution >&
      institutions() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // int64 total = 3;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int64 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetInstitutionsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Institution > institutions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetInstitutionByIDRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetInstitutionByIDRequest) */ {
 public:
  GetInstitutionByIDRequest();
  virtual ~GetInstitutionByIDRequest();

  GetInstitutionByIDRequest(const GetInstitutionByIDRequest& from);
  GetInstitutionByIDRequest(GetInstitutionByIDRequest&& from) noexcept
    : GetInstitutionByIDRequest() {
    *this = ::std::move(from);
  }

  inline GetInstitutionByIDRequest& operator=(const GetInstitutionByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInstitutionByIDRequest& operator=(GetInstitutionByIDRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInstitutionByIDRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInstitutionByIDRequest* internal_default_instance() {
    return reinterpret_cast<const GetInstitutionByIDRequest*>(
               &_GetInstitutionByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GetInstitutionByIDRequest& a, GetInstitutionByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInstitutionByIDRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInstitutionByIDRequest* New() const final {
    return CreateMaybeMessage<GetInstitutionByIDRequest>(nullptr);
  }

  GetInstitutionByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInstitutionByIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInstitutionByIDRequest& from);
  void MergeFrom(const GetInstitutionByIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInstitutionByIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetInstitutionByIDRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstitutionIdFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
    kOptionsFieldNumber = 3,
  };
  // string institution_id = 1;
  void clear_institution_id();
  const std::string& institution_id() const;
  void set_institution_id(const std::string& value);
  void set_institution_id(std::string&& value);
  void set_institution_id(const char* value);
  void set_institution_id(const char* value, size_t size);
  std::string* mutable_institution_id();
  std::string* release_institution_id();
  void set_allocated_institution_id(std::string* institution_id);
  private:
  const std::string& _internal_institution_id() const;
  void _internal_set_institution_id(const std::string& value);
  std::string* _internal_mutable_institution_id();
  public:

  // string public_key = 2;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // .plaid.GetInstitutionByIDOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::plaid::GetInstitutionByIDOptions& options() const;
  ::plaid::GetInstitutionByIDOptions* release_options();
  ::plaid::GetInstitutionByIDOptions* mutable_options();
  void set_allocated_options(::plaid::GetInstitutionByIDOptions* options);
  private:
  const ::plaid::GetInstitutionByIDOptions& _internal_options() const;
  ::plaid::GetInstitutionByIDOptions* _internal_mutable_options();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetInstitutionByIDRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr institution_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::plaid::GetInstitutionByIDOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetInstitutionByIDOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetInstitutionByIDOptions) */ {
 public:
  GetInstitutionByIDOptions();
  virtual ~GetInstitutionByIDOptions();

  GetInstitutionByIDOptions(const GetInstitutionByIDOptions& from);
  GetInstitutionByIDOptions(GetInstitutionByIDOptions&& from) noexcept
    : GetInstitutionByIDOptions() {
    *this = ::std::move(from);
  }

  inline GetInstitutionByIDOptions& operator=(const GetInstitutionByIDOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInstitutionByIDOptions& operator=(GetInstitutionByIDOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInstitutionByIDOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInstitutionByIDOptions* internal_default_instance() {
    return reinterpret_cast<const GetInstitutionByIDOptions*>(
               &_GetInstitutionByIDOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GetInstitutionByIDOptions& a, GetInstitutionByIDOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInstitutionByIDOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInstitutionByIDOptions* New() const final {
    return CreateMaybeMessage<GetInstitutionByIDOptions>(nullptr);
  }

  GetInstitutionByIDOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInstitutionByIDOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInstitutionByIDOptions& from);
  void MergeFrom(const GetInstitutionByIDOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInstitutionByIDOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetInstitutionByIDOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncludeOptionalMetadataFieldNumber = 1,
    kIncludeStatusFieldNumber = 2,
  };
  // bool include_optional_metadata = 1;
  void clear_include_optional_metadata();
  bool include_optional_metadata() const;
  void set_include_optional_metadata(bool value);
  private:
  bool _internal_include_optional_metadata() const;
  void _internal_set_include_optional_metadata(bool value);
  public:

  // bool include_status = 2;
  void clear_include_status();
  bool include_status() const;
  void set_include_status(bool value);
  private:
  bool _internal_include_status() const;
  void _internal_set_include_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetInstitutionByIDOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool include_optional_metadata_;
  bool include_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetInstitutionByIDResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetInstitutionByIDResponse) */ {
 public:
  GetInstitutionByIDResponse();
  virtual ~GetInstitutionByIDResponse();

  GetInstitutionByIDResponse(const GetInstitutionByIDResponse& from);
  GetInstitutionByIDResponse(GetInstitutionByIDResponse&& from) noexcept
    : GetInstitutionByIDResponse() {
    *this = ::std::move(from);
  }

  inline GetInstitutionByIDResponse& operator=(const GetInstitutionByIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInstitutionByIDResponse& operator=(GetInstitutionByIDResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInstitutionByIDResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInstitutionByIDResponse* internal_default_instance() {
    return reinterpret_cast<const GetInstitutionByIDResponse*>(
               &_GetInstitutionByIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GetInstitutionByIDResponse& a, GetInstitutionByIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInstitutionByIDResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInstitutionByIDResponse* New() const final {
    return CreateMaybeMessage<GetInstitutionByIDResponse>(nullptr);
  }

  GetInstitutionByIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInstitutionByIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInstitutionByIDResponse& from);
  void MergeFrom(const GetInstitutionByIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInstitutionByIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetInstitutionByIDResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kInstitutionFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .plaid.Institution institution = 2;
  bool has_institution() const;
  private:
  bool _internal_has_institution() const;
  public:
  void clear_institution();
  const ::plaid::Institution& institution() const;
  ::plaid::Institution* release_institution();
  ::plaid::Institution* mutable_institution();
  void set_allocated_institution(::plaid::Institution* institution);
  private:
  const ::plaid::Institution& _internal_institution() const;
  ::plaid::Institution* _internal_mutable_institution();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetInstitutionByIDResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::plaid::Institution* institution_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class SearchInstitutionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.SearchInstitutionsRequest) */ {
 public:
  SearchInstitutionsRequest();
  virtual ~SearchInstitutionsRequest();

  SearchInstitutionsRequest(const SearchInstitutionsRequest& from);
  SearchInstitutionsRequest(SearchInstitutionsRequest&& from) noexcept
    : SearchInstitutionsRequest() {
    *this = ::std::move(from);
  }

  inline SearchInstitutionsRequest& operator=(const SearchInstitutionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchInstitutionsRequest& operator=(SearchInstitutionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchInstitutionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchInstitutionsRequest* internal_default_instance() {
    return reinterpret_cast<const SearchInstitutionsRequest*>(
               &_SearchInstitutionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(SearchInstitutionsRequest& a, SearchInstitutionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchInstitutionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchInstitutionsRequest* New() const final {
    return CreateMaybeMessage<SearchInstitutionsRequest>(nullptr);
  }

  SearchInstitutionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchInstitutionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchInstitutionsRequest& from);
  void MergeFrom(const SearchInstitutionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchInstitutionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.SearchInstitutionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductsFieldNumber = 2,
    kQueryFieldNumber = 1,
    kPublicKeyFieldNumber = 3,
    kOptionsFieldNumber = 4,
  };
  // repeated string products = 2;
  int products_size() const;
  private:
  int _internal_products_size() const;
  public:
  void clear_products();
  const std::string& products(int index) const;
  std::string* mutable_products(int index);
  void set_products(int index, const std::string& value);
  void set_products(int index, std::string&& value);
  void set_products(int index, const char* value);
  void set_products(int index, const char* value, size_t size);
  std::string* add_products();
  void add_products(const std::string& value);
  void add_products(std::string&& value);
  void add_products(const char* value);
  void add_products(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& products() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_products();
  private:
  const std::string& _internal_products(int index) const;
  std::string* _internal_add_products();
  public:

  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string public_key = 3;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // .plaid.SearchInstitutionsOptions options = 4;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::plaid::SearchInstitutionsOptions& options() const;
  ::plaid::SearchInstitutionsOptions* release_options();
  ::plaid::SearchInstitutionsOptions* mutable_options();
  void set_allocated_options(::plaid::SearchInstitutionsOptions* options);
  private:
  const ::plaid::SearchInstitutionsOptions& _internal_options() const;
  ::plaid::SearchInstitutionsOptions* _internal_mutable_options();
  public:

  // @@protoc_insertion_point(class_scope:plaid.SearchInstitutionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> products_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::plaid::SearchInstitutionsOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class SearchInstitutionsOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.SearchInstitutionsOptions) */ {
 public:
  SearchInstitutionsOptions();
  virtual ~SearchInstitutionsOptions();

  SearchInstitutionsOptions(const SearchInstitutionsOptions& from);
  SearchInstitutionsOptions(SearchInstitutionsOptions&& from) noexcept
    : SearchInstitutionsOptions() {
    *this = ::std::move(from);
  }

  inline SearchInstitutionsOptions& operator=(const SearchInstitutionsOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchInstitutionsOptions& operator=(SearchInstitutionsOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchInstitutionsOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchInstitutionsOptions* internal_default_instance() {
    return reinterpret_cast<const SearchInstitutionsOptions*>(
               &_SearchInstitutionsOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(SearchInstitutionsOptions& a, SearchInstitutionsOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchInstitutionsOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchInstitutionsOptions* New() const final {
    return CreateMaybeMessage<SearchInstitutionsOptions>(nullptr);
  }

  SearchInstitutionsOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchInstitutionsOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchInstitutionsOptions& from);
  void MergeFrom(const SearchInstitutionsOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchInstitutionsOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.SearchInstitutionsOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodesFieldNumber = 2,
    kRoutingNumbersFieldNumber = 3,
    kIncludeOptionalMetadataFieldNumber = 1,
  };
  // repeated string country_codes = 2;
  int country_codes_size() const;
  private:
  int _internal_country_codes_size() const;
  public:
  void clear_country_codes();
  const std::string& country_codes(int index) const;
  std::string* mutable_country_codes(int index);
  void set_country_codes(int index, const std::string& value);
  void set_country_codes(int index, std::string&& value);
  void set_country_codes(int index, const char* value);
  void set_country_codes(int index, const char* value, size_t size);
  std::string* add_country_codes();
  void add_country_codes(const std::string& value);
  void add_country_codes(std::string&& value);
  void add_country_codes(const char* value);
  void add_country_codes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& country_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_country_codes();
  private:
  const std::string& _internal_country_codes(int index) const;
  std::string* _internal_add_country_codes();
  public:

  // repeated string routing_numbers = 3;
  int routing_numbers_size() const;
  private:
  int _internal_routing_numbers_size() const;
  public:
  void clear_routing_numbers();
  const std::string& routing_numbers(int index) const;
  std::string* mutable_routing_numbers(int index);
  void set_routing_numbers(int index, const std::string& value);
  void set_routing_numbers(int index, std::string&& value);
  void set_routing_numbers(int index, const char* value);
  void set_routing_numbers(int index, const char* value, size_t size);
  std::string* add_routing_numbers();
  void add_routing_numbers(const std::string& value);
  void add_routing_numbers(std::string&& value);
  void add_routing_numbers(const char* value);
  void add_routing_numbers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& routing_numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_routing_numbers();
  private:
  const std::string& _internal_routing_numbers(int index) const;
  std::string* _internal_add_routing_numbers();
  public:

  // bool include_optional_metadata = 1;
  void clear_include_optional_metadata();
  bool include_optional_metadata() const;
  void set_include_optional_metadata(bool value);
  private:
  bool _internal_include_optional_metadata() const;
  void _internal_set_include_optional_metadata(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.SearchInstitutionsOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> country_codes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> routing_numbers_;
  bool include_optional_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class SearchInstitutionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.SearchInstitutionsResponse) */ {
 public:
  SearchInstitutionsResponse();
  virtual ~SearchInstitutionsResponse();

  SearchInstitutionsResponse(const SearchInstitutionsResponse& from);
  SearchInstitutionsResponse(SearchInstitutionsResponse&& from) noexcept
    : SearchInstitutionsResponse() {
    *this = ::std::move(from);
  }

  inline SearchInstitutionsResponse& operator=(const SearchInstitutionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchInstitutionsResponse& operator=(SearchInstitutionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchInstitutionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchInstitutionsResponse* internal_default_instance() {
    return reinterpret_cast<const SearchInstitutionsResponse*>(
               &_SearchInstitutionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(SearchInstitutionsResponse& a, SearchInstitutionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchInstitutionsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchInstitutionsResponse* New() const final {
    return CreateMaybeMessage<SearchInstitutionsResponse>(nullptr);
  }

  SearchInstitutionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchInstitutionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchInstitutionsResponse& from);
  void MergeFrom(const SearchInstitutionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchInstitutionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.SearchInstitutionsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstitutionsFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // repeated .plaid.Institution institutions = 2;
  int institutions_size() const;
  private:
  int _internal_institutions_size() const;
  public:
  void clear_institutions();
  ::plaid::Institution* mutable_institutions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Institution >*
      mutable_institutions();
  private:
  const ::plaid::Institution& _internal_institutions(int index) const;
  ::plaid::Institution* _internal_add_institutions();
  public:
  const ::plaid::Institution& institutions(int index) const;
  ::plaid::Institution* add_institutions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Institution >&
      institutions() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // @@protoc_insertion_point(class_scope:plaid.SearchInstitutionsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Institution > institutions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class InvestmentTransaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.InvestmentTransaction) */ {
 public:
  InvestmentTransaction();
  virtual ~InvestmentTransaction();

  InvestmentTransaction(const InvestmentTransaction& from);
  InvestmentTransaction(InvestmentTransaction&& from) noexcept
    : InvestmentTransaction() {
    *this = ::std::move(from);
  }

  inline InvestmentTransaction& operator=(const InvestmentTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvestmentTransaction& operator=(InvestmentTransaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvestmentTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvestmentTransaction* internal_default_instance() {
    return reinterpret_cast<const InvestmentTransaction*>(
               &_InvestmentTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(InvestmentTransaction& a, InvestmentTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(InvestmentTransaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvestmentTransaction* New() const final {
    return CreateMaybeMessage<InvestmentTransaction>(nullptr);
  }

  InvestmentTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvestmentTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvestmentTransaction& from);
  void MergeFrom(const InvestmentTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvestmentTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.InvestmentTransaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvestmentTransactionIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kSecurityIdFieldNumber = 3,
    kCancelTransactionIdFieldNumber = 4,
    kDateFieldNumber = 5,
    kNameFieldNumber = 6,
    kTypeFieldNumber = 11,
    kIsoCurrencyCodeFieldNumber = 12,
    kUnofficialCurrencyCodeFieldNumber = 13,
    kQuantityFieldNumber = 7,
    kAmountFieldNumber = 8,
    kPriceFieldNumber = 9,
    kFeesFieldNumber = 10,
  };
  // string investment_transaction_id = 1;
  void clear_investment_transaction_id();
  const std::string& investment_transaction_id() const;
  void set_investment_transaction_id(const std::string& value);
  void set_investment_transaction_id(std::string&& value);
  void set_investment_transaction_id(const char* value);
  void set_investment_transaction_id(const char* value, size_t size);
  std::string* mutable_investment_transaction_id();
  std::string* release_investment_transaction_id();
  void set_allocated_investment_transaction_id(std::string* investment_transaction_id);
  private:
  const std::string& _internal_investment_transaction_id() const;
  void _internal_set_investment_transaction_id(const std::string& value);
  std::string* _internal_mutable_investment_transaction_id();
  public:

  // string account_id = 2;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string security_id = 3;
  void clear_security_id();
  const std::string& security_id() const;
  void set_security_id(const std::string& value);
  void set_security_id(std::string&& value);
  void set_security_id(const char* value);
  void set_security_id(const char* value, size_t size);
  std::string* mutable_security_id();
  std::string* release_security_id();
  void set_allocated_security_id(std::string* security_id);
  private:
  const std::string& _internal_security_id() const;
  void _internal_set_security_id(const std::string& value);
  std::string* _internal_mutable_security_id();
  public:

  // string cancel_transaction_id = 4;
  void clear_cancel_transaction_id();
  const std::string& cancel_transaction_id() const;
  void set_cancel_transaction_id(const std::string& value);
  void set_cancel_transaction_id(std::string&& value);
  void set_cancel_transaction_id(const char* value);
  void set_cancel_transaction_id(const char* value, size_t size);
  std::string* mutable_cancel_transaction_id();
  std::string* release_cancel_transaction_id();
  void set_allocated_cancel_transaction_id(std::string* cancel_transaction_id);
  private:
  const std::string& _internal_cancel_transaction_id() const;
  void _internal_set_cancel_transaction_id(const std::string& value);
  std::string* _internal_mutable_cancel_transaction_id();
  public:

  // string date = 5;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 11;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string iso_currency_code = 12;
  void clear_iso_currency_code();
  const std::string& iso_currency_code() const;
  void set_iso_currency_code(const std::string& value);
  void set_iso_currency_code(std::string&& value);
  void set_iso_currency_code(const char* value);
  void set_iso_currency_code(const char* value, size_t size);
  std::string* mutable_iso_currency_code();
  std::string* release_iso_currency_code();
  void set_allocated_iso_currency_code(std::string* iso_currency_code);
  private:
  const std::string& _internal_iso_currency_code() const;
  void _internal_set_iso_currency_code(const std::string& value);
  std::string* _internal_mutable_iso_currency_code();
  public:

  // string unofficial_currency_code = 13;
  void clear_unofficial_currency_code();
  const std::string& unofficial_currency_code() const;
  void set_unofficial_currency_code(const std::string& value);
  void set_unofficial_currency_code(std::string&& value);
  void set_unofficial_currency_code(const char* value);
  void set_unofficial_currency_code(const char* value, size_t size);
  std::string* mutable_unofficial_currency_code();
  std::string* release_unofficial_currency_code();
  void set_allocated_unofficial_currency_code(std::string* unofficial_currency_code);
  private:
  const std::string& _internal_unofficial_currency_code() const;
  void _internal_set_unofficial_currency_code(const std::string& value);
  std::string* _internal_mutable_unofficial_currency_code();
  public:

  // double quantity = 7;
  void clear_quantity();
  double quantity() const;
  void set_quantity(double value);
  private:
  double _internal_quantity() const;
  void _internal_set_quantity(double value);
  public:

  // double amount = 8;
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // double price = 9;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // double fees = 10;
  void clear_fees();
  double fees() const;
  void set_fees(double value);
  private:
  double _internal_fees() const;
  void _internal_set_fees(double value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.InvestmentTransaction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investment_transaction_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr security_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cancel_transaction_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iso_currency_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unofficial_currency_code_;
  double quantity_;
  double amount_;
  double price_;
  double fees_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetInvestmentTransactionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetInvestmentTransactionsResponse) */ {
 public:
  GetInvestmentTransactionsResponse();
  virtual ~GetInvestmentTransactionsResponse();

  GetInvestmentTransactionsResponse(const GetInvestmentTransactionsResponse& from);
  GetInvestmentTransactionsResponse(GetInvestmentTransactionsResponse&& from) noexcept
    : GetInvestmentTransactionsResponse() {
    *this = ::std::move(from);
  }

  inline GetInvestmentTransactionsResponse& operator=(const GetInvestmentTransactionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInvestmentTransactionsResponse& operator=(GetInvestmentTransactionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInvestmentTransactionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInvestmentTransactionsResponse* internal_default_instance() {
    return reinterpret_cast<const GetInvestmentTransactionsResponse*>(
               &_GetInvestmentTransactionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(GetInvestmentTransactionsResponse& a, GetInvestmentTransactionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInvestmentTransactionsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInvestmentTransactionsResponse* New() const final {
    return CreateMaybeMessage<GetInvestmentTransactionsResponse>(nullptr);
  }

  GetInvestmentTransactionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInvestmentTransactionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInvestmentTransactionsResponse& from);
  void MergeFrom(const GetInvestmentTransactionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInvestmentTransactionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetInvestmentTransactionsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 3,
    kInvestmentTransactionsFieldNumber = 4,
    kSecuritiesFieldNumber = 5,
    kRequestIdFieldNumber = 1,
    kItemFieldNumber = 2,
    kTotalInvestmentTransactionsFieldNumber = 6,
  };
  // repeated .plaid.Account accounts = 3;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::plaid::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >*
      mutable_accounts();
  private:
  const ::plaid::Account& _internal_accounts(int index) const;
  ::plaid::Account* _internal_add_accounts();
  public:
  const ::plaid::Account& accounts(int index) const;
  ::plaid::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >&
      accounts() const;

  // repeated .plaid.InvestmentTransaction investment_transactions = 4;
  int investment_transactions_size() const;
  private:
  int _internal_investment_transactions_size() const;
  public:
  void clear_investment_transactions();
  ::plaid::InvestmentTransaction* mutable_investment_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::InvestmentTransaction >*
      mutable_investment_transactions();
  private:
  const ::plaid::InvestmentTransaction& _internal_investment_transactions(int index) const;
  ::plaid::InvestmentTransaction* _internal_add_investment_transactions();
  public:
  const ::plaid::InvestmentTransaction& investment_transactions(int index) const;
  ::plaid::InvestmentTransaction* add_investment_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::InvestmentTransaction >&
      investment_transactions() const;

  // repeated .plaid.Security securities = 5;
  int securities_size() const;
  private:
  int _internal_securities_size() const;
  public:
  void clear_securities();
  ::plaid::Security* mutable_securities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Security >*
      mutable_securities();
  private:
  const ::plaid::Security& _internal_securities(int index) const;
  ::plaid::Security* _internal_add_securities();
  public:
  const ::plaid::Security& securities(int index) const;
  ::plaid::Security* add_securities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Security >&
      securities() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .plaid.Item item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::plaid::Item& item() const;
  ::plaid::Item* release_item();
  ::plaid::Item* mutable_item();
  void set_allocated_item(::plaid::Item* item);
  private:
  const ::plaid::Item& _internal_item() const;
  ::plaid::Item* _internal_mutable_item();
  public:

  // int64 total_investment_transactions = 6;
  void clear_total_investment_transactions();
  ::PROTOBUF_NAMESPACE_ID::int64 total_investment_transactions() const;
  void set_total_investment_transactions(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_investment_transactions() const;
  void _internal_set_total_investment_transactions(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetInvestmentTransactionsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account > accounts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::InvestmentTransaction > investment_transactions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Security > securities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::plaid::Item* item_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_investment_transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetInvestmentTransactionsOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetInvestmentTransactionsOptions) */ {
 public:
  GetInvestmentTransactionsOptions();
  virtual ~GetInvestmentTransactionsOptions();

  GetInvestmentTransactionsOptions(const GetInvestmentTransactionsOptions& from);
  GetInvestmentTransactionsOptions(GetInvestmentTransactionsOptions&& from) noexcept
    : GetInvestmentTransactionsOptions() {
    *this = ::std::move(from);
  }

  inline GetInvestmentTransactionsOptions& operator=(const GetInvestmentTransactionsOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInvestmentTransactionsOptions& operator=(GetInvestmentTransactionsOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInvestmentTransactionsOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInvestmentTransactionsOptions* internal_default_instance() {
    return reinterpret_cast<const GetInvestmentTransactionsOptions*>(
               &_GetInvestmentTransactionsOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GetInvestmentTransactionsOptions& a, GetInvestmentTransactionsOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInvestmentTransactionsOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInvestmentTransactionsOptions* New() const final {
    return CreateMaybeMessage<GetInvestmentTransactionsOptions>(nullptr);
  }

  GetInvestmentTransactionsOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInvestmentTransactionsOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInvestmentTransactionsOptions& from);
  void MergeFrom(const GetInvestmentTransactionsOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInvestmentTransactionsOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetInvestmentTransactionsOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 3,
    kStartDateFieldNumber = 1,
    kEndDateFieldNumber = 2,
    kCountFieldNumber = 4,
    kOffsetFieldNumber = 5,
  };
  // repeated string account_ids = 3;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  const std::string& account_ids(int index) const;
  std::string* mutable_account_ids(int index);
  void set_account_ids(int index, const std::string& value);
  void set_account_ids(int index, std::string&& value);
  void set_account_ids(int index, const char* value);
  void set_account_ids(int index, const char* value, size_t size);
  std::string* add_account_ids();
  void add_account_ids(const std::string& value);
  void add_account_ids(std::string&& value);
  void add_account_ids(const char* value);
  void add_account_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_account_ids();
  private:
  const std::string& _internal_account_ids(int index) const;
  std::string* _internal_add_account_ids();
  public:

  // string start_date = 1;
  void clear_start_date();
  const std::string& start_date() const;
  void set_start_date(const std::string& value);
  void set_start_date(std::string&& value);
  void set_start_date(const char* value);
  void set_start_date(const char* value, size_t size);
  std::string* mutable_start_date();
  std::string* release_start_date();
  void set_allocated_start_date(std::string* start_date);
  private:
  const std::string& _internal_start_date() const;
  void _internal_set_start_date(const std::string& value);
  std::string* _internal_mutable_start_date();
  public:

  // string end_date = 2;
  void clear_end_date();
  const std::string& end_date() const;
  void set_end_date(const std::string& value);
  void set_end_date(std::string&& value);
  void set_end_date(const char* value);
  void set_end_date(const char* value, size_t size);
  std::string* mutable_end_date();
  std::string* release_end_date();
  void set_allocated_end_date(std::string* end_date);
  private:
  const std::string& _internal_end_date() const;
  void _internal_set_end_date(const std::string& value);
  std::string* _internal_mutable_end_date();
  public:

  // int64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offset = 5;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetInvestmentTransactionsOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> account_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_date_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetInvestmentTransactionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetInvestmentTransactionsRequest) */ {
 public:
  GetInvestmentTransactionsRequest();
  virtual ~GetInvestmentTransactionsRequest();

  GetInvestmentTransactionsRequest(const GetInvestmentTransactionsRequest& from);
  GetInvestmentTransactionsRequest(GetInvestmentTransactionsRequest&& from) noexcept
    : GetInvestmentTransactionsRequest() {
    *this = ::std::move(from);
  }

  inline GetInvestmentTransactionsRequest& operator=(const GetInvestmentTransactionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInvestmentTransactionsRequest& operator=(GetInvestmentTransactionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInvestmentTransactionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInvestmentTransactionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetInvestmentTransactionsRequest*>(
               &_GetInvestmentTransactionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(GetInvestmentTransactionsRequest& a, GetInvestmentTransactionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInvestmentTransactionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInvestmentTransactionsRequest* New() const final {
    return CreateMaybeMessage<GetInvestmentTransactionsRequest>(nullptr);
  }

  GetInvestmentTransactionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInvestmentTransactionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInvestmentTransactionsRequest& from);
  void MergeFrom(const GetInvestmentTransactionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInvestmentTransactionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetInvestmentTransactionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
    kStartDateFieldNumber = 4,
    kEndDateFieldNumber = 5,
    kOptionsFieldNumber = 6,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // string start_date = 4;
  void clear_start_date();
  const std::string& start_date() const;
  void set_start_date(const std::string& value);
  void set_start_date(std::string&& value);
  void set_start_date(const char* value);
  void set_start_date(const char* value, size_t size);
  std::string* mutable_start_date();
  std::string* release_start_date();
  void set_allocated_start_date(std::string* start_date);
  private:
  const std::string& _internal_start_date() const;
  void _internal_set_start_date(const std::string& value);
  std::string* _internal_mutable_start_date();
  public:

  // string end_date = 5;
  void clear_end_date();
  const std::string& end_date() const;
  void set_end_date(const std::string& value);
  void set_end_date(std::string&& value);
  void set_end_date(const char* value);
  void set_end_date(const char* value, size_t size);
  std::string* mutable_end_date();
  std::string* release_end_date();
  void set_allocated_end_date(std::string* end_date);
  private:
  const std::string& _internal_end_date() const;
  void _internal_set_end_date(const std::string& value);
  std::string* _internal_mutable_end_date();
  public:

  // .plaid.GetInvestmentTransactionsRequestOptions options = 6;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::plaid::GetInvestmentTransactionsRequestOptions& options() const;
  ::plaid::GetInvestmentTransactionsRequestOptions* release_options();
  ::plaid::GetInvestmentTransactionsRequestOptions* mutable_options();
  void set_allocated_options(::plaid::GetInvestmentTransactionsRequestOptions* options);
  private:
  const ::plaid::GetInvestmentTransactionsRequestOptions& _internal_options() const;
  ::plaid::GetInvestmentTransactionsRequestOptions* _internal_mutable_options();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetInvestmentTransactionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_date_;
  ::plaid::GetInvestmentTransactionsRequestOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetInvestmentTransactionsRequestOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetInvestmentTransactionsRequestOptions) */ {
 public:
  GetInvestmentTransactionsRequestOptions();
  virtual ~GetInvestmentTransactionsRequestOptions();

  GetInvestmentTransactionsRequestOptions(const GetInvestmentTransactionsRequestOptions& from);
  GetInvestmentTransactionsRequestOptions(GetInvestmentTransactionsRequestOptions&& from) noexcept
    : GetInvestmentTransactionsRequestOptions() {
    *this = ::std::move(from);
  }

  inline GetInvestmentTransactionsRequestOptions& operator=(const GetInvestmentTransactionsRequestOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInvestmentTransactionsRequestOptions& operator=(GetInvestmentTransactionsRequestOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInvestmentTransactionsRequestOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInvestmentTransactionsRequestOptions* internal_default_instance() {
    return reinterpret_cast<const GetInvestmentTransactionsRequestOptions*>(
               &_GetInvestmentTransactionsRequestOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(GetInvestmentTransactionsRequestOptions& a, GetInvestmentTransactionsRequestOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInvestmentTransactionsRequestOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInvestmentTransactionsRequestOptions* New() const final {
    return CreateMaybeMessage<GetInvestmentTransactionsRequestOptions>(nullptr);
  }

  GetInvestmentTransactionsRequestOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInvestmentTransactionsRequestOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInvestmentTransactionsRequestOptions& from);
  void MergeFrom(const GetInvestmentTransactionsRequestOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInvestmentTransactionsRequestOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetInvestmentTransactionsRequestOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
    kCountFieldNumber = 2,
    kOffsetFieldNumber = 3,
  };
  // repeated string account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  const std::string& account_ids(int index) const;
  std::string* mutable_account_ids(int index);
  void set_account_ids(int index, const std::string& value);
  void set_account_ids(int index, std::string&& value);
  void set_account_ids(int index, const char* value);
  void set_account_ids(int index, const char* value, size_t size);
  std::string* add_account_ids();
  void add_account_ids(const std::string& value);
  void add_account_ids(std::string&& value);
  void add_account_ids(const char* value);
  void add_account_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_account_ids();
  private:
  const std::string& _internal_account_ids(int index) const;
  std::string* _internal_add_account_ids();
  public:

  // int64 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offset = 3;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetInvestmentTransactionsRequestOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> account_ids_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class Item :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.Item) */ {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Item* New() const final {
    return CreateMaybeMessage<Item>(nullptr);
  }

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.Item";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableProductsFieldNumber = 1,
    kBilledProductsFieldNumber = 2,
    kInstitutionIdFieldNumber = 4,
    kItemIdFieldNumber = 5,
    kWebhookFieldNumber = 6,
    kErrorFieldNumber = 3,
  };
  // repeated string available_products = 1;
  int available_products_size() const;
  private:
  int _internal_available_products_size() const;
  public:
  void clear_available_products();
  const std::string& available_products(int index) const;
  std::string* mutable_available_products(int index);
  void set_available_products(int index, const std::string& value);
  void set_available_products(int index, std::string&& value);
  void set_available_products(int index, const char* value);
  void set_available_products(int index, const char* value, size_t size);
  std::string* add_available_products();
  void add_available_products(const std::string& value);
  void add_available_products(std::string&& value);
  void add_available_products(const char* value);
  void add_available_products(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& available_products() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_available_products();
  private:
  const std::string& _internal_available_products(int index) const;
  std::string* _internal_add_available_products();
  public:

  // repeated string billed_products = 2;
  int billed_products_size() const;
  private:
  int _internal_billed_products_size() const;
  public:
  void clear_billed_products();
  const std::string& billed_products(int index) const;
  std::string* mutable_billed_products(int index);
  void set_billed_products(int index, const std::string& value);
  void set_billed_products(int index, std::string&& value);
  void set_billed_products(int index, const char* value);
  void set_billed_products(int index, const char* value, size_t size);
  std::string* add_billed_products();
  void add_billed_products(const std::string& value);
  void add_billed_products(std::string&& value);
  void add_billed_products(const char* value);
  void add_billed_products(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& billed_products() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_billed_products();
  private:
  const std::string& _internal_billed_products(int index) const;
  std::string* _internal_add_billed_products();
  public:

  // string institution_id = 4;
  void clear_institution_id();
  const std::string& institution_id() const;
  void set_institution_id(const std::string& value);
  void set_institution_id(std::string&& value);
  void set_institution_id(const char* value);
  void set_institution_id(const char* value, size_t size);
  std::string* mutable_institution_id();
  std::string* release_institution_id();
  void set_allocated_institution_id(std::string* institution_id);
  private:
  const std::string& _internal_institution_id() const;
  void _internal_set_institution_id(const std::string& value);
  std::string* _internal_mutable_institution_id();
  public:

  // string item_id = 5;
  void clear_item_id();
  const std::string& item_id() const;
  void set_item_id(const std::string& value);
  void set_item_id(std::string&& value);
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  std::string* mutable_item_id();
  std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // string webhook = 6;
  void clear_webhook();
  const std::string& webhook() const;
  void set_webhook(const std::string& value);
  void set_webhook(std::string&& value);
  void set_webhook(const char* value);
  void set_webhook(const char* value, size_t size);
  std::string* mutable_webhook();
  std::string* release_webhook();
  void set_allocated_webhook(std::string* webhook);
  private:
  const std::string& _internal_webhook() const;
  void _internal_set_webhook(const std::string& value);
  std::string* _internal_mutable_webhook();
  public:

  // .plaid.Error error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::plaid::Error& error() const;
  ::plaid::Error* release_error();
  ::plaid::Error* mutable_error();
  void set_allocated_error(::plaid::Error* error);
  private:
  const ::plaid::Error& _internal_error() const;
  ::plaid::Error* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:plaid.Item)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> available_products_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> billed_products_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr institution_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webhook_;
  ::plaid::Error* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetItemRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetItemRequest) */ {
 public:
  GetItemRequest();
  virtual ~GetItemRequest();

  GetItemRequest(const GetItemRequest& from);
  GetItemRequest(GetItemRequest&& from) noexcept
    : GetItemRequest() {
    *this = ::std::move(from);
  }

  inline GetItemRequest& operator=(const GetItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetItemRequest& operator=(GetItemRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetItemRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetItemRequest* internal_default_instance() {
    return reinterpret_cast<const GetItemRequest*>(
               &_GetItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(GetItemRequest& a, GetItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetItemRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetItemRequest* New() const final {
    return CreateMaybeMessage<GetItemRequest>(nullptr);
  }

  GetItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetItemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetItemRequest& from);
  void MergeFrom(const GetItemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetItemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetItemRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetItemRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetItemResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetItemResponse) */ {
 public:
  GetItemResponse();
  virtual ~GetItemResponse();

  GetItemResponse(const GetItemResponse& from);
  GetItemResponse(GetItemResponse&& from) noexcept
    : GetItemResponse() {
    *this = ::std::move(from);
  }

  inline GetItemResponse& operator=(const GetItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetItemResponse& operator=(GetItemResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetItemResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetItemResponse* internal_default_instance() {
    return reinterpret_cast<const GetItemResponse*>(
               &_GetItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(GetItemResponse& a, GetItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetItemResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetItemResponse* New() const final {
    return CreateMaybeMessage<GetItemResponse>(nullptr);
  }

  GetItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetItemResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetItemResponse& from);
  void MergeFrom(const GetItemResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetItemResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetItemResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kItemFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .plaid.Item item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::plaid::Item& item() const;
  ::plaid::Item* release_item();
  ::plaid::Item* mutable_item();
  void set_allocated_item(::plaid::Item* item);
  private:
  const ::plaid::Item& _internal_item() const;
  ::plaid::Item* _internal_mutable_item();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetItemResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::plaid::Item* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class RemoveItemRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.RemoveItemRequest) */ {
 public:
  RemoveItemRequest();
  virtual ~RemoveItemRequest();

  RemoveItemRequest(const RemoveItemRequest& from);
  RemoveItemRequest(RemoveItemRequest&& from) noexcept
    : RemoveItemRequest() {
    *this = ::std::move(from);
  }

  inline RemoveItemRequest& operator=(const RemoveItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveItemRequest& operator=(RemoveItemRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveItemRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveItemRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveItemRequest*>(
               &_RemoveItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(RemoveItemRequest& a, RemoveItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveItemRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveItemRequest* New() const final {
    return CreateMaybeMessage<RemoveItemRequest>(nullptr);
  }

  RemoveItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveItemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveItemRequest& from);
  void MergeFrom(const RemoveItemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveItemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.RemoveItemRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // @@protoc_insertion_point(class_scope:plaid.RemoveItemRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class RemoveItemResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.RemoveItemResponse) */ {
 public:
  RemoveItemResponse();
  virtual ~RemoveItemResponse();

  RemoveItemResponse(const RemoveItemResponse& from);
  RemoveItemResponse(RemoveItemResponse&& from) noexcept
    : RemoveItemResponse() {
    *this = ::std::move(from);
  }

  inline RemoveItemResponse& operator=(const RemoveItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveItemResponse& operator=(RemoveItemResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveItemResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveItemResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveItemResponse*>(
               &_RemoveItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(RemoveItemResponse& a, RemoveItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveItemResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveItemResponse* New() const final {
    return CreateMaybeMessage<RemoveItemResponse>(nullptr);
  }

  RemoveItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveItemResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveItemResponse& from);
  void MergeFrom(const RemoveItemResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveItemResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.RemoveItemResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kRemovedFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // bool removed = 2;
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.RemoveItemResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  bool removed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class UpdateItemWebhookRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.UpdateItemWebhookRequest) */ {
 public:
  UpdateItemWebhookRequest();
  virtual ~UpdateItemWebhookRequest();

  UpdateItemWebhookRequest(const UpdateItemWebhookRequest& from);
  UpdateItemWebhookRequest(UpdateItemWebhookRequest&& from) noexcept
    : UpdateItemWebhookRequest() {
    *this = ::std::move(from);
  }

  inline UpdateItemWebhookRequest& operator=(const UpdateItemWebhookRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateItemWebhookRequest& operator=(UpdateItemWebhookRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateItemWebhookRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateItemWebhookRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateItemWebhookRequest*>(
               &_UpdateItemWebhookRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(UpdateItemWebhookRequest& a, UpdateItemWebhookRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateItemWebhookRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateItemWebhookRequest* New() const final {
    return CreateMaybeMessage<UpdateItemWebhookRequest>(nullptr);
  }

  UpdateItemWebhookRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateItemWebhookRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateItemWebhookRequest& from);
  void MergeFrom(const UpdateItemWebhookRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateItemWebhookRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.UpdateItemWebhookRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
    kWebhookFieldNumber = 4,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // string webhook = 4;
  void clear_webhook();
  const std::string& webhook() const;
  void set_webhook(const std::string& value);
  void set_webhook(std::string&& value);
  void set_webhook(const char* value);
  void set_webhook(const char* value, size_t size);
  std::string* mutable_webhook();
  std::string* release_webhook();
  void set_allocated_webhook(std::string* webhook);
  private:
  const std::string& _internal_webhook() const;
  void _internal_set_webhook(const std::string& value);
  std::string* _internal_mutable_webhook();
  public:

  // @@protoc_insertion_point(class_scope:plaid.UpdateItemWebhookRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webhook_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class UpdateItemWebhookResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.UpdateItemWebhookResponse) */ {
 public:
  UpdateItemWebhookResponse();
  virtual ~UpdateItemWebhookResponse();

  UpdateItemWebhookResponse(const UpdateItemWebhookResponse& from);
  UpdateItemWebhookResponse(UpdateItemWebhookResponse&& from) noexcept
    : UpdateItemWebhookResponse() {
    *this = ::std::move(from);
  }

  inline UpdateItemWebhookResponse& operator=(const UpdateItemWebhookResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateItemWebhookResponse& operator=(UpdateItemWebhookResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateItemWebhookResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateItemWebhookResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateItemWebhookResponse*>(
               &_UpdateItemWebhookResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(UpdateItemWebhookResponse& a, UpdateItemWebhookResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateItemWebhookResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateItemWebhookResponse* New() const final {
    return CreateMaybeMessage<UpdateItemWebhookResponse>(nullptr);
  }

  UpdateItemWebhookResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateItemWebhookResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateItemWebhookResponse& from);
  void MergeFrom(const UpdateItemWebhookResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateItemWebhookResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.UpdateItemWebhookResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kItemFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .plaid.Item item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::plaid::Item& item() const;
  ::plaid::Item* release_item();
  ::plaid::Item* mutable_item();
  void set_allocated_item(::plaid::Item* item);
  private:
  const ::plaid::Item& _internal_item() const;
  ::plaid::Item* _internal_mutable_item();
  public:

  // @@protoc_insertion_point(class_scope:plaid.UpdateItemWebhookResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::plaid::Item* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class InvalidateAccessTokenRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.InvalidateAccessTokenRequest) */ {
 public:
  InvalidateAccessTokenRequest();
  virtual ~InvalidateAccessTokenRequest();

  InvalidateAccessTokenRequest(const InvalidateAccessTokenRequest& from);
  InvalidateAccessTokenRequest(InvalidateAccessTokenRequest&& from) noexcept
    : InvalidateAccessTokenRequest() {
    *this = ::std::move(from);
  }

  inline InvalidateAccessTokenRequest& operator=(const InvalidateAccessTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvalidateAccessTokenRequest& operator=(InvalidateAccessTokenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvalidateAccessTokenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvalidateAccessTokenRequest* internal_default_instance() {
    return reinterpret_cast<const InvalidateAccessTokenRequest*>(
               &_InvalidateAccessTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(InvalidateAccessTokenRequest& a, InvalidateAccessTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InvalidateAccessTokenRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvalidateAccessTokenRequest* New() const final {
    return CreateMaybeMessage<InvalidateAccessTokenRequest>(nullptr);
  }

  InvalidateAccessTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvalidateAccessTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvalidateAccessTokenRequest& from);
  void MergeFrom(const InvalidateAccessTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvalidateAccessTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.InvalidateAccessTokenRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // @@protoc_insertion_point(class_scope:plaid.InvalidateAccessTokenRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class InvalidateAccessTokenResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.InvalidateAccessTokenResponse) */ {
 public:
  InvalidateAccessTokenResponse();
  virtual ~InvalidateAccessTokenResponse();

  InvalidateAccessTokenResponse(const InvalidateAccessTokenResponse& from);
  InvalidateAccessTokenResponse(InvalidateAccessTokenResponse&& from) noexcept
    : InvalidateAccessTokenResponse() {
    *this = ::std::move(from);
  }

  inline InvalidateAccessTokenResponse& operator=(const InvalidateAccessTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvalidateAccessTokenResponse& operator=(InvalidateAccessTokenResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvalidateAccessTokenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvalidateAccessTokenResponse* internal_default_instance() {
    return reinterpret_cast<const InvalidateAccessTokenResponse*>(
               &_InvalidateAccessTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(InvalidateAccessTokenResponse& a, InvalidateAccessTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InvalidateAccessTokenResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvalidateAccessTokenResponse* New() const final {
    return CreateMaybeMessage<InvalidateAccessTokenResponse>(nullptr);
  }

  InvalidateAccessTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvalidateAccessTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvalidateAccessTokenResponse& from);
  void MergeFrom(const InvalidateAccessTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvalidateAccessTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.InvalidateAccessTokenResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kNewAccessTokenFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string new_access_token = 2;
  void clear_new_access_token();
  const std::string& new_access_token() const;
  void set_new_access_token(const std::string& value);
  void set_new_access_token(std::string&& value);
  void set_new_access_token(const char* value);
  void set_new_access_token(const char* value, size_t size);
  std::string* mutable_new_access_token();
  std::string* release_new_access_token();
  void set_allocated_new_access_token(std::string* new_access_token);
  private:
  const std::string& _internal_new_access_token() const;
  void _internal_set_new_access_token(const std::string& value);
  std::string* _internal_mutable_new_access_token();
  public:

  // @@protoc_insertion_point(class_scope:plaid.InvalidateAccessTokenResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_access_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class UpdateAccessTokenVersionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.UpdateAccessTokenVersionRequest) */ {
 public:
  UpdateAccessTokenVersionRequest();
  virtual ~UpdateAccessTokenVersionRequest();

  UpdateAccessTokenVersionRequest(const UpdateAccessTokenVersionRequest& from);
  UpdateAccessTokenVersionRequest(UpdateAccessTokenVersionRequest&& from) noexcept
    : UpdateAccessTokenVersionRequest() {
    *this = ::std::move(from);
  }

  inline UpdateAccessTokenVersionRequest& operator=(const UpdateAccessTokenVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAccessTokenVersionRequest& operator=(UpdateAccessTokenVersionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateAccessTokenVersionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateAccessTokenVersionRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateAccessTokenVersionRequest*>(
               &_UpdateAccessTokenVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(UpdateAccessTokenVersionRequest& a, UpdateAccessTokenVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAccessTokenVersionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateAccessTokenVersionRequest* New() const final {
    return CreateMaybeMessage<UpdateAccessTokenVersionRequest>(nullptr);
  }

  UpdateAccessTokenVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAccessTokenVersionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateAccessTokenVersionRequest& from);
  void MergeFrom(const UpdateAccessTokenVersionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAccessTokenVersionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.UpdateAccessTokenVersionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenV2FieldNumber = 3,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token_v2 = 3;
  void clear_access_token_v2();
  const std::string& access_token_v2() const;
  void set_access_token_v2(const std::string& value);
  void set_access_token_v2(std::string&& value);
  void set_access_token_v2(const char* value);
  void set_access_token_v2(const char* value, size_t size);
  std::string* mutable_access_token_v2();
  std::string* release_access_token_v2();
  void set_allocated_access_token_v2(std::string* access_token_v2);
  private:
  const std::string& _internal_access_token_v2() const;
  void _internal_set_access_token_v2(const std::string& value);
  std::string* _internal_mutable_access_token_v2();
  public:

  // @@protoc_insertion_point(class_scope:plaid.UpdateAccessTokenVersionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_v2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class UpdateAccessTokenVersionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.UpdateAccessTokenVersionResponse) */ {
 public:
  UpdateAccessTokenVersionResponse();
  virtual ~UpdateAccessTokenVersionResponse();

  UpdateAccessTokenVersionResponse(const UpdateAccessTokenVersionResponse& from);
  UpdateAccessTokenVersionResponse(UpdateAccessTokenVersionResponse&& from) noexcept
    : UpdateAccessTokenVersionResponse() {
    *this = ::std::move(from);
  }

  inline UpdateAccessTokenVersionResponse& operator=(const UpdateAccessTokenVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAccessTokenVersionResponse& operator=(UpdateAccessTokenVersionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateAccessTokenVersionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateAccessTokenVersionResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateAccessTokenVersionResponse*>(
               &_UpdateAccessTokenVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(UpdateAccessTokenVersionResponse& a, UpdateAccessTokenVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAccessTokenVersionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateAccessTokenVersionResponse* New() const final {
    return CreateMaybeMessage<UpdateAccessTokenVersionResponse>(nullptr);
  }

  UpdateAccessTokenVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAccessTokenVersionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateAccessTokenVersionResponse& from);
  void MergeFrom(const UpdateAccessTokenVersionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAccessTokenVersionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.UpdateAccessTokenVersionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kAccessTokenFieldNumber = 2,
    kItemIdFieldNumber = 3,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string access_token = 2;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // string item_id = 3;
  void clear_item_id();
  const std::string& item_id() const;
  void set_item_id(const std::string& value);
  void set_item_id(std::string&& value);
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  std::string* mutable_item_id();
  std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // @@protoc_insertion_point(class_scope:plaid.UpdateAccessTokenVersionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class CreatePublicTokenRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.CreatePublicTokenRequest) */ {
 public:
  CreatePublicTokenRequest();
  virtual ~CreatePublicTokenRequest();

  CreatePublicTokenRequest(const CreatePublicTokenRequest& from);
  CreatePublicTokenRequest(CreatePublicTokenRequest&& from) noexcept
    : CreatePublicTokenRequest() {
    *this = ::std::move(from);
  }

  inline CreatePublicTokenRequest& operator=(const CreatePublicTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePublicTokenRequest& operator=(CreatePublicTokenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePublicTokenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePublicTokenRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePublicTokenRequest*>(
               &_CreatePublicTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CreatePublicTokenRequest& a, CreatePublicTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePublicTokenRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePublicTokenRequest* New() const final {
    return CreateMaybeMessage<CreatePublicTokenRequest>(nullptr);
  }

  CreatePublicTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePublicTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePublicTokenRequest& from);
  void MergeFrom(const CreatePublicTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePublicTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.CreatePublicTokenRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // @@protoc_insertion_point(class_scope:plaid.CreatePublicTokenRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class CreatePublicTokenResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.CreatePublicTokenResponse) */ {
 public:
  CreatePublicTokenResponse();
  virtual ~CreatePublicTokenResponse();

  CreatePublicTokenResponse(const CreatePublicTokenResponse& from);
  CreatePublicTokenResponse(CreatePublicTokenResponse&& from) noexcept
    : CreatePublicTokenResponse() {
    *this = ::std::move(from);
  }

  inline CreatePublicTokenResponse& operator=(const CreatePublicTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePublicTokenResponse& operator=(CreatePublicTokenResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePublicTokenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePublicTokenResponse* internal_default_instance() {
    return reinterpret_cast<const CreatePublicTokenResponse*>(
               &_CreatePublicTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CreatePublicTokenResponse& a, CreatePublicTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePublicTokenResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePublicTokenResponse* New() const final {
    return CreateMaybeMessage<CreatePublicTokenResponse>(nullptr);
  }

  CreatePublicTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePublicTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePublicTokenResponse& from);
  void MergeFrom(const CreatePublicTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePublicTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.CreatePublicTokenResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kPublicTokenFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string public_token = 2;
  void clear_public_token();
  const std::string& public_token() const;
  void set_public_token(const std::string& value);
  void set_public_token(std::string&& value);
  void set_public_token(const char* value);
  void set_public_token(const char* value, size_t size);
  std::string* mutable_public_token();
  std::string* release_public_token();
  void set_allocated_public_token(std::string* public_token);
  private:
  const std::string& _internal_public_token() const;
  void _internal_set_public_token(const std::string& value);
  std::string* _internal_mutable_public_token();
  public:

  // @@protoc_insertion_point(class_scope:plaid.CreatePublicTokenResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class ExchangePublicTokenRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.ExchangePublicTokenRequest) */ {
 public:
  ExchangePublicTokenRequest();
  virtual ~ExchangePublicTokenRequest();

  ExchangePublicTokenRequest(const ExchangePublicTokenRequest& from);
  ExchangePublicTokenRequest(ExchangePublicTokenRequest&& from) noexcept
    : ExchangePublicTokenRequest() {
    *this = ::std::move(from);
  }

  inline ExchangePublicTokenRequest& operator=(const ExchangePublicTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangePublicTokenRequest& operator=(ExchangePublicTokenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExchangePublicTokenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExchangePublicTokenRequest* internal_default_instance() {
    return reinterpret_cast<const ExchangePublicTokenRequest*>(
               &_ExchangePublicTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(ExchangePublicTokenRequest& a, ExchangePublicTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangePublicTokenRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExchangePublicTokenRequest* New() const final {
    return CreateMaybeMessage<ExchangePublicTokenRequest>(nullptr);
  }

  ExchangePublicTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExchangePublicTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExchangePublicTokenRequest& from);
  void MergeFrom(const ExchangePublicTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangePublicTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.ExchangePublicTokenRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kPublicTokenFieldNumber = 3,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string public_token = 3;
  void clear_public_token();
  const std::string& public_token() const;
  void set_public_token(const std::string& value);
  void set_public_token(std::string&& value);
  void set_public_token(const char* value);
  void set_public_token(const char* value, size_t size);
  std::string* mutable_public_token();
  std::string* release_public_token();
  void set_allocated_public_token(std::string* public_token);
  private:
  const std::string& _internal_public_token() const;
  void _internal_set_public_token(const std::string& value);
  std::string* _internal_mutable_public_token();
  public:

  // @@protoc_insertion_point(class_scope:plaid.ExchangePublicTokenRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class ExchangePublicTokenResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.ExchangePublicTokenResponse) */ {
 public:
  ExchangePublicTokenResponse();
  virtual ~ExchangePublicTokenResponse();

  ExchangePublicTokenResponse(const ExchangePublicTokenResponse& from);
  ExchangePublicTokenResponse(ExchangePublicTokenResponse&& from) noexcept
    : ExchangePublicTokenResponse() {
    *this = ::std::move(from);
  }

  inline ExchangePublicTokenResponse& operator=(const ExchangePublicTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangePublicTokenResponse& operator=(ExchangePublicTokenResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExchangePublicTokenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExchangePublicTokenResponse* internal_default_instance() {
    return reinterpret_cast<const ExchangePublicTokenResponse*>(
               &_ExchangePublicTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(ExchangePublicTokenResponse& a, ExchangePublicTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangePublicTokenResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExchangePublicTokenResponse* New() const final {
    return CreateMaybeMessage<ExchangePublicTokenResponse>(nullptr);
  }

  ExchangePublicTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExchangePublicTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExchangePublicTokenResponse& from);
  void MergeFrom(const ExchangePublicTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangePublicTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.ExchangePublicTokenResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kAccessTokenFieldNumber = 2,
    kItemIdFieldNumber = 3,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string access_token = 2;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // string item_id = 3;
  void clear_item_id();
  const std::string& item_id() const;
  void set_item_id(const std::string& value);
  void set_item_id(std::string&& value);
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  std::string* mutable_item_id();
  std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // @@protoc_insertion_point(class_scope:plaid.ExchangePublicTokenResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class StudentLoanLiability :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.StudentLoanLiability) */ {
 public:
  StudentLoanLiability();
  virtual ~StudentLoanLiability();

  StudentLoanLiability(const StudentLoanLiability& from);
  StudentLoanLiability(StudentLoanLiability&& from) noexcept
    : StudentLoanLiability() {
    *this = ::std::move(from);
  }

  inline StudentLoanLiability& operator=(const StudentLoanLiability& from) {
    CopyFrom(from);
    return *this;
  }
  inline StudentLoanLiability& operator=(StudentLoanLiability&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StudentLoanLiability& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StudentLoanLiability* internal_default_instance() {
    return reinterpret_cast<const StudentLoanLiability*>(
               &_StudentLoanLiability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(StudentLoanLiability& a, StudentLoanLiability& b) {
    a.Swap(&b);
  }
  inline void Swap(StudentLoanLiability* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StudentLoanLiability* New() const final {
    return CreateMaybeMessage<StudentLoanLiability>(nullptr);
  }

  StudentLoanLiability* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StudentLoanLiability>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StudentLoanLiability& from);
  void MergeFrom(const StudentLoanLiability& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StudentLoanLiability* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.StudentLoanLiability";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisbursementDatesFieldNumber = 3,
    kAccountIdFieldNumber = 1,
    kAccountNumberFieldNumber = 2,
    kExpectedPayoffDateFieldNumber = 4,
    kGuarantorFieldNumber = 5,
    kLastPaymentDateFieldNumber = 9,
    kLastStatementIssueDateFieldNumber = 11,
    kLoanNameFieldNumber = 12,
    kNextPaymentDueDateFieldNumber = 15,
    kOriginationDateFieldNumber = 16,
    kPaymentReferenceNumberFieldNumber = 19,
    kSequenceNumberFieldNumber = 22,
    kLoanStatusFieldNumber = 13,
    kPslfStatusFieldNumber = 20,
    kRepaymentPlanFieldNumber = 21,
    kServicerAddressFieldNumber = 23,
    kInterestRatePercentageFieldNumber = 6,
    kLastPaymentAmountFieldNumber = 8,
    kLastSatementBalanceFieldNumber = 10,
    kMinimumPaymentAmountFieldNumber = 14,
    kOriginationPrincipalAmountFieldNumber = 17,
    kOutstandingInterestAmountFieldNumber = 18,
    kYtdInterestPaidFieldNumber = 24,
    kYtdPrincipalPaidFieldNumber = 25,
    kIsOverdueFieldNumber = 7,
  };
  // repeated string disbursement_dates = 3;
  int disbursement_dates_size() const;
  private:
  int _internal_disbursement_dates_size() const;
  public:
  void clear_disbursement_dates();
  const std::string& disbursement_dates(int index) const;
  std::string* mutable_disbursement_dates(int index);
  void set_disbursement_dates(int index, const std::string& value);
  void set_disbursement_dates(int index, std::string&& value);
  void set_disbursement_dates(int index, const char* value);
  void set_disbursement_dates(int index, const char* value, size_t size);
  std::string* add_disbursement_dates();
  void add_disbursement_dates(const std::string& value);
  void add_disbursement_dates(std::string&& value);
  void add_disbursement_dates(const char* value);
  void add_disbursement_dates(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& disbursement_dates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_disbursement_dates();
  private:
  const std::string& _internal_disbursement_dates(int index) const;
  std::string* _internal_add_disbursement_dates();
  public:

  // string account_id = 1;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string account_number = 2;
  void clear_account_number();
  const std::string& account_number() const;
  void set_account_number(const std::string& value);
  void set_account_number(std::string&& value);
  void set_account_number(const char* value);
  void set_account_number(const char* value, size_t size);
  std::string* mutable_account_number();
  std::string* release_account_number();
  void set_allocated_account_number(std::string* account_number);
  private:
  const std::string& _internal_account_number() const;
  void _internal_set_account_number(const std::string& value);
  std::string* _internal_mutable_account_number();
  public:

  // string expected_payoff_date = 4;
  void clear_expected_payoff_date();
  const std::string& expected_payoff_date() const;
  void set_expected_payoff_date(const std::string& value);
  void set_expected_payoff_date(std::string&& value);
  void set_expected_payoff_date(const char* value);
  void set_expected_payoff_date(const char* value, size_t size);
  std::string* mutable_expected_payoff_date();
  std::string* release_expected_payoff_date();
  void set_allocated_expected_payoff_date(std::string* expected_payoff_date);
  private:
  const std::string& _internal_expected_payoff_date() const;
  void _internal_set_expected_payoff_date(const std::string& value);
  std::string* _internal_mutable_expected_payoff_date();
  public:

  // string guarantor = 5;
  void clear_guarantor();
  const std::string& guarantor() const;
  void set_guarantor(const std::string& value);
  void set_guarantor(std::string&& value);
  void set_guarantor(const char* value);
  void set_guarantor(const char* value, size_t size);
  std::string* mutable_guarantor();
  std::string* release_guarantor();
  void set_allocated_guarantor(std::string* guarantor);
  private:
  const std::string& _internal_guarantor() const;
  void _internal_set_guarantor(const std::string& value);
  std::string* _internal_mutable_guarantor();
  public:

  // string last_payment_date = 9;
  void clear_last_payment_date();
  const std::string& last_payment_date() const;
  void set_last_payment_date(const std::string& value);
  void set_last_payment_date(std::string&& value);
  void set_last_payment_date(const char* value);
  void set_last_payment_date(const char* value, size_t size);
  std::string* mutable_last_payment_date();
  std::string* release_last_payment_date();
  void set_allocated_last_payment_date(std::string* last_payment_date);
  private:
  const std::string& _internal_last_payment_date() const;
  void _internal_set_last_payment_date(const std::string& value);
  std::string* _internal_mutable_last_payment_date();
  public:

  // string last_statement_issue_date = 11;
  void clear_last_statement_issue_date();
  const std::string& last_statement_issue_date() const;
  void set_last_statement_issue_date(const std::string& value);
  void set_last_statement_issue_date(std::string&& value);
  void set_last_statement_issue_date(const char* value);
  void set_last_statement_issue_date(const char* value, size_t size);
  std::string* mutable_last_statement_issue_date();
  std::string* release_last_statement_issue_date();
  void set_allocated_last_statement_issue_date(std::string* last_statement_issue_date);
  private:
  const std::string& _internal_last_statement_issue_date() const;
  void _internal_set_last_statement_issue_date(const std::string& value);
  std::string* _internal_mutable_last_statement_issue_date();
  public:

  // string loan_name = 12;
  void clear_loan_name();
  const std::string& loan_name() const;
  void set_loan_name(const std::string& value);
  void set_loan_name(std::string&& value);
  void set_loan_name(const char* value);
  void set_loan_name(const char* value, size_t size);
  std::string* mutable_loan_name();
  std::string* release_loan_name();
  void set_allocated_loan_name(std::string* loan_name);
  private:
  const std::string& _internal_loan_name() const;
  void _internal_set_loan_name(const std::string& value);
  std::string* _internal_mutable_loan_name();
  public:

  // string next_payment_due_date = 15;
  void clear_next_payment_due_date();
  const std::string& next_payment_due_date() const;
  void set_next_payment_due_date(const std::string& value);
  void set_next_payment_due_date(std::string&& value);
  void set_next_payment_due_date(const char* value);
  void set_next_payment_due_date(const char* value, size_t size);
  std::string* mutable_next_payment_due_date();
  std::string* release_next_payment_due_date();
  void set_allocated_next_payment_due_date(std::string* next_payment_due_date);
  private:
  const std::string& _internal_next_payment_due_date() const;
  void _internal_set_next_payment_due_date(const std::string& value);
  std::string* _internal_mutable_next_payment_due_date();
  public:

  // string origination_date = 16;
  void clear_origination_date();
  const std::string& origination_date() const;
  void set_origination_date(const std::string& value);
  void set_origination_date(std::string&& value);
  void set_origination_date(const char* value);
  void set_origination_date(const char* value, size_t size);
  std::string* mutable_origination_date();
  std::string* release_origination_date();
  void set_allocated_origination_date(std::string* origination_date);
  private:
  const std::string& _internal_origination_date() const;
  void _internal_set_origination_date(const std::string& value);
  std::string* _internal_mutable_origination_date();
  public:

  // string payment_reference_number = 19;
  void clear_payment_reference_number();
  const std::string& payment_reference_number() const;
  void set_payment_reference_number(const std::string& value);
  void set_payment_reference_number(std::string&& value);
  void set_payment_reference_number(const char* value);
  void set_payment_reference_number(const char* value, size_t size);
  std::string* mutable_payment_reference_number();
  std::string* release_payment_reference_number();
  void set_allocated_payment_reference_number(std::string* payment_reference_number);
  private:
  const std::string& _internal_payment_reference_number() const;
  void _internal_set_payment_reference_number(const std::string& value);
  std::string* _internal_mutable_payment_reference_number();
  public:

  // string sequence_number = 22;
  void clear_sequence_number();
  const std::string& sequence_number() const;
  void set_sequence_number(const std::string& value);
  void set_sequence_number(std::string&& value);
  void set_sequence_number(const char* value);
  void set_sequence_number(const char* value, size_t size);
  std::string* mutable_sequence_number();
  std::string* release_sequence_number();
  void set_allocated_sequence_number(std::string* sequence_number);
  private:
  const std::string& _internal_sequence_number() const;
  void _internal_set_sequence_number(const std::string& value);
  std::string* _internal_mutable_sequence_number();
  public:

  // .plaid.StudentLoanStatus loan_status = 13;
  bool has_loan_status() const;
  private:
  bool _internal_has_loan_status() const;
  public:
  void clear_loan_status();
  const ::plaid::StudentLoanStatus& loan_status() const;
  ::plaid::StudentLoanStatus* release_loan_status();
  ::plaid::StudentLoanStatus* mutable_loan_status();
  void set_allocated_loan_status(::plaid::StudentLoanStatus* loan_status);
  private:
  const ::plaid::StudentLoanStatus& _internal_loan_status() const;
  ::plaid::StudentLoanStatus* _internal_mutable_loan_status();
  public:

  // .plaid.PSLFStatus pslf_status = 20;
  bool has_pslf_status() const;
  private:
  bool _internal_has_pslf_status() const;
  public:
  void clear_pslf_status();
  const ::plaid::PSLFStatus& pslf_status() const;
  ::plaid::PSLFStatus* release_pslf_status();
  ::plaid::PSLFStatus* mutable_pslf_status();
  void set_allocated_pslf_status(::plaid::PSLFStatus* pslf_status);
  private:
  const ::plaid::PSLFStatus& _internal_pslf_status() const;
  ::plaid::PSLFStatus* _internal_mutable_pslf_status();
  public:

  // .plaid.StudentLoanRepaymentPlan repayment_plan = 21;
  bool has_repayment_plan() const;
  private:
  bool _internal_has_repayment_plan() const;
  public:
  void clear_repayment_plan();
  const ::plaid::StudentLoanRepaymentPlan& repayment_plan() const;
  ::plaid::StudentLoanRepaymentPlan* release_repayment_plan();
  ::plaid::StudentLoanRepaymentPlan* mutable_repayment_plan();
  void set_allocated_repayment_plan(::plaid::StudentLoanRepaymentPlan* repayment_plan);
  private:
  const ::plaid::StudentLoanRepaymentPlan& _internal_repayment_plan() const;
  ::plaid::StudentLoanRepaymentPlan* _internal_mutable_repayment_plan();
  public:

  // .plaid.StudentLoanServicerAddress servicer_address = 23;
  bool has_servicer_address() const;
  private:
  bool _internal_has_servicer_address() const;
  public:
  void clear_servicer_address();
  const ::plaid::StudentLoanServicerAddress& servicer_address() const;
  ::plaid::StudentLoanServicerAddress* release_servicer_address();
  ::plaid::StudentLoanServicerAddress* mutable_servicer_address();
  void set_allocated_servicer_address(::plaid::StudentLoanServicerAddress* servicer_address);
  private:
  const ::plaid::StudentLoanServicerAddress& _internal_servicer_address() const;
  ::plaid::StudentLoanServicerAddress* _internal_mutable_servicer_address();
  public:

  // double interest_rate_percentage = 6;
  void clear_interest_rate_percentage();
  double interest_rate_percentage() const;
  void set_interest_rate_percentage(double value);
  private:
  double _internal_interest_rate_percentage() const;
  void _internal_set_interest_rate_percentage(double value);
  public:

  // double last_payment_amount = 8;
  void clear_last_payment_amount();
  double last_payment_amount() const;
  void set_last_payment_amount(double value);
  private:
  double _internal_last_payment_amount() const;
  void _internal_set_last_payment_amount(double value);
  public:

  // double last_satement_balance = 10;
  void clear_last_satement_balance();
  double last_satement_balance() const;
  void set_last_satement_balance(double value);
  private:
  double _internal_last_satement_balance() const;
  void _internal_set_last_satement_balance(double value);
  public:

  // double minimum_payment_amount = 14;
  void clear_minimum_payment_amount();
  double minimum_payment_amount() const;
  void set_minimum_payment_amount(double value);
  private:
  double _internal_minimum_payment_amount() const;
  void _internal_set_minimum_payment_amount(double value);
  public:

  // double origination_principal_amount = 17;
  void clear_origination_principal_amount();
  double origination_principal_amount() const;
  void set_origination_principal_amount(double value);
  private:
  double _internal_origination_principal_amount() const;
  void _internal_set_origination_principal_amount(double value);
  public:

  // double outstanding_interest_amount = 18;
  void clear_outstanding_interest_amount();
  double outstanding_interest_amount() const;
  void set_outstanding_interest_amount(double value);
  private:
  double _internal_outstanding_interest_amount() const;
  void _internal_set_outstanding_interest_amount(double value);
  public:

  // double ytd_interest_paid = 24;
  void clear_ytd_interest_paid();
  double ytd_interest_paid() const;
  void set_ytd_interest_paid(double value);
  private:
  double _internal_ytd_interest_paid() const;
  void _internal_set_ytd_interest_paid(double value);
  public:

  // double ytd_principal_paid = 25;
  void clear_ytd_principal_paid();
  double ytd_principal_paid() const;
  void set_ytd_principal_paid(double value);
  private:
  double _internal_ytd_principal_paid() const;
  void _internal_set_ytd_principal_paid(double value);
  public:

  // bool is_overdue = 7;
  void clear_is_overdue();
  bool is_overdue() const;
  void set_is_overdue(bool value);
  private:
  bool _internal_is_overdue() const;
  void _internal_set_is_overdue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.StudentLoanLiability)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> disbursement_dates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expected_payoff_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guarantor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_payment_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_statement_issue_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loan_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_payment_due_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origination_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_reference_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequence_number_;
  ::plaid::StudentLoanStatus* loan_status_;
  ::plaid::PSLFStatus* pslf_status_;
  ::plaid::StudentLoanRepaymentPlan* repayment_plan_;
  ::plaid::StudentLoanServicerAddress* servicer_address_;
  double interest_rate_percentage_;
  double last_payment_amount_;
  double last_satement_balance_;
  double minimum_payment_amount_;
  double origination_principal_amount_;
  double outstanding_interest_amount_;
  double ytd_interest_paid_;
  double ytd_principal_paid_;
  bool is_overdue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class PSLFStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.PSLFStatus) */ {
 public:
  PSLFStatus();
  virtual ~PSLFStatus();

  PSLFStatus(const PSLFStatus& from);
  PSLFStatus(PSLFStatus&& from) noexcept
    : PSLFStatus() {
    *this = ::std::move(from);
  }

  inline PSLFStatus& operator=(const PSLFStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PSLFStatus& operator=(PSLFStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PSLFStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSLFStatus* internal_default_instance() {
    return reinterpret_cast<const PSLFStatus*>(
               &_PSLFStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(PSLFStatus& a, PSLFStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PSLFStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PSLFStatus* New() const final {
    return CreateMaybeMessage<PSLFStatus>(nullptr);
  }

  PSLFStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PSLFStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PSLFStatus& from);
  void MergeFrom(const PSLFStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSLFStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.PSLFStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstimatedEligibilityDateFieldNumber = 1,
    kPaymentsMadeFieldNumber = 2,
    kPaymentsRemainingFieldNumber = 3,
  };
  // string estimated_eligibility_date = 1;
  void clear_estimated_eligibility_date();
  const std::string& estimated_eligibility_date() const;
  void set_estimated_eligibility_date(const std::string& value);
  void set_estimated_eligibility_date(std::string&& value);
  void set_estimated_eligibility_date(const char* value);
  void set_estimated_eligibility_date(const char* value, size_t size);
  std::string* mutable_estimated_eligibility_date();
  std::string* release_estimated_eligibility_date();
  void set_allocated_estimated_eligibility_date(std::string* estimated_eligibility_date);
  private:
  const std::string& _internal_estimated_eligibility_date() const;
  void _internal_set_estimated_eligibility_date(const std::string& value);
  std::string* _internal_mutable_estimated_eligibility_date();
  public:

  // int64 payments_made = 2;
  void clear_payments_made();
  ::PROTOBUF_NAMESPACE_ID::int64 payments_made() const;
  void set_payments_made(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_payments_made() const;
  void _internal_set_payments_made(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 payments_remaining = 3;
  void clear_payments_remaining();
  ::PROTOBUF_NAMESPACE_ID::int64 payments_remaining() const;
  void set_payments_remaining(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_payments_remaining() const;
  void _internal_set_payments_remaining(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.PSLFStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr estimated_eligibility_date_;
  ::PROTOBUF_NAMESPACE_ID::int64 payments_made_;
  ::PROTOBUF_NAMESPACE_ID::int64 payments_remaining_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class StudentLoanServicerAddress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.StudentLoanServicerAddress) */ {
 public:
  StudentLoanServicerAddress();
  virtual ~StudentLoanServicerAddress();

  StudentLoanServicerAddress(const StudentLoanServicerAddress& from);
  StudentLoanServicerAddress(StudentLoanServicerAddress&& from) noexcept
    : StudentLoanServicerAddress() {
    *this = ::std::move(from);
  }

  inline StudentLoanServicerAddress& operator=(const StudentLoanServicerAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline StudentLoanServicerAddress& operator=(StudentLoanServicerAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StudentLoanServicerAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StudentLoanServicerAddress* internal_default_instance() {
    return reinterpret_cast<const StudentLoanServicerAddress*>(
               &_StudentLoanServicerAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(StudentLoanServicerAddress& a, StudentLoanServicerAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(StudentLoanServicerAddress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StudentLoanServicerAddress* New() const final {
    return CreateMaybeMessage<StudentLoanServicerAddress>(nullptr);
  }

  StudentLoanServicerAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StudentLoanServicerAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StudentLoanServicerAddress& from);
  void MergeFrom(const StudentLoanServicerAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StudentLoanServicerAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.StudentLoanServicerAddress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCityFieldNumber = 1,
    kCountryFieldNumber = 2,
    kPostalCodeFieldNumber = 3,
    kRegionFieldNumber = 4,
    kStreetFieldNumber = 5,
  };
  // string city = 1;
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string country = 2;
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string postal_code = 3;
  void clear_postal_code();
  const std::string& postal_code() const;
  void set_postal_code(const std::string& value);
  void set_postal_code(std::string&& value);
  void set_postal_code(const char* value);
  void set_postal_code(const char* value, size_t size);
  std::string* mutable_postal_code();
  std::string* release_postal_code();
  void set_allocated_postal_code(std::string* postal_code);
  private:
  const std::string& _internal_postal_code() const;
  void _internal_set_postal_code(const std::string& value);
  std::string* _internal_mutable_postal_code();
  public:

  // string region = 4;
  void clear_region();
  const std::string& region() const;
  void set_region(const std::string& value);
  void set_region(std::string&& value);
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  std::string* mutable_region();
  std::string* release_region();
  void set_allocated_region(std::string* region);
  private:
  const std::string& _internal_region() const;
  void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // string street = 5;
  void clear_street();
  const std::string& street() const;
  void set_street(const std::string& value);
  void set_street(std::string&& value);
  void set_street(const char* value);
  void set_street(const char* value, size_t size);
  std::string* mutable_street();
  std::string* release_street();
  void set_allocated_street(std::string* street);
  private:
  const std::string& _internal_street() const;
  void _internal_set_street(const std::string& value);
  std::string* _internal_mutable_street();
  public:

  // @@protoc_insertion_point(class_scope:plaid.StudentLoanServicerAddress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postal_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr street_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class StudentLoanStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.StudentLoanStatus) */ {
 public:
  StudentLoanStatus();
  virtual ~StudentLoanStatus();

  StudentLoanStatus(const StudentLoanStatus& from);
  StudentLoanStatus(StudentLoanStatus&& from) noexcept
    : StudentLoanStatus() {
    *this = ::std::move(from);
  }

  inline StudentLoanStatus& operator=(const StudentLoanStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline StudentLoanStatus& operator=(StudentLoanStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StudentLoanStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StudentLoanStatus* internal_default_instance() {
    return reinterpret_cast<const StudentLoanStatus*>(
               &_StudentLoanStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(StudentLoanStatus& a, StudentLoanStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(StudentLoanStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StudentLoanStatus* New() const final {
    return CreateMaybeMessage<StudentLoanStatus>(nullptr);
  }

  StudentLoanStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StudentLoanStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StudentLoanStatus& from);
  void MergeFrom(const StudentLoanStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StudentLoanStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.StudentLoanStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kEndDateFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string end_date = 2;
  void clear_end_date();
  const std::string& end_date() const;
  void set_end_date(const std::string& value);
  void set_end_date(std::string&& value);
  void set_end_date(const char* value);
  void set_end_date(const char* value, size_t size);
  std::string* mutable_end_date();
  std::string* release_end_date();
  void set_allocated_end_date(std::string* end_date);
  private:
  const std::string& _internal_end_date() const;
  void _internal_set_end_date(const std::string& value);
  std::string* _internal_mutable_end_date();
  public:

  // @@protoc_insertion_point(class_scope:plaid.StudentLoanStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class StudentLoanRepaymentPlan :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.StudentLoanRepaymentPlan) */ {
 public:
  StudentLoanRepaymentPlan();
  virtual ~StudentLoanRepaymentPlan();

  StudentLoanRepaymentPlan(const StudentLoanRepaymentPlan& from);
  StudentLoanRepaymentPlan(StudentLoanRepaymentPlan&& from) noexcept
    : StudentLoanRepaymentPlan() {
    *this = ::std::move(from);
  }

  inline StudentLoanRepaymentPlan& operator=(const StudentLoanRepaymentPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline StudentLoanRepaymentPlan& operator=(StudentLoanRepaymentPlan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StudentLoanRepaymentPlan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StudentLoanRepaymentPlan* internal_default_instance() {
    return reinterpret_cast<const StudentLoanRepaymentPlan*>(
               &_StudentLoanRepaymentPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(StudentLoanRepaymentPlan& a, StudentLoanRepaymentPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(StudentLoanRepaymentPlan* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StudentLoanRepaymentPlan* New() const final {
    return CreateMaybeMessage<StudentLoanRepaymentPlan>(nullptr);
  }

  StudentLoanRepaymentPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StudentLoanRepaymentPlan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StudentLoanRepaymentPlan& from);
  void MergeFrom(const StudentLoanRepaymentPlan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StudentLoanRepaymentPlan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.StudentLoanRepaymentPlan";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:plaid.StudentLoanRepaymentPlan)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetLiabilitiesRequestOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetLiabilitiesRequestOptions) */ {
 public:
  GetLiabilitiesRequestOptions();
  virtual ~GetLiabilitiesRequestOptions();

  GetLiabilitiesRequestOptions(const GetLiabilitiesRequestOptions& from);
  GetLiabilitiesRequestOptions(GetLiabilitiesRequestOptions&& from) noexcept
    : GetLiabilitiesRequestOptions() {
    *this = ::std::move(from);
  }

  inline GetLiabilitiesRequestOptions& operator=(const GetLiabilitiesRequestOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLiabilitiesRequestOptions& operator=(GetLiabilitiesRequestOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLiabilitiesRequestOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLiabilitiesRequestOptions* internal_default_instance() {
    return reinterpret_cast<const GetLiabilitiesRequestOptions*>(
               &_GetLiabilitiesRequestOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(GetLiabilitiesRequestOptions& a, GetLiabilitiesRequestOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLiabilitiesRequestOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLiabilitiesRequestOptions* New() const final {
    return CreateMaybeMessage<GetLiabilitiesRequestOptions>(nullptr);
  }

  GetLiabilitiesRequestOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLiabilitiesRequestOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLiabilitiesRequestOptions& from);
  void MergeFrom(const GetLiabilitiesRequestOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLiabilitiesRequestOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetLiabilitiesRequestOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
  };
  // repeated string account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  const std::string& account_ids(int index) const;
  std::string* mutable_account_ids(int index);
  void set_account_ids(int index, const std::string& value);
  void set_account_ids(int index, std::string&& value);
  void set_account_ids(int index, const char* value);
  void set_account_ids(int index, const char* value, size_t size);
  std::string* add_account_ids();
  void add_account_ids(const std::string& value);
  void add_account_ids(std::string&& value);
  void add_account_ids(const char* value);
  void add_account_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_account_ids();
  private:
  const std::string& _internal_account_ids(int index) const;
  std::string* _internal_add_account_ids();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetLiabilitiesRequestOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> account_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetLiabilitiesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetLiabilitiesRequest) */ {
 public:
  GetLiabilitiesRequest();
  virtual ~GetLiabilitiesRequest();

  GetLiabilitiesRequest(const GetLiabilitiesRequest& from);
  GetLiabilitiesRequest(GetLiabilitiesRequest&& from) noexcept
    : GetLiabilitiesRequest() {
    *this = ::std::move(from);
  }

  inline GetLiabilitiesRequest& operator=(const GetLiabilitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLiabilitiesRequest& operator=(GetLiabilitiesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLiabilitiesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLiabilitiesRequest* internal_default_instance() {
    return reinterpret_cast<const GetLiabilitiesRequest*>(
               &_GetLiabilitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(GetLiabilitiesRequest& a, GetLiabilitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLiabilitiesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLiabilitiesRequest* New() const final {
    return CreateMaybeMessage<GetLiabilitiesRequest>(nullptr);
  }

  GetLiabilitiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLiabilitiesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLiabilitiesRequest& from);
  void MergeFrom(const GetLiabilitiesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLiabilitiesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetLiabilitiesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
    kOptionsFieldNumber = 4,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // .plaid.GetLiabilitiesRequestOptions options = 4;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::plaid::GetLiabilitiesRequestOptions& options() const;
  ::plaid::GetLiabilitiesRequestOptions* release_options();
  ::plaid::GetLiabilitiesRequestOptions* mutable_options();
  void set_allocated_options(::plaid::GetLiabilitiesRequestOptions* options);
  private:
  const ::plaid::GetLiabilitiesRequestOptions& _internal_options() const;
  ::plaid::GetLiabilitiesRequestOptions* _internal_mutable_options();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetLiabilitiesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::plaid::GetLiabilitiesRequestOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetLiabilitiesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetLiabilitiesResponse) */ {
 public:
  GetLiabilitiesResponse();
  virtual ~GetLiabilitiesResponse();

  GetLiabilitiesResponse(const GetLiabilitiesResponse& from);
  GetLiabilitiesResponse(GetLiabilitiesResponse&& from) noexcept
    : GetLiabilitiesResponse() {
    *this = ::std::move(from);
  }

  inline GetLiabilitiesResponse& operator=(const GetLiabilitiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLiabilitiesResponse& operator=(GetLiabilitiesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLiabilitiesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLiabilitiesResponse* internal_default_instance() {
    return reinterpret_cast<const GetLiabilitiesResponse*>(
               &_GetLiabilitiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(GetLiabilitiesResponse& a, GetLiabilitiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLiabilitiesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLiabilitiesResponse* New() const final {
    return CreateMaybeMessage<GetLiabilitiesResponse>(nullptr);
  }

  GetLiabilitiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLiabilitiesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLiabilitiesResponse& from);
  void MergeFrom(const GetLiabilitiesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLiabilitiesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetLiabilitiesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 2,
    kRequestIdFieldNumber = 1,
    kItemFieldNumber = 3,
    kLiabilitiesFieldNumber = 4,
  };
  // repeated .plaid.Account accounts = 2;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::plaid::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >*
      mutable_accounts();
  private:
  const ::plaid::Account& _internal_accounts(int index) const;
  ::plaid::Account* _internal_add_accounts();
  public:
  const ::plaid::Account& accounts(int index) const;
  ::plaid::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >&
      accounts() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .plaid.Item item = 3;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::plaid::Item& item() const;
  ::plaid::Item* release_item();
  ::plaid::Item* mutable_item();
  void set_allocated_item(::plaid::Item* item);
  private:
  const ::plaid::Item& _internal_item() const;
  ::plaid::Item* _internal_mutable_item();
  public:

  // .plaid.Liabilities liabilities = 4;
  bool has_liabilities() const;
  private:
  bool _internal_has_liabilities() const;
  public:
  void clear_liabilities();
  const ::plaid::Liabilities& liabilities() const;
  ::plaid::Liabilities* release_liabilities();
  ::plaid::Liabilities* mutable_liabilities();
  void set_allocated_liabilities(::plaid::Liabilities* liabilities);
  private:
  const ::plaid::Liabilities& _internal_liabilities() const;
  ::plaid::Liabilities* _internal_mutable_liabilities();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetLiabilitiesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account > accounts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::plaid::Item* item_;
  ::plaid::Liabilities* liabilities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class Liabilities :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.Liabilities) */ {
 public:
  Liabilities();
  virtual ~Liabilities();

  Liabilities(const Liabilities& from);
  Liabilities(Liabilities&& from) noexcept
    : Liabilities() {
    *this = ::std::move(from);
  }

  inline Liabilities& operator=(const Liabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline Liabilities& operator=(Liabilities&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Liabilities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Liabilities* internal_default_instance() {
    return reinterpret_cast<const Liabilities*>(
               &_Liabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(Liabilities& a, Liabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(Liabilities* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Liabilities* New() const final {
    return CreateMaybeMessage<Liabilities>(nullptr);
  }

  Liabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Liabilities>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Liabilities& from);
  void MergeFrom(const Liabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Liabilities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.Liabilities";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStudentFieldNumber = 1,
  };
  // repeated .plaid.StudentLoanLiability student = 1;
  int student_size() const;
  private:
  int _internal_student_size() const;
  public:
  void clear_student();
  ::plaid::StudentLoanLiability* mutable_student(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::StudentLoanLiability >*
      mutable_student();
  private:
  const ::plaid::StudentLoanLiability& _internal_student(int index) const;
  ::plaid::StudentLoanLiability* _internal_add_student();
  public:
  const ::plaid::StudentLoanLiability& student(int index) const;
  ::plaid::StudentLoanLiability* add_student();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::StudentLoanLiability >&
      student() const;

  // @@protoc_insertion_point(class_scope:plaid.Liabilities)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::StudentLoanLiability > student_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetLiabilitiesOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetLiabilitiesOptions) */ {
 public:
  GetLiabilitiesOptions();
  virtual ~GetLiabilitiesOptions();

  GetLiabilitiesOptions(const GetLiabilitiesOptions& from);
  GetLiabilitiesOptions(GetLiabilitiesOptions&& from) noexcept
    : GetLiabilitiesOptions() {
    *this = ::std::move(from);
  }

  inline GetLiabilitiesOptions& operator=(const GetLiabilitiesOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLiabilitiesOptions& operator=(GetLiabilitiesOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLiabilitiesOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLiabilitiesOptions* internal_default_instance() {
    return reinterpret_cast<const GetLiabilitiesOptions*>(
               &_GetLiabilitiesOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(GetLiabilitiesOptions& a, GetLiabilitiesOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLiabilitiesOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLiabilitiesOptions* New() const final {
    return CreateMaybeMessage<GetLiabilitiesOptions>(nullptr);
  }

  GetLiabilitiesOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLiabilitiesOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLiabilitiesOptions& from);
  void MergeFrom(const GetLiabilitiesOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLiabilitiesOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetLiabilitiesOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
  };
  // repeated string account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  const std::string& account_ids(int index) const;
  std::string* mutable_account_ids(int index);
  void set_account_ids(int index, const std::string& value);
  void set_account_ids(int index, std::string&& value);
  void set_account_ids(int index, const char* value);
  void set_account_ids(int index, const char* value, size_t size);
  std::string* add_account_ids();
  void add_account_ids(const std::string& value);
  void add_account_ids(std::string&& value);
  void add_account_ids(const char* value);
  void add_account_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_account_ids();
  private:
  const std::string& _internal_account_ids(int index) const;
  std::string* _internal_add_account_ids();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetLiabilitiesOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> account_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class CreateProcessorTokenRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.CreateProcessorTokenRequest) */ {
 public:
  CreateProcessorTokenRequest();
  virtual ~CreateProcessorTokenRequest();

  CreateProcessorTokenRequest(const CreateProcessorTokenRequest& from);
  CreateProcessorTokenRequest(CreateProcessorTokenRequest&& from) noexcept
    : CreateProcessorTokenRequest() {
    *this = ::std::move(from);
  }

  inline CreateProcessorTokenRequest& operator=(const CreateProcessorTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProcessorTokenRequest& operator=(CreateProcessorTokenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateProcessorTokenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateProcessorTokenRequest* internal_default_instance() {
    return reinterpret_cast<const CreateProcessorTokenRequest*>(
               &_CreateProcessorTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(CreateProcessorTokenRequest& a, CreateProcessorTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProcessorTokenRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateProcessorTokenRequest* New() const final {
    return CreateMaybeMessage<CreateProcessorTokenRequest>(nullptr);
  }

  CreateProcessorTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateProcessorTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateProcessorTokenRequest& from);
  void MergeFrom(const CreateProcessorTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProcessorTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.CreateProcessorTokenRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
    kAccountIdFieldNumber = 4,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // string account_id = 4;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // @@protoc_insertion_point(class_scope:plaid.CreateProcessorTokenRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class CreateProcessorTokenResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.CreateProcessorTokenResponse) */ {
 public:
  CreateProcessorTokenResponse();
  virtual ~CreateProcessorTokenResponse();

  CreateProcessorTokenResponse(const CreateProcessorTokenResponse& from);
  CreateProcessorTokenResponse(CreateProcessorTokenResponse&& from) noexcept
    : CreateProcessorTokenResponse() {
    *this = ::std::move(from);
  }

  inline CreateProcessorTokenResponse& operator=(const CreateProcessorTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProcessorTokenResponse& operator=(CreateProcessorTokenResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateProcessorTokenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateProcessorTokenResponse* internal_default_instance() {
    return reinterpret_cast<const CreateProcessorTokenResponse*>(
               &_CreateProcessorTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(CreateProcessorTokenResponse& a, CreateProcessorTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProcessorTokenResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateProcessorTokenResponse* New() const final {
    return CreateMaybeMessage<CreateProcessorTokenResponse>(nullptr);
  }

  CreateProcessorTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateProcessorTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateProcessorTokenResponse& from);
  void MergeFrom(const CreateProcessorTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProcessorTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.CreateProcessorTokenResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kProcessorTokenFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string processor_token = 2;
  void clear_processor_token();
  const std::string& processor_token() const;
  void set_processor_token(const std::string& value);
  void set_processor_token(std::string&& value);
  void set_processor_token(const char* value);
  void set_processor_token(const char* value, size_t size);
  std::string* mutable_processor_token();
  std::string* release_processor_token();
  void set_allocated_processor_token(std::string* processor_token);
  private:
  const std::string& _internal_processor_token() const;
  void _internal_set_processor_token(const std::string& value);
  std::string* _internal_mutable_processor_token();
  public:

  // @@protoc_insertion_point(class_scope:plaid.CreateProcessorTokenResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processor_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class CreateStripeTokenRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.CreateStripeTokenRequest) */ {
 public:
  CreateStripeTokenRequest();
  virtual ~CreateStripeTokenRequest();

  CreateStripeTokenRequest(const CreateStripeTokenRequest& from);
  CreateStripeTokenRequest(CreateStripeTokenRequest&& from) noexcept
    : CreateStripeTokenRequest() {
    *this = ::std::move(from);
  }

  inline CreateStripeTokenRequest& operator=(const CreateStripeTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateStripeTokenRequest& operator=(CreateStripeTokenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateStripeTokenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateStripeTokenRequest* internal_default_instance() {
    return reinterpret_cast<const CreateStripeTokenRequest*>(
               &_CreateStripeTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(CreateStripeTokenRequest& a, CreateStripeTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateStripeTokenRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateStripeTokenRequest* New() const final {
    return CreateMaybeMessage<CreateStripeTokenRequest>(nullptr);
  }

  CreateStripeTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateStripeTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateStripeTokenRequest& from);
  void MergeFrom(const CreateStripeTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateStripeTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.CreateStripeTokenRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
    kAccountIdFieldNumber = 4,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // string account_id = 4;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // @@protoc_insertion_point(class_scope:plaid.CreateStripeTokenRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class CreateStripeTokenResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.CreateStripeTokenResponse) */ {
 public:
  CreateStripeTokenResponse();
  virtual ~CreateStripeTokenResponse();

  CreateStripeTokenResponse(const CreateStripeTokenResponse& from);
  CreateStripeTokenResponse(CreateStripeTokenResponse&& from) noexcept
    : CreateStripeTokenResponse() {
    *this = ::std::move(from);
  }

  inline CreateStripeTokenResponse& operator=(const CreateStripeTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateStripeTokenResponse& operator=(CreateStripeTokenResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateStripeTokenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateStripeTokenResponse* internal_default_instance() {
    return reinterpret_cast<const CreateStripeTokenResponse*>(
               &_CreateStripeTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(CreateStripeTokenResponse& a, CreateStripeTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateStripeTokenResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateStripeTokenResponse* New() const final {
    return CreateMaybeMessage<CreateStripeTokenResponse>(nullptr);
  }

  CreateStripeTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateStripeTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateStripeTokenResponse& from);
  void MergeFrom(const CreateStripeTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateStripeTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.CreateStripeTokenResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kStripeBankAccountTokenFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string stripe_bank_account_token = 2;
  void clear_stripe_bank_account_token();
  const std::string& stripe_bank_account_token() const;
  void set_stripe_bank_account_token(const std::string& value);
  void set_stripe_bank_account_token(std::string&& value);
  void set_stripe_bank_account_token(const char* value);
  void set_stripe_bank_account_token(const char* value, size_t size);
  std::string* mutable_stripe_bank_account_token();
  std::string* release_stripe_bank_account_token();
  void set_allocated_stripe_bank_account_token(std::string* stripe_bank_account_token);
  private:
  const std::string& _internal_stripe_bank_account_token() const;
  void _internal_set_stripe_bank_account_token(const std::string& value);
  std::string* _internal_mutable_stripe_bank_account_token();
  public:

  // @@protoc_insertion_point(class_scope:plaid.CreateStripeTokenResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stripe_bank_account_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class CreateSandboxPublicTokenRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.CreateSandboxPublicTokenRequest) */ {
 public:
  CreateSandboxPublicTokenRequest();
  virtual ~CreateSandboxPublicTokenRequest();

  CreateSandboxPublicTokenRequest(const CreateSandboxPublicTokenRequest& from);
  CreateSandboxPublicTokenRequest(CreateSandboxPublicTokenRequest&& from) noexcept
    : CreateSandboxPublicTokenRequest() {
    *this = ::std::move(from);
  }

  inline CreateSandboxPublicTokenRequest& operator=(const CreateSandboxPublicTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSandboxPublicTokenRequest& operator=(CreateSandboxPublicTokenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSandboxPublicTokenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSandboxPublicTokenRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSandboxPublicTokenRequest*>(
               &_CreateSandboxPublicTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(CreateSandboxPublicTokenRequest& a, CreateSandboxPublicTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSandboxPublicTokenRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSandboxPublicTokenRequest* New() const final {
    return CreateMaybeMessage<CreateSandboxPublicTokenRequest>(nullptr);
  }

  CreateSandboxPublicTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSandboxPublicTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSandboxPublicTokenRequest& from);
  void MergeFrom(const CreateSandboxPublicTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSandboxPublicTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.CreateSandboxPublicTokenRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitalProductsFieldNumber = 2,
    kInstitutionIdFieldNumber = 1,
    kPublicKeyFieldNumber = 3,
  };
  // repeated string inital_products = 2;
  int inital_products_size() const;
  private:
  int _internal_inital_products_size() const;
  public:
  void clear_inital_products();
  const std::string& inital_products(int index) const;
  std::string* mutable_inital_products(int index);
  void set_inital_products(int index, const std::string& value);
  void set_inital_products(int index, std::string&& value);
  void set_inital_products(int index, const char* value);
  void set_inital_products(int index, const char* value, size_t size);
  std::string* add_inital_products();
  void add_inital_products(const std::string& value);
  void add_inital_products(std::string&& value);
  void add_inital_products(const char* value);
  void add_inital_products(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inital_products() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inital_products();
  private:
  const std::string& _internal_inital_products(int index) const;
  std::string* _internal_add_inital_products();
  public:

  // string institution_id = 1;
  void clear_institution_id();
  const std::string& institution_id() const;
  void set_institution_id(const std::string& value);
  void set_institution_id(std::string&& value);
  void set_institution_id(const char* value);
  void set_institution_id(const char* value, size_t size);
  std::string* mutable_institution_id();
  std::string* release_institution_id();
  void set_allocated_institution_id(std::string* institution_id);
  private:
  const std::string& _internal_institution_id() const;
  void _internal_set_institution_id(const std::string& value);
  std::string* _internal_mutable_institution_id();
  public:

  // string public_key = 3;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // @@protoc_insertion_point(class_scope:plaid.CreateSandboxPublicTokenRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inital_products_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr institution_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class CreateSandboxPublicTokenResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.CreateSandboxPublicTokenResponse) */ {
 public:
  CreateSandboxPublicTokenResponse();
  virtual ~CreateSandboxPublicTokenResponse();

  CreateSandboxPublicTokenResponse(const CreateSandboxPublicTokenResponse& from);
  CreateSandboxPublicTokenResponse(CreateSandboxPublicTokenResponse&& from) noexcept
    : CreateSandboxPublicTokenResponse() {
    *this = ::std::move(from);
  }

  inline CreateSandboxPublicTokenResponse& operator=(const CreateSandboxPublicTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSandboxPublicTokenResponse& operator=(CreateSandboxPublicTokenResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSandboxPublicTokenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSandboxPublicTokenResponse* internal_default_instance() {
    return reinterpret_cast<const CreateSandboxPublicTokenResponse*>(
               &_CreateSandboxPublicTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(CreateSandboxPublicTokenResponse& a, CreateSandboxPublicTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSandboxPublicTokenResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSandboxPublicTokenResponse* New() const final {
    return CreateMaybeMessage<CreateSandboxPublicTokenResponse>(nullptr);
  }

  CreateSandboxPublicTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSandboxPublicTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSandboxPublicTokenResponse& from);
  void MergeFrom(const CreateSandboxPublicTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSandboxPublicTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.CreateSandboxPublicTokenResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kPublicTokenFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string public_token = 2;
  void clear_public_token();
  const std::string& public_token() const;
  void set_public_token(const std::string& value);
  void set_public_token(std::string&& value);
  void set_public_token(const char* value);
  void set_public_token(const char* value, size_t size);
  std::string* mutable_public_token();
  std::string* release_public_token();
  void set_allocated_public_token(std::string* public_token);
  private:
  const std::string& _internal_public_token() const;
  void _internal_set_public_token(const std::string& value);
  std::string* _internal_mutable_public_token();
  public:

  // @@protoc_insertion_point(class_scope:plaid.CreateSandboxPublicTokenResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class ResetSandboxItemRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.ResetSandboxItemRequest) */ {
 public:
  ResetSandboxItemRequest();
  virtual ~ResetSandboxItemRequest();

  ResetSandboxItemRequest(const ResetSandboxItemRequest& from);
  ResetSandboxItemRequest(ResetSandboxItemRequest&& from) noexcept
    : ResetSandboxItemRequest() {
    *this = ::std::move(from);
  }

  inline ResetSandboxItemRequest& operator=(const ResetSandboxItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetSandboxItemRequest& operator=(ResetSandboxItemRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetSandboxItemRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetSandboxItemRequest* internal_default_instance() {
    return reinterpret_cast<const ResetSandboxItemRequest*>(
               &_ResetSandboxItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(ResetSandboxItemRequest& a, ResetSandboxItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetSandboxItemRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetSandboxItemRequest* New() const final {
    return CreateMaybeMessage<ResetSandboxItemRequest>(nullptr);
  }

  ResetSandboxItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetSandboxItemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetSandboxItemRequest& from);
  void MergeFrom(const ResetSandboxItemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetSandboxItemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.ResetSandboxItemRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // @@protoc_insertion_point(class_scope:plaid.ResetSandboxItemRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class ResetSandboxItemResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.ResetSandboxItemResponse) */ {
 public:
  ResetSandboxItemResponse();
  virtual ~ResetSandboxItemResponse();

  ResetSandboxItemResponse(const ResetSandboxItemResponse& from);
  ResetSandboxItemResponse(ResetSandboxItemResponse&& from) noexcept
    : ResetSandboxItemResponse() {
    *this = ::std::move(from);
  }

  inline ResetSandboxItemResponse& operator=(const ResetSandboxItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetSandboxItemResponse& operator=(ResetSandboxItemResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetSandboxItemResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetSandboxItemResponse* internal_default_instance() {
    return reinterpret_cast<const ResetSandboxItemResponse*>(
               &_ResetSandboxItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(ResetSandboxItemResponse& a, ResetSandboxItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetSandboxItemResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetSandboxItemResponse* New() const final {
    return CreateMaybeMessage<ResetSandboxItemResponse>(nullptr);
  }

  ResetSandboxItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetSandboxItemResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetSandboxItemResponse& from);
  void MergeFrom(const ResetSandboxItemResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetSandboxItemResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.ResetSandboxItemResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kResetLoginFieldNumber = 2,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // bool reset_login = 2;
  void clear_reset_login();
  bool reset_login() const;
  void set_reset_login(bool value);
  private:
  bool _internal_reset_login() const;
  void _internal_set_reset_login(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.ResetSandboxItemResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  bool reset_login_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class Transaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.Transaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 5,
    kAccountIdFieldNumber = 1,
    kIsoCurrencyCodeFieldNumber = 3,
    kUnofficialCurrencyCodeFieldNumber = 4,
    kCategoryIdFieldNumber = 6,
    kDateFieldNumber = 7,
    kNameFieldNumber = 9,
    kPendingTransactionIdFieldNumber = 12,
    kAccountOwnerFieldNumber = 13,
    kTransactionIdFieldNumber = 14,
    kTransactionTypeFieldNumber = 15,
    kLocationFieldNumber = 8,
    kPaymentMetaFieldNumber = 10,
    kAmountFieldNumber = 2,
    kPendingFieldNumber = 11,
  };
  // repeated string category = 5;
  int category_size() const;
  private:
  int _internal_category_size() const;
  public:
  void clear_category();
  const std::string& category(int index) const;
  std::string* mutable_category(int index);
  void set_category(int index, const std::string& value);
  void set_category(int index, std::string&& value);
  void set_category(int index, const char* value);
  void set_category(int index, const char* value, size_t size);
  std::string* add_category();
  void add_category(const std::string& value);
  void add_category(std::string&& value);
  void add_category(const char* value);
  void add_category(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& category() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_category();
  private:
  const std::string& _internal_category(int index) const;
  std::string* _internal_add_category();
  public:

  // string account_id = 1;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string iso_currency_code = 3;
  void clear_iso_currency_code();
  const std::string& iso_currency_code() const;
  void set_iso_currency_code(const std::string& value);
  void set_iso_currency_code(std::string&& value);
  void set_iso_currency_code(const char* value);
  void set_iso_currency_code(const char* value, size_t size);
  std::string* mutable_iso_currency_code();
  std::string* release_iso_currency_code();
  void set_allocated_iso_currency_code(std::string* iso_currency_code);
  private:
  const std::string& _internal_iso_currency_code() const;
  void _internal_set_iso_currency_code(const std::string& value);
  std::string* _internal_mutable_iso_currency_code();
  public:

  // string unofficial_currency_code = 4;
  void clear_unofficial_currency_code();
  const std::string& unofficial_currency_code() const;
  void set_unofficial_currency_code(const std::string& value);
  void set_unofficial_currency_code(std::string&& value);
  void set_unofficial_currency_code(const char* value);
  void set_unofficial_currency_code(const char* value, size_t size);
  std::string* mutable_unofficial_currency_code();
  std::string* release_unofficial_currency_code();
  void set_allocated_unofficial_currency_code(std::string* unofficial_currency_code);
  private:
  const std::string& _internal_unofficial_currency_code() const;
  void _internal_set_unofficial_currency_code(const std::string& value);
  std::string* _internal_mutable_unofficial_currency_code();
  public:

  // string category_id = 6;
  void clear_category_id();
  const std::string& category_id() const;
  void set_category_id(const std::string& value);
  void set_category_id(std::string&& value);
  void set_category_id(const char* value);
  void set_category_id(const char* value, size_t size);
  std::string* mutable_category_id();
  std::string* release_category_id();
  void set_allocated_category_id(std::string* category_id);
  private:
  const std::string& _internal_category_id() const;
  void _internal_set_category_id(const std::string& value);
  std::string* _internal_mutable_category_id();
  public:

  // string date = 7;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // string name = 9;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pending_transaction_id = 12;
  void clear_pending_transaction_id();
  const std::string& pending_transaction_id() const;
  void set_pending_transaction_id(const std::string& value);
  void set_pending_transaction_id(std::string&& value);
  void set_pending_transaction_id(const char* value);
  void set_pending_transaction_id(const char* value, size_t size);
  std::string* mutable_pending_transaction_id();
  std::string* release_pending_transaction_id();
  void set_allocated_pending_transaction_id(std::string* pending_transaction_id);
  private:
  const std::string& _internal_pending_transaction_id() const;
  void _internal_set_pending_transaction_id(const std::string& value);
  std::string* _internal_mutable_pending_transaction_id();
  public:

  // string account_owner = 13;
  void clear_account_owner();
  const std::string& account_owner() const;
  void set_account_owner(const std::string& value);
  void set_account_owner(std::string&& value);
  void set_account_owner(const char* value);
  void set_account_owner(const char* value, size_t size);
  std::string* mutable_account_owner();
  std::string* release_account_owner();
  void set_allocated_account_owner(std::string* account_owner);
  private:
  const std::string& _internal_account_owner() const;
  void _internal_set_account_owner(const std::string& value);
  std::string* _internal_mutable_account_owner();
  public:

  // string transaction_id = 14;
  void clear_transaction_id();
  const std::string& transaction_id() const;
  void set_transaction_id(const std::string& value);
  void set_transaction_id(std::string&& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  std::string* mutable_transaction_id();
  std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);
  private:
  const std::string& _internal_transaction_id() const;
  void _internal_set_transaction_id(const std::string& value);
  std::string* _internal_mutable_transaction_id();
  public:

  // string transaction_type = 15;
  void clear_transaction_type();
  const std::string& transaction_type() const;
  void set_transaction_type(const std::string& value);
  void set_transaction_type(std::string&& value);
  void set_transaction_type(const char* value);
  void set_transaction_type(const char* value, size_t size);
  std::string* mutable_transaction_type();
  std::string* release_transaction_type();
  void set_allocated_transaction_type(std::string* transaction_type);
  private:
  const std::string& _internal_transaction_type() const;
  void _internal_set_transaction_type(const std::string& value);
  std::string* _internal_mutable_transaction_type();
  public:

  // .plaid.Location location = 8;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::plaid::Location& location() const;
  ::plaid::Location* release_location();
  ::plaid::Location* mutable_location();
  void set_allocated_location(::plaid::Location* location);
  private:
  const ::plaid::Location& _internal_location() const;
  ::plaid::Location* _internal_mutable_location();
  public:

  // .plaid.PaymentMeta payment_meta = 10;
  bool has_payment_meta() const;
  private:
  bool _internal_has_payment_meta() const;
  public:
  void clear_payment_meta();
  const ::plaid::PaymentMeta& payment_meta() const;
  ::plaid::PaymentMeta* release_payment_meta();
  ::plaid::PaymentMeta* mutable_payment_meta();
  void set_allocated_payment_meta(::plaid::PaymentMeta* payment_meta);
  private:
  const ::plaid::PaymentMeta& _internal_payment_meta() const;
  ::plaid::PaymentMeta* _internal_mutable_payment_meta();
  public:

  // double amount = 2;
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // bool pending = 11;
  void clear_pending();
  bool pending() const;
  void set_pending(bool value);
  private:
  bool _internal_pending() const;
  void _internal_set_pending(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.Transaction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iso_currency_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unofficial_currency_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pending_transaction_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_type_;
  ::plaid::Location* location_;
  ::plaid::PaymentMeta* payment_meta_;
  double amount_;
  bool pending_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class Location :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return CreateMaybeMessage<Location>(nullptr);
  }

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.Location";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddreessFieldNumber = 1,
    kCityFieldNumber = 2,
    kRegionFieldNumber = 5,
    kStoreNumberFieldNumber = 6,
    kPostalCodeFieldNumber = 7,
    kCountryFieldNumber = 8,
    kLatFieldNumber = 3,
    kLonFieldNumber = 4,
  };
  // string addreess = 1;
  void clear_addreess();
  const std::string& addreess() const;
  void set_addreess(const std::string& value);
  void set_addreess(std::string&& value);
  void set_addreess(const char* value);
  void set_addreess(const char* value, size_t size);
  std::string* mutable_addreess();
  std::string* release_addreess();
  void set_allocated_addreess(std::string* addreess);
  private:
  const std::string& _internal_addreess() const;
  void _internal_set_addreess(const std::string& value);
  std::string* _internal_mutable_addreess();
  public:

  // string city = 2;
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string region = 5;
  void clear_region();
  const std::string& region() const;
  void set_region(const std::string& value);
  void set_region(std::string&& value);
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  std::string* mutable_region();
  std::string* release_region();
  void set_allocated_region(std::string* region);
  private:
  const std::string& _internal_region() const;
  void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // string store_number = 6;
  void clear_store_number();
  const std::string& store_number() const;
  void set_store_number(const std::string& value);
  void set_store_number(std::string&& value);
  void set_store_number(const char* value);
  void set_store_number(const char* value, size_t size);
  std::string* mutable_store_number();
  std::string* release_store_number();
  void set_allocated_store_number(std::string* store_number);
  private:
  const std::string& _internal_store_number() const;
  void _internal_set_store_number(const std::string& value);
  std::string* _internal_mutable_store_number();
  public:

  // string postal_code = 7;
  void clear_postal_code();
  const std::string& postal_code() const;
  void set_postal_code(const std::string& value);
  void set_postal_code(std::string&& value);
  void set_postal_code(const char* value);
  void set_postal_code(const char* value, size_t size);
  std::string* mutable_postal_code();
  std::string* release_postal_code();
  void set_allocated_postal_code(std::string* postal_code);
  private:
  const std::string& _internal_postal_code() const;
  void _internal_set_postal_code(const std::string& value);
  std::string* _internal_mutable_postal_code();
  public:

  // string country = 8;
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // double lat = 3;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lon = 4;
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.Location)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addreess_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postal_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  double lat_;
  double lon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class PaymentMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.PaymentMeta) */ {
 public:
  PaymentMeta();
  virtual ~PaymentMeta();

  PaymentMeta(const PaymentMeta& from);
  PaymentMeta(PaymentMeta&& from) noexcept
    : PaymentMeta() {
    *this = ::std::move(from);
  }

  inline PaymentMeta& operator=(const PaymentMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentMeta& operator=(PaymentMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PaymentMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PaymentMeta* internal_default_instance() {
    return reinterpret_cast<const PaymentMeta*>(
               &_PaymentMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(PaymentMeta& a, PaymentMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentMeta* New() const final {
    return CreateMaybeMessage<PaymentMeta>(nullptr);
  }

  PaymentMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PaymentMeta& from);
  void MergeFrom(const PaymentMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.PaymentMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kByOrderOfFieldNumber = 1,
    kPayeeFieldNumber = 2,
    kPayerFieldNumber = 3,
    kPaymentMethodFieldNumber = 4,
    kPaymentProcessorFieldNumber = 5,
    kPpdIdFieldNumber = 6,
    kReasonFieldNumber = 7,
    kReferenceNumberFieldNumber = 8,
  };
  // string by_order_of = 1;
  void clear_by_order_of();
  const std::string& by_order_of() const;
  void set_by_order_of(const std::string& value);
  void set_by_order_of(std::string&& value);
  void set_by_order_of(const char* value);
  void set_by_order_of(const char* value, size_t size);
  std::string* mutable_by_order_of();
  std::string* release_by_order_of();
  void set_allocated_by_order_of(std::string* by_order_of);
  private:
  const std::string& _internal_by_order_of() const;
  void _internal_set_by_order_of(const std::string& value);
  std::string* _internal_mutable_by_order_of();
  public:

  // string payee = 2;
  void clear_payee();
  const std::string& payee() const;
  void set_payee(const std::string& value);
  void set_payee(std::string&& value);
  void set_payee(const char* value);
  void set_payee(const char* value, size_t size);
  std::string* mutable_payee();
  std::string* release_payee();
  void set_allocated_payee(std::string* payee);
  private:
  const std::string& _internal_payee() const;
  void _internal_set_payee(const std::string& value);
  std::string* _internal_mutable_payee();
  public:

  // string payer = 3;
  void clear_payer();
  const std::string& payer() const;
  void set_payer(const std::string& value);
  void set_payer(std::string&& value);
  void set_payer(const char* value);
  void set_payer(const char* value, size_t size);
  std::string* mutable_payer();
  std::string* release_payer();
  void set_allocated_payer(std::string* payer);
  private:
  const std::string& _internal_payer() const;
  void _internal_set_payer(const std::string& value);
  std::string* _internal_mutable_payer();
  public:

  // string payment_method = 4;
  void clear_payment_method();
  const std::string& payment_method() const;
  void set_payment_method(const std::string& value);
  void set_payment_method(std::string&& value);
  void set_payment_method(const char* value);
  void set_payment_method(const char* value, size_t size);
  std::string* mutable_payment_method();
  std::string* release_payment_method();
  void set_allocated_payment_method(std::string* payment_method);
  private:
  const std::string& _internal_payment_method() const;
  void _internal_set_payment_method(const std::string& value);
  std::string* _internal_mutable_payment_method();
  public:

  // string payment_processor = 5;
  void clear_payment_processor();
  const std::string& payment_processor() const;
  void set_payment_processor(const std::string& value);
  void set_payment_processor(std::string&& value);
  void set_payment_processor(const char* value);
  void set_payment_processor(const char* value, size_t size);
  std::string* mutable_payment_processor();
  std::string* release_payment_processor();
  void set_allocated_payment_processor(std::string* payment_processor);
  private:
  const std::string& _internal_payment_processor() const;
  void _internal_set_payment_processor(const std::string& value);
  std::string* _internal_mutable_payment_processor();
  public:

  // string ppd_id = 6;
  void clear_ppd_id();
  const std::string& ppd_id() const;
  void set_ppd_id(const std::string& value);
  void set_ppd_id(std::string&& value);
  void set_ppd_id(const char* value);
  void set_ppd_id(const char* value, size_t size);
  std::string* mutable_ppd_id();
  std::string* release_ppd_id();
  void set_allocated_ppd_id(std::string* ppd_id);
  private:
  const std::string& _internal_ppd_id() const;
  void _internal_set_ppd_id(const std::string& value);
  std::string* _internal_mutable_ppd_id();
  public:

  // string reason = 7;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // string reference_number = 8;
  void clear_reference_number();
  const std::string& reference_number() const;
  void set_reference_number(const std::string& value);
  void set_reference_number(std::string&& value);
  void set_reference_number(const char* value);
  void set_reference_number(const char* value, size_t size);
  std::string* mutable_reference_number();
  std::string* release_reference_number();
  void set_allocated_reference_number(std::string* reference_number);
  private:
  const std::string& _internal_reference_number() const;
  void _internal_set_reference_number(const std::string& value);
  std::string* _internal_mutable_reference_number();
  public:

  // @@protoc_insertion_point(class_scope:plaid.PaymentMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr by_order_of_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_processor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ppd_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetTransactionsRequestOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetTransactionsRequestOptions) */ {
 public:
  GetTransactionsRequestOptions();
  virtual ~GetTransactionsRequestOptions();

  GetTransactionsRequestOptions(const GetTransactionsRequestOptions& from);
  GetTransactionsRequestOptions(GetTransactionsRequestOptions&& from) noexcept
    : GetTransactionsRequestOptions() {
    *this = ::std::move(from);
  }

  inline GetTransactionsRequestOptions& operator=(const GetTransactionsRequestOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransactionsRequestOptions& operator=(GetTransactionsRequestOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTransactionsRequestOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTransactionsRequestOptions* internal_default_instance() {
    return reinterpret_cast<const GetTransactionsRequestOptions*>(
               &_GetTransactionsRequestOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(GetTransactionsRequestOptions& a, GetTransactionsRequestOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTransactionsRequestOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTransactionsRequestOptions* New() const final {
    return CreateMaybeMessage<GetTransactionsRequestOptions>(nullptr);
  }

  GetTransactionsRequestOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTransactionsRequestOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTransactionsRequestOptions& from);
  void MergeFrom(const GetTransactionsRequestOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransactionsRequestOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetTransactionsRequestOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
    kCountFieldNumber = 2,
    kOffsetFieldNumber = 3,
  };
  // repeated string account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  const std::string& account_ids(int index) const;
  std::string* mutable_account_ids(int index);
  void set_account_ids(int index, const std::string& value);
  void set_account_ids(int index, std::string&& value);
  void set_account_ids(int index, const char* value);
  void set_account_ids(int index, const char* value, size_t size);
  std::string* add_account_ids();
  void add_account_ids(const std::string& value);
  void add_account_ids(std::string&& value);
  void add_account_ids(const char* value);
  void add_account_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_account_ids();
  private:
  const std::string& _internal_account_ids(int index) const;
  std::string* _internal_add_account_ids();
  public:

  // int64 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offset = 3;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetTransactionsRequestOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> account_ids_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetTransactionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetTransactionsRequest) */ {
 public:
  GetTransactionsRequest();
  virtual ~GetTransactionsRequest();

  GetTransactionsRequest(const GetTransactionsRequest& from);
  GetTransactionsRequest(GetTransactionsRequest&& from) noexcept
    : GetTransactionsRequest() {
    *this = ::std::move(from);
  }

  inline GetTransactionsRequest& operator=(const GetTransactionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransactionsRequest& operator=(GetTransactionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTransactionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTransactionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetTransactionsRequest*>(
               &_GetTransactionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(GetTransactionsRequest& a, GetTransactionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTransactionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTransactionsRequest* New() const final {
    return CreateMaybeMessage<GetTransactionsRequest>(nullptr);
  }

  GetTransactionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTransactionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTransactionsRequest& from);
  void MergeFrom(const GetTransactionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransactionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetTransactionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSecretFieldNumber = 2,
    kAccessTokenFieldNumber = 3,
    kStartDateFieldNumber = 4,
    kEndDateFieldNumber = 5,
    kOptionsFieldNumber = 6,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string secret = 2;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string access_token = 3;
  void clear_access_token();
  const std::string& access_token() const;
  void set_access_token(const std::string& value);
  void set_access_token(std::string&& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  std::string* mutable_access_token();
  std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // string start_date = 4;
  void clear_start_date();
  const std::string& start_date() const;
  void set_start_date(const std::string& value);
  void set_start_date(std::string&& value);
  void set_start_date(const char* value);
  void set_start_date(const char* value, size_t size);
  std::string* mutable_start_date();
  std::string* release_start_date();
  void set_allocated_start_date(std::string* start_date);
  private:
  const std::string& _internal_start_date() const;
  void _internal_set_start_date(const std::string& value);
  std::string* _internal_mutable_start_date();
  public:

  // string end_date = 5;
  void clear_end_date();
  const std::string& end_date() const;
  void set_end_date(const std::string& value);
  void set_end_date(std::string&& value);
  void set_end_date(const char* value);
  void set_end_date(const char* value, size_t size);
  std::string* mutable_end_date();
  std::string* release_end_date();
  void set_allocated_end_date(std::string* end_date);
  private:
  const std::string& _internal_end_date() const;
  void _internal_set_end_date(const std::string& value);
  std::string* _internal_mutable_end_date();
  public:

  // .plaid.GetTransactionsRequestOptions options = 6;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::plaid::GetTransactionsRequestOptions& options() const;
  ::plaid::GetTransactionsRequestOptions* release_options();
  ::plaid::GetTransactionsRequestOptions* mutable_options();
  void set_allocated_options(::plaid::GetTransactionsRequestOptions* options);
  private:
  const ::plaid::GetTransactionsRequestOptions& _internal_options() const;
  ::plaid::GetTransactionsRequestOptions* _internal_mutable_options();
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetTransactionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_date_;
  ::plaid::GetTransactionsRequestOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetTransactionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetTransactionsResponse) */ {
 public:
  GetTransactionsResponse();
  virtual ~GetTransactionsResponse();

  GetTransactionsResponse(const GetTransactionsResponse& from);
  GetTransactionsResponse(GetTransactionsResponse&& from) noexcept
    : GetTransactionsResponse() {
    *this = ::std::move(from);
  }

  inline GetTransactionsResponse& operator=(const GetTransactionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransactionsResponse& operator=(GetTransactionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTransactionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTransactionsResponse* internal_default_instance() {
    return reinterpret_cast<const GetTransactionsResponse*>(
               &_GetTransactionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(GetTransactionsResponse& a, GetTransactionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTransactionsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTransactionsResponse* New() const final {
    return CreateMaybeMessage<GetTransactionsResponse>(nullptr);
  }

  GetTransactionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTransactionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTransactionsResponse& from);
  void MergeFrom(const GetTransactionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransactionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetTransactionsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 2,
    kTransactionsFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kItemFieldNumber = 3,
    kTotalTransactionsFieldNumber = 5,
  };
  // repeated .plaid.Account accounts = 2;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::plaid::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >*
      mutable_accounts();
  private:
  const ::plaid::Account& _internal_accounts(int index) const;
  ::plaid::Account* _internal_add_accounts();
  public:
  const ::plaid::Account& accounts(int index) const;
  ::plaid::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >&
      accounts() const;

  // repeated .plaid.Transaction transactions = 4;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::plaid::Transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Transaction >*
      mutable_transactions();
  private:
  const ::plaid::Transaction& _internal_transactions(int index) const;
  ::plaid::Transaction* _internal_add_transactions();
  public:
  const ::plaid::Transaction& transactions(int index) const;
  ::plaid::Transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Transaction >&
      transactions() const;

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .plaid.Item item = 3;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::plaid::Item& item() const;
  ::plaid::Item* release_item();
  ::plaid::Item* mutable_item();
  void set_allocated_item(::plaid::Item* item);
  private:
  const ::plaid::Item& _internal_item() const;
  ::plaid::Item* _internal_mutable_item();
  public:

  // int64 total_transactions = 5;
  void clear_total_transactions();
  ::PROTOBUF_NAMESPACE_ID::int64 total_transactions() const;
  void set_total_transactions(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_transactions() const;
  void _internal_set_total_transactions(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetTransactionsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account > accounts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Transaction > transactions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::plaid::Item* item_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// -------------------------------------------------------------------

class GetTransactionOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plaid.GetTransactionOptions) */ {
 public:
  GetTransactionOptions();
  virtual ~GetTransactionOptions();

  GetTransactionOptions(const GetTransactionOptions& from);
  GetTransactionOptions(GetTransactionOptions&& from) noexcept
    : GetTransactionOptions() {
    *this = ::std::move(from);
  }

  inline GetTransactionOptions& operator=(const GetTransactionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransactionOptions& operator=(GetTransactionOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTransactionOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTransactionOptions* internal_default_instance() {
    return reinterpret_cast<const GetTransactionOptions*>(
               &_GetTransactionOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(GetTransactionOptions& a, GetTransactionOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTransactionOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTransactionOptions* New() const final {
    return CreateMaybeMessage<GetTransactionOptions>(nullptr);
  }

  GetTransactionOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTransactionOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTransactionOptions& from);
  void MergeFrom(const GetTransactionOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransactionOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plaid.GetTransactionOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plaid_2eproto);
    return ::descriptor_table_plaid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 3,
    kStartDateFieldNumber = 1,
    kEndDateFieldNumber = 2,
    kCountFieldNumber = 4,
    kOffsetFieldNumber = 5,
  };
  // repeated string account_ids = 3;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  const std::string& account_ids(int index) const;
  std::string* mutable_account_ids(int index);
  void set_account_ids(int index, const std::string& value);
  void set_account_ids(int index, std::string&& value);
  void set_account_ids(int index, const char* value);
  void set_account_ids(int index, const char* value, size_t size);
  std::string* add_account_ids();
  void add_account_ids(const std::string& value);
  void add_account_ids(std::string&& value);
  void add_account_ids(const char* value);
  void add_account_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_account_ids();
  private:
  const std::string& _internal_account_ids(int index) const;
  std::string* _internal_add_account_ids();
  public:

  // string start_date = 1;
  void clear_start_date();
  const std::string& start_date() const;
  void set_start_date(const std::string& value);
  void set_start_date(std::string&& value);
  void set_start_date(const char* value);
  void set_start_date(const char* value, size_t size);
  std::string* mutable_start_date();
  std::string* release_start_date();
  void set_allocated_start_date(std::string* start_date);
  private:
  const std::string& _internal_start_date() const;
  void _internal_set_start_date(const std::string& value);
  std::string* _internal_mutable_start_date();
  public:

  // string end_date = 2;
  void clear_end_date();
  const std::string& end_date() const;
  void set_end_date(const std::string& value);
  void set_end_date(std::string&& value);
  void set_end_date(const char* value);
  void set_end_date(const char* value, size_t size);
  std::string* mutable_end_date();
  std::string* release_end_date();
  void set_allocated_end_date(std::string* end_date);
  private:
  const std::string& _internal_end_date() const;
  void _internal_set_end_date(const std::string& value);
  std::string* _internal_mutable_end_date();
  public:

  // int64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offset = 5;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:plaid.GetTransactionOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> account_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_date_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plaid_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Account

// string account_id = 1;
inline void Account::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::account_id() const {
  // @@protoc_insertion_point(field_get:plaid.Account.account_id)
  return _internal_account_id();
}
inline void Account::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:plaid.Account.account_id)
}
inline std::string* Account::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:plaid.Account.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& Account::_internal_account_id() const {
  return account_id_.GetNoArena();
}
inline void Account::_internal_set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Account::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Account.account_id)
}
inline void Account::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Account.account_id)
}
inline void Account::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Account.account_id)
}
inline std::string* Account::_internal_mutable_account_id() {
  
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_account_id() {
  // @@protoc_insertion_point(field_release:plaid.Account.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.Account.account_id)
}

// .plaid.AccountBalances balances = 2;
inline bool Account::_internal_has_balances() const {
  return this != internal_default_instance() && balances_ != nullptr;
}
inline bool Account::has_balances() const {
  return _internal_has_balances();
}
inline void Account::clear_balances() {
  if (GetArenaNoVirtual() == nullptr && balances_ != nullptr) {
    delete balances_;
  }
  balances_ = nullptr;
}
inline const ::plaid::AccountBalances& Account::_internal_balances() const {
  const ::plaid::AccountBalances* p = balances_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::AccountBalances*>(
      &::plaid::_AccountBalances_default_instance_);
}
inline const ::plaid::AccountBalances& Account::balances() const {
  // @@protoc_insertion_point(field_get:plaid.Account.balances)
  return _internal_balances();
}
inline ::plaid::AccountBalances* Account::release_balances() {
  // @@protoc_insertion_point(field_release:plaid.Account.balances)
  
  ::plaid::AccountBalances* temp = balances_;
  balances_ = nullptr;
  return temp;
}
inline ::plaid::AccountBalances* Account::_internal_mutable_balances() {
  
  if (balances_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::AccountBalances>(GetArenaNoVirtual());
    balances_ = p;
  }
  return balances_;
}
inline ::plaid::AccountBalances* Account::mutable_balances() {
  // @@protoc_insertion_point(field_mutable:plaid.Account.balances)
  return _internal_mutable_balances();
}
inline void Account::set_allocated_balances(::plaid::AccountBalances* balances) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete balances_;
  }
  if (balances) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      balances = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, balances, submessage_arena);
    }
    
  } else {
    
  }
  balances_ = balances;
  // @@protoc_insertion_point(field_set_allocated:plaid.Account.balances)
}

// string mask = 3;
inline void Account::clear_mask() {
  mask_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::mask() const {
  // @@protoc_insertion_point(field_get:plaid.Account.mask)
  return _internal_mask();
}
inline void Account::set_mask(const std::string& value) {
  _internal_set_mask(value);
  // @@protoc_insertion_point(field_set:plaid.Account.mask)
}
inline std::string* Account::mutable_mask() {
  // @@protoc_insertion_point(field_mutable:plaid.Account.mask)
  return _internal_mutable_mask();
}
inline const std::string& Account::_internal_mask() const {
  return mask_.GetNoArena();
}
inline void Account::_internal_set_mask(const std::string& value) {
  
  mask_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Account::set_mask(std::string&& value) {
  
  mask_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Account.mask)
}
inline void Account::set_mask(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mask_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Account.mask)
}
inline void Account::set_mask(const char* value, size_t size) {
  
  mask_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Account.mask)
}
inline std::string* Account::_internal_mutable_mask() {
  
  return mask_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_mask() {
  // @@protoc_insertion_point(field_release:plaid.Account.mask)
  
  return mask_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_mask(std::string* mask) {
  if (mask != nullptr) {
    
  } else {
    
  }
  mask_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mask);
  // @@protoc_insertion_point(field_set_allocated:plaid.Account.mask)
}

// string name = 4;
inline void Account::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::name() const {
  // @@protoc_insertion_point(field_get:plaid.Account.name)
  return _internal_name();
}
inline void Account::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:plaid.Account.name)
}
inline std::string* Account::mutable_name() {
  // @@protoc_insertion_point(field_mutable:plaid.Account.name)
  return _internal_mutable_name();
}
inline const std::string& Account::_internal_name() const {
  return name_.GetNoArena();
}
inline void Account::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Account::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Account.name)
}
inline void Account::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Account.name)
}
inline void Account::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Account.name)
}
inline std::string* Account::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_name() {
  // @@protoc_insertion_point(field_release:plaid.Account.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:plaid.Account.name)
}

// string official_name = 5;
inline void Account::clear_official_name() {
  official_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::official_name() const {
  // @@protoc_insertion_point(field_get:plaid.Account.official_name)
  return _internal_official_name();
}
inline void Account::set_official_name(const std::string& value) {
  _internal_set_official_name(value);
  // @@protoc_insertion_point(field_set:plaid.Account.official_name)
}
inline std::string* Account::mutable_official_name() {
  // @@protoc_insertion_point(field_mutable:plaid.Account.official_name)
  return _internal_mutable_official_name();
}
inline const std::string& Account::_internal_official_name() const {
  return official_name_.GetNoArena();
}
inline void Account::_internal_set_official_name(const std::string& value) {
  
  official_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Account::set_official_name(std::string&& value) {
  
  official_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Account.official_name)
}
inline void Account::set_official_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  official_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Account.official_name)
}
inline void Account::set_official_name(const char* value, size_t size) {
  
  official_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Account.official_name)
}
inline std::string* Account::_internal_mutable_official_name() {
  
  return official_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_official_name() {
  // @@protoc_insertion_point(field_release:plaid.Account.official_name)
  
  return official_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_official_name(std::string* official_name) {
  if (official_name != nullptr) {
    
  } else {
    
  }
  official_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), official_name);
  // @@protoc_insertion_point(field_set_allocated:plaid.Account.official_name)
}

// string subtype = 6;
inline void Account::clear_subtype() {
  subtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::subtype() const {
  // @@protoc_insertion_point(field_get:plaid.Account.subtype)
  return _internal_subtype();
}
inline void Account::set_subtype(const std::string& value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:plaid.Account.subtype)
}
inline std::string* Account::mutable_subtype() {
  // @@protoc_insertion_point(field_mutable:plaid.Account.subtype)
  return _internal_mutable_subtype();
}
inline const std::string& Account::_internal_subtype() const {
  return subtype_.GetNoArena();
}
inline void Account::_internal_set_subtype(const std::string& value) {
  
  subtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Account::set_subtype(std::string&& value) {
  
  subtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Account.subtype)
}
inline void Account::set_subtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Account.subtype)
}
inline void Account::set_subtype(const char* value, size_t size) {
  
  subtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Account.subtype)
}
inline std::string* Account::_internal_mutable_subtype() {
  
  return subtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_subtype() {
  // @@protoc_insertion_point(field_release:plaid.Account.subtype)
  
  return subtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_subtype(std::string* subtype) {
  if (subtype != nullptr) {
    
  } else {
    
  }
  subtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subtype);
  // @@protoc_insertion_point(field_set_allocated:plaid.Account.subtype)
}

// string type = 7;
inline void Account::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::type() const {
  // @@protoc_insertion_point(field_get:plaid.Account.type)
  return _internal_type();
}
inline void Account::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:plaid.Account.type)
}
inline std::string* Account::mutable_type() {
  // @@protoc_insertion_point(field_mutable:plaid.Account.type)
  return _internal_mutable_type();
}
inline const std::string& Account::_internal_type() const {
  return type_.GetNoArena();
}
inline void Account::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Account::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Account.type)
}
inline void Account::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Account.type)
}
inline void Account::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Account.type)
}
inline std::string* Account::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_type() {
  // @@protoc_insertion_point(field_release:plaid.Account.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:plaid.Account.type)
}

// string verification_status = 8;
inline void Account::clear_verification_status() {
  verification_status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::verification_status() const {
  // @@protoc_insertion_point(field_get:plaid.Account.verification_status)
  return _internal_verification_status();
}
inline void Account::set_verification_status(const std::string& value) {
  _internal_set_verification_status(value);
  // @@protoc_insertion_point(field_set:plaid.Account.verification_status)
}
inline std::string* Account::mutable_verification_status() {
  // @@protoc_insertion_point(field_mutable:plaid.Account.verification_status)
  return _internal_mutable_verification_status();
}
inline const std::string& Account::_internal_verification_status() const {
  return verification_status_.GetNoArena();
}
inline void Account::_internal_set_verification_status(const std::string& value) {
  
  verification_status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Account::set_verification_status(std::string&& value) {
  
  verification_status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Account.verification_status)
}
inline void Account::set_verification_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  verification_status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Account.verification_status)
}
inline void Account::set_verification_status(const char* value, size_t size) {
  
  verification_status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Account.verification_status)
}
inline std::string* Account::_internal_mutable_verification_status() {
  
  return verification_status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_verification_status() {
  // @@protoc_insertion_point(field_release:plaid.Account.verification_status)
  
  return verification_status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_verification_status(std::string* verification_status) {
  if (verification_status != nullptr) {
    
  } else {
    
  }
  verification_status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verification_status);
  // @@protoc_insertion_point(field_set_allocated:plaid.Account.verification_status)
}

// -------------------------------------------------------------------

// AccountBalances

// double available = 1;
inline void AccountBalances::clear_available() {
  available_ = 0;
}
inline double AccountBalances::_internal_available() const {
  return available_;
}
inline double AccountBalances::available() const {
  // @@protoc_insertion_point(field_get:plaid.AccountBalances.available)
  return _internal_available();
}
inline void AccountBalances::_internal_set_available(double value) {
  
  available_ = value;
}
inline void AccountBalances::set_available(double value) {
  _internal_set_available(value);
  // @@protoc_insertion_point(field_set:plaid.AccountBalances.available)
}

// double current = 2;
inline void AccountBalances::clear_current() {
  current_ = 0;
}
inline double AccountBalances::_internal_current() const {
  return current_;
}
inline double AccountBalances::current() const {
  // @@protoc_insertion_point(field_get:plaid.AccountBalances.current)
  return _internal_current();
}
inline void AccountBalances::_internal_set_current(double value) {
  
  current_ = value;
}
inline void AccountBalances::set_current(double value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:plaid.AccountBalances.current)
}

// double limit = 3;
inline void AccountBalances::clear_limit() {
  limit_ = 0;
}
inline double AccountBalances::_internal_limit() const {
  return limit_;
}
inline double AccountBalances::limit() const {
  // @@protoc_insertion_point(field_get:plaid.AccountBalances.limit)
  return _internal_limit();
}
inline void AccountBalances::_internal_set_limit(double value) {
  
  limit_ = value;
}
inline void AccountBalances::set_limit(double value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:plaid.AccountBalances.limit)
}

// string iso_currency_code = 4;
inline void AccountBalances::clear_iso_currency_code() {
  iso_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountBalances::iso_currency_code() const {
  // @@protoc_insertion_point(field_get:plaid.AccountBalances.iso_currency_code)
  return _internal_iso_currency_code();
}
inline void AccountBalances::set_iso_currency_code(const std::string& value) {
  _internal_set_iso_currency_code(value);
  // @@protoc_insertion_point(field_set:plaid.AccountBalances.iso_currency_code)
}
inline std::string* AccountBalances::mutable_iso_currency_code() {
  // @@protoc_insertion_point(field_mutable:plaid.AccountBalances.iso_currency_code)
  return _internal_mutable_iso_currency_code();
}
inline const std::string& AccountBalances::_internal_iso_currency_code() const {
  return iso_currency_code_.GetNoArena();
}
inline void AccountBalances::_internal_set_iso_currency_code(const std::string& value) {
  
  iso_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountBalances::set_iso_currency_code(std::string&& value) {
  
  iso_currency_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AccountBalances.iso_currency_code)
}
inline void AccountBalances::set_iso_currency_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iso_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AccountBalances.iso_currency_code)
}
inline void AccountBalances::set_iso_currency_code(const char* value, size_t size) {
  
  iso_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AccountBalances.iso_currency_code)
}
inline std::string* AccountBalances::_internal_mutable_iso_currency_code() {
  
  return iso_currency_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountBalances::release_iso_currency_code() {
  // @@protoc_insertion_point(field_release:plaid.AccountBalances.iso_currency_code)
  
  return iso_currency_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountBalances::set_allocated_iso_currency_code(std::string* iso_currency_code) {
  if (iso_currency_code != nullptr) {
    
  } else {
    
  }
  iso_currency_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iso_currency_code);
  // @@protoc_insertion_point(field_set_allocated:plaid.AccountBalances.iso_currency_code)
}

// string unofficial_currency_code = 5;
inline void AccountBalances::clear_unofficial_currency_code() {
  unofficial_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountBalances::unofficial_currency_code() const {
  // @@protoc_insertion_point(field_get:plaid.AccountBalances.unofficial_currency_code)
  return _internal_unofficial_currency_code();
}
inline void AccountBalances::set_unofficial_currency_code(const std::string& value) {
  _internal_set_unofficial_currency_code(value);
  // @@protoc_insertion_point(field_set:plaid.AccountBalances.unofficial_currency_code)
}
inline std::string* AccountBalances::mutable_unofficial_currency_code() {
  // @@protoc_insertion_point(field_mutable:plaid.AccountBalances.unofficial_currency_code)
  return _internal_mutable_unofficial_currency_code();
}
inline const std::string& AccountBalances::_internal_unofficial_currency_code() const {
  return unofficial_currency_code_.GetNoArena();
}
inline void AccountBalances::_internal_set_unofficial_currency_code(const std::string& value) {
  
  unofficial_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountBalances::set_unofficial_currency_code(std::string&& value) {
  
  unofficial_currency_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AccountBalances.unofficial_currency_code)
}
inline void AccountBalances::set_unofficial_currency_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unofficial_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AccountBalances.unofficial_currency_code)
}
inline void AccountBalances::set_unofficial_currency_code(const char* value, size_t size) {
  
  unofficial_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AccountBalances.unofficial_currency_code)
}
inline std::string* AccountBalances::_internal_mutable_unofficial_currency_code() {
  
  return unofficial_currency_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountBalances::release_unofficial_currency_code() {
  // @@protoc_insertion_point(field_release:plaid.AccountBalances.unofficial_currency_code)
  
  return unofficial_currency_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountBalances::set_allocated_unofficial_currency_code(std::string* unofficial_currency_code) {
  if (unofficial_currency_code != nullptr) {
    
  } else {
    
  }
  unofficial_currency_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unofficial_currency_code);
  // @@protoc_insertion_point(field_set_allocated:plaid.AccountBalances.unofficial_currency_code)
}

// -------------------------------------------------------------------

// ACHNumber

// string account = 1;
inline void ACHNumber::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ACHNumber::account() const {
  // @@protoc_insertion_point(field_get:plaid.ACHNumber.account)
  return _internal_account();
}
inline void ACHNumber::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:plaid.ACHNumber.account)
}
inline std::string* ACHNumber::mutable_account() {
  // @@protoc_insertion_point(field_mutable:plaid.ACHNumber.account)
  return _internal_mutable_account();
}
inline const std::string& ACHNumber::_internal_account() const {
  return account_.GetNoArena();
}
inline void ACHNumber::_internal_set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ACHNumber::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.ACHNumber.account)
}
inline void ACHNumber::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.ACHNumber.account)
}
inline void ACHNumber::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.ACHNumber.account)
}
inline std::string* ACHNumber::_internal_mutable_account() {
  
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ACHNumber::release_account() {
  // @@protoc_insertion_point(field_release:plaid.ACHNumber.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ACHNumber::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:plaid.ACHNumber.account)
}

// string account_id = 2;
inline void ACHNumber::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ACHNumber::account_id() const {
  // @@protoc_insertion_point(field_get:plaid.ACHNumber.account_id)
  return _internal_account_id();
}
inline void ACHNumber::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:plaid.ACHNumber.account_id)
}
inline std::string* ACHNumber::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:plaid.ACHNumber.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& ACHNumber::_internal_account_id() const {
  return account_id_.GetNoArena();
}
inline void ACHNumber::_internal_set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ACHNumber::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.ACHNumber.account_id)
}
inline void ACHNumber::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.ACHNumber.account_id)
}
inline void ACHNumber::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.ACHNumber.account_id)
}
inline std::string* ACHNumber::_internal_mutable_account_id() {
  
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ACHNumber::release_account_id() {
  // @@protoc_insertion_point(field_release:plaid.ACHNumber.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ACHNumber::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.ACHNumber.account_id)
}

// string routing = 3;
inline void ACHNumber::clear_routing() {
  routing_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ACHNumber::routing() const {
  // @@protoc_insertion_point(field_get:plaid.ACHNumber.routing)
  return _internal_routing();
}
inline void ACHNumber::set_routing(const std::string& value) {
  _internal_set_routing(value);
  // @@protoc_insertion_point(field_set:plaid.ACHNumber.routing)
}
inline std::string* ACHNumber::mutable_routing() {
  // @@protoc_insertion_point(field_mutable:plaid.ACHNumber.routing)
  return _internal_mutable_routing();
}
inline const std::string& ACHNumber::_internal_routing() const {
  return routing_.GetNoArena();
}
inline void ACHNumber::_internal_set_routing(const std::string& value) {
  
  routing_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ACHNumber::set_routing(std::string&& value) {
  
  routing_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.ACHNumber.routing)
}
inline void ACHNumber::set_routing(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  routing_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.ACHNumber.routing)
}
inline void ACHNumber::set_routing(const char* value, size_t size) {
  
  routing_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.ACHNumber.routing)
}
inline std::string* ACHNumber::_internal_mutable_routing() {
  
  return routing_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ACHNumber::release_routing() {
  // @@protoc_insertion_point(field_release:plaid.ACHNumber.routing)
  
  return routing_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ACHNumber::set_allocated_routing(std::string* routing) {
  if (routing != nullptr) {
    
  } else {
    
  }
  routing_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), routing);
  // @@protoc_insertion_point(field_set_allocated:plaid.ACHNumber.routing)
}

// string wire_routing = 4;
inline void ACHNumber::clear_wire_routing() {
  wire_routing_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ACHNumber::wire_routing() const {
  // @@protoc_insertion_point(field_get:plaid.ACHNumber.wire_routing)
  return _internal_wire_routing();
}
inline void ACHNumber::set_wire_routing(const std::string& value) {
  _internal_set_wire_routing(value);
  // @@protoc_insertion_point(field_set:plaid.ACHNumber.wire_routing)
}
inline std::string* ACHNumber::mutable_wire_routing() {
  // @@protoc_insertion_point(field_mutable:plaid.ACHNumber.wire_routing)
  return _internal_mutable_wire_routing();
}
inline const std::string& ACHNumber::_internal_wire_routing() const {
  return wire_routing_.GetNoArena();
}
inline void ACHNumber::_internal_set_wire_routing(const std::string& value) {
  
  wire_routing_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ACHNumber::set_wire_routing(std::string&& value) {
  
  wire_routing_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.ACHNumber.wire_routing)
}
inline void ACHNumber::set_wire_routing(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wire_routing_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.ACHNumber.wire_routing)
}
inline void ACHNumber::set_wire_routing(const char* value, size_t size) {
  
  wire_routing_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.ACHNumber.wire_routing)
}
inline std::string* ACHNumber::_internal_mutable_wire_routing() {
  
  return wire_routing_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ACHNumber::release_wire_routing() {
  // @@protoc_insertion_point(field_release:plaid.ACHNumber.wire_routing)
  
  return wire_routing_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ACHNumber::set_allocated_wire_routing(std::string* wire_routing) {
  if (wire_routing != nullptr) {
    
  } else {
    
  }
  wire_routing_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wire_routing);
  // @@protoc_insertion_point(field_set_allocated:plaid.ACHNumber.wire_routing)
}

// -------------------------------------------------------------------

// EFTNumber

// string account = 1;
inline void EFTNumber::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EFTNumber::account() const {
  // @@protoc_insertion_point(field_get:plaid.EFTNumber.account)
  return _internal_account();
}
inline void EFTNumber::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:plaid.EFTNumber.account)
}
inline std::string* EFTNumber::mutable_account() {
  // @@protoc_insertion_point(field_mutable:plaid.EFTNumber.account)
  return _internal_mutable_account();
}
inline const std::string& EFTNumber::_internal_account() const {
  return account_.GetNoArena();
}
inline void EFTNumber::_internal_set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EFTNumber::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.EFTNumber.account)
}
inline void EFTNumber::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.EFTNumber.account)
}
inline void EFTNumber::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.EFTNumber.account)
}
inline std::string* EFTNumber::_internal_mutable_account() {
  
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EFTNumber::release_account() {
  // @@protoc_insertion_point(field_release:plaid.EFTNumber.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EFTNumber::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:plaid.EFTNumber.account)
}

// string account_id = 2;
inline void EFTNumber::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EFTNumber::account_id() const {
  // @@protoc_insertion_point(field_get:plaid.EFTNumber.account_id)
  return _internal_account_id();
}
inline void EFTNumber::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:plaid.EFTNumber.account_id)
}
inline std::string* EFTNumber::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:plaid.EFTNumber.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& EFTNumber::_internal_account_id() const {
  return account_id_.GetNoArena();
}
inline void EFTNumber::_internal_set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EFTNumber::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.EFTNumber.account_id)
}
inline void EFTNumber::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.EFTNumber.account_id)
}
inline void EFTNumber::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.EFTNumber.account_id)
}
inline std::string* EFTNumber::_internal_mutable_account_id() {
  
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EFTNumber::release_account_id() {
  // @@protoc_insertion_point(field_release:plaid.EFTNumber.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EFTNumber::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.EFTNumber.account_id)
}

// string institution = 3;
inline void EFTNumber::clear_institution() {
  institution_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EFTNumber::institution() const {
  // @@protoc_insertion_point(field_get:plaid.EFTNumber.institution)
  return _internal_institution();
}
inline void EFTNumber::set_institution(const std::string& value) {
  _internal_set_institution(value);
  // @@protoc_insertion_point(field_set:plaid.EFTNumber.institution)
}
inline std::string* EFTNumber::mutable_institution() {
  // @@protoc_insertion_point(field_mutable:plaid.EFTNumber.institution)
  return _internal_mutable_institution();
}
inline const std::string& EFTNumber::_internal_institution() const {
  return institution_.GetNoArena();
}
inline void EFTNumber::_internal_set_institution(const std::string& value) {
  
  institution_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EFTNumber::set_institution(std::string&& value) {
  
  institution_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.EFTNumber.institution)
}
inline void EFTNumber::set_institution(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  institution_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.EFTNumber.institution)
}
inline void EFTNumber::set_institution(const char* value, size_t size) {
  
  institution_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.EFTNumber.institution)
}
inline std::string* EFTNumber::_internal_mutable_institution() {
  
  return institution_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EFTNumber::release_institution() {
  // @@protoc_insertion_point(field_release:plaid.EFTNumber.institution)
  
  return institution_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EFTNumber::set_allocated_institution(std::string* institution) {
  if (institution != nullptr) {
    
  } else {
    
  }
  institution_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), institution);
  // @@protoc_insertion_point(field_set_allocated:plaid.EFTNumber.institution)
}

// string branch = 4;
inline void EFTNumber::clear_branch() {
  branch_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EFTNumber::branch() const {
  // @@protoc_insertion_point(field_get:plaid.EFTNumber.branch)
  return _internal_branch();
}
inline void EFTNumber::set_branch(const std::string& value) {
  _internal_set_branch(value);
  // @@protoc_insertion_point(field_set:plaid.EFTNumber.branch)
}
inline std::string* EFTNumber::mutable_branch() {
  // @@protoc_insertion_point(field_mutable:plaid.EFTNumber.branch)
  return _internal_mutable_branch();
}
inline const std::string& EFTNumber::_internal_branch() const {
  return branch_.GetNoArena();
}
inline void EFTNumber::_internal_set_branch(const std::string& value) {
  
  branch_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EFTNumber::set_branch(std::string&& value) {
  
  branch_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.EFTNumber.branch)
}
inline void EFTNumber::set_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  branch_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.EFTNumber.branch)
}
inline void EFTNumber::set_branch(const char* value, size_t size) {
  
  branch_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.EFTNumber.branch)
}
inline std::string* EFTNumber::_internal_mutable_branch() {
  
  return branch_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EFTNumber::release_branch() {
  // @@protoc_insertion_point(field_release:plaid.EFTNumber.branch)
  
  return branch_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EFTNumber::set_allocated_branch(std::string* branch) {
  if (branch != nullptr) {
    
  } else {
    
  }
  branch_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branch);
  // @@protoc_insertion_point(field_set_allocated:plaid.EFTNumber.branch)
}

// -------------------------------------------------------------------

// IBANNumber

// string account_id = 1;
inline void IBANNumber::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IBANNumber::account_id() const {
  // @@protoc_insertion_point(field_get:plaid.IBANNumber.account_id)
  return _internal_account_id();
}
inline void IBANNumber::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:plaid.IBANNumber.account_id)
}
inline std::string* IBANNumber::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:plaid.IBANNumber.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& IBANNumber::_internal_account_id() const {
  return account_id_.GetNoArena();
}
inline void IBANNumber::_internal_set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IBANNumber::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.IBANNumber.account_id)
}
inline void IBANNumber::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.IBANNumber.account_id)
}
inline void IBANNumber::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.IBANNumber.account_id)
}
inline std::string* IBANNumber::_internal_mutable_account_id() {
  
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IBANNumber::release_account_id() {
  // @@protoc_insertion_point(field_release:plaid.IBANNumber.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IBANNumber::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.IBANNumber.account_id)
}

// string iban = 2;
inline void IBANNumber::clear_iban() {
  iban_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IBANNumber::iban() const {
  // @@protoc_insertion_point(field_get:plaid.IBANNumber.iban)
  return _internal_iban();
}
inline void IBANNumber::set_iban(const std::string& value) {
  _internal_set_iban(value);
  // @@protoc_insertion_point(field_set:plaid.IBANNumber.iban)
}
inline std::string* IBANNumber::mutable_iban() {
  // @@protoc_insertion_point(field_mutable:plaid.IBANNumber.iban)
  return _internal_mutable_iban();
}
inline const std::string& IBANNumber::_internal_iban() const {
  return iban_.GetNoArena();
}
inline void IBANNumber::_internal_set_iban(const std::string& value) {
  
  iban_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IBANNumber::set_iban(std::string&& value) {
  
  iban_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.IBANNumber.iban)
}
inline void IBANNumber::set_iban(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iban_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.IBANNumber.iban)
}
inline void IBANNumber::set_iban(const char* value, size_t size) {
  
  iban_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.IBANNumber.iban)
}
inline std::string* IBANNumber::_internal_mutable_iban() {
  
  return iban_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IBANNumber::release_iban() {
  // @@protoc_insertion_point(field_release:plaid.IBANNumber.iban)
  
  return iban_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IBANNumber::set_allocated_iban(std::string* iban) {
  if (iban != nullptr) {
    
  } else {
    
  }
  iban_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iban);
  // @@protoc_insertion_point(field_set_allocated:plaid.IBANNumber.iban)
}

// string bic = 3;
inline void IBANNumber::clear_bic() {
  bic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IBANNumber::bic() const {
  // @@protoc_insertion_point(field_get:plaid.IBANNumber.bic)
  return _internal_bic();
}
inline void IBANNumber::set_bic(const std::string& value) {
  _internal_set_bic(value);
  // @@protoc_insertion_point(field_set:plaid.IBANNumber.bic)
}
inline std::string* IBANNumber::mutable_bic() {
  // @@protoc_insertion_point(field_mutable:plaid.IBANNumber.bic)
  return _internal_mutable_bic();
}
inline const std::string& IBANNumber::_internal_bic() const {
  return bic_.GetNoArena();
}
inline void IBANNumber::_internal_set_bic(const std::string& value) {
  
  bic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IBANNumber::set_bic(std::string&& value) {
  
  bic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.IBANNumber.bic)
}
inline void IBANNumber::set_bic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.IBANNumber.bic)
}
inline void IBANNumber::set_bic(const char* value, size_t size) {
  
  bic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.IBANNumber.bic)
}
inline std::string* IBANNumber::_internal_mutable_bic() {
  
  return bic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IBANNumber::release_bic() {
  // @@protoc_insertion_point(field_release:plaid.IBANNumber.bic)
  
  return bic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IBANNumber::set_allocated_bic(std::string* bic) {
  if (bic != nullptr) {
    
  } else {
    
  }
  bic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bic);
  // @@protoc_insertion_point(field_set_allocated:plaid.IBANNumber.bic)
}

// -------------------------------------------------------------------

// BACSNumber

// string account_id = 1;
inline void BACSNumber::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BACSNumber::account_id() const {
  // @@protoc_insertion_point(field_get:plaid.BACSNumber.account_id)
  return _internal_account_id();
}
inline void BACSNumber::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:plaid.BACSNumber.account_id)
}
inline std::string* BACSNumber::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:plaid.BACSNumber.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& BACSNumber::_internal_account_id() const {
  return account_id_.GetNoArena();
}
inline void BACSNumber::_internal_set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BACSNumber::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.BACSNumber.account_id)
}
inline void BACSNumber::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.BACSNumber.account_id)
}
inline void BACSNumber::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.BACSNumber.account_id)
}
inline std::string* BACSNumber::_internal_mutable_account_id() {
  
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BACSNumber::release_account_id() {
  // @@protoc_insertion_point(field_release:plaid.BACSNumber.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BACSNumber::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.BACSNumber.account_id)
}

// string account = 2;
inline void BACSNumber::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BACSNumber::account() const {
  // @@protoc_insertion_point(field_get:plaid.BACSNumber.account)
  return _internal_account();
}
inline void BACSNumber::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:plaid.BACSNumber.account)
}
inline std::string* BACSNumber::mutable_account() {
  // @@protoc_insertion_point(field_mutable:plaid.BACSNumber.account)
  return _internal_mutable_account();
}
inline const std::string& BACSNumber::_internal_account() const {
  return account_.GetNoArena();
}
inline void BACSNumber::_internal_set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BACSNumber::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.BACSNumber.account)
}
inline void BACSNumber::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.BACSNumber.account)
}
inline void BACSNumber::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.BACSNumber.account)
}
inline std::string* BACSNumber::_internal_mutable_account() {
  
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BACSNumber::release_account() {
  // @@protoc_insertion_point(field_release:plaid.BACSNumber.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BACSNumber::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:plaid.BACSNumber.account)
}

// string sort_code = 3;
inline void BACSNumber::clear_sort_code() {
  sort_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BACSNumber::sort_code() const {
  // @@protoc_insertion_point(field_get:plaid.BACSNumber.sort_code)
  return _internal_sort_code();
}
inline void BACSNumber::set_sort_code(const std::string& value) {
  _internal_set_sort_code(value);
  // @@protoc_insertion_point(field_set:plaid.BACSNumber.sort_code)
}
inline std::string* BACSNumber::mutable_sort_code() {
  // @@protoc_insertion_point(field_mutable:plaid.BACSNumber.sort_code)
  return _internal_mutable_sort_code();
}
inline const std::string& BACSNumber::_internal_sort_code() const {
  return sort_code_.GetNoArena();
}
inline void BACSNumber::_internal_set_sort_code(const std::string& value) {
  
  sort_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BACSNumber::set_sort_code(std::string&& value) {
  
  sort_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.BACSNumber.sort_code)
}
inline void BACSNumber::set_sort_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sort_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.BACSNumber.sort_code)
}
inline void BACSNumber::set_sort_code(const char* value, size_t size) {
  
  sort_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.BACSNumber.sort_code)
}
inline std::string* BACSNumber::_internal_mutable_sort_code() {
  
  return sort_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BACSNumber::release_sort_code() {
  // @@protoc_insertion_point(field_release:plaid.BACSNumber.sort_code)
  
  return sort_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BACSNumber::set_allocated_sort_code(std::string* sort_code) {
  if (sort_code != nullptr) {
    
  } else {
    
  }
  sort_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sort_code);
  // @@protoc_insertion_point(field_set_allocated:plaid.BACSNumber.sort_code)
}

// -------------------------------------------------------------------

// GetBalancesRequestOptions

// repeated string account_ids = 1;
inline int GetBalancesRequestOptions::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int GetBalancesRequestOptions::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void GetBalancesRequestOptions::clear_account_ids() {
  account_ids_.Clear();
}
inline std::string* GetBalancesRequestOptions::add_account_ids() {
  // @@protoc_insertion_point(field_add_mutable:plaid.GetBalancesRequestOptions.account_ids)
  return _internal_add_account_ids();
}
inline const std::string& GetBalancesRequestOptions::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline const std::string& GetBalancesRequestOptions::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetBalancesRequestOptions.account_ids)
  return _internal_account_ids(index);
}
inline std::string* GetBalancesRequestOptions::mutable_account_ids(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetBalancesRequestOptions.account_ids)
  return account_ids_.Mutable(index);
}
inline void GetBalancesRequestOptions::set_account_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.GetBalancesRequestOptions.account_ids)
  account_ids_.Mutable(index)->assign(value);
}
inline void GetBalancesRequestOptions::set_account_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.GetBalancesRequestOptions.account_ids)
  account_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetBalancesRequestOptions::set_account_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.GetBalancesRequestOptions.account_ids)
}
inline void GetBalancesRequestOptions::set_account_ids(int index, const char* value, size_t size) {
  account_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.GetBalancesRequestOptions.account_ids)
}
inline std::string* GetBalancesRequestOptions::_internal_add_account_ids() {
  return account_ids_.Add();
}
inline void GetBalancesRequestOptions::add_account_ids(const std::string& value) {
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.GetBalancesRequestOptions.account_ids)
}
inline void GetBalancesRequestOptions::add_account_ids(std::string&& value) {
  account_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.GetBalancesRequestOptions.account_ids)
}
inline void GetBalancesRequestOptions::add_account_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.GetBalancesRequestOptions.account_ids)
}
inline void GetBalancesRequestOptions::add_account_ids(const char* value, size_t size) {
  account_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.GetBalancesRequestOptions.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetBalancesRequestOptions::account_ids() const {
  // @@protoc_insertion_point(field_list:plaid.GetBalancesRequestOptions.account_ids)
  return account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetBalancesRequestOptions::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetBalancesRequestOptions.account_ids)
  return &account_ids_;
}

// -------------------------------------------------------------------

// GetBalancesRequest

// string client_id = 1;
inline void GetBalancesRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBalancesRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetBalancesRequest.client_id)
  return _internal_client_id();
}
inline void GetBalancesRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetBalancesRequest.client_id)
}
inline std::string* GetBalancesRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetBalancesRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& GetBalancesRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void GetBalancesRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBalancesRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetBalancesRequest.client_id)
}
inline void GetBalancesRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetBalancesRequest.client_id)
}
inline void GetBalancesRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetBalancesRequest.client_id)
}
inline std::string* GetBalancesRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBalancesRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.GetBalancesRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBalancesRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetBalancesRequest.client_id)
}

// string secret = 2;
inline void GetBalancesRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBalancesRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.GetBalancesRequest.secret)
  return _internal_secret();
}
inline void GetBalancesRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.GetBalancesRequest.secret)
}
inline std::string* GetBalancesRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.GetBalancesRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& GetBalancesRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void GetBalancesRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBalancesRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetBalancesRequest.secret)
}
inline void GetBalancesRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetBalancesRequest.secret)
}
inline void GetBalancesRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetBalancesRequest.secret)
}
inline std::string* GetBalancesRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBalancesRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.GetBalancesRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBalancesRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetBalancesRequest.secret)
}

// string access_token = 3;
inline void GetBalancesRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBalancesRequest::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.GetBalancesRequest.access_token)
  return _internal_access_token();
}
inline void GetBalancesRequest::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.GetBalancesRequest.access_token)
}
inline std::string* GetBalancesRequest::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.GetBalancesRequest.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& GetBalancesRequest::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void GetBalancesRequest::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBalancesRequest::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetBalancesRequest.access_token)
}
inline void GetBalancesRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetBalancesRequest.access_token)
}
inline void GetBalancesRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetBalancesRequest.access_token)
}
inline std::string* GetBalancesRequest::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBalancesRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.GetBalancesRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBalancesRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetBalancesRequest.access_token)
}

// .plaid.GetBalancesRequestOptions options = 4;
inline bool GetBalancesRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool GetBalancesRequest::has_options() const {
  return _internal_has_options();
}
inline void GetBalancesRequest::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::plaid::GetBalancesRequestOptions& GetBalancesRequest::_internal_options() const {
  const ::plaid::GetBalancesRequestOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::GetBalancesRequestOptions*>(
      &::plaid::_GetBalancesRequestOptions_default_instance_);
}
inline const ::plaid::GetBalancesRequestOptions& GetBalancesRequest::options() const {
  // @@protoc_insertion_point(field_get:plaid.GetBalancesRequest.options)
  return _internal_options();
}
inline ::plaid::GetBalancesRequestOptions* GetBalancesRequest::release_options() {
  // @@protoc_insertion_point(field_release:plaid.GetBalancesRequest.options)
  
  ::plaid::GetBalancesRequestOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::plaid::GetBalancesRequestOptions* GetBalancesRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::GetBalancesRequestOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::plaid::GetBalancesRequestOptions* GetBalancesRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:plaid.GetBalancesRequest.options)
  return _internal_mutable_options();
}
inline void GetBalancesRequest::set_allocated_options(::plaid::GetBalancesRequestOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetBalancesRequest.options)
}

// -------------------------------------------------------------------

// GetBalancesResponse

// string request_id = 1;
inline void GetBalancesResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBalancesResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetBalancesResponse.request_id)
  return _internal_request_id();
}
inline void GetBalancesResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetBalancesResponse.request_id)
}
inline std::string* GetBalancesResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetBalancesResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetBalancesResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void GetBalancesResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBalancesResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetBalancesResponse.request_id)
}
inline void GetBalancesResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetBalancesResponse.request_id)
}
inline void GetBalancesResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetBalancesResponse.request_id)
}
inline std::string* GetBalancesResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBalancesResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.GetBalancesResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBalancesResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetBalancesResponse.request_id)
}

// repeated .plaid.Account accounts = 2;
inline int GetBalancesResponse::_internal_accounts_size() const {
  return accounts_.size();
}
inline int GetBalancesResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline void GetBalancesResponse::clear_accounts() {
  accounts_.Clear();
}
inline ::plaid::Account* GetBalancesResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetBalancesResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >*
GetBalancesResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetBalancesResponse.accounts)
  return &accounts_;
}
inline const ::plaid::Account& GetBalancesResponse::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::plaid::Account& GetBalancesResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetBalancesResponse.accounts)
  return _internal_accounts(index);
}
inline ::plaid::Account* GetBalancesResponse::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::plaid::Account* GetBalancesResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:plaid.GetBalancesResponse.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >&
GetBalancesResponse::accounts() const {
  // @@protoc_insertion_point(field_list:plaid.GetBalancesResponse.accounts)
  return accounts_;
}

// -------------------------------------------------------------------

// GetAccountsRequestOptions

// repeated string account_ids = 1;
inline int GetAccountsRequestOptions::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int GetAccountsRequestOptions::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void GetAccountsRequestOptions::clear_account_ids() {
  account_ids_.Clear();
}
inline std::string* GetAccountsRequestOptions::add_account_ids() {
  // @@protoc_insertion_point(field_add_mutable:plaid.GetAccountsRequestOptions.account_ids)
  return _internal_add_account_ids();
}
inline const std::string& GetAccountsRequestOptions::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline const std::string& GetAccountsRequestOptions::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetAccountsRequestOptions.account_ids)
  return _internal_account_ids(index);
}
inline std::string* GetAccountsRequestOptions::mutable_account_ids(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetAccountsRequestOptions.account_ids)
  return account_ids_.Mutable(index);
}
inline void GetAccountsRequestOptions::set_account_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.GetAccountsRequestOptions.account_ids)
  account_ids_.Mutable(index)->assign(value);
}
inline void GetAccountsRequestOptions::set_account_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.GetAccountsRequestOptions.account_ids)
  account_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetAccountsRequestOptions::set_account_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.GetAccountsRequestOptions.account_ids)
}
inline void GetAccountsRequestOptions::set_account_ids(int index, const char* value, size_t size) {
  account_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.GetAccountsRequestOptions.account_ids)
}
inline std::string* GetAccountsRequestOptions::_internal_add_account_ids() {
  return account_ids_.Add();
}
inline void GetAccountsRequestOptions::add_account_ids(const std::string& value) {
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.GetAccountsRequestOptions.account_ids)
}
inline void GetAccountsRequestOptions::add_account_ids(std::string&& value) {
  account_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.GetAccountsRequestOptions.account_ids)
}
inline void GetAccountsRequestOptions::add_account_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.GetAccountsRequestOptions.account_ids)
}
inline void GetAccountsRequestOptions::add_account_ids(const char* value, size_t size) {
  account_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.GetAccountsRequestOptions.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAccountsRequestOptions::account_ids() const {
  // @@protoc_insertion_point(field_list:plaid.GetAccountsRequestOptions.account_ids)
  return account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAccountsRequestOptions::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetAccountsRequestOptions.account_ids)
  return &account_ids_;
}

// -------------------------------------------------------------------

// GetAccountsRequest

// string client_id = 1;
inline void GetAccountsRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAccountsRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetAccountsRequest.client_id)
  return _internal_client_id();
}
inline void GetAccountsRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetAccountsRequest.client_id)
}
inline std::string* GetAccountsRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetAccountsRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& GetAccountsRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void GetAccountsRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAccountsRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetAccountsRequest.client_id)
}
inline void GetAccountsRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetAccountsRequest.client_id)
}
inline void GetAccountsRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetAccountsRequest.client_id)
}
inline std::string* GetAccountsRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAccountsRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.GetAccountsRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccountsRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetAccountsRequest.client_id)
}

// string secret = 2;
inline void GetAccountsRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAccountsRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.GetAccountsRequest.secret)
  return _internal_secret();
}
inline void GetAccountsRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.GetAccountsRequest.secret)
}
inline std::string* GetAccountsRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.GetAccountsRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& GetAccountsRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void GetAccountsRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAccountsRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetAccountsRequest.secret)
}
inline void GetAccountsRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetAccountsRequest.secret)
}
inline void GetAccountsRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetAccountsRequest.secret)
}
inline std::string* GetAccountsRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAccountsRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.GetAccountsRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccountsRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetAccountsRequest.secret)
}

// string access_token = 3;
inline void GetAccountsRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAccountsRequest::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.GetAccountsRequest.access_token)
  return _internal_access_token();
}
inline void GetAccountsRequest::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.GetAccountsRequest.access_token)
}
inline std::string* GetAccountsRequest::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.GetAccountsRequest.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& GetAccountsRequest::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void GetAccountsRequest::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAccountsRequest::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetAccountsRequest.access_token)
}
inline void GetAccountsRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetAccountsRequest.access_token)
}
inline void GetAccountsRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetAccountsRequest.access_token)
}
inline std::string* GetAccountsRequest::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAccountsRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.GetAccountsRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccountsRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetAccountsRequest.access_token)
}

// .plaid.GetAccountsRequestOptions options = 4;
inline bool GetAccountsRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool GetAccountsRequest::has_options() const {
  return _internal_has_options();
}
inline void GetAccountsRequest::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::plaid::GetAccountsRequestOptions& GetAccountsRequest::_internal_options() const {
  const ::plaid::GetAccountsRequestOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::GetAccountsRequestOptions*>(
      &::plaid::_GetAccountsRequestOptions_default_instance_);
}
inline const ::plaid::GetAccountsRequestOptions& GetAccountsRequest::options() const {
  // @@protoc_insertion_point(field_get:plaid.GetAccountsRequest.options)
  return _internal_options();
}
inline ::plaid::GetAccountsRequestOptions* GetAccountsRequest::release_options() {
  // @@protoc_insertion_point(field_release:plaid.GetAccountsRequest.options)
  
  ::plaid::GetAccountsRequestOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::plaid::GetAccountsRequestOptions* GetAccountsRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::GetAccountsRequestOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::plaid::GetAccountsRequestOptions* GetAccountsRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:plaid.GetAccountsRequest.options)
  return _internal_mutable_options();
}
inline void GetAccountsRequest::set_allocated_options(::plaid::GetAccountsRequestOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetAccountsRequest.options)
}

// -------------------------------------------------------------------

// GetAccountsResponse

// string request_id = 1;
inline void GetAccountsResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAccountsResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetAccountsResponse.request_id)
  return _internal_request_id();
}
inline void GetAccountsResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetAccountsResponse.request_id)
}
inline std::string* GetAccountsResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetAccountsResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetAccountsResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void GetAccountsResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAccountsResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetAccountsResponse.request_id)
}
inline void GetAccountsResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetAccountsResponse.request_id)
}
inline void GetAccountsResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetAccountsResponse.request_id)
}
inline std::string* GetAccountsResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAccountsResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.GetAccountsResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccountsResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetAccountsResponse.request_id)
}

// repeated .plaid.Account accounts = 2;
inline int GetAccountsResponse::_internal_accounts_size() const {
  return accounts_.size();
}
inline int GetAccountsResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline void GetAccountsResponse::clear_accounts() {
  accounts_.Clear();
}
inline ::plaid::Account* GetAccountsResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetAccountsResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >*
GetAccountsResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetAccountsResponse.accounts)
  return &accounts_;
}
inline const ::plaid::Account& GetAccountsResponse::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::plaid::Account& GetAccountsResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetAccountsResponse.accounts)
  return _internal_accounts(index);
}
inline ::plaid::Account* GetAccountsResponse::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::plaid::Account* GetAccountsResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:plaid.GetAccountsResponse.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >&
GetAccountsResponse::accounts() const {
  // @@protoc_insertion_point(field_list:plaid.GetAccountsResponse.accounts)
  return accounts_;
}

// .plaid.Item item = 3;
inline bool GetAccountsResponse::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool GetAccountsResponse::has_item() const {
  return _internal_has_item();
}
inline void GetAccountsResponse::clear_item() {
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::plaid::Item& GetAccountsResponse::_internal_item() const {
  const ::plaid::Item* p = item_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::Item*>(
      &::plaid::_Item_default_instance_);
}
inline const ::plaid::Item& GetAccountsResponse::item() const {
  // @@protoc_insertion_point(field_get:plaid.GetAccountsResponse.item)
  return _internal_item();
}
inline ::plaid::Item* GetAccountsResponse::release_item() {
  // @@protoc_insertion_point(field_release:plaid.GetAccountsResponse.item)
  
  ::plaid::Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::plaid::Item* GetAccountsResponse::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::Item>(GetArenaNoVirtual());
    item_ = p;
  }
  return item_;
}
inline ::plaid::Item* GetAccountsResponse::mutable_item() {
  // @@protoc_insertion_point(field_mutable:plaid.GetAccountsResponse.item)
  return _internal_mutable_item();
}
inline void GetAccountsResponse::set_allocated_item(::plaid::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetAccountsResponse.item)
}

// -------------------------------------------------------------------

// GetAccountsOptions

// repeated string account_ids = 1;
inline int GetAccountsOptions::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int GetAccountsOptions::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void GetAccountsOptions::clear_account_ids() {
  account_ids_.Clear();
}
inline std::string* GetAccountsOptions::add_account_ids() {
  // @@protoc_insertion_point(field_add_mutable:plaid.GetAccountsOptions.account_ids)
  return _internal_add_account_ids();
}
inline const std::string& GetAccountsOptions::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline const std::string& GetAccountsOptions::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetAccountsOptions.account_ids)
  return _internal_account_ids(index);
}
inline std::string* GetAccountsOptions::mutable_account_ids(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetAccountsOptions.account_ids)
  return account_ids_.Mutable(index);
}
inline void GetAccountsOptions::set_account_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.GetAccountsOptions.account_ids)
  account_ids_.Mutable(index)->assign(value);
}
inline void GetAccountsOptions::set_account_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.GetAccountsOptions.account_ids)
  account_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetAccountsOptions::set_account_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.GetAccountsOptions.account_ids)
}
inline void GetAccountsOptions::set_account_ids(int index, const char* value, size_t size) {
  account_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.GetAccountsOptions.account_ids)
}
inline std::string* GetAccountsOptions::_internal_add_account_ids() {
  return account_ids_.Add();
}
inline void GetAccountsOptions::add_account_ids(const std::string& value) {
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.GetAccountsOptions.account_ids)
}
inline void GetAccountsOptions::add_account_ids(std::string&& value) {
  account_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.GetAccountsOptions.account_ids)
}
inline void GetAccountsOptions::add_account_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.GetAccountsOptions.account_ids)
}
inline void GetAccountsOptions::add_account_ids(const char* value, size_t size) {
  account_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.GetAccountsOptions.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAccountsOptions::account_ids() const {
  // @@protoc_insertion_point(field_list:plaid.GetAccountsOptions.account_ids)
  return account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAccountsOptions::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetAccountsOptions.account_ids)
  return &account_ids_;
}

// -------------------------------------------------------------------

// GetBalancesOptions

// repeated string account_ids = 1;
inline int GetBalancesOptions::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int GetBalancesOptions::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void GetBalancesOptions::clear_account_ids() {
  account_ids_.Clear();
}
inline std::string* GetBalancesOptions::add_account_ids() {
  // @@protoc_insertion_point(field_add_mutable:plaid.GetBalancesOptions.account_ids)
  return _internal_add_account_ids();
}
inline const std::string& GetBalancesOptions::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline const std::string& GetBalancesOptions::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetBalancesOptions.account_ids)
  return _internal_account_ids(index);
}
inline std::string* GetBalancesOptions::mutable_account_ids(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetBalancesOptions.account_ids)
  return account_ids_.Mutable(index);
}
inline void GetBalancesOptions::set_account_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.GetBalancesOptions.account_ids)
  account_ids_.Mutable(index)->assign(value);
}
inline void GetBalancesOptions::set_account_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.GetBalancesOptions.account_ids)
  account_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetBalancesOptions::set_account_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.GetBalancesOptions.account_ids)
}
inline void GetBalancesOptions::set_account_ids(int index, const char* value, size_t size) {
  account_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.GetBalancesOptions.account_ids)
}
inline std::string* GetBalancesOptions::_internal_add_account_ids() {
  return account_ids_.Add();
}
inline void GetBalancesOptions::add_account_ids(const std::string& value) {
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.GetBalancesOptions.account_ids)
}
inline void GetBalancesOptions::add_account_ids(std::string&& value) {
  account_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.GetBalancesOptions.account_ids)
}
inline void GetBalancesOptions::add_account_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.GetBalancesOptions.account_ids)
}
inline void GetBalancesOptions::add_account_ids(const char* value, size_t size) {
  account_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.GetBalancesOptions.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetBalancesOptions::account_ids() const {
  // @@protoc_insertion_point(field_list:plaid.GetBalancesOptions.account_ids)
  return account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetBalancesOptions::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetBalancesOptions.account_ids)
  return &account_ids_;
}

// -------------------------------------------------------------------

// AssetReport

// string asset_report_id = 1;
inline void AssetReport::clear_asset_report_id() {
  asset_report_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AssetReport::asset_report_id() const {
  // @@protoc_insertion_point(field_get:plaid.AssetReport.asset_report_id)
  return _internal_asset_report_id();
}
inline void AssetReport::set_asset_report_id(const std::string& value) {
  _internal_set_asset_report_id(value);
  // @@protoc_insertion_point(field_set:plaid.AssetReport.asset_report_id)
}
inline std::string* AssetReport::mutable_asset_report_id() {
  // @@protoc_insertion_point(field_mutable:plaid.AssetReport.asset_report_id)
  return _internal_mutable_asset_report_id();
}
inline const std::string& AssetReport::_internal_asset_report_id() const {
  return asset_report_id_.GetNoArena();
}
inline void AssetReport::_internal_set_asset_report_id(const std::string& value) {
  
  asset_report_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AssetReport::set_asset_report_id(std::string&& value) {
  
  asset_report_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AssetReport.asset_report_id)
}
inline void AssetReport::set_asset_report_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asset_report_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AssetReport.asset_report_id)
}
inline void AssetReport::set_asset_report_id(const char* value, size_t size) {
  
  asset_report_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AssetReport.asset_report_id)
}
inline std::string* AssetReport::_internal_mutable_asset_report_id() {
  
  return asset_report_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AssetReport::release_asset_report_id() {
  // @@protoc_insertion_point(field_release:plaid.AssetReport.asset_report_id)
  
  return asset_report_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AssetReport::set_allocated_asset_report_id(std::string* asset_report_id) {
  if (asset_report_id != nullptr) {
    
  } else {
    
  }
  asset_report_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_report_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.AssetReport.asset_report_id)
}

// string client_report_id = 2;
inline void AssetReport::clear_client_report_id() {
  client_report_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AssetReport::client_report_id() const {
  // @@protoc_insertion_point(field_get:plaid.AssetReport.client_report_id)
  return _internal_client_report_id();
}
inline void AssetReport::set_client_report_id(const std::string& value) {
  _internal_set_client_report_id(value);
  // @@protoc_insertion_point(field_set:plaid.AssetReport.client_report_id)
}
inline std::string* AssetReport::mutable_client_report_id() {
  // @@protoc_insertion_point(field_mutable:plaid.AssetReport.client_report_id)
  return _internal_mutable_client_report_id();
}
inline const std::string& AssetReport::_internal_client_report_id() const {
  return client_report_id_.GetNoArena();
}
inline void AssetReport::_internal_set_client_report_id(const std::string& value) {
  
  client_report_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AssetReport::set_client_report_id(std::string&& value) {
  
  client_report_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AssetReport.client_report_id)
}
inline void AssetReport::set_client_report_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_report_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AssetReport.client_report_id)
}
inline void AssetReport::set_client_report_id(const char* value, size_t size) {
  
  client_report_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AssetReport.client_report_id)
}
inline std::string* AssetReport::_internal_mutable_client_report_id() {
  
  return client_report_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AssetReport::release_client_report_id() {
  // @@protoc_insertion_point(field_release:plaid.AssetReport.client_report_id)
  
  return client_report_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AssetReport::set_allocated_client_report_id(std::string* client_report_id) {
  if (client_report_id != nullptr) {
    
  } else {
    
  }
  client_report_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_report_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.AssetReport.client_report_id)
}

// string date_generated = 3;
inline void AssetReport::clear_date_generated() {
  date_generated_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AssetReport::date_generated() const {
  // @@protoc_insertion_point(field_get:plaid.AssetReport.date_generated)
  return _internal_date_generated();
}
inline void AssetReport::set_date_generated(const std::string& value) {
  _internal_set_date_generated(value);
  // @@protoc_insertion_point(field_set:plaid.AssetReport.date_generated)
}
inline std::string* AssetReport::mutable_date_generated() {
  // @@protoc_insertion_point(field_mutable:plaid.AssetReport.date_generated)
  return _internal_mutable_date_generated();
}
inline const std::string& AssetReport::_internal_date_generated() const {
  return date_generated_.GetNoArena();
}
inline void AssetReport::_internal_set_date_generated(const std::string& value) {
  
  date_generated_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AssetReport::set_date_generated(std::string&& value) {
  
  date_generated_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AssetReport.date_generated)
}
inline void AssetReport::set_date_generated(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_generated_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AssetReport.date_generated)
}
inline void AssetReport::set_date_generated(const char* value, size_t size) {
  
  date_generated_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AssetReport.date_generated)
}
inline std::string* AssetReport::_internal_mutable_date_generated() {
  
  return date_generated_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AssetReport::release_date_generated() {
  // @@protoc_insertion_point(field_release:plaid.AssetReport.date_generated)
  
  return date_generated_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AssetReport::set_allocated_date_generated(std::string* date_generated) {
  if (date_generated != nullptr) {
    
  } else {
    
  }
  date_generated_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_generated);
  // @@protoc_insertion_point(field_set_allocated:plaid.AssetReport.date_generated)
}

// int64 days_requested = 4;
inline void AssetReport::clear_days_requested() {
  days_requested_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AssetReport::_internal_days_requested() const {
  return days_requested_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AssetReport::days_requested() const {
  // @@protoc_insertion_point(field_get:plaid.AssetReport.days_requested)
  return _internal_days_requested();
}
inline void AssetReport::_internal_set_days_requested(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  days_requested_ = value;
}
inline void AssetReport::set_days_requested(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_days_requested(value);
  // @@protoc_insertion_point(field_set:plaid.AssetReport.days_requested)
}

// repeated .plaid.AssetReportItem items = 5;
inline int AssetReport::_internal_items_size() const {
  return items_.size();
}
inline int AssetReport::items_size() const {
  return _internal_items_size();
}
inline void AssetReport::clear_items() {
  items_.Clear();
}
inline ::plaid::AssetReportItem* AssetReport::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.AssetReport.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::AssetReportItem >*
AssetReport::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:plaid.AssetReport.items)
  return &items_;
}
inline const ::plaid::AssetReportItem& AssetReport::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::plaid::AssetReportItem& AssetReport::items(int index) const {
  // @@protoc_insertion_point(field_get:plaid.AssetReport.items)
  return _internal_items(index);
}
inline ::plaid::AssetReportItem* AssetReport::_internal_add_items() {
  return items_.Add();
}
inline ::plaid::AssetReportItem* AssetReport::add_items() {
  // @@protoc_insertion_point(field_add:plaid.AssetReport.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::AssetReportItem >&
AssetReport::items() const {
  // @@protoc_insertion_point(field_list:plaid.AssetReport.items)
  return items_;
}

// .plaid.AssetReportUser user = 6;
inline bool AssetReport::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool AssetReport::has_user() const {
  return _internal_has_user();
}
inline void AssetReport::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::plaid::AssetReportUser& AssetReport::_internal_user() const {
  const ::plaid::AssetReportUser* p = user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::AssetReportUser*>(
      &::plaid::_AssetReportUser_default_instance_);
}
inline const ::plaid::AssetReportUser& AssetReport::user() const {
  // @@protoc_insertion_point(field_get:plaid.AssetReport.user)
  return _internal_user();
}
inline ::plaid::AssetReportUser* AssetReport::release_user() {
  // @@protoc_insertion_point(field_release:plaid.AssetReport.user)
  
  ::plaid::AssetReportUser* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::plaid::AssetReportUser* AssetReport::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::AssetReportUser>(GetArenaNoVirtual());
    user_ = p;
  }
  return user_;
}
inline ::plaid::AssetReportUser* AssetReport::mutable_user() {
  // @@protoc_insertion_point(field_mutable:plaid.AssetReport.user)
  return _internal_mutable_user();
}
inline void AssetReport::set_allocated_user(::plaid::AssetReportUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:plaid.AssetReport.user)
}

// -------------------------------------------------------------------

// AssetReportItem

// repeated .plaid.Account accounts = 1;
inline int AssetReportItem::_internal_accounts_size() const {
  return accounts_.size();
}
inline int AssetReportItem::accounts_size() const {
  return _internal_accounts_size();
}
inline void AssetReportItem::clear_accounts() {
  accounts_.Clear();
}
inline ::plaid::Account* AssetReportItem::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.AssetReportItem.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >*
AssetReportItem::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:plaid.AssetReportItem.accounts)
  return &accounts_;
}
inline const ::plaid::Account& AssetReportItem::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::plaid::Account& AssetReportItem::accounts(int index) const {
  // @@protoc_insertion_point(field_get:plaid.AssetReportItem.accounts)
  return _internal_accounts(index);
}
inline ::plaid::Account* AssetReportItem::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::plaid::Account* AssetReportItem::add_accounts() {
  // @@protoc_insertion_point(field_add:plaid.AssetReportItem.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >&
AssetReportItem::accounts() const {
  // @@protoc_insertion_point(field_list:plaid.AssetReportItem.accounts)
  return accounts_;
}

// string date_last_updated = 2;
inline void AssetReportItem::clear_date_last_updated() {
  date_last_updated_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AssetReportItem::date_last_updated() const {
  // @@protoc_insertion_point(field_get:plaid.AssetReportItem.date_last_updated)
  return _internal_date_last_updated();
}
inline void AssetReportItem::set_date_last_updated(const std::string& value) {
  _internal_set_date_last_updated(value);
  // @@protoc_insertion_point(field_set:plaid.AssetReportItem.date_last_updated)
}
inline std::string* AssetReportItem::mutable_date_last_updated() {
  // @@protoc_insertion_point(field_mutable:plaid.AssetReportItem.date_last_updated)
  return _internal_mutable_date_last_updated();
}
inline const std::string& AssetReportItem::_internal_date_last_updated() const {
  return date_last_updated_.GetNoArena();
}
inline void AssetReportItem::_internal_set_date_last_updated(const std::string& value) {
  
  date_last_updated_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AssetReportItem::set_date_last_updated(std::string&& value) {
  
  date_last_updated_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AssetReportItem.date_last_updated)
}
inline void AssetReportItem::set_date_last_updated(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_last_updated_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AssetReportItem.date_last_updated)
}
inline void AssetReportItem::set_date_last_updated(const char* value, size_t size) {
  
  date_last_updated_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AssetReportItem.date_last_updated)
}
inline std::string* AssetReportItem::_internal_mutable_date_last_updated() {
  
  return date_last_updated_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AssetReportItem::release_date_last_updated() {
  // @@protoc_insertion_point(field_release:plaid.AssetReportItem.date_last_updated)
  
  return date_last_updated_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AssetReportItem::set_allocated_date_last_updated(std::string* date_last_updated) {
  if (date_last_updated != nullptr) {
    
  } else {
    
  }
  date_last_updated_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_last_updated);
  // @@protoc_insertion_point(field_set_allocated:plaid.AssetReportItem.date_last_updated)
}

// string institution_id = 3;
inline void AssetReportItem::clear_institution_id() {
  institution_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AssetReportItem::institution_id() const {
  // @@protoc_insertion_point(field_get:plaid.AssetReportItem.institution_id)
  return _internal_institution_id();
}
inline void AssetReportItem::set_institution_id(const std::string& value) {
  _internal_set_institution_id(value);
  // @@protoc_insertion_point(field_set:plaid.AssetReportItem.institution_id)
}
inline std::string* AssetReportItem::mutable_institution_id() {
  // @@protoc_insertion_point(field_mutable:plaid.AssetReportItem.institution_id)
  return _internal_mutable_institution_id();
}
inline const std::string& AssetReportItem::_internal_institution_id() const {
  return institution_id_.GetNoArena();
}
inline void AssetReportItem::_internal_set_institution_id(const std::string& value) {
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AssetReportItem::set_institution_id(std::string&& value) {
  
  institution_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AssetReportItem.institution_id)
}
inline void AssetReportItem::set_institution_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AssetReportItem.institution_id)
}
inline void AssetReportItem::set_institution_id(const char* value, size_t size) {
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AssetReportItem.institution_id)
}
inline std::string* AssetReportItem::_internal_mutable_institution_id() {
  
  return institution_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AssetReportItem::release_institution_id() {
  // @@protoc_insertion_point(field_release:plaid.AssetReportItem.institution_id)
  
  return institution_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AssetReportItem::set_allocated_institution_id(std::string* institution_id) {
  if (institution_id != nullptr) {
    
  } else {
    
  }
  institution_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), institution_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.AssetReportItem.institution_id)
}

// string institution_name = 4;
inline void AssetReportItem::clear_institution_name() {
  institution_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AssetReportItem::institution_name() const {
  // @@protoc_insertion_point(field_get:plaid.AssetReportItem.institution_name)
  return _internal_institution_name();
}
inline void AssetReportItem::set_institution_name(const std::string& value) {
  _internal_set_institution_name(value);
  // @@protoc_insertion_point(field_set:plaid.AssetReportItem.institution_name)
}
inline std::string* AssetReportItem::mutable_institution_name() {
  // @@protoc_insertion_point(field_mutable:plaid.AssetReportItem.institution_name)
  return _internal_mutable_institution_name();
}
inline const std::string& AssetReportItem::_internal_institution_name() const {
  return institution_name_.GetNoArena();
}
inline void AssetReportItem::_internal_set_institution_name(const std::string& value) {
  
  institution_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AssetReportItem::set_institution_name(std::string&& value) {
  
  institution_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AssetReportItem.institution_name)
}
inline void AssetReportItem::set_institution_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  institution_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AssetReportItem.institution_name)
}
inline void AssetReportItem::set_institution_name(const char* value, size_t size) {
  
  institution_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AssetReportItem.institution_name)
}
inline std::string* AssetReportItem::_internal_mutable_institution_name() {
  
  return institution_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AssetReportItem::release_institution_name() {
  // @@protoc_insertion_point(field_release:plaid.AssetReportItem.institution_name)
  
  return institution_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AssetReportItem::set_allocated_institution_name(std::string* institution_name) {
  if (institution_name != nullptr) {
    
  } else {
    
  }
  institution_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), institution_name);
  // @@protoc_insertion_point(field_set_allocated:plaid.AssetReportItem.institution_name)
}

// string item_id = 5;
inline void AssetReportItem::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AssetReportItem::item_id() const {
  // @@protoc_insertion_point(field_get:plaid.AssetReportItem.item_id)
  return _internal_item_id();
}
inline void AssetReportItem::set_item_id(const std::string& value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:plaid.AssetReportItem.item_id)
}
inline std::string* AssetReportItem::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable:plaid.AssetReportItem.item_id)
  return _internal_mutable_item_id();
}
inline const std::string& AssetReportItem::_internal_item_id() const {
  return item_id_.GetNoArena();
}
inline void AssetReportItem::_internal_set_item_id(const std::string& value) {
  
  item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AssetReportItem::set_item_id(std::string&& value) {
  
  item_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AssetReportItem.item_id)
}
inline void AssetReportItem::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AssetReportItem.item_id)
}
inline void AssetReportItem::set_item_id(const char* value, size_t size) {
  
  item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AssetReportItem.item_id)
}
inline std::string* AssetReportItem::_internal_mutable_item_id() {
  
  return item_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AssetReportItem::release_item_id() {
  // @@protoc_insertion_point(field_release:plaid.AssetReportItem.item_id)
  
  return item_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AssetReportItem::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.AssetReportItem.item_id)
}

// -------------------------------------------------------------------

// AssetReportUser

// string client_user_id = 1;
inline void AssetReportUser::clear_client_user_id() {
  client_user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AssetReportUser::client_user_id() const {
  // @@protoc_insertion_point(field_get:plaid.AssetReportUser.client_user_id)
  return _internal_client_user_id();
}
inline void AssetReportUser::set_client_user_id(const std::string& value) {
  _internal_set_client_user_id(value);
  // @@protoc_insertion_point(field_set:plaid.AssetReportUser.client_user_id)
}
inline std::string* AssetReportUser::mutable_client_user_id() {
  // @@protoc_insertion_point(field_mutable:plaid.AssetReportUser.client_user_id)
  return _internal_mutable_client_user_id();
}
inline const std::string& AssetReportUser::_internal_client_user_id() const {
  return client_user_id_.GetNoArena();
}
inline void AssetReportUser::_internal_set_client_user_id(const std::string& value) {
  
  client_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AssetReportUser::set_client_user_id(std::string&& value) {
  
  client_user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AssetReportUser.client_user_id)
}
inline void AssetReportUser::set_client_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AssetReportUser.client_user_id)
}
inline void AssetReportUser::set_client_user_id(const char* value, size_t size) {
  
  client_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AssetReportUser.client_user_id)
}
inline std::string* AssetReportUser::_internal_mutable_client_user_id() {
  
  return client_user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AssetReportUser::release_client_user_id() {
  // @@protoc_insertion_point(field_release:plaid.AssetReportUser.client_user_id)
  
  return client_user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AssetReportUser::set_allocated_client_user_id(std::string* client_user_id) {
  if (client_user_id != nullptr) {
    
  } else {
    
  }
  client_user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_user_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.AssetReportUser.client_user_id)
}

// string email = 2;
inline void AssetReportUser::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AssetReportUser::email() const {
  // @@protoc_insertion_point(field_get:plaid.AssetReportUser.email)
  return _internal_email();
}
inline void AssetReportUser::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:plaid.AssetReportUser.email)
}
inline std::string* AssetReportUser::mutable_email() {
  // @@protoc_insertion_point(field_mutable:plaid.AssetReportUser.email)
  return _internal_mutable_email();
}
inline const std::string& AssetReportUser::_internal_email() const {
  return email_.GetNoArena();
}
inline void AssetReportUser::_internal_set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AssetReportUser::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AssetReportUser.email)
}
inline void AssetReportUser::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AssetReportUser.email)
}
inline void AssetReportUser::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AssetReportUser.email)
}
inline std::string* AssetReportUser::_internal_mutable_email() {
  
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AssetReportUser::release_email() {
  // @@protoc_insertion_point(field_release:plaid.AssetReportUser.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AssetReportUser::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:plaid.AssetReportUser.email)
}

// string first_name = 3;
inline void AssetReportUser::clear_first_name() {
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AssetReportUser::first_name() const {
  // @@protoc_insertion_point(field_get:plaid.AssetReportUser.first_name)
  return _internal_first_name();
}
inline void AssetReportUser::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:plaid.AssetReportUser.first_name)
}
inline std::string* AssetReportUser::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:plaid.AssetReportUser.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& AssetReportUser::_internal_first_name() const {
  return first_name_.GetNoArena();
}
inline void AssetReportUser::_internal_set_first_name(const std::string& value) {
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AssetReportUser::set_first_name(std::string&& value) {
  
  first_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AssetReportUser.first_name)
}
inline void AssetReportUser::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AssetReportUser.first_name)
}
inline void AssetReportUser::set_first_name(const char* value, size_t size) {
  
  first_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AssetReportUser.first_name)
}
inline std::string* AssetReportUser::_internal_mutable_first_name() {
  
  return first_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AssetReportUser::release_first_name() {
  // @@protoc_insertion_point(field_release:plaid.AssetReportUser.first_name)
  
  return first_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AssetReportUser::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name);
  // @@protoc_insertion_point(field_set_allocated:plaid.AssetReportUser.first_name)
}

// string last_name = 4;
inline void AssetReportUser::clear_last_name() {
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AssetReportUser::last_name() const {
  // @@protoc_insertion_point(field_get:plaid.AssetReportUser.last_name)
  return _internal_last_name();
}
inline void AssetReportUser::set_last_name(const std::string& value) {
  _internal_set_last_name(value);
  // @@protoc_insertion_point(field_set:plaid.AssetReportUser.last_name)
}
inline std::string* AssetReportUser::mutable_last_name() {
  // @@protoc_insertion_point(field_mutable:plaid.AssetReportUser.last_name)
  return _internal_mutable_last_name();
}
inline const std::string& AssetReportUser::_internal_last_name() const {
  return last_name_.GetNoArena();
}
inline void AssetReportUser::_internal_set_last_name(const std::string& value) {
  
  last_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AssetReportUser::set_last_name(std::string&& value) {
  
  last_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AssetReportUser.last_name)
}
inline void AssetReportUser::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AssetReportUser.last_name)
}
inline void AssetReportUser::set_last_name(const char* value, size_t size) {
  
  last_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AssetReportUser.last_name)
}
inline std::string* AssetReportUser::_internal_mutable_last_name() {
  
  return last_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AssetReportUser::release_last_name() {
  // @@protoc_insertion_point(field_release:plaid.AssetReportUser.last_name)
  
  return last_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AssetReportUser::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name);
  // @@protoc_insertion_point(field_set_allocated:plaid.AssetReportUser.last_name)
}

// string middle_name = 5;
inline void AssetReportUser::clear_middle_name() {
  middle_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AssetReportUser::middle_name() const {
  // @@protoc_insertion_point(field_get:plaid.AssetReportUser.middle_name)
  return _internal_middle_name();
}
inline void AssetReportUser::set_middle_name(const std::string& value) {
  _internal_set_middle_name(value);
  // @@protoc_insertion_point(field_set:plaid.AssetReportUser.middle_name)
}
inline std::string* AssetReportUser::mutable_middle_name() {
  // @@protoc_insertion_point(field_mutable:plaid.AssetReportUser.middle_name)
  return _internal_mutable_middle_name();
}
inline const std::string& AssetReportUser::_internal_middle_name() const {
  return middle_name_.GetNoArena();
}
inline void AssetReportUser::_internal_set_middle_name(const std::string& value) {
  
  middle_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AssetReportUser::set_middle_name(std::string&& value) {
  
  middle_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AssetReportUser.middle_name)
}
inline void AssetReportUser::set_middle_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  middle_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AssetReportUser.middle_name)
}
inline void AssetReportUser::set_middle_name(const char* value, size_t size) {
  
  middle_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AssetReportUser.middle_name)
}
inline std::string* AssetReportUser::_internal_mutable_middle_name() {
  
  return middle_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AssetReportUser::release_middle_name() {
  // @@protoc_insertion_point(field_release:plaid.AssetReportUser.middle_name)
  
  return middle_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AssetReportUser::set_allocated_middle_name(std::string* middle_name) {
  if (middle_name != nullptr) {
    
  } else {
    
  }
  middle_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), middle_name);
  // @@protoc_insertion_point(field_set_allocated:plaid.AssetReportUser.middle_name)
}

// string phone_number = 6;
inline void AssetReportUser::clear_phone_number() {
  phone_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AssetReportUser::phone_number() const {
  // @@protoc_insertion_point(field_get:plaid.AssetReportUser.phone_number)
  return _internal_phone_number();
}
inline void AssetReportUser::set_phone_number(const std::string& value) {
  _internal_set_phone_number(value);
  // @@protoc_insertion_point(field_set:plaid.AssetReportUser.phone_number)
}
inline std::string* AssetReportUser::mutable_phone_number() {
  // @@protoc_insertion_point(field_mutable:plaid.AssetReportUser.phone_number)
  return _internal_mutable_phone_number();
}
inline const std::string& AssetReportUser::_internal_phone_number() const {
  return phone_number_.GetNoArena();
}
inline void AssetReportUser::_internal_set_phone_number(const std::string& value) {
  
  phone_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AssetReportUser::set_phone_number(std::string&& value) {
  
  phone_number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AssetReportUser.phone_number)
}
inline void AssetReportUser::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AssetReportUser.phone_number)
}
inline void AssetReportUser::set_phone_number(const char* value, size_t size) {
  
  phone_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AssetReportUser.phone_number)
}
inline std::string* AssetReportUser::_internal_mutable_phone_number() {
  
  return phone_number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AssetReportUser::release_phone_number() {
  // @@protoc_insertion_point(field_release:plaid.AssetReportUser.phone_number)
  
  return phone_number_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AssetReportUser::set_allocated_phone_number(std::string* phone_number) {
  if (phone_number != nullptr) {
    
  } else {
    
  }
  phone_number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_number);
  // @@protoc_insertion_point(field_set_allocated:plaid.AssetReportUser.phone_number)
}

// string ssn = 7;
inline void AssetReportUser::clear_ssn() {
  ssn_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AssetReportUser::ssn() const {
  // @@protoc_insertion_point(field_get:plaid.AssetReportUser.ssn)
  return _internal_ssn();
}
inline void AssetReportUser::set_ssn(const std::string& value) {
  _internal_set_ssn(value);
  // @@protoc_insertion_point(field_set:plaid.AssetReportUser.ssn)
}
inline std::string* AssetReportUser::mutable_ssn() {
  // @@protoc_insertion_point(field_mutable:plaid.AssetReportUser.ssn)
  return _internal_mutable_ssn();
}
inline const std::string& AssetReportUser::_internal_ssn() const {
  return ssn_.GetNoArena();
}
inline void AssetReportUser::_internal_set_ssn(const std::string& value) {
  
  ssn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AssetReportUser::set_ssn(std::string&& value) {
  
  ssn_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AssetReportUser.ssn)
}
inline void AssetReportUser::set_ssn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AssetReportUser.ssn)
}
inline void AssetReportUser::set_ssn(const char* value, size_t size) {
  
  ssn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AssetReportUser.ssn)
}
inline std::string* AssetReportUser::_internal_mutable_ssn() {
  
  return ssn_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AssetReportUser::release_ssn() {
  // @@protoc_insertion_point(field_release:plaid.AssetReportUser.ssn)
  
  return ssn_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AssetReportUser::set_allocated_ssn(std::string* ssn) {
  if (ssn != nullptr) {
    
  } else {
    
  }
  ssn_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssn);
  // @@protoc_insertion_point(field_set_allocated:plaid.AssetReportUser.ssn)
}

// -------------------------------------------------------------------

// GetAssetReportRequest

// string client_id = 1;
inline void GetAssetReportRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAssetReportRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetAssetReportRequest.client_id)
  return _internal_client_id();
}
inline void GetAssetReportRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetAssetReportRequest.client_id)
}
inline std::string* GetAssetReportRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetAssetReportRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& GetAssetReportRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void GetAssetReportRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAssetReportRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetAssetReportRequest.client_id)
}
inline void GetAssetReportRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetAssetReportRequest.client_id)
}
inline void GetAssetReportRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetAssetReportRequest.client_id)
}
inline std::string* GetAssetReportRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAssetReportRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.GetAssetReportRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAssetReportRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetAssetReportRequest.client_id)
}

// string secret = 2;
inline void GetAssetReportRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAssetReportRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.GetAssetReportRequest.secret)
  return _internal_secret();
}
inline void GetAssetReportRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.GetAssetReportRequest.secret)
}
inline std::string* GetAssetReportRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.GetAssetReportRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& GetAssetReportRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void GetAssetReportRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAssetReportRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetAssetReportRequest.secret)
}
inline void GetAssetReportRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetAssetReportRequest.secret)
}
inline void GetAssetReportRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetAssetReportRequest.secret)
}
inline std::string* GetAssetReportRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAssetReportRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.GetAssetReportRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAssetReportRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetAssetReportRequest.secret)
}

// string asset_report_token = 3;
inline void GetAssetReportRequest::clear_asset_report_token() {
  asset_report_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAssetReportRequest::asset_report_token() const {
  // @@protoc_insertion_point(field_get:plaid.GetAssetReportRequest.asset_report_token)
  return _internal_asset_report_token();
}
inline void GetAssetReportRequest::set_asset_report_token(const std::string& value) {
  _internal_set_asset_report_token(value);
  // @@protoc_insertion_point(field_set:plaid.GetAssetReportRequest.asset_report_token)
}
inline std::string* GetAssetReportRequest::mutable_asset_report_token() {
  // @@protoc_insertion_point(field_mutable:plaid.GetAssetReportRequest.asset_report_token)
  return _internal_mutable_asset_report_token();
}
inline const std::string& GetAssetReportRequest::_internal_asset_report_token() const {
  return asset_report_token_.GetNoArena();
}
inline void GetAssetReportRequest::_internal_set_asset_report_token(const std::string& value) {
  
  asset_report_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAssetReportRequest::set_asset_report_token(std::string&& value) {
  
  asset_report_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetAssetReportRequest.asset_report_token)
}
inline void GetAssetReportRequest::set_asset_report_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asset_report_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetAssetReportRequest.asset_report_token)
}
inline void GetAssetReportRequest::set_asset_report_token(const char* value, size_t size) {
  
  asset_report_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetAssetReportRequest.asset_report_token)
}
inline std::string* GetAssetReportRequest::_internal_mutable_asset_report_token() {
  
  return asset_report_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAssetReportRequest::release_asset_report_token() {
  // @@protoc_insertion_point(field_release:plaid.GetAssetReportRequest.asset_report_token)
  
  return asset_report_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAssetReportRequest::set_allocated_asset_report_token(std::string* asset_report_token) {
  if (asset_report_token != nullptr) {
    
  } else {
    
  }
  asset_report_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_report_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetAssetReportRequest.asset_report_token)
}

// -------------------------------------------------------------------

// GetAssetReportResponse

// string request_id = 1;
inline void GetAssetReportResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAssetReportResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetAssetReportResponse.request_id)
  return _internal_request_id();
}
inline void GetAssetReportResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetAssetReportResponse.request_id)
}
inline std::string* GetAssetReportResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetAssetReportResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetAssetReportResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void GetAssetReportResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAssetReportResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetAssetReportResponse.request_id)
}
inline void GetAssetReportResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetAssetReportResponse.request_id)
}
inline void GetAssetReportResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetAssetReportResponse.request_id)
}
inline std::string* GetAssetReportResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAssetReportResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.GetAssetReportResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAssetReportResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetAssetReportResponse.request_id)
}

// .plaid.AssetReport report = 2;
inline bool GetAssetReportResponse::_internal_has_report() const {
  return this != internal_default_instance() && report_ != nullptr;
}
inline bool GetAssetReportResponse::has_report() const {
  return _internal_has_report();
}
inline void GetAssetReportResponse::clear_report() {
  if (GetArenaNoVirtual() == nullptr && report_ != nullptr) {
    delete report_;
  }
  report_ = nullptr;
}
inline const ::plaid::AssetReport& GetAssetReportResponse::_internal_report() const {
  const ::plaid::AssetReport* p = report_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::AssetReport*>(
      &::plaid::_AssetReport_default_instance_);
}
inline const ::plaid::AssetReport& GetAssetReportResponse::report() const {
  // @@protoc_insertion_point(field_get:plaid.GetAssetReportResponse.report)
  return _internal_report();
}
inline ::plaid::AssetReport* GetAssetReportResponse::release_report() {
  // @@protoc_insertion_point(field_release:plaid.GetAssetReportResponse.report)
  
  ::plaid::AssetReport* temp = report_;
  report_ = nullptr;
  return temp;
}
inline ::plaid::AssetReport* GetAssetReportResponse::_internal_mutable_report() {
  
  if (report_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::AssetReport>(GetArenaNoVirtual());
    report_ = p;
  }
  return report_;
}
inline ::plaid::AssetReport* GetAssetReportResponse::mutable_report() {
  // @@protoc_insertion_point(field_mutable:plaid.GetAssetReportResponse.report)
  return _internal_mutable_report();
}
inline void GetAssetReportResponse::set_allocated_report(::plaid::AssetReport* report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete report_;
  }
  if (report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, report, submessage_arena);
    }
    
  } else {
    
  }
  report_ = report;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetAssetReportResponse.report)
}

// repeated string warnings = 3;
inline int GetAssetReportResponse::_internal_warnings_size() const {
  return warnings_.size();
}
inline int GetAssetReportResponse::warnings_size() const {
  return _internal_warnings_size();
}
inline void GetAssetReportResponse::clear_warnings() {
  warnings_.Clear();
}
inline std::string* GetAssetReportResponse::add_warnings() {
  // @@protoc_insertion_point(field_add_mutable:plaid.GetAssetReportResponse.warnings)
  return _internal_add_warnings();
}
inline const std::string& GetAssetReportResponse::_internal_warnings(int index) const {
  return warnings_.Get(index);
}
inline const std::string& GetAssetReportResponse::warnings(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetAssetReportResponse.warnings)
  return _internal_warnings(index);
}
inline std::string* GetAssetReportResponse::mutable_warnings(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetAssetReportResponse.warnings)
  return warnings_.Mutable(index);
}
inline void GetAssetReportResponse::set_warnings(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.GetAssetReportResponse.warnings)
  warnings_.Mutable(index)->assign(value);
}
inline void GetAssetReportResponse::set_warnings(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.GetAssetReportResponse.warnings)
  warnings_.Mutable(index)->assign(std::move(value));
}
inline void GetAssetReportResponse::set_warnings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  warnings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.GetAssetReportResponse.warnings)
}
inline void GetAssetReportResponse::set_warnings(int index, const char* value, size_t size) {
  warnings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.GetAssetReportResponse.warnings)
}
inline std::string* GetAssetReportResponse::_internal_add_warnings() {
  return warnings_.Add();
}
inline void GetAssetReportResponse::add_warnings(const std::string& value) {
  warnings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.GetAssetReportResponse.warnings)
}
inline void GetAssetReportResponse::add_warnings(std::string&& value) {
  warnings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.GetAssetReportResponse.warnings)
}
inline void GetAssetReportResponse::add_warnings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  warnings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.GetAssetReportResponse.warnings)
}
inline void GetAssetReportResponse::add_warnings(const char* value, size_t size) {
  warnings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.GetAssetReportResponse.warnings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAssetReportResponse::warnings() const {
  // @@protoc_insertion_point(field_list:plaid.GetAssetReportResponse.warnings)
  return warnings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAssetReportResponse::mutable_warnings() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetAssetReportResponse.warnings)
  return &warnings_;
}

// -------------------------------------------------------------------

// RemoveAssetReportRequest

// string client_id = 1;
inline void RemoveAssetReportRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveAssetReportRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.RemoveAssetReportRequest.client_id)
  return _internal_client_id();
}
inline void RemoveAssetReportRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.RemoveAssetReportRequest.client_id)
}
inline std::string* RemoveAssetReportRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.RemoveAssetReportRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& RemoveAssetReportRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void RemoveAssetReportRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveAssetReportRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.RemoveAssetReportRequest.client_id)
}
inline void RemoveAssetReportRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.RemoveAssetReportRequest.client_id)
}
inline void RemoveAssetReportRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.RemoveAssetReportRequest.client_id)
}
inline std::string* RemoveAssetReportRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveAssetReportRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.RemoveAssetReportRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveAssetReportRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.RemoveAssetReportRequest.client_id)
}

// string secret = 2;
inline void RemoveAssetReportRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveAssetReportRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.RemoveAssetReportRequest.secret)
  return _internal_secret();
}
inline void RemoveAssetReportRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.RemoveAssetReportRequest.secret)
}
inline std::string* RemoveAssetReportRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.RemoveAssetReportRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& RemoveAssetReportRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void RemoveAssetReportRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveAssetReportRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.RemoveAssetReportRequest.secret)
}
inline void RemoveAssetReportRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.RemoveAssetReportRequest.secret)
}
inline void RemoveAssetReportRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.RemoveAssetReportRequest.secret)
}
inline std::string* RemoveAssetReportRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveAssetReportRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.RemoveAssetReportRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveAssetReportRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.RemoveAssetReportRequest.secret)
}

// string asset_report_token = 3;
inline void RemoveAssetReportRequest::clear_asset_report_token() {
  asset_report_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveAssetReportRequest::asset_report_token() const {
  // @@protoc_insertion_point(field_get:plaid.RemoveAssetReportRequest.asset_report_token)
  return _internal_asset_report_token();
}
inline void RemoveAssetReportRequest::set_asset_report_token(const std::string& value) {
  _internal_set_asset_report_token(value);
  // @@protoc_insertion_point(field_set:plaid.RemoveAssetReportRequest.asset_report_token)
}
inline std::string* RemoveAssetReportRequest::mutable_asset_report_token() {
  // @@protoc_insertion_point(field_mutable:plaid.RemoveAssetReportRequest.asset_report_token)
  return _internal_mutable_asset_report_token();
}
inline const std::string& RemoveAssetReportRequest::_internal_asset_report_token() const {
  return asset_report_token_.GetNoArena();
}
inline void RemoveAssetReportRequest::_internal_set_asset_report_token(const std::string& value) {
  
  asset_report_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveAssetReportRequest::set_asset_report_token(std::string&& value) {
  
  asset_report_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.RemoveAssetReportRequest.asset_report_token)
}
inline void RemoveAssetReportRequest::set_asset_report_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asset_report_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.RemoveAssetReportRequest.asset_report_token)
}
inline void RemoveAssetReportRequest::set_asset_report_token(const char* value, size_t size) {
  
  asset_report_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.RemoveAssetReportRequest.asset_report_token)
}
inline std::string* RemoveAssetReportRequest::_internal_mutable_asset_report_token() {
  
  return asset_report_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveAssetReportRequest::release_asset_report_token() {
  // @@protoc_insertion_point(field_release:plaid.RemoveAssetReportRequest.asset_report_token)
  
  return asset_report_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveAssetReportRequest::set_allocated_asset_report_token(std::string* asset_report_token) {
  if (asset_report_token != nullptr) {
    
  } else {
    
  }
  asset_report_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_report_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.RemoveAssetReportRequest.asset_report_token)
}

// -------------------------------------------------------------------

// RemoveAssetReportResponse

// string request_id = 1;
inline void RemoveAssetReportResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveAssetReportResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.RemoveAssetReportResponse.request_id)
  return _internal_request_id();
}
inline void RemoveAssetReportResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.RemoveAssetReportResponse.request_id)
}
inline std::string* RemoveAssetReportResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.RemoveAssetReportResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& RemoveAssetReportResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void RemoveAssetReportResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveAssetReportResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.RemoveAssetReportResponse.request_id)
}
inline void RemoveAssetReportResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.RemoveAssetReportResponse.request_id)
}
inline void RemoveAssetReportResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.RemoveAssetReportResponse.request_id)
}
inline std::string* RemoveAssetReportResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveAssetReportResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.RemoveAssetReportResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveAssetReportResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.RemoveAssetReportResponse.request_id)
}

// bool removed = 2;
inline void RemoveAssetReportResponse::clear_removed() {
  removed_ = false;
}
inline bool RemoveAssetReportResponse::_internal_removed() const {
  return removed_;
}
inline bool RemoveAssetReportResponse::removed() const {
  // @@protoc_insertion_point(field_get:plaid.RemoveAssetReportResponse.removed)
  return _internal_removed();
}
inline void RemoveAssetReportResponse::_internal_set_removed(bool value) {
  
  removed_ = value;
}
inline void RemoveAssetReportResponse::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:plaid.RemoveAssetReportResponse.removed)
}

// -------------------------------------------------------------------

// CreateAuditCopyRequest

// string client_id = 1;
inline void CreateAuditCopyRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateAuditCopyRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.CreateAuditCopyRequest.client_id)
  return _internal_client_id();
}
inline void CreateAuditCopyRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.CreateAuditCopyRequest.client_id)
}
inline std::string* CreateAuditCopyRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateAuditCopyRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& CreateAuditCopyRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void CreateAuditCopyRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateAuditCopyRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateAuditCopyRequest.client_id)
}
inline void CreateAuditCopyRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateAuditCopyRequest.client_id)
}
inline void CreateAuditCopyRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateAuditCopyRequest.client_id)
}
inline std::string* CreateAuditCopyRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateAuditCopyRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.CreateAuditCopyRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAuditCopyRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateAuditCopyRequest.client_id)
}

// string secret = 2;
inline void CreateAuditCopyRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateAuditCopyRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.CreateAuditCopyRequest.secret)
  return _internal_secret();
}
inline void CreateAuditCopyRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.CreateAuditCopyRequest.secret)
}
inline std::string* CreateAuditCopyRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateAuditCopyRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& CreateAuditCopyRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void CreateAuditCopyRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateAuditCopyRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateAuditCopyRequest.secret)
}
inline void CreateAuditCopyRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateAuditCopyRequest.secret)
}
inline void CreateAuditCopyRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateAuditCopyRequest.secret)
}
inline std::string* CreateAuditCopyRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateAuditCopyRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.CreateAuditCopyRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAuditCopyRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateAuditCopyRequest.secret)
}

// string asset_report_token = 3;
inline void CreateAuditCopyRequest::clear_asset_report_token() {
  asset_report_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateAuditCopyRequest::asset_report_token() const {
  // @@protoc_insertion_point(field_get:plaid.CreateAuditCopyRequest.asset_report_token)
  return _internal_asset_report_token();
}
inline void CreateAuditCopyRequest::set_asset_report_token(const std::string& value) {
  _internal_set_asset_report_token(value);
  // @@protoc_insertion_point(field_set:plaid.CreateAuditCopyRequest.asset_report_token)
}
inline std::string* CreateAuditCopyRequest::mutable_asset_report_token() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateAuditCopyRequest.asset_report_token)
  return _internal_mutable_asset_report_token();
}
inline const std::string& CreateAuditCopyRequest::_internal_asset_report_token() const {
  return asset_report_token_.GetNoArena();
}
inline void CreateAuditCopyRequest::_internal_set_asset_report_token(const std::string& value) {
  
  asset_report_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateAuditCopyRequest::set_asset_report_token(std::string&& value) {
  
  asset_report_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateAuditCopyRequest.asset_report_token)
}
inline void CreateAuditCopyRequest::set_asset_report_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asset_report_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateAuditCopyRequest.asset_report_token)
}
inline void CreateAuditCopyRequest::set_asset_report_token(const char* value, size_t size) {
  
  asset_report_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateAuditCopyRequest.asset_report_token)
}
inline std::string* CreateAuditCopyRequest::_internal_mutable_asset_report_token() {
  
  return asset_report_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateAuditCopyRequest::release_asset_report_token() {
  // @@protoc_insertion_point(field_release:plaid.CreateAuditCopyRequest.asset_report_token)
  
  return asset_report_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAuditCopyRequest::set_allocated_asset_report_token(std::string* asset_report_token) {
  if (asset_report_token != nullptr) {
    
  } else {
    
  }
  asset_report_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_report_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateAuditCopyRequest.asset_report_token)
}

// string auditor_id = 4;
inline void CreateAuditCopyRequest::clear_auditor_id() {
  auditor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateAuditCopyRequest::auditor_id() const {
  // @@protoc_insertion_point(field_get:plaid.CreateAuditCopyRequest.auditor_id)
  return _internal_auditor_id();
}
inline void CreateAuditCopyRequest::set_auditor_id(const std::string& value) {
  _internal_set_auditor_id(value);
  // @@protoc_insertion_point(field_set:plaid.CreateAuditCopyRequest.auditor_id)
}
inline std::string* CreateAuditCopyRequest::mutable_auditor_id() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateAuditCopyRequest.auditor_id)
  return _internal_mutable_auditor_id();
}
inline const std::string& CreateAuditCopyRequest::_internal_auditor_id() const {
  return auditor_id_.GetNoArena();
}
inline void CreateAuditCopyRequest::_internal_set_auditor_id(const std::string& value) {
  
  auditor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateAuditCopyRequest::set_auditor_id(std::string&& value) {
  
  auditor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateAuditCopyRequest.auditor_id)
}
inline void CreateAuditCopyRequest::set_auditor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auditor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateAuditCopyRequest.auditor_id)
}
inline void CreateAuditCopyRequest::set_auditor_id(const char* value, size_t size) {
  
  auditor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateAuditCopyRequest.auditor_id)
}
inline std::string* CreateAuditCopyRequest::_internal_mutable_auditor_id() {
  
  return auditor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateAuditCopyRequest::release_auditor_id() {
  // @@protoc_insertion_point(field_release:plaid.CreateAuditCopyRequest.auditor_id)
  
  return auditor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAuditCopyRequest::set_allocated_auditor_id(std::string* auditor_id) {
  if (auditor_id != nullptr) {
    
  } else {
    
  }
  auditor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auditor_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateAuditCopyRequest.auditor_id)
}

// -------------------------------------------------------------------

// CreateAuditCopyTokenResponse

// string request_id = 1;
inline void CreateAuditCopyTokenResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateAuditCopyTokenResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.CreateAuditCopyTokenResponse.request_id)
  return _internal_request_id();
}
inline void CreateAuditCopyTokenResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.CreateAuditCopyTokenResponse.request_id)
}
inline std::string* CreateAuditCopyTokenResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateAuditCopyTokenResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& CreateAuditCopyTokenResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void CreateAuditCopyTokenResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateAuditCopyTokenResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateAuditCopyTokenResponse.request_id)
}
inline void CreateAuditCopyTokenResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateAuditCopyTokenResponse.request_id)
}
inline void CreateAuditCopyTokenResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateAuditCopyTokenResponse.request_id)
}
inline std::string* CreateAuditCopyTokenResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateAuditCopyTokenResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.CreateAuditCopyTokenResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAuditCopyTokenResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateAuditCopyTokenResponse.request_id)
}

// string audit_copy_token = 2;
inline void CreateAuditCopyTokenResponse::clear_audit_copy_token() {
  audit_copy_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateAuditCopyTokenResponse::audit_copy_token() const {
  // @@protoc_insertion_point(field_get:plaid.CreateAuditCopyTokenResponse.audit_copy_token)
  return _internal_audit_copy_token();
}
inline void CreateAuditCopyTokenResponse::set_audit_copy_token(const std::string& value) {
  _internal_set_audit_copy_token(value);
  // @@protoc_insertion_point(field_set:plaid.CreateAuditCopyTokenResponse.audit_copy_token)
}
inline std::string* CreateAuditCopyTokenResponse::mutable_audit_copy_token() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateAuditCopyTokenResponse.audit_copy_token)
  return _internal_mutable_audit_copy_token();
}
inline const std::string& CreateAuditCopyTokenResponse::_internal_audit_copy_token() const {
  return audit_copy_token_.GetNoArena();
}
inline void CreateAuditCopyTokenResponse::_internal_set_audit_copy_token(const std::string& value) {
  
  audit_copy_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateAuditCopyTokenResponse::set_audit_copy_token(std::string&& value) {
  
  audit_copy_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateAuditCopyTokenResponse.audit_copy_token)
}
inline void CreateAuditCopyTokenResponse::set_audit_copy_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audit_copy_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateAuditCopyTokenResponse.audit_copy_token)
}
inline void CreateAuditCopyTokenResponse::set_audit_copy_token(const char* value, size_t size) {
  
  audit_copy_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateAuditCopyTokenResponse.audit_copy_token)
}
inline std::string* CreateAuditCopyTokenResponse::_internal_mutable_audit_copy_token() {
  
  return audit_copy_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateAuditCopyTokenResponse::release_audit_copy_token() {
  // @@protoc_insertion_point(field_release:plaid.CreateAuditCopyTokenResponse.audit_copy_token)
  
  return audit_copy_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAuditCopyTokenResponse::set_allocated_audit_copy_token(std::string* audit_copy_token) {
  if (audit_copy_token != nullptr) {
    
  } else {
    
  }
  audit_copy_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audit_copy_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateAuditCopyTokenResponse.audit_copy_token)
}

// -------------------------------------------------------------------

// GetAuthRequestOptions

// repeated string account_ids = 1;
inline int GetAuthRequestOptions::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int GetAuthRequestOptions::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void GetAuthRequestOptions::clear_account_ids() {
  account_ids_.Clear();
}
inline std::string* GetAuthRequestOptions::add_account_ids() {
  // @@protoc_insertion_point(field_add_mutable:plaid.GetAuthRequestOptions.account_ids)
  return _internal_add_account_ids();
}
inline const std::string& GetAuthRequestOptions::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline const std::string& GetAuthRequestOptions::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetAuthRequestOptions.account_ids)
  return _internal_account_ids(index);
}
inline std::string* GetAuthRequestOptions::mutable_account_ids(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetAuthRequestOptions.account_ids)
  return account_ids_.Mutable(index);
}
inline void GetAuthRequestOptions::set_account_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.GetAuthRequestOptions.account_ids)
  account_ids_.Mutable(index)->assign(value);
}
inline void GetAuthRequestOptions::set_account_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.GetAuthRequestOptions.account_ids)
  account_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetAuthRequestOptions::set_account_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.GetAuthRequestOptions.account_ids)
}
inline void GetAuthRequestOptions::set_account_ids(int index, const char* value, size_t size) {
  account_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.GetAuthRequestOptions.account_ids)
}
inline std::string* GetAuthRequestOptions::_internal_add_account_ids() {
  return account_ids_.Add();
}
inline void GetAuthRequestOptions::add_account_ids(const std::string& value) {
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.GetAuthRequestOptions.account_ids)
}
inline void GetAuthRequestOptions::add_account_ids(std::string&& value) {
  account_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.GetAuthRequestOptions.account_ids)
}
inline void GetAuthRequestOptions::add_account_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.GetAuthRequestOptions.account_ids)
}
inline void GetAuthRequestOptions::add_account_ids(const char* value, size_t size) {
  account_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.GetAuthRequestOptions.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAuthRequestOptions::account_ids() const {
  // @@protoc_insertion_point(field_list:plaid.GetAuthRequestOptions.account_ids)
  return account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAuthRequestOptions::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetAuthRequestOptions.account_ids)
  return &account_ids_;
}

// -------------------------------------------------------------------

// GetAuthRequest

// string client_id = 1;
inline void GetAuthRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAuthRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetAuthRequest.client_id)
  return _internal_client_id();
}
inline void GetAuthRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetAuthRequest.client_id)
}
inline std::string* GetAuthRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetAuthRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& GetAuthRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void GetAuthRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAuthRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetAuthRequest.client_id)
}
inline void GetAuthRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetAuthRequest.client_id)
}
inline void GetAuthRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetAuthRequest.client_id)
}
inline std::string* GetAuthRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAuthRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.GetAuthRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAuthRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetAuthRequest.client_id)
}

// string secret = 2;
inline void GetAuthRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAuthRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.GetAuthRequest.secret)
  return _internal_secret();
}
inline void GetAuthRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.GetAuthRequest.secret)
}
inline std::string* GetAuthRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.GetAuthRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& GetAuthRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void GetAuthRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAuthRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetAuthRequest.secret)
}
inline void GetAuthRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetAuthRequest.secret)
}
inline void GetAuthRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetAuthRequest.secret)
}
inline std::string* GetAuthRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAuthRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.GetAuthRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAuthRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetAuthRequest.secret)
}

// string access_token = 3;
inline void GetAuthRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAuthRequest::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.GetAuthRequest.access_token)
  return _internal_access_token();
}
inline void GetAuthRequest::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.GetAuthRequest.access_token)
}
inline std::string* GetAuthRequest::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.GetAuthRequest.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& GetAuthRequest::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void GetAuthRequest::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAuthRequest::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetAuthRequest.access_token)
}
inline void GetAuthRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetAuthRequest.access_token)
}
inline void GetAuthRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetAuthRequest.access_token)
}
inline std::string* GetAuthRequest::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAuthRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.GetAuthRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAuthRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetAuthRequest.access_token)
}

// .plaid.GetAuthRequestOptions options = 4;
inline bool GetAuthRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool GetAuthRequest::has_options() const {
  return _internal_has_options();
}
inline void GetAuthRequest::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::plaid::GetAuthRequestOptions& GetAuthRequest::_internal_options() const {
  const ::plaid::GetAuthRequestOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::GetAuthRequestOptions*>(
      &::plaid::_GetAuthRequestOptions_default_instance_);
}
inline const ::plaid::GetAuthRequestOptions& GetAuthRequest::options() const {
  // @@protoc_insertion_point(field_get:plaid.GetAuthRequest.options)
  return _internal_options();
}
inline ::plaid::GetAuthRequestOptions* GetAuthRequest::release_options() {
  // @@protoc_insertion_point(field_release:plaid.GetAuthRequest.options)
  
  ::plaid::GetAuthRequestOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::plaid::GetAuthRequestOptions* GetAuthRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::GetAuthRequestOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::plaid::GetAuthRequestOptions* GetAuthRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:plaid.GetAuthRequest.options)
  return _internal_mutable_options();
}
inline void GetAuthRequest::set_allocated_options(::plaid::GetAuthRequestOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetAuthRequest.options)
}

// -------------------------------------------------------------------

// AccountNumberCollection

// repeated .plaid.ACHNumber ach = 1;
inline int AccountNumberCollection::_internal_ach_size() const {
  return ach_.size();
}
inline int AccountNumberCollection::ach_size() const {
  return _internal_ach_size();
}
inline void AccountNumberCollection::clear_ach() {
  ach_.Clear();
}
inline ::plaid::ACHNumber* AccountNumberCollection::mutable_ach(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.AccountNumberCollection.ach)
  return ach_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::ACHNumber >*
AccountNumberCollection::mutable_ach() {
  // @@protoc_insertion_point(field_mutable_list:plaid.AccountNumberCollection.ach)
  return &ach_;
}
inline const ::plaid::ACHNumber& AccountNumberCollection::_internal_ach(int index) const {
  return ach_.Get(index);
}
inline const ::plaid::ACHNumber& AccountNumberCollection::ach(int index) const {
  // @@protoc_insertion_point(field_get:plaid.AccountNumberCollection.ach)
  return _internal_ach(index);
}
inline ::plaid::ACHNumber* AccountNumberCollection::_internal_add_ach() {
  return ach_.Add();
}
inline ::plaid::ACHNumber* AccountNumberCollection::add_ach() {
  // @@protoc_insertion_point(field_add:plaid.AccountNumberCollection.ach)
  return _internal_add_ach();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::ACHNumber >&
AccountNumberCollection::ach() const {
  // @@protoc_insertion_point(field_list:plaid.AccountNumberCollection.ach)
  return ach_;
}

// repeated .plaid.EFTNumber eft = 2;
inline int AccountNumberCollection::_internal_eft_size() const {
  return eft_.size();
}
inline int AccountNumberCollection::eft_size() const {
  return _internal_eft_size();
}
inline void AccountNumberCollection::clear_eft() {
  eft_.Clear();
}
inline ::plaid::EFTNumber* AccountNumberCollection::mutable_eft(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.AccountNumberCollection.eft)
  return eft_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::EFTNumber >*
AccountNumberCollection::mutable_eft() {
  // @@protoc_insertion_point(field_mutable_list:plaid.AccountNumberCollection.eft)
  return &eft_;
}
inline const ::plaid::EFTNumber& AccountNumberCollection::_internal_eft(int index) const {
  return eft_.Get(index);
}
inline const ::plaid::EFTNumber& AccountNumberCollection::eft(int index) const {
  // @@protoc_insertion_point(field_get:plaid.AccountNumberCollection.eft)
  return _internal_eft(index);
}
inline ::plaid::EFTNumber* AccountNumberCollection::_internal_add_eft() {
  return eft_.Add();
}
inline ::plaid::EFTNumber* AccountNumberCollection::add_eft() {
  // @@protoc_insertion_point(field_add:plaid.AccountNumberCollection.eft)
  return _internal_add_eft();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::EFTNumber >&
AccountNumberCollection::eft() const {
  // @@protoc_insertion_point(field_list:plaid.AccountNumberCollection.eft)
  return eft_;
}

// repeated .plaid.IBANNumber international = 3;
inline int AccountNumberCollection::_internal_international_size() const {
  return international_.size();
}
inline int AccountNumberCollection::international_size() const {
  return _internal_international_size();
}
inline void AccountNumberCollection::clear_international() {
  international_.Clear();
}
inline ::plaid::IBANNumber* AccountNumberCollection::mutable_international(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.AccountNumberCollection.international)
  return international_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::IBANNumber >*
AccountNumberCollection::mutable_international() {
  // @@protoc_insertion_point(field_mutable_list:plaid.AccountNumberCollection.international)
  return &international_;
}
inline const ::plaid::IBANNumber& AccountNumberCollection::_internal_international(int index) const {
  return international_.Get(index);
}
inline const ::plaid::IBANNumber& AccountNumberCollection::international(int index) const {
  // @@protoc_insertion_point(field_get:plaid.AccountNumberCollection.international)
  return _internal_international(index);
}
inline ::plaid::IBANNumber* AccountNumberCollection::_internal_add_international() {
  return international_.Add();
}
inline ::plaid::IBANNumber* AccountNumberCollection::add_international() {
  // @@protoc_insertion_point(field_add:plaid.AccountNumberCollection.international)
  return _internal_add_international();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::IBANNumber >&
AccountNumberCollection::international() const {
  // @@protoc_insertion_point(field_list:plaid.AccountNumberCollection.international)
  return international_;
}

// repeated .plaid.BACSNumber bacs = 4;
inline int AccountNumberCollection::_internal_bacs_size() const {
  return bacs_.size();
}
inline int AccountNumberCollection::bacs_size() const {
  return _internal_bacs_size();
}
inline void AccountNumberCollection::clear_bacs() {
  bacs_.Clear();
}
inline ::plaid::BACSNumber* AccountNumberCollection::mutable_bacs(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.AccountNumberCollection.bacs)
  return bacs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::BACSNumber >*
AccountNumberCollection::mutable_bacs() {
  // @@protoc_insertion_point(field_mutable_list:plaid.AccountNumberCollection.bacs)
  return &bacs_;
}
inline const ::plaid::BACSNumber& AccountNumberCollection::_internal_bacs(int index) const {
  return bacs_.Get(index);
}
inline const ::plaid::BACSNumber& AccountNumberCollection::bacs(int index) const {
  // @@protoc_insertion_point(field_get:plaid.AccountNumberCollection.bacs)
  return _internal_bacs(index);
}
inline ::plaid::BACSNumber* AccountNumberCollection::_internal_add_bacs() {
  return bacs_.Add();
}
inline ::plaid::BACSNumber* AccountNumberCollection::add_bacs() {
  // @@protoc_insertion_point(field_add:plaid.AccountNumberCollection.bacs)
  return _internal_add_bacs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::BACSNumber >&
AccountNumberCollection::bacs() const {
  // @@protoc_insertion_point(field_list:plaid.AccountNumberCollection.bacs)
  return bacs_;
}

// -------------------------------------------------------------------

// GetAuthResponse

// string request_id = 1;
inline void GetAuthResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAuthResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetAuthResponse.request_id)
  return _internal_request_id();
}
inline void GetAuthResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetAuthResponse.request_id)
}
inline std::string* GetAuthResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetAuthResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetAuthResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void GetAuthResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAuthResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetAuthResponse.request_id)
}
inline void GetAuthResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetAuthResponse.request_id)
}
inline void GetAuthResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetAuthResponse.request_id)
}
inline std::string* GetAuthResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAuthResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.GetAuthResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAuthResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetAuthResponse.request_id)
}

// repeated .plaid.Account accounts = 2;
inline int GetAuthResponse::_internal_accounts_size() const {
  return accounts_.size();
}
inline int GetAuthResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline void GetAuthResponse::clear_accounts() {
  accounts_.Clear();
}
inline ::plaid::Account* GetAuthResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetAuthResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >*
GetAuthResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetAuthResponse.accounts)
  return &accounts_;
}
inline const ::plaid::Account& GetAuthResponse::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::plaid::Account& GetAuthResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetAuthResponse.accounts)
  return _internal_accounts(index);
}
inline ::plaid::Account* GetAuthResponse::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::plaid::Account* GetAuthResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:plaid.GetAuthResponse.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >&
GetAuthResponse::accounts() const {
  // @@protoc_insertion_point(field_list:plaid.GetAuthResponse.accounts)
  return accounts_;
}

// .plaid.AccountNumberCollection numbers = 3;
inline bool GetAuthResponse::_internal_has_numbers() const {
  return this != internal_default_instance() && numbers_ != nullptr;
}
inline bool GetAuthResponse::has_numbers() const {
  return _internal_has_numbers();
}
inline void GetAuthResponse::clear_numbers() {
  if (GetArenaNoVirtual() == nullptr && numbers_ != nullptr) {
    delete numbers_;
  }
  numbers_ = nullptr;
}
inline const ::plaid::AccountNumberCollection& GetAuthResponse::_internal_numbers() const {
  const ::plaid::AccountNumberCollection* p = numbers_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::AccountNumberCollection*>(
      &::plaid::_AccountNumberCollection_default_instance_);
}
inline const ::plaid::AccountNumberCollection& GetAuthResponse::numbers() const {
  // @@protoc_insertion_point(field_get:plaid.GetAuthResponse.numbers)
  return _internal_numbers();
}
inline ::plaid::AccountNumberCollection* GetAuthResponse::release_numbers() {
  // @@protoc_insertion_point(field_release:plaid.GetAuthResponse.numbers)
  
  ::plaid::AccountNumberCollection* temp = numbers_;
  numbers_ = nullptr;
  return temp;
}
inline ::plaid::AccountNumberCollection* GetAuthResponse::_internal_mutable_numbers() {
  
  if (numbers_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::AccountNumberCollection>(GetArenaNoVirtual());
    numbers_ = p;
  }
  return numbers_;
}
inline ::plaid::AccountNumberCollection* GetAuthResponse::mutable_numbers() {
  // @@protoc_insertion_point(field_mutable:plaid.GetAuthResponse.numbers)
  return _internal_mutable_numbers();
}
inline void GetAuthResponse::set_allocated_numbers(::plaid::AccountNumberCollection* numbers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete numbers_;
  }
  if (numbers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      numbers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, numbers, submessage_arena);
    }
    
  } else {
    
  }
  numbers_ = numbers;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetAuthResponse.numbers)
}

// -------------------------------------------------------------------

// GetAuthOptions

// repeated string account_ids = 1;
inline int GetAuthOptions::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int GetAuthOptions::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void GetAuthOptions::clear_account_ids() {
  account_ids_.Clear();
}
inline std::string* GetAuthOptions::add_account_ids() {
  // @@protoc_insertion_point(field_add_mutable:plaid.GetAuthOptions.account_ids)
  return _internal_add_account_ids();
}
inline const std::string& GetAuthOptions::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline const std::string& GetAuthOptions::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetAuthOptions.account_ids)
  return _internal_account_ids(index);
}
inline std::string* GetAuthOptions::mutable_account_ids(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetAuthOptions.account_ids)
  return account_ids_.Mutable(index);
}
inline void GetAuthOptions::set_account_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.GetAuthOptions.account_ids)
  account_ids_.Mutable(index)->assign(value);
}
inline void GetAuthOptions::set_account_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.GetAuthOptions.account_ids)
  account_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetAuthOptions::set_account_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.GetAuthOptions.account_ids)
}
inline void GetAuthOptions::set_account_ids(int index, const char* value, size_t size) {
  account_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.GetAuthOptions.account_ids)
}
inline std::string* GetAuthOptions::_internal_add_account_ids() {
  return account_ids_.Add();
}
inline void GetAuthOptions::add_account_ids(const std::string& value) {
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.GetAuthOptions.account_ids)
}
inline void GetAuthOptions::add_account_ids(std::string&& value) {
  account_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.GetAuthOptions.account_ids)
}
inline void GetAuthOptions::add_account_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.GetAuthOptions.account_ids)
}
inline void GetAuthOptions::add_account_ids(const char* value, size_t size) {
  account_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.GetAuthOptions.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAuthOptions::account_ids() const {
  // @@protoc_insertion_point(field_list:plaid.GetAuthOptions.account_ids)
  return account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAuthOptions::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetAuthOptions.account_ids)
  return &account_ids_;
}

// -------------------------------------------------------------------

// Category

// string category_id = 1;
inline void Category::clear_category_id() {
  category_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Category::category_id() const {
  // @@protoc_insertion_point(field_get:plaid.Category.category_id)
  return _internal_category_id();
}
inline void Category::set_category_id(const std::string& value) {
  _internal_set_category_id(value);
  // @@protoc_insertion_point(field_set:plaid.Category.category_id)
}
inline std::string* Category::mutable_category_id() {
  // @@protoc_insertion_point(field_mutable:plaid.Category.category_id)
  return _internal_mutable_category_id();
}
inline const std::string& Category::_internal_category_id() const {
  return category_id_.GetNoArena();
}
inline void Category::_internal_set_category_id(const std::string& value) {
  
  category_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Category::set_category_id(std::string&& value) {
  
  category_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Category.category_id)
}
inline void Category::set_category_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Category.category_id)
}
inline void Category::set_category_id(const char* value, size_t size) {
  
  category_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Category.category_id)
}
inline std::string* Category::_internal_mutable_category_id() {
  
  return category_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Category::release_category_id() {
  // @@protoc_insertion_point(field_release:plaid.Category.category_id)
  
  return category_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Category::set_allocated_category_id(std::string* category_id) {
  if (category_id != nullptr) {
    
  } else {
    
  }
  category_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.Category.category_id)
}

// string group = 2;
inline void Category::clear_group() {
  group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Category::group() const {
  // @@protoc_insertion_point(field_get:plaid.Category.group)
  return _internal_group();
}
inline void Category::set_group(const std::string& value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:plaid.Category.group)
}
inline std::string* Category::mutable_group() {
  // @@protoc_insertion_point(field_mutable:plaid.Category.group)
  return _internal_mutable_group();
}
inline const std::string& Category::_internal_group() const {
  return group_.GetNoArena();
}
inline void Category::_internal_set_group(const std::string& value) {
  
  group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Category::set_group(std::string&& value) {
  
  group_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Category.group)
}
inline void Category::set_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Category.group)
}
inline void Category::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Category.group)
}
inline std::string* Category::_internal_mutable_group() {
  
  return group_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Category::release_group() {
  // @@protoc_insertion_point(field_release:plaid.Category.group)
  
  return group_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Category::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:plaid.Category.group)
}

// repeated string hierarchy = 3;
inline int Category::_internal_hierarchy_size() const {
  return hierarchy_.size();
}
inline int Category::hierarchy_size() const {
  return _internal_hierarchy_size();
}
inline void Category::clear_hierarchy() {
  hierarchy_.Clear();
}
inline std::string* Category::add_hierarchy() {
  // @@protoc_insertion_point(field_add_mutable:plaid.Category.hierarchy)
  return _internal_add_hierarchy();
}
inline const std::string& Category::_internal_hierarchy(int index) const {
  return hierarchy_.Get(index);
}
inline const std::string& Category::hierarchy(int index) const {
  // @@protoc_insertion_point(field_get:plaid.Category.hierarchy)
  return _internal_hierarchy(index);
}
inline std::string* Category::mutable_hierarchy(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.Category.hierarchy)
  return hierarchy_.Mutable(index);
}
inline void Category::set_hierarchy(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.Category.hierarchy)
  hierarchy_.Mutable(index)->assign(value);
}
inline void Category::set_hierarchy(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.Category.hierarchy)
  hierarchy_.Mutable(index)->assign(std::move(value));
}
inline void Category::set_hierarchy(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hierarchy_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.Category.hierarchy)
}
inline void Category::set_hierarchy(int index, const char* value, size_t size) {
  hierarchy_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.Category.hierarchy)
}
inline std::string* Category::_internal_add_hierarchy() {
  return hierarchy_.Add();
}
inline void Category::add_hierarchy(const std::string& value) {
  hierarchy_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.Category.hierarchy)
}
inline void Category::add_hierarchy(std::string&& value) {
  hierarchy_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.Category.hierarchy)
}
inline void Category::add_hierarchy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hierarchy_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.Category.hierarchy)
}
inline void Category::add_hierarchy(const char* value, size_t size) {
  hierarchy_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.Category.hierarchy)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Category::hierarchy() const {
  // @@protoc_insertion_point(field_list:plaid.Category.hierarchy)
  return hierarchy_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Category::mutable_hierarchy() {
  // @@protoc_insertion_point(field_mutable_list:plaid.Category.hierarchy)
  return &hierarchy_;
}

// -------------------------------------------------------------------

// GetCategoriesResponse

// string request_id = 1;
inline void GetCategoriesResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetCategoriesResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetCategoriesResponse.request_id)
  return _internal_request_id();
}
inline void GetCategoriesResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetCategoriesResponse.request_id)
}
inline std::string* GetCategoriesResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetCategoriesResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetCategoriesResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void GetCategoriesResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetCategoriesResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetCategoriesResponse.request_id)
}
inline void GetCategoriesResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetCategoriesResponse.request_id)
}
inline void GetCategoriesResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetCategoriesResponse.request_id)
}
inline std::string* GetCategoriesResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetCategoriesResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.GetCategoriesResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetCategoriesResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetCategoriesResponse.request_id)
}

// repeated .plaid.Category categories = 2;
inline int GetCategoriesResponse::_internal_categories_size() const {
  return categories_.size();
}
inline int GetCategoriesResponse::categories_size() const {
  return _internal_categories_size();
}
inline void GetCategoriesResponse::clear_categories() {
  categories_.Clear();
}
inline ::plaid::Category* GetCategoriesResponse::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetCategoriesResponse.categories)
  return categories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Category >*
GetCategoriesResponse::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetCategoriesResponse.categories)
  return &categories_;
}
inline const ::plaid::Category& GetCategoriesResponse::_internal_categories(int index) const {
  return categories_.Get(index);
}
inline const ::plaid::Category& GetCategoriesResponse::categories(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetCategoriesResponse.categories)
  return _internal_categories(index);
}
inline ::plaid::Category* GetCategoriesResponse::_internal_add_categories() {
  return categories_.Add();
}
inline ::plaid::Category* GetCategoriesResponse::add_categories() {
  // @@protoc_insertion_point(field_add:plaid.GetCategoriesResponse.categories)
  return _internal_add_categories();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Category >&
GetCategoriesResponse::categories() const {
  // @@protoc_insertion_point(field_list:plaid.GetCategoriesResponse.categories)
  return categories_;
}

// -------------------------------------------------------------------

// Error

// string request_id = 1;
inline void Error::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Error::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.Error.request_id)
  return _internal_request_id();
}
inline void Error::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.Error.request_id)
}
inline std::string* Error::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.Error.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& Error::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void Error::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Error::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Error.request_id)
}
inline void Error::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Error.request_id)
}
inline void Error::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Error.request_id)
}
inline std::string* Error::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Error::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.Error.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.Error.request_id)
}

// string error_type = 2;
inline void Error::clear_error_type() {
  error_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Error::error_type() const {
  // @@protoc_insertion_point(field_get:plaid.Error.error_type)
  return _internal_error_type();
}
inline void Error::set_error_type(const std::string& value) {
  _internal_set_error_type(value);
  // @@protoc_insertion_point(field_set:plaid.Error.error_type)
}
inline std::string* Error::mutable_error_type() {
  // @@protoc_insertion_point(field_mutable:plaid.Error.error_type)
  return _internal_mutable_error_type();
}
inline const std::string& Error::_internal_error_type() const {
  return error_type_.GetNoArena();
}
inline void Error::_internal_set_error_type(const std::string& value) {
  
  error_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Error::set_error_type(std::string&& value) {
  
  error_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Error.error_type)
}
inline void Error::set_error_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Error.error_type)
}
inline void Error::set_error_type(const char* value, size_t size) {
  
  error_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Error.error_type)
}
inline std::string* Error::_internal_mutable_error_type() {
  
  return error_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Error::release_error_type() {
  // @@protoc_insertion_point(field_release:plaid.Error.error_type)
  
  return error_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_error_type(std::string* error_type) {
  if (error_type != nullptr) {
    
  } else {
    
  }
  error_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_type);
  // @@protoc_insertion_point(field_set_allocated:plaid.Error.error_type)
}

// string error_code = 3;
inline void Error::clear_error_code() {
  error_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Error::error_code() const {
  // @@protoc_insertion_point(field_get:plaid.Error.error_code)
  return _internal_error_code();
}
inline void Error::set_error_code(const std::string& value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:plaid.Error.error_code)
}
inline std::string* Error::mutable_error_code() {
  // @@protoc_insertion_point(field_mutable:plaid.Error.error_code)
  return _internal_mutable_error_code();
}
inline const std::string& Error::_internal_error_code() const {
  return error_code_.GetNoArena();
}
inline void Error::_internal_set_error_code(const std::string& value) {
  
  error_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Error::set_error_code(std::string&& value) {
  
  error_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Error.error_code)
}
inline void Error::set_error_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Error.error_code)
}
inline void Error::set_error_code(const char* value, size_t size) {
  
  error_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Error.error_code)
}
inline std::string* Error::_internal_mutable_error_code() {
  
  return error_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Error::release_error_code() {
  // @@protoc_insertion_point(field_release:plaid.Error.error_code)
  
  return error_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_error_code(std::string* error_code) {
  if (error_code != nullptr) {
    
  } else {
    
  }
  error_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_code);
  // @@protoc_insertion_point(field_set_allocated:plaid.Error.error_code)
}

// string error_message = 4;
inline void Error::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Error::error_message() const {
  // @@protoc_insertion_point(field_get:plaid.Error.error_message)
  return _internal_error_message();
}
inline void Error::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:plaid.Error.error_message)
}
inline std::string* Error::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:plaid.Error.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& Error::_internal_error_message() const {
  return error_message_.GetNoArena();
}
inline void Error::_internal_set_error_message(const std::string& value) {
  
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Error::set_error_message(std::string&& value) {
  
  error_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Error.error_message)
}
inline void Error::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Error.error_message)
}
inline void Error::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Error.error_message)
}
inline std::string* Error::_internal_mutable_error_message() {
  
  return error_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Error::release_error_message() {
  // @@protoc_insertion_point(field_release:plaid.Error.error_message)
  
  return error_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:plaid.Error.error_message)
}

// string display_message = 5;
inline void Error::clear_display_message() {
  display_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Error::display_message() const {
  // @@protoc_insertion_point(field_get:plaid.Error.display_message)
  return _internal_display_message();
}
inline void Error::set_display_message(const std::string& value) {
  _internal_set_display_message(value);
  // @@protoc_insertion_point(field_set:plaid.Error.display_message)
}
inline std::string* Error::mutable_display_message() {
  // @@protoc_insertion_point(field_mutable:plaid.Error.display_message)
  return _internal_mutable_display_message();
}
inline const std::string& Error::_internal_display_message() const {
  return display_message_.GetNoArena();
}
inline void Error::_internal_set_display_message(const std::string& value) {
  
  display_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Error::set_display_message(std::string&& value) {
  
  display_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Error.display_message)
}
inline void Error::set_display_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Error.display_message)
}
inline void Error::set_display_message(const char* value, size_t size) {
  
  display_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Error.display_message)
}
inline std::string* Error::_internal_mutable_display_message() {
  
  return display_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Error::release_display_message() {
  // @@protoc_insertion_point(field_release:plaid.Error.display_message)
  
  return display_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_display_message(std::string* display_message) {
  if (display_message != nullptr) {
    
  } else {
    
  }
  display_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_message);
  // @@protoc_insertion_point(field_set_allocated:plaid.Error.display_message)
}

// int64 status_code = 6;
inline void Error::clear_status_code() {
  status_code_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Error::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Error::status_code() const {
  // @@protoc_insertion_point(field_get:plaid.Error.status_code)
  return _internal_status_code();
}
inline void Error::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  status_code_ = value;
}
inline void Error::set_status_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:plaid.Error.status_code)
}

// -------------------------------------------------------------------

// Security

// string security_id = 1;
inline void Security::clear_security_id() {
  security_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Security::security_id() const {
  // @@protoc_insertion_point(field_get:plaid.Security.security_id)
  return _internal_security_id();
}
inline void Security::set_security_id(const std::string& value) {
  _internal_set_security_id(value);
  // @@protoc_insertion_point(field_set:plaid.Security.security_id)
}
inline std::string* Security::mutable_security_id() {
  // @@protoc_insertion_point(field_mutable:plaid.Security.security_id)
  return _internal_mutable_security_id();
}
inline const std::string& Security::_internal_security_id() const {
  return security_id_.GetNoArena();
}
inline void Security::_internal_set_security_id(const std::string& value) {
  
  security_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Security::set_security_id(std::string&& value) {
  
  security_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Security.security_id)
}
inline void Security::set_security_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  security_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Security.security_id)
}
inline void Security::set_security_id(const char* value, size_t size) {
  
  security_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Security.security_id)
}
inline std::string* Security::_internal_mutable_security_id() {
  
  return security_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Security::release_security_id() {
  // @@protoc_insertion_point(field_release:plaid.Security.security_id)
  
  return security_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Security::set_allocated_security_id(std::string* security_id) {
  if (security_id != nullptr) {
    
  } else {
    
  }
  security_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), security_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.Security.security_id)
}

// string cusip = 2;
inline void Security::clear_cusip() {
  cusip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Security::cusip() const {
  // @@protoc_insertion_point(field_get:plaid.Security.cusip)
  return _internal_cusip();
}
inline void Security::set_cusip(const std::string& value) {
  _internal_set_cusip(value);
  // @@protoc_insertion_point(field_set:plaid.Security.cusip)
}
inline std::string* Security::mutable_cusip() {
  // @@protoc_insertion_point(field_mutable:plaid.Security.cusip)
  return _internal_mutable_cusip();
}
inline const std::string& Security::_internal_cusip() const {
  return cusip_.GetNoArena();
}
inline void Security::_internal_set_cusip(const std::string& value) {
  
  cusip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Security::set_cusip(std::string&& value) {
  
  cusip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Security.cusip)
}
inline void Security::set_cusip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cusip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Security.cusip)
}
inline void Security::set_cusip(const char* value, size_t size) {
  
  cusip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Security.cusip)
}
inline std::string* Security::_internal_mutable_cusip() {
  
  return cusip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Security::release_cusip() {
  // @@protoc_insertion_point(field_release:plaid.Security.cusip)
  
  return cusip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Security::set_allocated_cusip(std::string* cusip) {
  if (cusip != nullptr) {
    
  } else {
    
  }
  cusip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cusip);
  // @@protoc_insertion_point(field_set_allocated:plaid.Security.cusip)
}

// string sedol = 3;
inline void Security::clear_sedol() {
  sedol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Security::sedol() const {
  // @@protoc_insertion_point(field_get:plaid.Security.sedol)
  return _internal_sedol();
}
inline void Security::set_sedol(const std::string& value) {
  _internal_set_sedol(value);
  // @@protoc_insertion_point(field_set:plaid.Security.sedol)
}
inline std::string* Security::mutable_sedol() {
  // @@protoc_insertion_point(field_mutable:plaid.Security.sedol)
  return _internal_mutable_sedol();
}
inline const std::string& Security::_internal_sedol() const {
  return sedol_.GetNoArena();
}
inline void Security::_internal_set_sedol(const std::string& value) {
  
  sedol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Security::set_sedol(std::string&& value) {
  
  sedol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Security.sedol)
}
inline void Security::set_sedol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sedol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Security.sedol)
}
inline void Security::set_sedol(const char* value, size_t size) {
  
  sedol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Security.sedol)
}
inline std::string* Security::_internal_mutable_sedol() {
  
  return sedol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Security::release_sedol() {
  // @@protoc_insertion_point(field_release:plaid.Security.sedol)
  
  return sedol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Security::set_allocated_sedol(std::string* sedol) {
  if (sedol != nullptr) {
    
  } else {
    
  }
  sedol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sedol);
  // @@protoc_insertion_point(field_set_allocated:plaid.Security.sedol)
}

// string isin = 4;
inline void Security::clear_isin() {
  isin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Security::isin() const {
  // @@protoc_insertion_point(field_get:plaid.Security.isin)
  return _internal_isin();
}
inline void Security::set_isin(const std::string& value) {
  _internal_set_isin(value);
  // @@protoc_insertion_point(field_set:plaid.Security.isin)
}
inline std::string* Security::mutable_isin() {
  // @@protoc_insertion_point(field_mutable:plaid.Security.isin)
  return _internal_mutable_isin();
}
inline const std::string& Security::_internal_isin() const {
  return isin_.GetNoArena();
}
inline void Security::_internal_set_isin(const std::string& value) {
  
  isin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Security::set_isin(std::string&& value) {
  
  isin_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Security.isin)
}
inline void Security::set_isin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  isin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Security.isin)
}
inline void Security::set_isin(const char* value, size_t size) {
  
  isin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Security.isin)
}
inline std::string* Security::_internal_mutable_isin() {
  
  return isin_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Security::release_isin() {
  // @@protoc_insertion_point(field_release:plaid.Security.isin)
  
  return isin_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Security::set_allocated_isin(std::string* isin) {
  if (isin != nullptr) {
    
  } else {
    
  }
  isin_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), isin);
  // @@protoc_insertion_point(field_set_allocated:plaid.Security.isin)
}

// string institution_security_id = 5;
inline void Security::clear_institution_security_id() {
  institution_security_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Security::institution_security_id() const {
  // @@protoc_insertion_point(field_get:plaid.Security.institution_security_id)
  return _internal_institution_security_id();
}
inline void Security::set_institution_security_id(const std::string& value) {
  _internal_set_institution_security_id(value);
  // @@protoc_insertion_point(field_set:plaid.Security.institution_security_id)
}
inline std::string* Security::mutable_institution_security_id() {
  // @@protoc_insertion_point(field_mutable:plaid.Security.institution_security_id)
  return _internal_mutable_institution_security_id();
}
inline const std::string& Security::_internal_institution_security_id() const {
  return institution_security_id_.GetNoArena();
}
inline void Security::_internal_set_institution_security_id(const std::string& value) {
  
  institution_security_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Security::set_institution_security_id(std::string&& value) {
  
  institution_security_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Security.institution_security_id)
}
inline void Security::set_institution_security_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  institution_security_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Security.institution_security_id)
}
inline void Security::set_institution_security_id(const char* value, size_t size) {
  
  institution_security_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Security.institution_security_id)
}
inline std::string* Security::_internal_mutable_institution_security_id() {
  
  return institution_security_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Security::release_institution_security_id() {
  // @@protoc_insertion_point(field_release:plaid.Security.institution_security_id)
  
  return institution_security_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Security::set_allocated_institution_security_id(std::string* institution_security_id) {
  if (institution_security_id != nullptr) {
    
  } else {
    
  }
  institution_security_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), institution_security_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.Security.institution_security_id)
}

// string institution_id = 6;
inline void Security::clear_institution_id() {
  institution_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Security::institution_id() const {
  // @@protoc_insertion_point(field_get:plaid.Security.institution_id)
  return _internal_institution_id();
}
inline void Security::set_institution_id(const std::string& value) {
  _internal_set_institution_id(value);
  // @@protoc_insertion_point(field_set:plaid.Security.institution_id)
}
inline std::string* Security::mutable_institution_id() {
  // @@protoc_insertion_point(field_mutable:plaid.Security.institution_id)
  return _internal_mutable_institution_id();
}
inline const std::string& Security::_internal_institution_id() const {
  return institution_id_.GetNoArena();
}
inline void Security::_internal_set_institution_id(const std::string& value) {
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Security::set_institution_id(std::string&& value) {
  
  institution_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Security.institution_id)
}
inline void Security::set_institution_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Security.institution_id)
}
inline void Security::set_institution_id(const char* value, size_t size) {
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Security.institution_id)
}
inline std::string* Security::_internal_mutable_institution_id() {
  
  return institution_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Security::release_institution_id() {
  // @@protoc_insertion_point(field_release:plaid.Security.institution_id)
  
  return institution_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Security::set_allocated_institution_id(std::string* institution_id) {
  if (institution_id != nullptr) {
    
  } else {
    
  }
  institution_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), institution_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.Security.institution_id)
}

// string proxy_security_id = 7;
inline void Security::clear_proxy_security_id() {
  proxy_security_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Security::proxy_security_id() const {
  // @@protoc_insertion_point(field_get:plaid.Security.proxy_security_id)
  return _internal_proxy_security_id();
}
inline void Security::set_proxy_security_id(const std::string& value) {
  _internal_set_proxy_security_id(value);
  // @@protoc_insertion_point(field_set:plaid.Security.proxy_security_id)
}
inline std::string* Security::mutable_proxy_security_id() {
  // @@protoc_insertion_point(field_mutable:plaid.Security.proxy_security_id)
  return _internal_mutable_proxy_security_id();
}
inline const std::string& Security::_internal_proxy_security_id() const {
  return proxy_security_id_.GetNoArena();
}
inline void Security::_internal_set_proxy_security_id(const std::string& value) {
  
  proxy_security_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Security::set_proxy_security_id(std::string&& value) {
  
  proxy_security_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Security.proxy_security_id)
}
inline void Security::set_proxy_security_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proxy_security_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Security.proxy_security_id)
}
inline void Security::set_proxy_security_id(const char* value, size_t size) {
  
  proxy_security_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Security.proxy_security_id)
}
inline std::string* Security::_internal_mutable_proxy_security_id() {
  
  return proxy_security_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Security::release_proxy_security_id() {
  // @@protoc_insertion_point(field_release:plaid.Security.proxy_security_id)
  
  return proxy_security_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Security::set_allocated_proxy_security_id(std::string* proxy_security_id) {
  if (proxy_security_id != nullptr) {
    
  } else {
    
  }
  proxy_security_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proxy_security_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.Security.proxy_security_id)
}

// string name = 8;
inline void Security::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Security::name() const {
  // @@protoc_insertion_point(field_get:plaid.Security.name)
  return _internal_name();
}
inline void Security::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:plaid.Security.name)
}
inline std::string* Security::mutable_name() {
  // @@protoc_insertion_point(field_mutable:plaid.Security.name)
  return _internal_mutable_name();
}
inline const std::string& Security::_internal_name() const {
  return name_.GetNoArena();
}
inline void Security::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Security::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Security.name)
}
inline void Security::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Security.name)
}
inline void Security::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Security.name)
}
inline std::string* Security::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Security::release_name() {
  // @@protoc_insertion_point(field_release:plaid.Security.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Security::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:plaid.Security.name)
}

// string ticker_symbol = 9;
inline void Security::clear_ticker_symbol() {
  ticker_symbol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Security::ticker_symbol() const {
  // @@protoc_insertion_point(field_get:plaid.Security.ticker_symbol)
  return _internal_ticker_symbol();
}
inline void Security::set_ticker_symbol(const std::string& value) {
  _internal_set_ticker_symbol(value);
  // @@protoc_insertion_point(field_set:plaid.Security.ticker_symbol)
}
inline std::string* Security::mutable_ticker_symbol() {
  // @@protoc_insertion_point(field_mutable:plaid.Security.ticker_symbol)
  return _internal_mutable_ticker_symbol();
}
inline const std::string& Security::_internal_ticker_symbol() const {
  return ticker_symbol_.GetNoArena();
}
inline void Security::_internal_set_ticker_symbol(const std::string& value) {
  
  ticker_symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Security::set_ticker_symbol(std::string&& value) {
  
  ticker_symbol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Security.ticker_symbol)
}
inline void Security::set_ticker_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ticker_symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Security.ticker_symbol)
}
inline void Security::set_ticker_symbol(const char* value, size_t size) {
  
  ticker_symbol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Security.ticker_symbol)
}
inline std::string* Security::_internal_mutable_ticker_symbol() {
  
  return ticker_symbol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Security::release_ticker_symbol() {
  // @@protoc_insertion_point(field_release:plaid.Security.ticker_symbol)
  
  return ticker_symbol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Security::set_allocated_ticker_symbol(std::string* ticker_symbol) {
  if (ticker_symbol != nullptr) {
    
  } else {
    
  }
  ticker_symbol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticker_symbol);
  // @@protoc_insertion_point(field_set_allocated:plaid.Security.ticker_symbol)
}

// bool is_cash_equivalent = 10;
inline void Security::clear_is_cash_equivalent() {
  is_cash_equivalent_ = false;
}
inline bool Security::_internal_is_cash_equivalent() const {
  return is_cash_equivalent_;
}
inline bool Security::is_cash_equivalent() const {
  // @@protoc_insertion_point(field_get:plaid.Security.is_cash_equivalent)
  return _internal_is_cash_equivalent();
}
inline void Security::_internal_set_is_cash_equivalent(bool value) {
  
  is_cash_equivalent_ = value;
}
inline void Security::set_is_cash_equivalent(bool value) {
  _internal_set_is_cash_equivalent(value);
  // @@protoc_insertion_point(field_set:plaid.Security.is_cash_equivalent)
}

// string type = 11;
inline void Security::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Security::type() const {
  // @@protoc_insertion_point(field_get:plaid.Security.type)
  return _internal_type();
}
inline void Security::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:plaid.Security.type)
}
inline std::string* Security::mutable_type() {
  // @@protoc_insertion_point(field_mutable:plaid.Security.type)
  return _internal_mutable_type();
}
inline const std::string& Security::_internal_type() const {
  return type_.GetNoArena();
}
inline void Security::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Security::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Security.type)
}
inline void Security::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Security.type)
}
inline void Security::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Security.type)
}
inline std::string* Security::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Security::release_type() {
  // @@protoc_insertion_point(field_release:plaid.Security.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Security::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:plaid.Security.type)
}

// double close_price = 12;
inline void Security::clear_close_price() {
  close_price_ = 0;
}
inline double Security::_internal_close_price() const {
  return close_price_;
}
inline double Security::close_price() const {
  // @@protoc_insertion_point(field_get:plaid.Security.close_price)
  return _internal_close_price();
}
inline void Security::_internal_set_close_price(double value) {
  
  close_price_ = value;
}
inline void Security::set_close_price(double value) {
  _internal_set_close_price(value);
  // @@protoc_insertion_point(field_set:plaid.Security.close_price)
}

// string close_price_as_of = 13;
inline void Security::clear_close_price_as_of() {
  close_price_as_of_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Security::close_price_as_of() const {
  // @@protoc_insertion_point(field_get:plaid.Security.close_price_as_of)
  return _internal_close_price_as_of();
}
inline void Security::set_close_price_as_of(const std::string& value) {
  _internal_set_close_price_as_of(value);
  // @@protoc_insertion_point(field_set:plaid.Security.close_price_as_of)
}
inline std::string* Security::mutable_close_price_as_of() {
  // @@protoc_insertion_point(field_mutable:plaid.Security.close_price_as_of)
  return _internal_mutable_close_price_as_of();
}
inline const std::string& Security::_internal_close_price_as_of() const {
  return close_price_as_of_.GetNoArena();
}
inline void Security::_internal_set_close_price_as_of(const std::string& value) {
  
  close_price_as_of_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Security::set_close_price_as_of(std::string&& value) {
  
  close_price_as_of_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Security.close_price_as_of)
}
inline void Security::set_close_price_as_of(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  close_price_as_of_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Security.close_price_as_of)
}
inline void Security::set_close_price_as_of(const char* value, size_t size) {
  
  close_price_as_of_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Security.close_price_as_of)
}
inline std::string* Security::_internal_mutable_close_price_as_of() {
  
  return close_price_as_of_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Security::release_close_price_as_of() {
  // @@protoc_insertion_point(field_release:plaid.Security.close_price_as_of)
  
  return close_price_as_of_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Security::set_allocated_close_price_as_of(std::string* close_price_as_of) {
  if (close_price_as_of != nullptr) {
    
  } else {
    
  }
  close_price_as_of_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), close_price_as_of);
  // @@protoc_insertion_point(field_set_allocated:plaid.Security.close_price_as_of)
}

// string iso_currency_code = 14;
inline void Security::clear_iso_currency_code() {
  iso_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Security::iso_currency_code() const {
  // @@protoc_insertion_point(field_get:plaid.Security.iso_currency_code)
  return _internal_iso_currency_code();
}
inline void Security::set_iso_currency_code(const std::string& value) {
  _internal_set_iso_currency_code(value);
  // @@protoc_insertion_point(field_set:plaid.Security.iso_currency_code)
}
inline std::string* Security::mutable_iso_currency_code() {
  // @@protoc_insertion_point(field_mutable:plaid.Security.iso_currency_code)
  return _internal_mutable_iso_currency_code();
}
inline const std::string& Security::_internal_iso_currency_code() const {
  return iso_currency_code_.GetNoArena();
}
inline void Security::_internal_set_iso_currency_code(const std::string& value) {
  
  iso_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Security::set_iso_currency_code(std::string&& value) {
  
  iso_currency_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Security.iso_currency_code)
}
inline void Security::set_iso_currency_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iso_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Security.iso_currency_code)
}
inline void Security::set_iso_currency_code(const char* value, size_t size) {
  
  iso_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Security.iso_currency_code)
}
inline std::string* Security::_internal_mutable_iso_currency_code() {
  
  return iso_currency_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Security::release_iso_currency_code() {
  // @@protoc_insertion_point(field_release:plaid.Security.iso_currency_code)
  
  return iso_currency_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Security::set_allocated_iso_currency_code(std::string* iso_currency_code) {
  if (iso_currency_code != nullptr) {
    
  } else {
    
  }
  iso_currency_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iso_currency_code);
  // @@protoc_insertion_point(field_set_allocated:plaid.Security.iso_currency_code)
}

// string unofficial_currency_code = 15;
inline void Security::clear_unofficial_currency_code() {
  unofficial_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Security::unofficial_currency_code() const {
  // @@protoc_insertion_point(field_get:plaid.Security.unofficial_currency_code)
  return _internal_unofficial_currency_code();
}
inline void Security::set_unofficial_currency_code(const std::string& value) {
  _internal_set_unofficial_currency_code(value);
  // @@protoc_insertion_point(field_set:plaid.Security.unofficial_currency_code)
}
inline std::string* Security::mutable_unofficial_currency_code() {
  // @@protoc_insertion_point(field_mutable:plaid.Security.unofficial_currency_code)
  return _internal_mutable_unofficial_currency_code();
}
inline const std::string& Security::_internal_unofficial_currency_code() const {
  return unofficial_currency_code_.GetNoArena();
}
inline void Security::_internal_set_unofficial_currency_code(const std::string& value) {
  
  unofficial_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Security::set_unofficial_currency_code(std::string&& value) {
  
  unofficial_currency_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Security.unofficial_currency_code)
}
inline void Security::set_unofficial_currency_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unofficial_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Security.unofficial_currency_code)
}
inline void Security::set_unofficial_currency_code(const char* value, size_t size) {
  
  unofficial_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Security.unofficial_currency_code)
}
inline std::string* Security::_internal_mutable_unofficial_currency_code() {
  
  return unofficial_currency_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Security::release_unofficial_currency_code() {
  // @@protoc_insertion_point(field_release:plaid.Security.unofficial_currency_code)
  
  return unofficial_currency_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Security::set_allocated_unofficial_currency_code(std::string* unofficial_currency_code) {
  if (unofficial_currency_code != nullptr) {
    
  } else {
    
  }
  unofficial_currency_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unofficial_currency_code);
  // @@protoc_insertion_point(field_set_allocated:plaid.Security.unofficial_currency_code)
}

// -------------------------------------------------------------------

// Holding

// string account_id = 1;
inline void Holding::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Holding::account_id() const {
  // @@protoc_insertion_point(field_get:plaid.Holding.account_id)
  return _internal_account_id();
}
inline void Holding::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:plaid.Holding.account_id)
}
inline std::string* Holding::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:plaid.Holding.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& Holding::_internal_account_id() const {
  return account_id_.GetNoArena();
}
inline void Holding::_internal_set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Holding::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Holding.account_id)
}
inline void Holding::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Holding.account_id)
}
inline void Holding::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Holding.account_id)
}
inline std::string* Holding::_internal_mutable_account_id() {
  
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Holding::release_account_id() {
  // @@protoc_insertion_point(field_release:plaid.Holding.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Holding::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.Holding.account_id)
}

// string security_id = 2;
inline void Holding::clear_security_id() {
  security_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Holding::security_id() const {
  // @@protoc_insertion_point(field_get:plaid.Holding.security_id)
  return _internal_security_id();
}
inline void Holding::set_security_id(const std::string& value) {
  _internal_set_security_id(value);
  // @@protoc_insertion_point(field_set:plaid.Holding.security_id)
}
inline std::string* Holding::mutable_security_id() {
  // @@protoc_insertion_point(field_mutable:plaid.Holding.security_id)
  return _internal_mutable_security_id();
}
inline const std::string& Holding::_internal_security_id() const {
  return security_id_.GetNoArena();
}
inline void Holding::_internal_set_security_id(const std::string& value) {
  
  security_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Holding::set_security_id(std::string&& value) {
  
  security_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Holding.security_id)
}
inline void Holding::set_security_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  security_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Holding.security_id)
}
inline void Holding::set_security_id(const char* value, size_t size) {
  
  security_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Holding.security_id)
}
inline std::string* Holding::_internal_mutable_security_id() {
  
  return security_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Holding::release_security_id() {
  // @@protoc_insertion_point(field_release:plaid.Holding.security_id)
  
  return security_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Holding::set_allocated_security_id(std::string* security_id) {
  if (security_id != nullptr) {
    
  } else {
    
  }
  security_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), security_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.Holding.security_id)
}

// double institution_value = 3;
inline void Holding::clear_institution_value() {
  institution_value_ = 0;
}
inline double Holding::_internal_institution_value() const {
  return institution_value_;
}
inline double Holding::institution_value() const {
  // @@protoc_insertion_point(field_get:plaid.Holding.institution_value)
  return _internal_institution_value();
}
inline void Holding::_internal_set_institution_value(double value) {
  
  institution_value_ = value;
}
inline void Holding::set_institution_value(double value) {
  _internal_set_institution_value(value);
  // @@protoc_insertion_point(field_set:plaid.Holding.institution_value)
}

// double institution_price = 4;
inline void Holding::clear_institution_price() {
  institution_price_ = 0;
}
inline double Holding::_internal_institution_price() const {
  return institution_price_;
}
inline double Holding::institution_price() const {
  // @@protoc_insertion_point(field_get:plaid.Holding.institution_price)
  return _internal_institution_price();
}
inline void Holding::_internal_set_institution_price(double value) {
  
  institution_price_ = value;
}
inline void Holding::set_institution_price(double value) {
  _internal_set_institution_price(value);
  // @@protoc_insertion_point(field_set:plaid.Holding.institution_price)
}

// double quantity = 5;
inline void Holding::clear_quantity() {
  quantity_ = 0;
}
inline double Holding::_internal_quantity() const {
  return quantity_;
}
inline double Holding::quantity() const {
  // @@protoc_insertion_point(field_get:plaid.Holding.quantity)
  return _internal_quantity();
}
inline void Holding::_internal_set_quantity(double value) {
  
  quantity_ = value;
}
inline void Holding::set_quantity(double value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:plaid.Holding.quantity)
}

// string institution_price_as_of = 6;
inline void Holding::clear_institution_price_as_of() {
  institution_price_as_of_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Holding::institution_price_as_of() const {
  // @@protoc_insertion_point(field_get:plaid.Holding.institution_price_as_of)
  return _internal_institution_price_as_of();
}
inline void Holding::set_institution_price_as_of(const std::string& value) {
  _internal_set_institution_price_as_of(value);
  // @@protoc_insertion_point(field_set:plaid.Holding.institution_price_as_of)
}
inline std::string* Holding::mutable_institution_price_as_of() {
  // @@protoc_insertion_point(field_mutable:plaid.Holding.institution_price_as_of)
  return _internal_mutable_institution_price_as_of();
}
inline const std::string& Holding::_internal_institution_price_as_of() const {
  return institution_price_as_of_.GetNoArena();
}
inline void Holding::_internal_set_institution_price_as_of(const std::string& value) {
  
  institution_price_as_of_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Holding::set_institution_price_as_of(std::string&& value) {
  
  institution_price_as_of_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Holding.institution_price_as_of)
}
inline void Holding::set_institution_price_as_of(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  institution_price_as_of_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Holding.institution_price_as_of)
}
inline void Holding::set_institution_price_as_of(const char* value, size_t size) {
  
  institution_price_as_of_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Holding.institution_price_as_of)
}
inline std::string* Holding::_internal_mutable_institution_price_as_of() {
  
  return institution_price_as_of_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Holding::release_institution_price_as_of() {
  // @@protoc_insertion_point(field_release:plaid.Holding.institution_price_as_of)
  
  return institution_price_as_of_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Holding::set_allocated_institution_price_as_of(std::string* institution_price_as_of) {
  if (institution_price_as_of != nullptr) {
    
  } else {
    
  }
  institution_price_as_of_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), institution_price_as_of);
  // @@protoc_insertion_point(field_set_allocated:plaid.Holding.institution_price_as_of)
}

// double cost_basis = 7;
inline void Holding::clear_cost_basis() {
  cost_basis_ = 0;
}
inline double Holding::_internal_cost_basis() const {
  return cost_basis_;
}
inline double Holding::cost_basis() const {
  // @@protoc_insertion_point(field_get:plaid.Holding.cost_basis)
  return _internal_cost_basis();
}
inline void Holding::_internal_set_cost_basis(double value) {
  
  cost_basis_ = value;
}
inline void Holding::set_cost_basis(double value) {
  _internal_set_cost_basis(value);
  // @@protoc_insertion_point(field_set:plaid.Holding.cost_basis)
}

// string iso_currency_code = 8;
inline void Holding::clear_iso_currency_code() {
  iso_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Holding::iso_currency_code() const {
  // @@protoc_insertion_point(field_get:plaid.Holding.iso_currency_code)
  return _internal_iso_currency_code();
}
inline void Holding::set_iso_currency_code(const std::string& value) {
  _internal_set_iso_currency_code(value);
  // @@protoc_insertion_point(field_set:plaid.Holding.iso_currency_code)
}
inline std::string* Holding::mutable_iso_currency_code() {
  // @@protoc_insertion_point(field_mutable:plaid.Holding.iso_currency_code)
  return _internal_mutable_iso_currency_code();
}
inline const std::string& Holding::_internal_iso_currency_code() const {
  return iso_currency_code_.GetNoArena();
}
inline void Holding::_internal_set_iso_currency_code(const std::string& value) {
  
  iso_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Holding::set_iso_currency_code(std::string&& value) {
  
  iso_currency_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Holding.iso_currency_code)
}
inline void Holding::set_iso_currency_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iso_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Holding.iso_currency_code)
}
inline void Holding::set_iso_currency_code(const char* value, size_t size) {
  
  iso_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Holding.iso_currency_code)
}
inline std::string* Holding::_internal_mutable_iso_currency_code() {
  
  return iso_currency_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Holding::release_iso_currency_code() {
  // @@protoc_insertion_point(field_release:plaid.Holding.iso_currency_code)
  
  return iso_currency_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Holding::set_allocated_iso_currency_code(std::string* iso_currency_code) {
  if (iso_currency_code != nullptr) {
    
  } else {
    
  }
  iso_currency_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iso_currency_code);
  // @@protoc_insertion_point(field_set_allocated:plaid.Holding.iso_currency_code)
}

// string unofficial_currency_code = 9;
inline void Holding::clear_unofficial_currency_code() {
  unofficial_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Holding::unofficial_currency_code() const {
  // @@protoc_insertion_point(field_get:plaid.Holding.unofficial_currency_code)
  return _internal_unofficial_currency_code();
}
inline void Holding::set_unofficial_currency_code(const std::string& value) {
  _internal_set_unofficial_currency_code(value);
  // @@protoc_insertion_point(field_set:plaid.Holding.unofficial_currency_code)
}
inline std::string* Holding::mutable_unofficial_currency_code() {
  // @@protoc_insertion_point(field_mutable:plaid.Holding.unofficial_currency_code)
  return _internal_mutable_unofficial_currency_code();
}
inline const std::string& Holding::_internal_unofficial_currency_code() const {
  return unofficial_currency_code_.GetNoArena();
}
inline void Holding::_internal_set_unofficial_currency_code(const std::string& value) {
  
  unofficial_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Holding::set_unofficial_currency_code(std::string&& value) {
  
  unofficial_currency_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Holding.unofficial_currency_code)
}
inline void Holding::set_unofficial_currency_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unofficial_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Holding.unofficial_currency_code)
}
inline void Holding::set_unofficial_currency_code(const char* value, size_t size) {
  
  unofficial_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Holding.unofficial_currency_code)
}
inline std::string* Holding::_internal_mutable_unofficial_currency_code() {
  
  return unofficial_currency_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Holding::release_unofficial_currency_code() {
  // @@protoc_insertion_point(field_release:plaid.Holding.unofficial_currency_code)
  
  return unofficial_currency_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Holding::set_allocated_unofficial_currency_code(std::string* unofficial_currency_code) {
  if (unofficial_currency_code != nullptr) {
    
  } else {
    
  }
  unofficial_currency_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unofficial_currency_code);
  // @@protoc_insertion_point(field_set_allocated:plaid.Holding.unofficial_currency_code)
}

// -------------------------------------------------------------------

// GetHoldingsRequest

// string client_id = 1;
inline void GetHoldingsRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetHoldingsRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetHoldingsRequest.client_id)
  return _internal_client_id();
}
inline void GetHoldingsRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetHoldingsRequest.client_id)
}
inline std::string* GetHoldingsRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetHoldingsRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& GetHoldingsRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void GetHoldingsRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetHoldingsRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetHoldingsRequest.client_id)
}
inline void GetHoldingsRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetHoldingsRequest.client_id)
}
inline void GetHoldingsRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetHoldingsRequest.client_id)
}
inline std::string* GetHoldingsRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetHoldingsRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.GetHoldingsRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetHoldingsRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetHoldingsRequest.client_id)
}

// string secret = 2;
inline void GetHoldingsRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetHoldingsRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.GetHoldingsRequest.secret)
  return _internal_secret();
}
inline void GetHoldingsRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.GetHoldingsRequest.secret)
}
inline std::string* GetHoldingsRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.GetHoldingsRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& GetHoldingsRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void GetHoldingsRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetHoldingsRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetHoldingsRequest.secret)
}
inline void GetHoldingsRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetHoldingsRequest.secret)
}
inline void GetHoldingsRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetHoldingsRequest.secret)
}
inline std::string* GetHoldingsRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetHoldingsRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.GetHoldingsRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetHoldingsRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetHoldingsRequest.secret)
}

// string access_token = 3;
inline void GetHoldingsRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetHoldingsRequest::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.GetHoldingsRequest.access_token)
  return _internal_access_token();
}
inline void GetHoldingsRequest::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.GetHoldingsRequest.access_token)
}
inline std::string* GetHoldingsRequest::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.GetHoldingsRequest.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& GetHoldingsRequest::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void GetHoldingsRequest::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetHoldingsRequest::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetHoldingsRequest.access_token)
}
inline void GetHoldingsRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetHoldingsRequest.access_token)
}
inline void GetHoldingsRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetHoldingsRequest.access_token)
}
inline std::string* GetHoldingsRequest::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetHoldingsRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.GetHoldingsRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetHoldingsRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetHoldingsRequest.access_token)
}

// .plaid.GetHoldingsOptions options = 4;
inline bool GetHoldingsRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool GetHoldingsRequest::has_options() const {
  return _internal_has_options();
}
inline void GetHoldingsRequest::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::plaid::GetHoldingsOptions& GetHoldingsRequest::_internal_options() const {
  const ::plaid::GetHoldingsOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::GetHoldingsOptions*>(
      &::plaid::_GetHoldingsOptions_default_instance_);
}
inline const ::plaid::GetHoldingsOptions& GetHoldingsRequest::options() const {
  // @@protoc_insertion_point(field_get:plaid.GetHoldingsRequest.options)
  return _internal_options();
}
inline ::plaid::GetHoldingsOptions* GetHoldingsRequest::release_options() {
  // @@protoc_insertion_point(field_release:plaid.GetHoldingsRequest.options)
  
  ::plaid::GetHoldingsOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::plaid::GetHoldingsOptions* GetHoldingsRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::GetHoldingsOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::plaid::GetHoldingsOptions* GetHoldingsRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:plaid.GetHoldingsRequest.options)
  return _internal_mutable_options();
}
inline void GetHoldingsRequest::set_allocated_options(::plaid::GetHoldingsOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetHoldingsRequest.options)
}

// -------------------------------------------------------------------

// GetHoldingsOptions

// repeated string account_ids = 1;
inline int GetHoldingsOptions::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int GetHoldingsOptions::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void GetHoldingsOptions::clear_account_ids() {
  account_ids_.Clear();
}
inline std::string* GetHoldingsOptions::add_account_ids() {
  // @@protoc_insertion_point(field_add_mutable:plaid.GetHoldingsOptions.account_ids)
  return _internal_add_account_ids();
}
inline const std::string& GetHoldingsOptions::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline const std::string& GetHoldingsOptions::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetHoldingsOptions.account_ids)
  return _internal_account_ids(index);
}
inline std::string* GetHoldingsOptions::mutable_account_ids(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetHoldingsOptions.account_ids)
  return account_ids_.Mutable(index);
}
inline void GetHoldingsOptions::set_account_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.GetHoldingsOptions.account_ids)
  account_ids_.Mutable(index)->assign(value);
}
inline void GetHoldingsOptions::set_account_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.GetHoldingsOptions.account_ids)
  account_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetHoldingsOptions::set_account_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.GetHoldingsOptions.account_ids)
}
inline void GetHoldingsOptions::set_account_ids(int index, const char* value, size_t size) {
  account_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.GetHoldingsOptions.account_ids)
}
inline std::string* GetHoldingsOptions::_internal_add_account_ids() {
  return account_ids_.Add();
}
inline void GetHoldingsOptions::add_account_ids(const std::string& value) {
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.GetHoldingsOptions.account_ids)
}
inline void GetHoldingsOptions::add_account_ids(std::string&& value) {
  account_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.GetHoldingsOptions.account_ids)
}
inline void GetHoldingsOptions::add_account_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.GetHoldingsOptions.account_ids)
}
inline void GetHoldingsOptions::add_account_ids(const char* value, size_t size) {
  account_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.GetHoldingsOptions.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetHoldingsOptions::account_ids() const {
  // @@protoc_insertion_point(field_list:plaid.GetHoldingsOptions.account_ids)
  return account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetHoldingsOptions::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetHoldingsOptions.account_ids)
  return &account_ids_;
}

// -------------------------------------------------------------------

// GetHoldingsResponse

// string request_id = 1;
inline void GetHoldingsResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetHoldingsResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetHoldingsResponse.request_id)
  return _internal_request_id();
}
inline void GetHoldingsResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetHoldingsResponse.request_id)
}
inline std::string* GetHoldingsResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetHoldingsResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetHoldingsResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void GetHoldingsResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetHoldingsResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetHoldingsResponse.request_id)
}
inline void GetHoldingsResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetHoldingsResponse.request_id)
}
inline void GetHoldingsResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetHoldingsResponse.request_id)
}
inline std::string* GetHoldingsResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetHoldingsResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.GetHoldingsResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetHoldingsResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetHoldingsResponse.request_id)
}

// repeated .plaid.Account accounts = 2;
inline int GetHoldingsResponse::_internal_accounts_size() const {
  return accounts_.size();
}
inline int GetHoldingsResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline void GetHoldingsResponse::clear_accounts() {
  accounts_.Clear();
}
inline ::plaid::Account* GetHoldingsResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetHoldingsResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >*
GetHoldingsResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetHoldingsResponse.accounts)
  return &accounts_;
}
inline const ::plaid::Account& GetHoldingsResponse::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::plaid::Account& GetHoldingsResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetHoldingsResponse.accounts)
  return _internal_accounts(index);
}
inline ::plaid::Account* GetHoldingsResponse::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::plaid::Account* GetHoldingsResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:plaid.GetHoldingsResponse.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >&
GetHoldingsResponse::accounts() const {
  // @@protoc_insertion_point(field_list:plaid.GetHoldingsResponse.accounts)
  return accounts_;
}

// .plaid.Item item = 3;
inline bool GetHoldingsResponse::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool GetHoldingsResponse::has_item() const {
  return _internal_has_item();
}
inline void GetHoldingsResponse::clear_item() {
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::plaid::Item& GetHoldingsResponse::_internal_item() const {
  const ::plaid::Item* p = item_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::Item*>(
      &::plaid::_Item_default_instance_);
}
inline const ::plaid::Item& GetHoldingsResponse::item() const {
  // @@protoc_insertion_point(field_get:plaid.GetHoldingsResponse.item)
  return _internal_item();
}
inline ::plaid::Item* GetHoldingsResponse::release_item() {
  // @@protoc_insertion_point(field_release:plaid.GetHoldingsResponse.item)
  
  ::plaid::Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::plaid::Item* GetHoldingsResponse::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::Item>(GetArenaNoVirtual());
    item_ = p;
  }
  return item_;
}
inline ::plaid::Item* GetHoldingsResponse::mutable_item() {
  // @@protoc_insertion_point(field_mutable:plaid.GetHoldingsResponse.item)
  return _internal_mutable_item();
}
inline void GetHoldingsResponse::set_allocated_item(::plaid::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetHoldingsResponse.item)
}

// repeated .plaid.Security securities = 4;
inline int GetHoldingsResponse::_internal_securities_size() const {
  return securities_.size();
}
inline int GetHoldingsResponse::securities_size() const {
  return _internal_securities_size();
}
inline void GetHoldingsResponse::clear_securities() {
  securities_.Clear();
}
inline ::plaid::Security* GetHoldingsResponse::mutable_securities(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetHoldingsResponse.securities)
  return securities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Security >*
GetHoldingsResponse::mutable_securities() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetHoldingsResponse.securities)
  return &securities_;
}
inline const ::plaid::Security& GetHoldingsResponse::_internal_securities(int index) const {
  return securities_.Get(index);
}
inline const ::plaid::Security& GetHoldingsResponse::securities(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetHoldingsResponse.securities)
  return _internal_securities(index);
}
inline ::plaid::Security* GetHoldingsResponse::_internal_add_securities() {
  return securities_.Add();
}
inline ::plaid::Security* GetHoldingsResponse::add_securities() {
  // @@protoc_insertion_point(field_add:plaid.GetHoldingsResponse.securities)
  return _internal_add_securities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Security >&
GetHoldingsResponse::securities() const {
  // @@protoc_insertion_point(field_list:plaid.GetHoldingsResponse.securities)
  return securities_;
}

// repeated .plaid.Holding holdings = 5;
inline int GetHoldingsResponse::_internal_holdings_size() const {
  return holdings_.size();
}
inline int GetHoldingsResponse::holdings_size() const {
  return _internal_holdings_size();
}
inline void GetHoldingsResponse::clear_holdings() {
  holdings_.Clear();
}
inline ::plaid::Holding* GetHoldingsResponse::mutable_holdings(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetHoldingsResponse.holdings)
  return holdings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Holding >*
GetHoldingsResponse::mutable_holdings() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetHoldingsResponse.holdings)
  return &holdings_;
}
inline const ::plaid::Holding& GetHoldingsResponse::_internal_holdings(int index) const {
  return holdings_.Get(index);
}
inline const ::plaid::Holding& GetHoldingsResponse::holdings(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetHoldingsResponse.holdings)
  return _internal_holdings(index);
}
inline ::plaid::Holding* GetHoldingsResponse::_internal_add_holdings() {
  return holdings_.Add();
}
inline ::plaid::Holding* GetHoldingsResponse::add_holdings() {
  // @@protoc_insertion_point(field_add:plaid.GetHoldingsResponse.holdings)
  return _internal_add_holdings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Holding >&
GetHoldingsResponse::holdings() const {
  // @@protoc_insertion_point(field_list:plaid.GetHoldingsResponse.holdings)
  return holdings_;
}

// -------------------------------------------------------------------

// Identity

// repeated .plaid.Address addresses = 1;
inline int Identity::_internal_addresses_size() const {
  return addresses_.size();
}
inline int Identity::addresses_size() const {
  return _internal_addresses_size();
}
inline void Identity::clear_addresses() {
  addresses_.Clear();
}
inline ::plaid::Address* Identity::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.Identity.addresses)
  return addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Address >*
Identity::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:plaid.Identity.addresses)
  return &addresses_;
}
inline const ::plaid::Address& Identity::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const ::plaid::Address& Identity::addresses(int index) const {
  // @@protoc_insertion_point(field_get:plaid.Identity.addresses)
  return _internal_addresses(index);
}
inline ::plaid::Address* Identity::_internal_add_addresses() {
  return addresses_.Add();
}
inline ::plaid::Address* Identity::add_addresses() {
  // @@protoc_insertion_point(field_add:plaid.Identity.addresses)
  return _internal_add_addresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Address >&
Identity::addresses() const {
  // @@protoc_insertion_point(field_list:plaid.Identity.addresses)
  return addresses_;
}

// repeated .plaid.Email emails = 2;
inline int Identity::_internal_emails_size() const {
  return emails_.size();
}
inline int Identity::emails_size() const {
  return _internal_emails_size();
}
inline void Identity::clear_emails() {
  emails_.Clear();
}
inline ::plaid::Email* Identity::mutable_emails(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.Identity.emails)
  return emails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Email >*
Identity::mutable_emails() {
  // @@protoc_insertion_point(field_mutable_list:plaid.Identity.emails)
  return &emails_;
}
inline const ::plaid::Email& Identity::_internal_emails(int index) const {
  return emails_.Get(index);
}
inline const ::plaid::Email& Identity::emails(int index) const {
  // @@protoc_insertion_point(field_get:plaid.Identity.emails)
  return _internal_emails(index);
}
inline ::plaid::Email* Identity::_internal_add_emails() {
  return emails_.Add();
}
inline ::plaid::Email* Identity::add_emails() {
  // @@protoc_insertion_point(field_add:plaid.Identity.emails)
  return _internal_add_emails();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Email >&
Identity::emails() const {
  // @@protoc_insertion_point(field_list:plaid.Identity.emails)
  return emails_;
}

// repeated string names = 3;
inline int Identity::_internal_names_size() const {
  return names_.size();
}
inline int Identity::names_size() const {
  return _internal_names_size();
}
inline void Identity::clear_names() {
  names_.Clear();
}
inline std::string* Identity::add_names() {
  // @@protoc_insertion_point(field_add_mutable:plaid.Identity.names)
  return _internal_add_names();
}
inline const std::string& Identity::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& Identity::names(int index) const {
  // @@protoc_insertion_point(field_get:plaid.Identity.names)
  return _internal_names(index);
}
inline std::string* Identity::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.Identity.names)
  return names_.Mutable(index);
}
inline void Identity::set_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.Identity.names)
  names_.Mutable(index)->assign(value);
}
inline void Identity::set_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.Identity.names)
  names_.Mutable(index)->assign(std::move(value));
}
inline void Identity::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.Identity.names)
}
inline void Identity::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.Identity.names)
}
inline std::string* Identity::_internal_add_names() {
  return names_.Add();
}
inline void Identity::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.Identity.names)
}
inline void Identity::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.Identity.names)
}
inline void Identity::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.Identity.names)
}
inline void Identity::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.Identity.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Identity::names() const {
  // @@protoc_insertion_point(field_list:plaid.Identity.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Identity::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:plaid.Identity.names)
  return &names_;
}

// repeated .plaid.PhoneNumber phone_numbers = 4;
inline int Identity::_internal_phone_numbers_size() const {
  return phone_numbers_.size();
}
inline int Identity::phone_numbers_size() const {
  return _internal_phone_numbers_size();
}
inline void Identity::clear_phone_numbers() {
  phone_numbers_.Clear();
}
inline ::plaid::PhoneNumber* Identity::mutable_phone_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.Identity.phone_numbers)
  return phone_numbers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::PhoneNumber >*
Identity::mutable_phone_numbers() {
  // @@protoc_insertion_point(field_mutable_list:plaid.Identity.phone_numbers)
  return &phone_numbers_;
}
inline const ::plaid::PhoneNumber& Identity::_internal_phone_numbers(int index) const {
  return phone_numbers_.Get(index);
}
inline const ::plaid::PhoneNumber& Identity::phone_numbers(int index) const {
  // @@protoc_insertion_point(field_get:plaid.Identity.phone_numbers)
  return _internal_phone_numbers(index);
}
inline ::plaid::PhoneNumber* Identity::_internal_add_phone_numbers() {
  return phone_numbers_.Add();
}
inline ::plaid::PhoneNumber* Identity::add_phone_numbers() {
  // @@protoc_insertion_point(field_add:plaid.Identity.phone_numbers)
  return _internal_add_phone_numbers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::PhoneNumber >&
Identity::phone_numbers() const {
  // @@protoc_insertion_point(field_list:plaid.Identity.phone_numbers)
  return phone_numbers_;
}

// -------------------------------------------------------------------

// Address

// .plaid.AddressData data = 1;
inline bool Address::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Address::has_data() const {
  return _internal_has_data();
}
inline void Address::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::plaid::AddressData& Address::_internal_data() const {
  const ::plaid::AddressData* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::AddressData*>(
      &::plaid::_AddressData_default_instance_);
}
inline const ::plaid::AddressData& Address::data() const {
  // @@protoc_insertion_point(field_get:plaid.Address.data)
  return _internal_data();
}
inline ::plaid::AddressData* Address::release_data() {
  // @@protoc_insertion_point(field_release:plaid.Address.data)
  
  ::plaid::AddressData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::plaid::AddressData* Address::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::AddressData>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::plaid::AddressData* Address::mutable_data() {
  // @@protoc_insertion_point(field_mutable:plaid.Address.data)
  return _internal_mutable_data();
}
inline void Address::set_allocated_data(::plaid::AddressData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:plaid.Address.data)
}

// bool primary = 2;
inline void Address::clear_primary() {
  primary_ = false;
}
inline bool Address::_internal_primary() const {
  return primary_;
}
inline bool Address::primary() const {
  // @@protoc_insertion_point(field_get:plaid.Address.primary)
  return _internal_primary();
}
inline void Address::_internal_set_primary(bool value) {
  
  primary_ = value;
}
inline void Address::set_primary(bool value) {
  _internal_set_primary(value);
  // @@protoc_insertion_point(field_set:plaid.Address.primary)
}

// -------------------------------------------------------------------

// AddressData

// string city = 1;
inline void AddressData::clear_city() {
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddressData::city() const {
  // @@protoc_insertion_point(field_get:plaid.AddressData.city)
  return _internal_city();
}
inline void AddressData::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:plaid.AddressData.city)
}
inline std::string* AddressData::mutable_city() {
  // @@protoc_insertion_point(field_mutable:plaid.AddressData.city)
  return _internal_mutable_city();
}
inline const std::string& AddressData::_internal_city() const {
  return city_.GetNoArena();
}
inline void AddressData::_internal_set_city(const std::string& value) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddressData::set_city(std::string&& value) {
  
  city_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AddressData.city)
}
inline void AddressData::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AddressData.city)
}
inline void AddressData::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AddressData.city)
}
inline std::string* AddressData::_internal_mutable_city() {
  
  return city_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddressData::release_city() {
  // @@protoc_insertion_point(field_release:plaid.AddressData.city)
  
  return city_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddressData::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:plaid.AddressData.city)
}

// string region = 2;
inline void AddressData::clear_region() {
  region_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddressData::region() const {
  // @@protoc_insertion_point(field_get:plaid.AddressData.region)
  return _internal_region();
}
inline void AddressData::set_region(const std::string& value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:plaid.AddressData.region)
}
inline std::string* AddressData::mutable_region() {
  // @@protoc_insertion_point(field_mutable:plaid.AddressData.region)
  return _internal_mutable_region();
}
inline const std::string& AddressData::_internal_region() const {
  return region_.GetNoArena();
}
inline void AddressData::_internal_set_region(const std::string& value) {
  
  region_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddressData::set_region(std::string&& value) {
  
  region_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AddressData.region)
}
inline void AddressData::set_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AddressData.region)
}
inline void AddressData::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AddressData.region)
}
inline std::string* AddressData::_internal_mutable_region() {
  
  return region_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddressData::release_region() {
  // @@protoc_insertion_point(field_release:plaid.AddressData.region)
  
  return region_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddressData::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:plaid.AddressData.region)
}

// string street = 3;
inline void AddressData::clear_street() {
  street_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddressData::street() const {
  // @@protoc_insertion_point(field_get:plaid.AddressData.street)
  return _internal_street();
}
inline void AddressData::set_street(const std::string& value) {
  _internal_set_street(value);
  // @@protoc_insertion_point(field_set:plaid.AddressData.street)
}
inline std::string* AddressData::mutable_street() {
  // @@protoc_insertion_point(field_mutable:plaid.AddressData.street)
  return _internal_mutable_street();
}
inline const std::string& AddressData::_internal_street() const {
  return street_.GetNoArena();
}
inline void AddressData::_internal_set_street(const std::string& value) {
  
  street_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddressData::set_street(std::string&& value) {
  
  street_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AddressData.street)
}
inline void AddressData::set_street(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  street_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AddressData.street)
}
inline void AddressData::set_street(const char* value, size_t size) {
  
  street_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AddressData.street)
}
inline std::string* AddressData::_internal_mutable_street() {
  
  return street_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddressData::release_street() {
  // @@protoc_insertion_point(field_release:plaid.AddressData.street)
  
  return street_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddressData::set_allocated_street(std::string* street) {
  if (street != nullptr) {
    
  } else {
    
  }
  street_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), street);
  // @@protoc_insertion_point(field_set_allocated:plaid.AddressData.street)
}

// string postal_code = 4;
inline void AddressData::clear_postal_code() {
  postal_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddressData::postal_code() const {
  // @@protoc_insertion_point(field_get:plaid.AddressData.postal_code)
  return _internal_postal_code();
}
inline void AddressData::set_postal_code(const std::string& value) {
  _internal_set_postal_code(value);
  // @@protoc_insertion_point(field_set:plaid.AddressData.postal_code)
}
inline std::string* AddressData::mutable_postal_code() {
  // @@protoc_insertion_point(field_mutable:plaid.AddressData.postal_code)
  return _internal_mutable_postal_code();
}
inline const std::string& AddressData::_internal_postal_code() const {
  return postal_code_.GetNoArena();
}
inline void AddressData::_internal_set_postal_code(const std::string& value) {
  
  postal_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddressData::set_postal_code(std::string&& value) {
  
  postal_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AddressData.postal_code)
}
inline void AddressData::set_postal_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  postal_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AddressData.postal_code)
}
inline void AddressData::set_postal_code(const char* value, size_t size) {
  
  postal_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AddressData.postal_code)
}
inline std::string* AddressData::_internal_mutable_postal_code() {
  
  return postal_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddressData::release_postal_code() {
  // @@protoc_insertion_point(field_release:plaid.AddressData.postal_code)
  
  return postal_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddressData::set_allocated_postal_code(std::string* postal_code) {
  if (postal_code != nullptr) {
    
  } else {
    
  }
  postal_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), postal_code);
  // @@protoc_insertion_point(field_set_allocated:plaid.AddressData.postal_code)
}

// string country = 5;
inline void AddressData::clear_country() {
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddressData::country() const {
  // @@protoc_insertion_point(field_get:plaid.AddressData.country)
  return _internal_country();
}
inline void AddressData::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:plaid.AddressData.country)
}
inline std::string* AddressData::mutable_country() {
  // @@protoc_insertion_point(field_mutable:plaid.AddressData.country)
  return _internal_mutable_country();
}
inline const std::string& AddressData::_internal_country() const {
  return country_.GetNoArena();
}
inline void AddressData::_internal_set_country(const std::string& value) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddressData::set_country(std::string&& value) {
  
  country_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AddressData.country)
}
inline void AddressData::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AddressData.country)
}
inline void AddressData::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AddressData.country)
}
inline std::string* AddressData::_internal_mutable_country() {
  
  return country_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddressData::release_country() {
  // @@protoc_insertion_point(field_release:plaid.AddressData.country)
  
  return country_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddressData::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:plaid.AddressData.country)
}

// -------------------------------------------------------------------

// Email

// string data = 1;
inline void Email::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Email::data() const {
  // @@protoc_insertion_point(field_get:plaid.Email.data)
  return _internal_data();
}
inline void Email::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:plaid.Email.data)
}
inline std::string* Email::mutable_data() {
  // @@protoc_insertion_point(field_mutable:plaid.Email.data)
  return _internal_mutable_data();
}
inline const std::string& Email::_internal_data() const {
  return data_.GetNoArena();
}
inline void Email::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Email::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Email.data)
}
inline void Email::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Email.data)
}
inline void Email::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Email.data)
}
inline std::string* Email::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Email::release_data() {
  // @@protoc_insertion_point(field_release:plaid.Email.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:plaid.Email.data)
}

// bool primary = 2;
inline void Email::clear_primary() {
  primary_ = false;
}
inline bool Email::_internal_primary() const {
  return primary_;
}
inline bool Email::primary() const {
  // @@protoc_insertion_point(field_get:plaid.Email.primary)
  return _internal_primary();
}
inline void Email::_internal_set_primary(bool value) {
  
  primary_ = value;
}
inline void Email::set_primary(bool value) {
  _internal_set_primary(value);
  // @@protoc_insertion_point(field_set:plaid.Email.primary)
}

// string type = 3;
inline void Email::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Email::type() const {
  // @@protoc_insertion_point(field_get:plaid.Email.type)
  return _internal_type();
}
inline void Email::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:plaid.Email.type)
}
inline std::string* Email::mutable_type() {
  // @@protoc_insertion_point(field_mutable:plaid.Email.type)
  return _internal_mutable_type();
}
inline const std::string& Email::_internal_type() const {
  return type_.GetNoArena();
}
inline void Email::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Email::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Email.type)
}
inline void Email::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Email.type)
}
inline void Email::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Email.type)
}
inline std::string* Email::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Email::release_type() {
  // @@protoc_insertion_point(field_release:plaid.Email.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:plaid.Email.type)
}

// -------------------------------------------------------------------

// PhoneNumber

// bool primary = 1;
inline void PhoneNumber::clear_primary() {
  primary_ = false;
}
inline bool PhoneNumber::_internal_primary() const {
  return primary_;
}
inline bool PhoneNumber::primary() const {
  // @@protoc_insertion_point(field_get:plaid.PhoneNumber.primary)
  return _internal_primary();
}
inline void PhoneNumber::_internal_set_primary(bool value) {
  
  primary_ = value;
}
inline void PhoneNumber::set_primary(bool value) {
  _internal_set_primary(value);
  // @@protoc_insertion_point(field_set:plaid.PhoneNumber.primary)
}

// string type = 2;
inline void PhoneNumber::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PhoneNumber::type() const {
  // @@protoc_insertion_point(field_get:plaid.PhoneNumber.type)
  return _internal_type();
}
inline void PhoneNumber::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:plaid.PhoneNumber.type)
}
inline std::string* PhoneNumber::mutable_type() {
  // @@protoc_insertion_point(field_mutable:plaid.PhoneNumber.type)
  return _internal_mutable_type();
}
inline const std::string& PhoneNumber::_internal_type() const {
  return type_.GetNoArena();
}
inline void PhoneNumber::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PhoneNumber::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.PhoneNumber.type)
}
inline void PhoneNumber::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.PhoneNumber.type)
}
inline void PhoneNumber::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.PhoneNumber.type)
}
inline std::string* PhoneNumber::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PhoneNumber::release_type() {
  // @@protoc_insertion_point(field_release:plaid.PhoneNumber.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneNumber::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:plaid.PhoneNumber.type)
}

// string data = 3;
inline void PhoneNumber::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PhoneNumber::data() const {
  // @@protoc_insertion_point(field_get:plaid.PhoneNumber.data)
  return _internal_data();
}
inline void PhoneNumber::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:plaid.PhoneNumber.data)
}
inline std::string* PhoneNumber::mutable_data() {
  // @@protoc_insertion_point(field_mutable:plaid.PhoneNumber.data)
  return _internal_mutable_data();
}
inline const std::string& PhoneNumber::_internal_data() const {
  return data_.GetNoArena();
}
inline void PhoneNumber::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PhoneNumber::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.PhoneNumber.data)
}
inline void PhoneNumber::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.PhoneNumber.data)
}
inline void PhoneNumber::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.PhoneNumber.data)
}
inline std::string* PhoneNumber::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PhoneNumber::release_data() {
  // @@protoc_insertion_point(field_release:plaid.PhoneNumber.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneNumber::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:plaid.PhoneNumber.data)
}

// -------------------------------------------------------------------

// GetIdentityRequest

// string client_id = 1;
inline void GetIdentityRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIdentityRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetIdentityRequest.client_id)
  return _internal_client_id();
}
inline void GetIdentityRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetIdentityRequest.client_id)
}
inline std::string* GetIdentityRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetIdentityRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& GetIdentityRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void GetIdentityRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetIdentityRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetIdentityRequest.client_id)
}
inline void GetIdentityRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetIdentityRequest.client_id)
}
inline void GetIdentityRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetIdentityRequest.client_id)
}
inline std::string* GetIdentityRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIdentityRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.GetIdentityRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIdentityRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetIdentityRequest.client_id)
}

// string secret = 2;
inline void GetIdentityRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIdentityRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.GetIdentityRequest.secret)
  return _internal_secret();
}
inline void GetIdentityRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.GetIdentityRequest.secret)
}
inline std::string* GetIdentityRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.GetIdentityRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& GetIdentityRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void GetIdentityRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetIdentityRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetIdentityRequest.secret)
}
inline void GetIdentityRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetIdentityRequest.secret)
}
inline void GetIdentityRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetIdentityRequest.secret)
}
inline std::string* GetIdentityRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIdentityRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.GetIdentityRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIdentityRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetIdentityRequest.secret)
}

// string access_token = 3;
inline void GetIdentityRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIdentityRequest::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.GetIdentityRequest.access_token)
  return _internal_access_token();
}
inline void GetIdentityRequest::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.GetIdentityRequest.access_token)
}
inline std::string* GetIdentityRequest::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.GetIdentityRequest.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& GetIdentityRequest::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void GetIdentityRequest::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetIdentityRequest::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetIdentityRequest.access_token)
}
inline void GetIdentityRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetIdentityRequest.access_token)
}
inline void GetIdentityRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetIdentityRequest.access_token)
}
inline std::string* GetIdentityRequest::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIdentityRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.GetIdentityRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIdentityRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetIdentityRequest.access_token)
}

// -------------------------------------------------------------------

// AccountWithOwners

// repeated .plaid.Identity owners = 1;
inline int AccountWithOwners::_internal_owners_size() const {
  return owners_.size();
}
inline int AccountWithOwners::owners_size() const {
  return _internal_owners_size();
}
inline void AccountWithOwners::clear_owners() {
  owners_.Clear();
}
inline ::plaid::Identity* AccountWithOwners::mutable_owners(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.AccountWithOwners.owners)
  return owners_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Identity >*
AccountWithOwners::mutable_owners() {
  // @@protoc_insertion_point(field_mutable_list:plaid.AccountWithOwners.owners)
  return &owners_;
}
inline const ::plaid::Identity& AccountWithOwners::_internal_owners(int index) const {
  return owners_.Get(index);
}
inline const ::plaid::Identity& AccountWithOwners::owners(int index) const {
  // @@protoc_insertion_point(field_get:plaid.AccountWithOwners.owners)
  return _internal_owners(index);
}
inline ::plaid::Identity* AccountWithOwners::_internal_add_owners() {
  return owners_.Add();
}
inline ::plaid::Identity* AccountWithOwners::add_owners() {
  // @@protoc_insertion_point(field_add:plaid.AccountWithOwners.owners)
  return _internal_add_owners();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Identity >&
AccountWithOwners::owners() const {
  // @@protoc_insertion_point(field_list:plaid.AccountWithOwners.owners)
  return owners_;
}

// string account_id = 2;
inline void AccountWithOwners::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountWithOwners::account_id() const {
  // @@protoc_insertion_point(field_get:plaid.AccountWithOwners.account_id)
  return _internal_account_id();
}
inline void AccountWithOwners::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:plaid.AccountWithOwners.account_id)
}
inline std::string* AccountWithOwners::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:plaid.AccountWithOwners.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& AccountWithOwners::_internal_account_id() const {
  return account_id_.GetNoArena();
}
inline void AccountWithOwners::_internal_set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountWithOwners::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AccountWithOwners.account_id)
}
inline void AccountWithOwners::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AccountWithOwners.account_id)
}
inline void AccountWithOwners::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AccountWithOwners.account_id)
}
inline std::string* AccountWithOwners::_internal_mutable_account_id() {
  
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountWithOwners::release_account_id() {
  // @@protoc_insertion_point(field_release:plaid.AccountWithOwners.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWithOwners::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.AccountWithOwners.account_id)
}

// .plaid.AccountBalances balances = 3;
inline bool AccountWithOwners::_internal_has_balances() const {
  return this != internal_default_instance() && balances_ != nullptr;
}
inline bool AccountWithOwners::has_balances() const {
  return _internal_has_balances();
}
inline void AccountWithOwners::clear_balances() {
  if (GetArenaNoVirtual() == nullptr && balances_ != nullptr) {
    delete balances_;
  }
  balances_ = nullptr;
}
inline const ::plaid::AccountBalances& AccountWithOwners::_internal_balances() const {
  const ::plaid::AccountBalances* p = balances_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::AccountBalances*>(
      &::plaid::_AccountBalances_default_instance_);
}
inline const ::plaid::AccountBalances& AccountWithOwners::balances() const {
  // @@protoc_insertion_point(field_get:plaid.AccountWithOwners.balances)
  return _internal_balances();
}
inline ::plaid::AccountBalances* AccountWithOwners::release_balances() {
  // @@protoc_insertion_point(field_release:plaid.AccountWithOwners.balances)
  
  ::plaid::AccountBalances* temp = balances_;
  balances_ = nullptr;
  return temp;
}
inline ::plaid::AccountBalances* AccountWithOwners::_internal_mutable_balances() {
  
  if (balances_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::AccountBalances>(GetArenaNoVirtual());
    balances_ = p;
  }
  return balances_;
}
inline ::plaid::AccountBalances* AccountWithOwners::mutable_balances() {
  // @@protoc_insertion_point(field_mutable:plaid.AccountWithOwners.balances)
  return _internal_mutable_balances();
}
inline void AccountWithOwners::set_allocated_balances(::plaid::AccountBalances* balances) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete balances_;
  }
  if (balances) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      balances = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, balances, submessage_arena);
    }
    
  } else {
    
  }
  balances_ = balances;
  // @@protoc_insertion_point(field_set_allocated:plaid.AccountWithOwners.balances)
}

// string mask = 4;
inline void AccountWithOwners::clear_mask() {
  mask_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountWithOwners::mask() const {
  // @@protoc_insertion_point(field_get:plaid.AccountWithOwners.mask)
  return _internal_mask();
}
inline void AccountWithOwners::set_mask(const std::string& value) {
  _internal_set_mask(value);
  // @@protoc_insertion_point(field_set:plaid.AccountWithOwners.mask)
}
inline std::string* AccountWithOwners::mutable_mask() {
  // @@protoc_insertion_point(field_mutable:plaid.AccountWithOwners.mask)
  return _internal_mutable_mask();
}
inline const std::string& AccountWithOwners::_internal_mask() const {
  return mask_.GetNoArena();
}
inline void AccountWithOwners::_internal_set_mask(const std::string& value) {
  
  mask_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountWithOwners::set_mask(std::string&& value) {
  
  mask_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AccountWithOwners.mask)
}
inline void AccountWithOwners::set_mask(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mask_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AccountWithOwners.mask)
}
inline void AccountWithOwners::set_mask(const char* value, size_t size) {
  
  mask_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AccountWithOwners.mask)
}
inline std::string* AccountWithOwners::_internal_mutable_mask() {
  
  return mask_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountWithOwners::release_mask() {
  // @@protoc_insertion_point(field_release:plaid.AccountWithOwners.mask)
  
  return mask_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWithOwners::set_allocated_mask(std::string* mask) {
  if (mask != nullptr) {
    
  } else {
    
  }
  mask_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mask);
  // @@protoc_insertion_point(field_set_allocated:plaid.AccountWithOwners.mask)
}

// string name = 5;
inline void AccountWithOwners::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountWithOwners::name() const {
  // @@protoc_insertion_point(field_get:plaid.AccountWithOwners.name)
  return _internal_name();
}
inline void AccountWithOwners::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:plaid.AccountWithOwners.name)
}
inline std::string* AccountWithOwners::mutable_name() {
  // @@protoc_insertion_point(field_mutable:plaid.AccountWithOwners.name)
  return _internal_mutable_name();
}
inline const std::string& AccountWithOwners::_internal_name() const {
  return name_.GetNoArena();
}
inline void AccountWithOwners::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountWithOwners::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AccountWithOwners.name)
}
inline void AccountWithOwners::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AccountWithOwners.name)
}
inline void AccountWithOwners::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AccountWithOwners.name)
}
inline std::string* AccountWithOwners::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountWithOwners::release_name() {
  // @@protoc_insertion_point(field_release:plaid.AccountWithOwners.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWithOwners::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:plaid.AccountWithOwners.name)
}

// string official_name = 6;
inline void AccountWithOwners::clear_official_name() {
  official_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountWithOwners::official_name() const {
  // @@protoc_insertion_point(field_get:plaid.AccountWithOwners.official_name)
  return _internal_official_name();
}
inline void AccountWithOwners::set_official_name(const std::string& value) {
  _internal_set_official_name(value);
  // @@protoc_insertion_point(field_set:plaid.AccountWithOwners.official_name)
}
inline std::string* AccountWithOwners::mutable_official_name() {
  // @@protoc_insertion_point(field_mutable:plaid.AccountWithOwners.official_name)
  return _internal_mutable_official_name();
}
inline const std::string& AccountWithOwners::_internal_official_name() const {
  return official_name_.GetNoArena();
}
inline void AccountWithOwners::_internal_set_official_name(const std::string& value) {
  
  official_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountWithOwners::set_official_name(std::string&& value) {
  
  official_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AccountWithOwners.official_name)
}
inline void AccountWithOwners::set_official_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  official_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AccountWithOwners.official_name)
}
inline void AccountWithOwners::set_official_name(const char* value, size_t size) {
  
  official_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AccountWithOwners.official_name)
}
inline std::string* AccountWithOwners::_internal_mutable_official_name() {
  
  return official_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountWithOwners::release_official_name() {
  // @@protoc_insertion_point(field_release:plaid.AccountWithOwners.official_name)
  
  return official_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWithOwners::set_allocated_official_name(std::string* official_name) {
  if (official_name != nullptr) {
    
  } else {
    
  }
  official_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), official_name);
  // @@protoc_insertion_point(field_set_allocated:plaid.AccountWithOwners.official_name)
}

// string subtype = 7;
inline void AccountWithOwners::clear_subtype() {
  subtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountWithOwners::subtype() const {
  // @@protoc_insertion_point(field_get:plaid.AccountWithOwners.subtype)
  return _internal_subtype();
}
inline void AccountWithOwners::set_subtype(const std::string& value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:plaid.AccountWithOwners.subtype)
}
inline std::string* AccountWithOwners::mutable_subtype() {
  // @@protoc_insertion_point(field_mutable:plaid.AccountWithOwners.subtype)
  return _internal_mutable_subtype();
}
inline const std::string& AccountWithOwners::_internal_subtype() const {
  return subtype_.GetNoArena();
}
inline void AccountWithOwners::_internal_set_subtype(const std::string& value) {
  
  subtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountWithOwners::set_subtype(std::string&& value) {
  
  subtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AccountWithOwners.subtype)
}
inline void AccountWithOwners::set_subtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AccountWithOwners.subtype)
}
inline void AccountWithOwners::set_subtype(const char* value, size_t size) {
  
  subtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AccountWithOwners.subtype)
}
inline std::string* AccountWithOwners::_internal_mutable_subtype() {
  
  return subtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountWithOwners::release_subtype() {
  // @@protoc_insertion_point(field_release:plaid.AccountWithOwners.subtype)
  
  return subtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWithOwners::set_allocated_subtype(std::string* subtype) {
  if (subtype != nullptr) {
    
  } else {
    
  }
  subtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subtype);
  // @@protoc_insertion_point(field_set_allocated:plaid.AccountWithOwners.subtype)
}

// string type = 8;
inline void AccountWithOwners::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountWithOwners::type() const {
  // @@protoc_insertion_point(field_get:plaid.AccountWithOwners.type)
  return _internal_type();
}
inline void AccountWithOwners::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:plaid.AccountWithOwners.type)
}
inline std::string* AccountWithOwners::mutable_type() {
  // @@protoc_insertion_point(field_mutable:plaid.AccountWithOwners.type)
  return _internal_mutable_type();
}
inline const std::string& AccountWithOwners::_internal_type() const {
  return type_.GetNoArena();
}
inline void AccountWithOwners::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountWithOwners::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AccountWithOwners.type)
}
inline void AccountWithOwners::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AccountWithOwners.type)
}
inline void AccountWithOwners::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AccountWithOwners.type)
}
inline std::string* AccountWithOwners::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountWithOwners::release_type() {
  // @@protoc_insertion_point(field_release:plaid.AccountWithOwners.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWithOwners::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:plaid.AccountWithOwners.type)
}

// string verification_status = 9;
inline void AccountWithOwners::clear_verification_status() {
  verification_status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountWithOwners::verification_status() const {
  // @@protoc_insertion_point(field_get:plaid.AccountWithOwners.verification_status)
  return _internal_verification_status();
}
inline void AccountWithOwners::set_verification_status(const std::string& value) {
  _internal_set_verification_status(value);
  // @@protoc_insertion_point(field_set:plaid.AccountWithOwners.verification_status)
}
inline std::string* AccountWithOwners::mutable_verification_status() {
  // @@protoc_insertion_point(field_mutable:plaid.AccountWithOwners.verification_status)
  return _internal_mutable_verification_status();
}
inline const std::string& AccountWithOwners::_internal_verification_status() const {
  return verification_status_.GetNoArena();
}
inline void AccountWithOwners::_internal_set_verification_status(const std::string& value) {
  
  verification_status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountWithOwners::set_verification_status(std::string&& value) {
  
  verification_status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.AccountWithOwners.verification_status)
}
inline void AccountWithOwners::set_verification_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  verification_status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.AccountWithOwners.verification_status)
}
inline void AccountWithOwners::set_verification_status(const char* value, size_t size) {
  
  verification_status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.AccountWithOwners.verification_status)
}
inline std::string* AccountWithOwners::_internal_mutable_verification_status() {
  
  return verification_status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountWithOwners::release_verification_status() {
  // @@protoc_insertion_point(field_release:plaid.AccountWithOwners.verification_status)
  
  return verification_status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWithOwners::set_allocated_verification_status(std::string* verification_status) {
  if (verification_status != nullptr) {
    
  } else {
    
  }
  verification_status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verification_status);
  // @@protoc_insertion_point(field_set_allocated:plaid.AccountWithOwners.verification_status)
}

// -------------------------------------------------------------------

// GetIdentityResponse

// string request_id = 1;
inline void GetIdentityResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIdentityResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetIdentityResponse.request_id)
  return _internal_request_id();
}
inline void GetIdentityResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetIdentityResponse.request_id)
}
inline std::string* GetIdentityResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetIdentityResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetIdentityResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void GetIdentityResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetIdentityResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetIdentityResponse.request_id)
}
inline void GetIdentityResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetIdentityResponse.request_id)
}
inline void GetIdentityResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetIdentityResponse.request_id)
}
inline std::string* GetIdentityResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIdentityResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.GetIdentityResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIdentityResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetIdentityResponse.request_id)
}

// repeated .plaid.AccountWithOwners accounts = 2;
inline int GetIdentityResponse::_internal_accounts_size() const {
  return accounts_.size();
}
inline int GetIdentityResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline void GetIdentityResponse::clear_accounts() {
  accounts_.Clear();
}
inline ::plaid::AccountWithOwners* GetIdentityResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetIdentityResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::AccountWithOwners >*
GetIdentityResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetIdentityResponse.accounts)
  return &accounts_;
}
inline const ::plaid::AccountWithOwners& GetIdentityResponse::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::plaid::AccountWithOwners& GetIdentityResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetIdentityResponse.accounts)
  return _internal_accounts(index);
}
inline ::plaid::AccountWithOwners* GetIdentityResponse::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::plaid::AccountWithOwners* GetIdentityResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:plaid.GetIdentityResponse.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::AccountWithOwners >&
GetIdentityResponse::accounts() const {
  // @@protoc_insertion_point(field_list:plaid.GetIdentityResponse.accounts)
  return accounts_;
}

// .plaid.Item item = 3;
inline bool GetIdentityResponse::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool GetIdentityResponse::has_item() const {
  return _internal_has_item();
}
inline void GetIdentityResponse::clear_item() {
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::plaid::Item& GetIdentityResponse::_internal_item() const {
  const ::plaid::Item* p = item_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::Item*>(
      &::plaid::_Item_default_instance_);
}
inline const ::plaid::Item& GetIdentityResponse::item() const {
  // @@protoc_insertion_point(field_get:plaid.GetIdentityResponse.item)
  return _internal_item();
}
inline ::plaid::Item* GetIdentityResponse::release_item() {
  // @@protoc_insertion_point(field_release:plaid.GetIdentityResponse.item)
  
  ::plaid::Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::plaid::Item* GetIdentityResponse::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::Item>(GetArenaNoVirtual());
    item_ = p;
  }
  return item_;
}
inline ::plaid::Item* GetIdentityResponse::mutable_item() {
  // @@protoc_insertion_point(field_mutable:plaid.GetIdentityResponse.item)
  return _internal_mutable_item();
}
inline void GetIdentityResponse::set_allocated_item(::plaid::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetIdentityResponse.item)
}

// -------------------------------------------------------------------

// Income

// repeated .plaid.IncomeStream income_streams = 1;
inline int Income::_internal_income_streams_size() const {
  return income_streams_.size();
}
inline int Income::income_streams_size() const {
  return _internal_income_streams_size();
}
inline void Income::clear_income_streams() {
  income_streams_.Clear();
}
inline ::plaid::IncomeStream* Income::mutable_income_streams(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.Income.income_streams)
  return income_streams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::IncomeStream >*
Income::mutable_income_streams() {
  // @@protoc_insertion_point(field_mutable_list:plaid.Income.income_streams)
  return &income_streams_;
}
inline const ::plaid::IncomeStream& Income::_internal_income_streams(int index) const {
  return income_streams_.Get(index);
}
inline const ::plaid::IncomeStream& Income::income_streams(int index) const {
  // @@protoc_insertion_point(field_get:plaid.Income.income_streams)
  return _internal_income_streams(index);
}
inline ::plaid::IncomeStream* Income::_internal_add_income_streams() {
  return income_streams_.Add();
}
inline ::plaid::IncomeStream* Income::add_income_streams() {
  // @@protoc_insertion_point(field_add:plaid.Income.income_streams)
  return _internal_add_income_streams();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::IncomeStream >&
Income::income_streams() const {
  // @@protoc_insertion_point(field_list:plaid.Income.income_streams)
  return income_streams_;
}

// int64 last_year_income = 2;
inline void Income::clear_last_year_income() {
  last_year_income_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Income::_internal_last_year_income() const {
  return last_year_income_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Income::last_year_income() const {
  // @@protoc_insertion_point(field_get:plaid.Income.last_year_income)
  return _internal_last_year_income();
}
inline void Income::_internal_set_last_year_income(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_year_income_ = value;
}
inline void Income::set_last_year_income(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_year_income(value);
  // @@protoc_insertion_point(field_set:plaid.Income.last_year_income)
}

// int64 last_year_income_before_tax = 3;
inline void Income::clear_last_year_income_before_tax() {
  last_year_income_before_tax_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Income::_internal_last_year_income_before_tax() const {
  return last_year_income_before_tax_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Income::last_year_income_before_tax() const {
  // @@protoc_insertion_point(field_get:plaid.Income.last_year_income_before_tax)
  return _internal_last_year_income_before_tax();
}
inline void Income::_internal_set_last_year_income_before_tax(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_year_income_before_tax_ = value;
}
inline void Income::set_last_year_income_before_tax(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_year_income_before_tax(value);
  // @@protoc_insertion_point(field_set:plaid.Income.last_year_income_before_tax)
}

// int64 projected_yearly_income = 4;
inline void Income::clear_projected_yearly_income() {
  projected_yearly_income_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Income::_internal_projected_yearly_income() const {
  return projected_yearly_income_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Income::projected_yearly_income() const {
  // @@protoc_insertion_point(field_get:plaid.Income.projected_yearly_income)
  return _internal_projected_yearly_income();
}
inline void Income::_internal_set_projected_yearly_income(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  projected_yearly_income_ = value;
}
inline void Income::set_projected_yearly_income(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_projected_yearly_income(value);
  // @@protoc_insertion_point(field_set:plaid.Income.projected_yearly_income)
}

// int64 projected_yearly_income_before_tax = 5;
inline void Income::clear_projected_yearly_income_before_tax() {
  projected_yearly_income_before_tax_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Income::_internal_projected_yearly_income_before_tax() const {
  return projected_yearly_income_before_tax_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Income::projected_yearly_income_before_tax() const {
  // @@protoc_insertion_point(field_get:plaid.Income.projected_yearly_income_before_tax)
  return _internal_projected_yearly_income_before_tax();
}
inline void Income::_internal_set_projected_yearly_income_before_tax(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  projected_yearly_income_before_tax_ = value;
}
inline void Income::set_projected_yearly_income_before_tax(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_projected_yearly_income_before_tax(value);
  // @@protoc_insertion_point(field_set:plaid.Income.projected_yearly_income_before_tax)
}

// int64 max_number_of_overlapping_income_streams = 6;
inline void Income::clear_max_number_of_overlapping_income_streams() {
  max_number_of_overlapping_income_streams_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Income::_internal_max_number_of_overlapping_income_streams() const {
  return max_number_of_overlapping_income_streams_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Income::max_number_of_overlapping_income_streams() const {
  // @@protoc_insertion_point(field_get:plaid.Income.max_number_of_overlapping_income_streams)
  return _internal_max_number_of_overlapping_income_streams();
}
inline void Income::_internal_set_max_number_of_overlapping_income_streams(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_number_of_overlapping_income_streams_ = value;
}
inline void Income::set_max_number_of_overlapping_income_streams(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_number_of_overlapping_income_streams(value);
  // @@protoc_insertion_point(field_set:plaid.Income.max_number_of_overlapping_income_streams)
}

// int64 number_of_income_streams = 7;
inline void Income::clear_number_of_income_streams() {
  number_of_income_streams_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Income::_internal_number_of_income_streams() const {
  return number_of_income_streams_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Income::number_of_income_streams() const {
  // @@protoc_insertion_point(field_get:plaid.Income.number_of_income_streams)
  return _internal_number_of_income_streams();
}
inline void Income::_internal_set_number_of_income_streams(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  number_of_income_streams_ = value;
}
inline void Income::set_number_of_income_streams(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_number_of_income_streams(value);
  // @@protoc_insertion_point(field_set:plaid.Income.number_of_income_streams)
}

// -------------------------------------------------------------------

// IncomeStream

// double confidence = 1;
inline void IncomeStream::clear_confidence() {
  confidence_ = 0;
}
inline double IncomeStream::_internal_confidence() const {
  return confidence_;
}
inline double IncomeStream::confidence() const {
  // @@protoc_insertion_point(field_get:plaid.IncomeStream.confidence)
  return _internal_confidence();
}
inline void IncomeStream::_internal_set_confidence(double value) {
  
  confidence_ = value;
}
inline void IncomeStream::set_confidence(double value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:plaid.IncomeStream.confidence)
}

// int64 days = 2;
inline void IncomeStream::clear_days() {
  days_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IncomeStream::_internal_days() const {
  return days_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IncomeStream::days() const {
  // @@protoc_insertion_point(field_get:plaid.IncomeStream.days)
  return _internal_days();
}
inline void IncomeStream::_internal_set_days(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  days_ = value;
}
inline void IncomeStream::set_days(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_days(value);
  // @@protoc_insertion_point(field_set:plaid.IncomeStream.days)
}

// int64 monthly_income = 3;
inline void IncomeStream::clear_monthly_income() {
  monthly_income_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IncomeStream::_internal_monthly_income() const {
  return monthly_income_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IncomeStream::monthly_income() const {
  // @@protoc_insertion_point(field_get:plaid.IncomeStream.monthly_income)
  return _internal_monthly_income();
}
inline void IncomeStream::_internal_set_monthly_income(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  monthly_income_ = value;
}
inline void IncomeStream::set_monthly_income(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_monthly_income(value);
  // @@protoc_insertion_point(field_set:plaid.IncomeStream.monthly_income)
}

// string name = 4;
inline void IncomeStream::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IncomeStream::name() const {
  // @@protoc_insertion_point(field_get:plaid.IncomeStream.name)
  return _internal_name();
}
inline void IncomeStream::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:plaid.IncomeStream.name)
}
inline std::string* IncomeStream::mutable_name() {
  // @@protoc_insertion_point(field_mutable:plaid.IncomeStream.name)
  return _internal_mutable_name();
}
inline const std::string& IncomeStream::_internal_name() const {
  return name_.GetNoArena();
}
inline void IncomeStream::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IncomeStream::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.IncomeStream.name)
}
inline void IncomeStream::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.IncomeStream.name)
}
inline void IncomeStream::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.IncomeStream.name)
}
inline std::string* IncomeStream::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncomeStream::release_name() {
  // @@protoc_insertion_point(field_release:plaid.IncomeStream.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncomeStream::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:plaid.IncomeStream.name)
}

// -------------------------------------------------------------------

// GetIncomeRequest

// string client_id = 1;
inline void GetIncomeRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIncomeRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetIncomeRequest.client_id)
  return _internal_client_id();
}
inline void GetIncomeRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetIncomeRequest.client_id)
}
inline std::string* GetIncomeRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetIncomeRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& GetIncomeRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void GetIncomeRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetIncomeRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetIncomeRequest.client_id)
}
inline void GetIncomeRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetIncomeRequest.client_id)
}
inline void GetIncomeRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetIncomeRequest.client_id)
}
inline std::string* GetIncomeRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIncomeRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.GetIncomeRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIncomeRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetIncomeRequest.client_id)
}

// string secret = 2;
inline void GetIncomeRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIncomeRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.GetIncomeRequest.secret)
  return _internal_secret();
}
inline void GetIncomeRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.GetIncomeRequest.secret)
}
inline std::string* GetIncomeRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.GetIncomeRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& GetIncomeRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void GetIncomeRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetIncomeRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetIncomeRequest.secret)
}
inline void GetIncomeRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetIncomeRequest.secret)
}
inline void GetIncomeRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetIncomeRequest.secret)
}
inline std::string* GetIncomeRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIncomeRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.GetIncomeRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIncomeRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetIncomeRequest.secret)
}

// string access_token = 3;
inline void GetIncomeRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIncomeRequest::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.GetIncomeRequest.access_token)
  return _internal_access_token();
}
inline void GetIncomeRequest::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.GetIncomeRequest.access_token)
}
inline std::string* GetIncomeRequest::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.GetIncomeRequest.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& GetIncomeRequest::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void GetIncomeRequest::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetIncomeRequest::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetIncomeRequest.access_token)
}
inline void GetIncomeRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetIncomeRequest.access_token)
}
inline void GetIncomeRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetIncomeRequest.access_token)
}
inline std::string* GetIncomeRequest::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIncomeRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.GetIncomeRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIncomeRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetIncomeRequest.access_token)
}

// -------------------------------------------------------------------

// GetIncomeResponse

// string request_id = 1;
inline void GetIncomeResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIncomeResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetIncomeResponse.request_id)
  return _internal_request_id();
}
inline void GetIncomeResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetIncomeResponse.request_id)
}
inline std::string* GetIncomeResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetIncomeResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetIncomeResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void GetIncomeResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetIncomeResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetIncomeResponse.request_id)
}
inline void GetIncomeResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetIncomeResponse.request_id)
}
inline void GetIncomeResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetIncomeResponse.request_id)
}
inline std::string* GetIncomeResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIncomeResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.GetIncomeResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIncomeResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetIncomeResponse.request_id)
}

// .plaid.Income income = 2;
inline bool GetIncomeResponse::_internal_has_income() const {
  return this != internal_default_instance() && income_ != nullptr;
}
inline bool GetIncomeResponse::has_income() const {
  return _internal_has_income();
}
inline void GetIncomeResponse::clear_income() {
  if (GetArenaNoVirtual() == nullptr && income_ != nullptr) {
    delete income_;
  }
  income_ = nullptr;
}
inline const ::plaid::Income& GetIncomeResponse::_internal_income() const {
  const ::plaid::Income* p = income_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::Income*>(
      &::plaid::_Income_default_instance_);
}
inline const ::plaid::Income& GetIncomeResponse::income() const {
  // @@protoc_insertion_point(field_get:plaid.GetIncomeResponse.income)
  return _internal_income();
}
inline ::plaid::Income* GetIncomeResponse::release_income() {
  // @@protoc_insertion_point(field_release:plaid.GetIncomeResponse.income)
  
  ::plaid::Income* temp = income_;
  income_ = nullptr;
  return temp;
}
inline ::plaid::Income* GetIncomeResponse::_internal_mutable_income() {
  
  if (income_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::Income>(GetArenaNoVirtual());
    income_ = p;
  }
  return income_;
}
inline ::plaid::Income* GetIncomeResponse::mutable_income() {
  // @@protoc_insertion_point(field_mutable:plaid.GetIncomeResponse.income)
  return _internal_mutable_income();
}
inline void GetIncomeResponse::set_allocated_income(::plaid::Income* income) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete income_;
  }
  if (income) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      income = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, income, submessage_arena);
    }
    
  } else {
    
  }
  income_ = income;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetIncomeResponse.income)
}

// -------------------------------------------------------------------

// Institution

// repeated .plaid.Credential credentials = 1;
inline int Institution::_internal_credentials_size() const {
  return credentials_.size();
}
inline int Institution::credentials_size() const {
  return _internal_credentials_size();
}
inline void Institution::clear_credentials() {
  credentials_.Clear();
}
inline ::plaid::Credential* Institution::mutable_credentials(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.Institution.credentials)
  return credentials_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Credential >*
Institution::mutable_credentials() {
  // @@protoc_insertion_point(field_mutable_list:plaid.Institution.credentials)
  return &credentials_;
}
inline const ::plaid::Credential& Institution::_internal_credentials(int index) const {
  return credentials_.Get(index);
}
inline const ::plaid::Credential& Institution::credentials(int index) const {
  // @@protoc_insertion_point(field_get:plaid.Institution.credentials)
  return _internal_credentials(index);
}
inline ::plaid::Credential* Institution::_internal_add_credentials() {
  return credentials_.Add();
}
inline ::plaid::Credential* Institution::add_credentials() {
  // @@protoc_insertion_point(field_add:plaid.Institution.credentials)
  return _internal_add_credentials();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Credential >&
Institution::credentials() const {
  // @@protoc_insertion_point(field_list:plaid.Institution.credentials)
  return credentials_;
}

// bool has_mfa = 2;
inline void Institution::clear_has_mfa() {
  has_mfa_ = false;
}
inline bool Institution::_internal_has_mfa() const {
  return has_mfa_;
}
inline bool Institution::has_mfa() const {
  // @@protoc_insertion_point(field_get:plaid.Institution.has_mfa)
  return _internal_has_mfa();
}
inline void Institution::_internal_set_has_mfa(bool value) {
  
  has_mfa_ = value;
}
inline void Institution::set_has_mfa(bool value) {
  _internal_set_has_mfa(value);
  // @@protoc_insertion_point(field_set:plaid.Institution.has_mfa)
}

// string institution_id = 3;
inline void Institution::clear_institution_id() {
  institution_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Institution::institution_id() const {
  // @@protoc_insertion_point(field_get:plaid.Institution.institution_id)
  return _internal_institution_id();
}
inline void Institution::set_institution_id(const std::string& value) {
  _internal_set_institution_id(value);
  // @@protoc_insertion_point(field_set:plaid.Institution.institution_id)
}
inline std::string* Institution::mutable_institution_id() {
  // @@protoc_insertion_point(field_mutable:plaid.Institution.institution_id)
  return _internal_mutable_institution_id();
}
inline const std::string& Institution::_internal_institution_id() const {
  return institution_id_.GetNoArena();
}
inline void Institution::_internal_set_institution_id(const std::string& value) {
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Institution::set_institution_id(std::string&& value) {
  
  institution_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Institution.institution_id)
}
inline void Institution::set_institution_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Institution.institution_id)
}
inline void Institution::set_institution_id(const char* value, size_t size) {
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Institution.institution_id)
}
inline std::string* Institution::_internal_mutable_institution_id() {
  
  return institution_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Institution::release_institution_id() {
  // @@protoc_insertion_point(field_release:plaid.Institution.institution_id)
  
  return institution_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Institution::set_allocated_institution_id(std::string* institution_id) {
  if (institution_id != nullptr) {
    
  } else {
    
  }
  institution_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), institution_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.Institution.institution_id)
}

// repeated string mfa = 4;
inline int Institution::_internal_mfa_size() const {
  return mfa_.size();
}
inline int Institution::mfa_size() const {
  return _internal_mfa_size();
}
inline void Institution::clear_mfa() {
  mfa_.Clear();
}
inline std::string* Institution::add_mfa() {
  // @@protoc_insertion_point(field_add_mutable:plaid.Institution.mfa)
  return _internal_add_mfa();
}
inline const std::string& Institution::_internal_mfa(int index) const {
  return mfa_.Get(index);
}
inline const std::string& Institution::mfa(int index) const {
  // @@protoc_insertion_point(field_get:plaid.Institution.mfa)
  return _internal_mfa(index);
}
inline std::string* Institution::mutable_mfa(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.Institution.mfa)
  return mfa_.Mutable(index);
}
inline void Institution::set_mfa(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.Institution.mfa)
  mfa_.Mutable(index)->assign(value);
}
inline void Institution::set_mfa(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.Institution.mfa)
  mfa_.Mutable(index)->assign(std::move(value));
}
inline void Institution::set_mfa(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mfa_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.Institution.mfa)
}
inline void Institution::set_mfa(int index, const char* value, size_t size) {
  mfa_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.Institution.mfa)
}
inline std::string* Institution::_internal_add_mfa() {
  return mfa_.Add();
}
inline void Institution::add_mfa(const std::string& value) {
  mfa_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.Institution.mfa)
}
inline void Institution::add_mfa(std::string&& value) {
  mfa_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.Institution.mfa)
}
inline void Institution::add_mfa(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mfa_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.Institution.mfa)
}
inline void Institution::add_mfa(const char* value, size_t size) {
  mfa_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.Institution.mfa)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Institution::mfa() const {
  // @@protoc_insertion_point(field_list:plaid.Institution.mfa)
  return mfa_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Institution::mutable_mfa() {
  // @@protoc_insertion_point(field_mutable_list:plaid.Institution.mfa)
  return &mfa_;
}

// string name = 5;
inline void Institution::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Institution::name() const {
  // @@protoc_insertion_point(field_get:plaid.Institution.name)
  return _internal_name();
}
inline void Institution::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:plaid.Institution.name)
}
inline std::string* Institution::mutable_name() {
  // @@protoc_insertion_point(field_mutable:plaid.Institution.name)
  return _internal_mutable_name();
}
inline const std::string& Institution::_internal_name() const {
  return name_.GetNoArena();
}
inline void Institution::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Institution::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Institution.name)
}
inline void Institution::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Institution.name)
}
inline void Institution::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Institution.name)
}
inline std::string* Institution::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Institution::release_name() {
  // @@protoc_insertion_point(field_release:plaid.Institution.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Institution::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:plaid.Institution.name)
}

// repeated string products = 6;
inline int Institution::_internal_products_size() const {
  return products_.size();
}
inline int Institution::products_size() const {
  return _internal_products_size();
}
inline void Institution::clear_products() {
  products_.Clear();
}
inline std::string* Institution::add_products() {
  // @@protoc_insertion_point(field_add_mutable:plaid.Institution.products)
  return _internal_add_products();
}
inline const std::string& Institution::_internal_products(int index) const {
  return products_.Get(index);
}
inline const std::string& Institution::products(int index) const {
  // @@protoc_insertion_point(field_get:plaid.Institution.products)
  return _internal_products(index);
}
inline std::string* Institution::mutable_products(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.Institution.products)
  return products_.Mutable(index);
}
inline void Institution::set_products(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.Institution.products)
  products_.Mutable(index)->assign(value);
}
inline void Institution::set_products(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.Institution.products)
  products_.Mutable(index)->assign(std::move(value));
}
inline void Institution::set_products(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  products_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.Institution.products)
}
inline void Institution::set_products(int index, const char* value, size_t size) {
  products_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.Institution.products)
}
inline std::string* Institution::_internal_add_products() {
  return products_.Add();
}
inline void Institution::add_products(const std::string& value) {
  products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.Institution.products)
}
inline void Institution::add_products(std::string&& value) {
  products_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.Institution.products)
}
inline void Institution::add_products(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.Institution.products)
}
inline void Institution::add_products(const char* value, size_t size) {
  products_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.Institution.products)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Institution::products() const {
  // @@protoc_insertion_point(field_list:plaid.Institution.products)
  return products_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Institution::mutable_products() {
  // @@protoc_insertion_point(field_mutable_list:plaid.Institution.products)
  return &products_;
}

// repeated string country_codes = 7;
inline int Institution::_internal_country_codes_size() const {
  return country_codes_.size();
}
inline int Institution::country_codes_size() const {
  return _internal_country_codes_size();
}
inline void Institution::clear_country_codes() {
  country_codes_.Clear();
}
inline std::string* Institution::add_country_codes() {
  // @@protoc_insertion_point(field_add_mutable:plaid.Institution.country_codes)
  return _internal_add_country_codes();
}
inline const std::string& Institution::_internal_country_codes(int index) const {
  return country_codes_.Get(index);
}
inline const std::string& Institution::country_codes(int index) const {
  // @@protoc_insertion_point(field_get:plaid.Institution.country_codes)
  return _internal_country_codes(index);
}
inline std::string* Institution::mutable_country_codes(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.Institution.country_codes)
  return country_codes_.Mutable(index);
}
inline void Institution::set_country_codes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.Institution.country_codes)
  country_codes_.Mutable(index)->assign(value);
}
inline void Institution::set_country_codes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.Institution.country_codes)
  country_codes_.Mutable(index)->assign(std::move(value));
}
inline void Institution::set_country_codes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  country_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.Institution.country_codes)
}
inline void Institution::set_country_codes(int index, const char* value, size_t size) {
  country_codes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.Institution.country_codes)
}
inline std::string* Institution::_internal_add_country_codes() {
  return country_codes_.Add();
}
inline void Institution::add_country_codes(const std::string& value) {
  country_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.Institution.country_codes)
}
inline void Institution::add_country_codes(std::string&& value) {
  country_codes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.Institution.country_codes)
}
inline void Institution::add_country_codes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  country_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.Institution.country_codes)
}
inline void Institution::add_country_codes(const char* value, size_t size) {
  country_codes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.Institution.country_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Institution::country_codes() const {
  // @@protoc_insertion_point(field_list:plaid.Institution.country_codes)
  return country_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Institution::mutable_country_codes() {
  // @@protoc_insertion_point(field_mutable_list:plaid.Institution.country_codes)
  return &country_codes_;
}

// .plaid.InstitutionStatus status = 8;
inline bool Institution::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Institution::has_status() const {
  return _internal_has_status();
}
inline void Institution::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::plaid::InstitutionStatus& Institution::_internal_status() const {
  const ::plaid::InstitutionStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::InstitutionStatus*>(
      &::plaid::_InstitutionStatus_default_instance_);
}
inline const ::plaid::InstitutionStatus& Institution::status() const {
  // @@protoc_insertion_point(field_get:plaid.Institution.status)
  return _internal_status();
}
inline ::plaid::InstitutionStatus* Institution::release_status() {
  // @@protoc_insertion_point(field_release:plaid.Institution.status)
  
  ::plaid::InstitutionStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::plaid::InstitutionStatus* Institution::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::InstitutionStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::plaid::InstitutionStatus* Institution::mutable_status() {
  // @@protoc_insertion_point(field_mutable:plaid.Institution.status)
  return _internal_mutable_status();
}
inline void Institution::set_allocated_status(::plaid::InstitutionStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:plaid.Institution.status)
}

// string primary_color = 9;
inline void Institution::clear_primary_color() {
  primary_color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Institution::primary_color() const {
  // @@protoc_insertion_point(field_get:plaid.Institution.primary_color)
  return _internal_primary_color();
}
inline void Institution::set_primary_color(const std::string& value) {
  _internal_set_primary_color(value);
  // @@protoc_insertion_point(field_set:plaid.Institution.primary_color)
}
inline std::string* Institution::mutable_primary_color() {
  // @@protoc_insertion_point(field_mutable:plaid.Institution.primary_color)
  return _internal_mutable_primary_color();
}
inline const std::string& Institution::_internal_primary_color() const {
  return primary_color_.GetNoArena();
}
inline void Institution::_internal_set_primary_color(const std::string& value) {
  
  primary_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Institution::set_primary_color(std::string&& value) {
  
  primary_color_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Institution.primary_color)
}
inline void Institution::set_primary_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  primary_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Institution.primary_color)
}
inline void Institution::set_primary_color(const char* value, size_t size) {
  
  primary_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Institution.primary_color)
}
inline std::string* Institution::_internal_mutable_primary_color() {
  
  return primary_color_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Institution::release_primary_color() {
  // @@protoc_insertion_point(field_release:plaid.Institution.primary_color)
  
  return primary_color_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Institution::set_allocated_primary_color(std::string* primary_color) {
  if (primary_color != nullptr) {
    
  } else {
    
  }
  primary_color_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primary_color);
  // @@protoc_insertion_point(field_set_allocated:plaid.Institution.primary_color)
}

// string url = 10;
inline void Institution::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Institution::url() const {
  // @@protoc_insertion_point(field_get:plaid.Institution.url)
  return _internal_url();
}
inline void Institution::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:plaid.Institution.url)
}
inline std::string* Institution::mutable_url() {
  // @@protoc_insertion_point(field_mutable:plaid.Institution.url)
  return _internal_mutable_url();
}
inline const std::string& Institution::_internal_url() const {
  return url_.GetNoArena();
}
inline void Institution::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Institution::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Institution.url)
}
inline void Institution::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Institution.url)
}
inline void Institution::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Institution.url)
}
inline std::string* Institution::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Institution::release_url() {
  // @@protoc_insertion_point(field_release:plaid.Institution.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Institution::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:plaid.Institution.url)
}

// string logo = 11;
inline void Institution::clear_logo() {
  logo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Institution::logo() const {
  // @@protoc_insertion_point(field_get:plaid.Institution.logo)
  return _internal_logo();
}
inline void Institution::set_logo(const std::string& value) {
  _internal_set_logo(value);
  // @@protoc_insertion_point(field_set:plaid.Institution.logo)
}
inline std::string* Institution::mutable_logo() {
  // @@protoc_insertion_point(field_mutable:plaid.Institution.logo)
  return _internal_mutable_logo();
}
inline const std::string& Institution::_internal_logo() const {
  return logo_.GetNoArena();
}
inline void Institution::_internal_set_logo(const std::string& value) {
  
  logo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Institution::set_logo(std::string&& value) {
  
  logo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Institution.logo)
}
inline void Institution::set_logo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Institution.logo)
}
inline void Institution::set_logo(const char* value, size_t size) {
  
  logo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Institution.logo)
}
inline std::string* Institution::_internal_mutable_logo() {
  
  return logo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Institution::release_logo() {
  // @@protoc_insertion_point(field_release:plaid.Institution.logo)
  
  return logo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Institution::set_allocated_logo(std::string* logo) {
  if (logo != nullptr) {
    
  } else {
    
  }
  logo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logo);
  // @@protoc_insertion_point(field_set_allocated:plaid.Institution.logo)
}

// -------------------------------------------------------------------

// InstitutionStatus

// .plaid.ItemLogins item_logins = 1;
inline bool InstitutionStatus::_internal_has_item_logins() const {
  return this != internal_default_instance() && item_logins_ != nullptr;
}
inline bool InstitutionStatus::has_item_logins() const {
  return _internal_has_item_logins();
}
inline void InstitutionStatus::clear_item_logins() {
  if (GetArenaNoVirtual() == nullptr && item_logins_ != nullptr) {
    delete item_logins_;
  }
  item_logins_ = nullptr;
}
inline const ::plaid::ItemLogins& InstitutionStatus::_internal_item_logins() const {
  const ::plaid::ItemLogins* p = item_logins_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::ItemLogins*>(
      &::plaid::_ItemLogins_default_instance_);
}
inline const ::plaid::ItemLogins& InstitutionStatus::item_logins() const {
  // @@protoc_insertion_point(field_get:plaid.InstitutionStatus.item_logins)
  return _internal_item_logins();
}
inline ::plaid::ItemLogins* InstitutionStatus::release_item_logins() {
  // @@protoc_insertion_point(field_release:plaid.InstitutionStatus.item_logins)
  
  ::plaid::ItemLogins* temp = item_logins_;
  item_logins_ = nullptr;
  return temp;
}
inline ::plaid::ItemLogins* InstitutionStatus::_internal_mutable_item_logins() {
  
  if (item_logins_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::ItemLogins>(GetArenaNoVirtual());
    item_logins_ = p;
  }
  return item_logins_;
}
inline ::plaid::ItemLogins* InstitutionStatus::mutable_item_logins() {
  // @@protoc_insertion_point(field_mutable:plaid.InstitutionStatus.item_logins)
  return _internal_mutable_item_logins();
}
inline void InstitutionStatus::set_allocated_item_logins(::plaid::ItemLogins* item_logins) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_logins_;
  }
  if (item_logins) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item_logins = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_logins, submessage_arena);
    }
    
  } else {
    
  }
  item_logins_ = item_logins;
  // @@protoc_insertion_point(field_set_allocated:plaid.InstitutionStatus.item_logins)
}

// -------------------------------------------------------------------

// ItemLogins

// string status = 1;
inline void ItemLogins::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ItemLogins::status() const {
  // @@protoc_insertion_point(field_get:plaid.ItemLogins.status)
  return _internal_status();
}
inline void ItemLogins::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:plaid.ItemLogins.status)
}
inline std::string* ItemLogins::mutable_status() {
  // @@protoc_insertion_point(field_mutable:plaid.ItemLogins.status)
  return _internal_mutable_status();
}
inline const std::string& ItemLogins::_internal_status() const {
  return status_.GetNoArena();
}
inline void ItemLogins::_internal_set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ItemLogins::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.ItemLogins.status)
}
inline void ItemLogins::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.ItemLogins.status)
}
inline void ItemLogins::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.ItemLogins.status)
}
inline std::string* ItemLogins::_internal_mutable_status() {
  
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ItemLogins::release_status() {
  // @@protoc_insertion_point(field_release:plaid.ItemLogins.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ItemLogins::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:plaid.ItemLogins.status)
}

// string last_status_change = 2;
inline void ItemLogins::clear_last_status_change() {
  last_status_change_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ItemLogins::last_status_change() const {
  // @@protoc_insertion_point(field_get:plaid.ItemLogins.last_status_change)
  return _internal_last_status_change();
}
inline void ItemLogins::set_last_status_change(const std::string& value) {
  _internal_set_last_status_change(value);
  // @@protoc_insertion_point(field_set:plaid.ItemLogins.last_status_change)
}
inline std::string* ItemLogins::mutable_last_status_change() {
  // @@protoc_insertion_point(field_mutable:plaid.ItemLogins.last_status_change)
  return _internal_mutable_last_status_change();
}
inline const std::string& ItemLogins::_internal_last_status_change() const {
  return last_status_change_.GetNoArena();
}
inline void ItemLogins::_internal_set_last_status_change(const std::string& value) {
  
  last_status_change_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ItemLogins::set_last_status_change(std::string&& value) {
  
  last_status_change_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.ItemLogins.last_status_change)
}
inline void ItemLogins::set_last_status_change(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_status_change_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.ItemLogins.last_status_change)
}
inline void ItemLogins::set_last_status_change(const char* value, size_t size) {
  
  last_status_change_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.ItemLogins.last_status_change)
}
inline std::string* ItemLogins::_internal_mutable_last_status_change() {
  
  return last_status_change_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ItemLogins::release_last_status_change() {
  // @@protoc_insertion_point(field_release:plaid.ItemLogins.last_status_change)
  
  return last_status_change_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ItemLogins::set_allocated_last_status_change(std::string* last_status_change) {
  if (last_status_change != nullptr) {
    
  } else {
    
  }
  last_status_change_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_status_change);
  // @@protoc_insertion_point(field_set_allocated:plaid.ItemLogins.last_status_change)
}

// .plaid.InstitutionStatusBreakdown breakdown = 3;
inline bool ItemLogins::_internal_has_breakdown() const {
  return this != internal_default_instance() && breakdown_ != nullptr;
}
inline bool ItemLogins::has_breakdown() const {
  return _internal_has_breakdown();
}
inline void ItemLogins::clear_breakdown() {
  if (GetArenaNoVirtual() == nullptr && breakdown_ != nullptr) {
    delete breakdown_;
  }
  breakdown_ = nullptr;
}
inline const ::plaid::InstitutionStatusBreakdown& ItemLogins::_internal_breakdown() const {
  const ::plaid::InstitutionStatusBreakdown* p = breakdown_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::InstitutionStatusBreakdown*>(
      &::plaid::_InstitutionStatusBreakdown_default_instance_);
}
inline const ::plaid::InstitutionStatusBreakdown& ItemLogins::breakdown() const {
  // @@protoc_insertion_point(field_get:plaid.ItemLogins.breakdown)
  return _internal_breakdown();
}
inline ::plaid::InstitutionStatusBreakdown* ItemLogins::release_breakdown() {
  // @@protoc_insertion_point(field_release:plaid.ItemLogins.breakdown)
  
  ::plaid::InstitutionStatusBreakdown* temp = breakdown_;
  breakdown_ = nullptr;
  return temp;
}
inline ::plaid::InstitutionStatusBreakdown* ItemLogins::_internal_mutable_breakdown() {
  
  if (breakdown_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::InstitutionStatusBreakdown>(GetArenaNoVirtual());
    breakdown_ = p;
  }
  return breakdown_;
}
inline ::plaid::InstitutionStatusBreakdown* ItemLogins::mutable_breakdown() {
  // @@protoc_insertion_point(field_mutable:plaid.ItemLogins.breakdown)
  return _internal_mutable_breakdown();
}
inline void ItemLogins::set_allocated_breakdown(::plaid::InstitutionStatusBreakdown* breakdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete breakdown_;
  }
  if (breakdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      breakdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, breakdown, submessage_arena);
    }
    
  } else {
    
  }
  breakdown_ = breakdown;
  // @@protoc_insertion_point(field_set_allocated:plaid.ItemLogins.breakdown)
}

// -------------------------------------------------------------------

// InstitutionStatusBreakdown

// double success = 1;
inline void InstitutionStatusBreakdown::clear_success() {
  success_ = 0;
}
inline double InstitutionStatusBreakdown::_internal_success() const {
  return success_;
}
inline double InstitutionStatusBreakdown::success() const {
  // @@protoc_insertion_point(field_get:plaid.InstitutionStatusBreakdown.success)
  return _internal_success();
}
inline void InstitutionStatusBreakdown::_internal_set_success(double value) {
  
  success_ = value;
}
inline void InstitutionStatusBreakdown::set_success(double value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:plaid.InstitutionStatusBreakdown.success)
}

// double error_plaid = 2;
inline void InstitutionStatusBreakdown::clear_error_plaid() {
  error_plaid_ = 0;
}
inline double InstitutionStatusBreakdown::_internal_error_plaid() const {
  return error_plaid_;
}
inline double InstitutionStatusBreakdown::error_plaid() const {
  // @@protoc_insertion_point(field_get:plaid.InstitutionStatusBreakdown.error_plaid)
  return _internal_error_plaid();
}
inline void InstitutionStatusBreakdown::_internal_set_error_plaid(double value) {
  
  error_plaid_ = value;
}
inline void InstitutionStatusBreakdown::set_error_plaid(double value) {
  _internal_set_error_plaid(value);
  // @@protoc_insertion_point(field_set:plaid.InstitutionStatusBreakdown.error_plaid)
}

// double error_institution = 3;
inline void InstitutionStatusBreakdown::clear_error_institution() {
  error_institution_ = 0;
}
inline double InstitutionStatusBreakdown::_internal_error_institution() const {
  return error_institution_;
}
inline double InstitutionStatusBreakdown::error_institution() const {
  // @@protoc_insertion_point(field_get:plaid.InstitutionStatusBreakdown.error_institution)
  return _internal_error_institution();
}
inline void InstitutionStatusBreakdown::_internal_set_error_institution(double value) {
  
  error_institution_ = value;
}
inline void InstitutionStatusBreakdown::set_error_institution(double value) {
  _internal_set_error_institution(value);
  // @@protoc_insertion_point(field_set:plaid.InstitutionStatusBreakdown.error_institution)
}

// -------------------------------------------------------------------

// Credential

// string label = 1;
inline void Credential::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Credential::label() const {
  // @@protoc_insertion_point(field_get:plaid.Credential.label)
  return _internal_label();
}
inline void Credential::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:plaid.Credential.label)
}
inline std::string* Credential::mutable_label() {
  // @@protoc_insertion_point(field_mutable:plaid.Credential.label)
  return _internal_mutable_label();
}
inline const std::string& Credential::_internal_label() const {
  return label_.GetNoArena();
}
inline void Credential::_internal_set_label(const std::string& value) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Credential::set_label(std::string&& value) {
  
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Credential.label)
}
inline void Credential::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Credential.label)
}
inline void Credential::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Credential.label)
}
inline std::string* Credential::_internal_mutable_label() {
  
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Credential::release_label() {
  // @@protoc_insertion_point(field_release:plaid.Credential.label)
  
  return label_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Credential::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:plaid.Credential.label)
}

// string name = 2;
inline void Credential::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Credential::name() const {
  // @@protoc_insertion_point(field_get:plaid.Credential.name)
  return _internal_name();
}
inline void Credential::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:plaid.Credential.name)
}
inline std::string* Credential::mutable_name() {
  // @@protoc_insertion_point(field_mutable:plaid.Credential.name)
  return _internal_mutable_name();
}
inline const std::string& Credential::_internal_name() const {
  return name_.GetNoArena();
}
inline void Credential::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Credential::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Credential.name)
}
inline void Credential::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Credential.name)
}
inline void Credential::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Credential.name)
}
inline std::string* Credential::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Credential::release_name() {
  // @@protoc_insertion_point(field_release:plaid.Credential.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Credential::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:plaid.Credential.name)
}

// string type = 3;
inline void Credential::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Credential::type() const {
  // @@protoc_insertion_point(field_get:plaid.Credential.type)
  return _internal_type();
}
inline void Credential::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:plaid.Credential.type)
}
inline std::string* Credential::mutable_type() {
  // @@protoc_insertion_point(field_mutable:plaid.Credential.type)
  return _internal_mutable_type();
}
inline const std::string& Credential::_internal_type() const {
  return type_.GetNoArena();
}
inline void Credential::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Credential::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Credential.type)
}
inline void Credential::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Credential.type)
}
inline void Credential::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Credential.type)
}
inline std::string* Credential::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Credential::release_type() {
  // @@protoc_insertion_point(field_release:plaid.Credential.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Credential::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:plaid.Credential.type)
}

// -------------------------------------------------------------------

// GetInstitutionsRequest

// string client_id = 1;
inline void GetInstitutionsRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInstitutionsRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionsRequest.client_id)
  return _internal_client_id();
}
inline void GetInstitutionsRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetInstitutionsRequest.client_id)
}
inline std::string* GetInstitutionsRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInstitutionsRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& GetInstitutionsRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void GetInstitutionsRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInstitutionsRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetInstitutionsRequest.client_id)
}
inline void GetInstitutionsRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetInstitutionsRequest.client_id)
}
inline void GetInstitutionsRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInstitutionsRequest.client_id)
}
inline std::string* GetInstitutionsRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInstitutionsRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.GetInstitutionsRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInstitutionsRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInstitutionsRequest.client_id)
}

// string secret = 2;
inline void GetInstitutionsRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInstitutionsRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionsRequest.secret)
  return _internal_secret();
}
inline void GetInstitutionsRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.GetInstitutionsRequest.secret)
}
inline std::string* GetInstitutionsRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInstitutionsRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& GetInstitutionsRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void GetInstitutionsRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInstitutionsRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetInstitutionsRequest.secret)
}
inline void GetInstitutionsRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetInstitutionsRequest.secret)
}
inline void GetInstitutionsRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInstitutionsRequest.secret)
}
inline std::string* GetInstitutionsRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInstitutionsRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.GetInstitutionsRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInstitutionsRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInstitutionsRequest.secret)
}

// int64 count = 3;
inline void GetInstitutionsRequest::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInstitutionsRequest::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInstitutionsRequest::count() const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionsRequest.count)
  return _internal_count();
}
inline void GetInstitutionsRequest::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void GetInstitutionsRequest::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:plaid.GetInstitutionsRequest.count)
}

// int64 offset = 4;
inline void GetInstitutionsRequest::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInstitutionsRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInstitutionsRequest::offset() const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionsRequest.offset)
  return _internal_offset();
}
inline void GetInstitutionsRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void GetInstitutionsRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:plaid.GetInstitutionsRequest.offset)
}

// .plaid.GetInstitutionsOptions options = 5;
inline bool GetInstitutionsRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool GetInstitutionsRequest::has_options() const {
  return _internal_has_options();
}
inline void GetInstitutionsRequest::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::plaid::GetInstitutionsOptions& GetInstitutionsRequest::_internal_options() const {
  const ::plaid::GetInstitutionsOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::GetInstitutionsOptions*>(
      &::plaid::_GetInstitutionsOptions_default_instance_);
}
inline const ::plaid::GetInstitutionsOptions& GetInstitutionsRequest::options() const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionsRequest.options)
  return _internal_options();
}
inline ::plaid::GetInstitutionsOptions* GetInstitutionsRequest::release_options() {
  // @@protoc_insertion_point(field_release:plaid.GetInstitutionsRequest.options)
  
  ::plaid::GetInstitutionsOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::plaid::GetInstitutionsOptions* GetInstitutionsRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::GetInstitutionsOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::plaid::GetInstitutionsOptions* GetInstitutionsRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInstitutionsRequest.options)
  return _internal_mutable_options();
}
inline void GetInstitutionsRequest::set_allocated_options(::plaid::GetInstitutionsOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInstitutionsRequest.options)
}

// -------------------------------------------------------------------

// GetInstitutionsOptions

// repeated string products = 1;
inline int GetInstitutionsOptions::_internal_products_size() const {
  return products_.size();
}
inline int GetInstitutionsOptions::products_size() const {
  return _internal_products_size();
}
inline void GetInstitutionsOptions::clear_products() {
  products_.Clear();
}
inline std::string* GetInstitutionsOptions::add_products() {
  // @@protoc_insertion_point(field_add_mutable:plaid.GetInstitutionsOptions.products)
  return _internal_add_products();
}
inline const std::string& GetInstitutionsOptions::_internal_products(int index) const {
  return products_.Get(index);
}
inline const std::string& GetInstitutionsOptions::products(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionsOptions.products)
  return _internal_products(index);
}
inline std::string* GetInstitutionsOptions::mutable_products(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetInstitutionsOptions.products)
  return products_.Mutable(index);
}
inline void GetInstitutionsOptions::set_products(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.GetInstitutionsOptions.products)
  products_.Mutable(index)->assign(value);
}
inline void GetInstitutionsOptions::set_products(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.GetInstitutionsOptions.products)
  products_.Mutable(index)->assign(std::move(value));
}
inline void GetInstitutionsOptions::set_products(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  products_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.GetInstitutionsOptions.products)
}
inline void GetInstitutionsOptions::set_products(int index, const char* value, size_t size) {
  products_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInstitutionsOptions.products)
}
inline std::string* GetInstitutionsOptions::_internal_add_products() {
  return products_.Add();
}
inline void GetInstitutionsOptions::add_products(const std::string& value) {
  products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.GetInstitutionsOptions.products)
}
inline void GetInstitutionsOptions::add_products(std::string&& value) {
  products_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.GetInstitutionsOptions.products)
}
inline void GetInstitutionsOptions::add_products(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.GetInstitutionsOptions.products)
}
inline void GetInstitutionsOptions::add_products(const char* value, size_t size) {
  products_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.GetInstitutionsOptions.products)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetInstitutionsOptions::products() const {
  // @@protoc_insertion_point(field_list:plaid.GetInstitutionsOptions.products)
  return products_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetInstitutionsOptions::mutable_products() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetInstitutionsOptions.products)
  return &products_;
}

// bool include_optional_metadata = 2;
inline void GetInstitutionsOptions::clear_include_optional_metadata() {
  include_optional_metadata_ = false;
}
inline bool GetInstitutionsOptions::_internal_include_optional_metadata() const {
  return include_optional_metadata_;
}
inline bool GetInstitutionsOptions::include_optional_metadata() const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionsOptions.include_optional_metadata)
  return _internal_include_optional_metadata();
}
inline void GetInstitutionsOptions::_internal_set_include_optional_metadata(bool value) {
  
  include_optional_metadata_ = value;
}
inline void GetInstitutionsOptions::set_include_optional_metadata(bool value) {
  _internal_set_include_optional_metadata(value);
  // @@protoc_insertion_point(field_set:plaid.GetInstitutionsOptions.include_optional_metadata)
}

// repeated string country_codes = 3;
inline int GetInstitutionsOptions::_internal_country_codes_size() const {
  return country_codes_.size();
}
inline int GetInstitutionsOptions::country_codes_size() const {
  return _internal_country_codes_size();
}
inline void GetInstitutionsOptions::clear_country_codes() {
  country_codes_.Clear();
}
inline std::string* GetInstitutionsOptions::add_country_codes() {
  // @@protoc_insertion_point(field_add_mutable:plaid.GetInstitutionsOptions.country_codes)
  return _internal_add_country_codes();
}
inline const std::string& GetInstitutionsOptions::_internal_country_codes(int index) const {
  return country_codes_.Get(index);
}
inline const std::string& GetInstitutionsOptions::country_codes(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionsOptions.country_codes)
  return _internal_country_codes(index);
}
inline std::string* GetInstitutionsOptions::mutable_country_codes(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetInstitutionsOptions.country_codes)
  return country_codes_.Mutable(index);
}
inline void GetInstitutionsOptions::set_country_codes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.GetInstitutionsOptions.country_codes)
  country_codes_.Mutable(index)->assign(value);
}
inline void GetInstitutionsOptions::set_country_codes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.GetInstitutionsOptions.country_codes)
  country_codes_.Mutable(index)->assign(std::move(value));
}
inline void GetInstitutionsOptions::set_country_codes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  country_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.GetInstitutionsOptions.country_codes)
}
inline void GetInstitutionsOptions::set_country_codes(int index, const char* value, size_t size) {
  country_codes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInstitutionsOptions.country_codes)
}
inline std::string* GetInstitutionsOptions::_internal_add_country_codes() {
  return country_codes_.Add();
}
inline void GetInstitutionsOptions::add_country_codes(const std::string& value) {
  country_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.GetInstitutionsOptions.country_codes)
}
inline void GetInstitutionsOptions::add_country_codes(std::string&& value) {
  country_codes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.GetInstitutionsOptions.country_codes)
}
inline void GetInstitutionsOptions::add_country_codes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  country_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.GetInstitutionsOptions.country_codes)
}
inline void GetInstitutionsOptions::add_country_codes(const char* value, size_t size) {
  country_codes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.GetInstitutionsOptions.country_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetInstitutionsOptions::country_codes() const {
  // @@protoc_insertion_point(field_list:plaid.GetInstitutionsOptions.country_codes)
  return country_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetInstitutionsOptions::mutable_country_codes() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetInstitutionsOptions.country_codes)
  return &country_codes_;
}

// -------------------------------------------------------------------

// GetInstitutionsResponse

// string request_id = 1;
inline void GetInstitutionsResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInstitutionsResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionsResponse.request_id)
  return _internal_request_id();
}
inline void GetInstitutionsResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetInstitutionsResponse.request_id)
}
inline std::string* GetInstitutionsResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInstitutionsResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetInstitutionsResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void GetInstitutionsResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInstitutionsResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetInstitutionsResponse.request_id)
}
inline void GetInstitutionsResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetInstitutionsResponse.request_id)
}
inline void GetInstitutionsResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInstitutionsResponse.request_id)
}
inline std::string* GetInstitutionsResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInstitutionsResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.GetInstitutionsResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInstitutionsResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInstitutionsResponse.request_id)
}

// repeated .plaid.Institution institutions = 2;
inline int GetInstitutionsResponse::_internal_institutions_size() const {
  return institutions_.size();
}
inline int GetInstitutionsResponse::institutions_size() const {
  return _internal_institutions_size();
}
inline void GetInstitutionsResponse::clear_institutions() {
  institutions_.Clear();
}
inline ::plaid::Institution* GetInstitutionsResponse::mutable_institutions(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetInstitutionsResponse.institutions)
  return institutions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Institution >*
GetInstitutionsResponse::mutable_institutions() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetInstitutionsResponse.institutions)
  return &institutions_;
}
inline const ::plaid::Institution& GetInstitutionsResponse::_internal_institutions(int index) const {
  return institutions_.Get(index);
}
inline const ::plaid::Institution& GetInstitutionsResponse::institutions(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionsResponse.institutions)
  return _internal_institutions(index);
}
inline ::plaid::Institution* GetInstitutionsResponse::_internal_add_institutions() {
  return institutions_.Add();
}
inline ::plaid::Institution* GetInstitutionsResponse::add_institutions() {
  // @@protoc_insertion_point(field_add:plaid.GetInstitutionsResponse.institutions)
  return _internal_add_institutions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Institution >&
GetInstitutionsResponse::institutions() const {
  // @@protoc_insertion_point(field_list:plaid.GetInstitutionsResponse.institutions)
  return institutions_;
}

// int64 total = 3;
inline void GetInstitutionsResponse::clear_total() {
  total_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInstitutionsResponse::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInstitutionsResponse::total() const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionsResponse.total)
  return _internal_total();
}
inline void GetInstitutionsResponse::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_ = value;
}
inline void GetInstitutionsResponse::set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:plaid.GetInstitutionsResponse.total)
}

// -------------------------------------------------------------------

// GetInstitutionByIDRequest

// string institution_id = 1;
inline void GetInstitutionByIDRequest::clear_institution_id() {
  institution_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInstitutionByIDRequest::institution_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionByIDRequest.institution_id)
  return _internal_institution_id();
}
inline void GetInstitutionByIDRequest::set_institution_id(const std::string& value) {
  _internal_set_institution_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetInstitutionByIDRequest.institution_id)
}
inline std::string* GetInstitutionByIDRequest::mutable_institution_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInstitutionByIDRequest.institution_id)
  return _internal_mutable_institution_id();
}
inline const std::string& GetInstitutionByIDRequest::_internal_institution_id() const {
  return institution_id_.GetNoArena();
}
inline void GetInstitutionByIDRequest::_internal_set_institution_id(const std::string& value) {
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInstitutionByIDRequest::set_institution_id(std::string&& value) {
  
  institution_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetInstitutionByIDRequest.institution_id)
}
inline void GetInstitutionByIDRequest::set_institution_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetInstitutionByIDRequest.institution_id)
}
inline void GetInstitutionByIDRequest::set_institution_id(const char* value, size_t size) {
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInstitutionByIDRequest.institution_id)
}
inline std::string* GetInstitutionByIDRequest::_internal_mutable_institution_id() {
  
  return institution_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInstitutionByIDRequest::release_institution_id() {
  // @@protoc_insertion_point(field_release:plaid.GetInstitutionByIDRequest.institution_id)
  
  return institution_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInstitutionByIDRequest::set_allocated_institution_id(std::string* institution_id) {
  if (institution_id != nullptr) {
    
  } else {
    
  }
  institution_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), institution_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInstitutionByIDRequest.institution_id)
}

// string public_key = 2;
inline void GetInstitutionByIDRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInstitutionByIDRequest::public_key() const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionByIDRequest.public_key)
  return _internal_public_key();
}
inline void GetInstitutionByIDRequest::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:plaid.GetInstitutionByIDRequest.public_key)
}
inline std::string* GetInstitutionByIDRequest::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInstitutionByIDRequest.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& GetInstitutionByIDRequest::_internal_public_key() const {
  return public_key_.GetNoArena();
}
inline void GetInstitutionByIDRequest::_internal_set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInstitutionByIDRequest::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetInstitutionByIDRequest.public_key)
}
inline void GetInstitutionByIDRequest::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetInstitutionByIDRequest.public_key)
}
inline void GetInstitutionByIDRequest::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInstitutionByIDRequest.public_key)
}
inline std::string* GetInstitutionByIDRequest::_internal_mutable_public_key() {
  
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInstitutionByIDRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:plaid.GetInstitutionByIDRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInstitutionByIDRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInstitutionByIDRequest.public_key)
}

// .plaid.GetInstitutionByIDOptions options = 3;
inline bool GetInstitutionByIDRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool GetInstitutionByIDRequest::has_options() const {
  return _internal_has_options();
}
inline void GetInstitutionByIDRequest::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::plaid::GetInstitutionByIDOptions& GetInstitutionByIDRequest::_internal_options() const {
  const ::plaid::GetInstitutionByIDOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::GetInstitutionByIDOptions*>(
      &::plaid::_GetInstitutionByIDOptions_default_instance_);
}
inline const ::plaid::GetInstitutionByIDOptions& GetInstitutionByIDRequest::options() const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionByIDRequest.options)
  return _internal_options();
}
inline ::plaid::GetInstitutionByIDOptions* GetInstitutionByIDRequest::release_options() {
  // @@protoc_insertion_point(field_release:plaid.GetInstitutionByIDRequest.options)
  
  ::plaid::GetInstitutionByIDOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::plaid::GetInstitutionByIDOptions* GetInstitutionByIDRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::GetInstitutionByIDOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::plaid::GetInstitutionByIDOptions* GetInstitutionByIDRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInstitutionByIDRequest.options)
  return _internal_mutable_options();
}
inline void GetInstitutionByIDRequest::set_allocated_options(::plaid::GetInstitutionByIDOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInstitutionByIDRequest.options)
}

// -------------------------------------------------------------------

// GetInstitutionByIDOptions

// bool include_optional_metadata = 1;
inline void GetInstitutionByIDOptions::clear_include_optional_metadata() {
  include_optional_metadata_ = false;
}
inline bool GetInstitutionByIDOptions::_internal_include_optional_metadata() const {
  return include_optional_metadata_;
}
inline bool GetInstitutionByIDOptions::include_optional_metadata() const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionByIDOptions.include_optional_metadata)
  return _internal_include_optional_metadata();
}
inline void GetInstitutionByIDOptions::_internal_set_include_optional_metadata(bool value) {
  
  include_optional_metadata_ = value;
}
inline void GetInstitutionByIDOptions::set_include_optional_metadata(bool value) {
  _internal_set_include_optional_metadata(value);
  // @@protoc_insertion_point(field_set:plaid.GetInstitutionByIDOptions.include_optional_metadata)
}

// bool include_status = 2;
inline void GetInstitutionByIDOptions::clear_include_status() {
  include_status_ = false;
}
inline bool GetInstitutionByIDOptions::_internal_include_status() const {
  return include_status_;
}
inline bool GetInstitutionByIDOptions::include_status() const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionByIDOptions.include_status)
  return _internal_include_status();
}
inline void GetInstitutionByIDOptions::_internal_set_include_status(bool value) {
  
  include_status_ = value;
}
inline void GetInstitutionByIDOptions::set_include_status(bool value) {
  _internal_set_include_status(value);
  // @@protoc_insertion_point(field_set:plaid.GetInstitutionByIDOptions.include_status)
}

// -------------------------------------------------------------------

// GetInstitutionByIDResponse

// string request_id = 1;
inline void GetInstitutionByIDResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInstitutionByIDResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionByIDResponse.request_id)
  return _internal_request_id();
}
inline void GetInstitutionByIDResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetInstitutionByIDResponse.request_id)
}
inline std::string* GetInstitutionByIDResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInstitutionByIDResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetInstitutionByIDResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void GetInstitutionByIDResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInstitutionByIDResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetInstitutionByIDResponse.request_id)
}
inline void GetInstitutionByIDResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetInstitutionByIDResponse.request_id)
}
inline void GetInstitutionByIDResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInstitutionByIDResponse.request_id)
}
inline std::string* GetInstitutionByIDResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInstitutionByIDResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.GetInstitutionByIDResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInstitutionByIDResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInstitutionByIDResponse.request_id)
}

// .plaid.Institution institution = 2;
inline bool GetInstitutionByIDResponse::_internal_has_institution() const {
  return this != internal_default_instance() && institution_ != nullptr;
}
inline bool GetInstitutionByIDResponse::has_institution() const {
  return _internal_has_institution();
}
inline void GetInstitutionByIDResponse::clear_institution() {
  if (GetArenaNoVirtual() == nullptr && institution_ != nullptr) {
    delete institution_;
  }
  institution_ = nullptr;
}
inline const ::plaid::Institution& GetInstitutionByIDResponse::_internal_institution() const {
  const ::plaid::Institution* p = institution_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::Institution*>(
      &::plaid::_Institution_default_instance_);
}
inline const ::plaid::Institution& GetInstitutionByIDResponse::institution() const {
  // @@protoc_insertion_point(field_get:plaid.GetInstitutionByIDResponse.institution)
  return _internal_institution();
}
inline ::plaid::Institution* GetInstitutionByIDResponse::release_institution() {
  // @@protoc_insertion_point(field_release:plaid.GetInstitutionByIDResponse.institution)
  
  ::plaid::Institution* temp = institution_;
  institution_ = nullptr;
  return temp;
}
inline ::plaid::Institution* GetInstitutionByIDResponse::_internal_mutable_institution() {
  
  if (institution_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::Institution>(GetArenaNoVirtual());
    institution_ = p;
  }
  return institution_;
}
inline ::plaid::Institution* GetInstitutionByIDResponse::mutable_institution() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInstitutionByIDResponse.institution)
  return _internal_mutable_institution();
}
inline void GetInstitutionByIDResponse::set_allocated_institution(::plaid::Institution* institution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete institution_;
  }
  if (institution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      institution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, institution, submessage_arena);
    }
    
  } else {
    
  }
  institution_ = institution;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInstitutionByIDResponse.institution)
}

// -------------------------------------------------------------------

// SearchInstitutionsRequest

// string query = 1;
inline void SearchInstitutionsRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchInstitutionsRequest::query() const {
  // @@protoc_insertion_point(field_get:plaid.SearchInstitutionsRequest.query)
  return _internal_query();
}
inline void SearchInstitutionsRequest::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:plaid.SearchInstitutionsRequest.query)
}
inline std::string* SearchInstitutionsRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable:plaid.SearchInstitutionsRequest.query)
  return _internal_mutable_query();
}
inline const std::string& SearchInstitutionsRequest::_internal_query() const {
  return query_.GetNoArena();
}
inline void SearchInstitutionsRequest::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchInstitutionsRequest::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.SearchInstitutionsRequest.query)
}
inline void SearchInstitutionsRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.SearchInstitutionsRequest.query)
}
inline void SearchInstitutionsRequest::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.SearchInstitutionsRequest.query)
}
inline std::string* SearchInstitutionsRequest::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchInstitutionsRequest::release_query() {
  // @@protoc_insertion_point(field_release:plaid.SearchInstitutionsRequest.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchInstitutionsRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:plaid.SearchInstitutionsRequest.query)
}

// repeated string products = 2;
inline int SearchInstitutionsRequest::_internal_products_size() const {
  return products_.size();
}
inline int SearchInstitutionsRequest::products_size() const {
  return _internal_products_size();
}
inline void SearchInstitutionsRequest::clear_products() {
  products_.Clear();
}
inline std::string* SearchInstitutionsRequest::add_products() {
  // @@protoc_insertion_point(field_add_mutable:plaid.SearchInstitutionsRequest.products)
  return _internal_add_products();
}
inline const std::string& SearchInstitutionsRequest::_internal_products(int index) const {
  return products_.Get(index);
}
inline const std::string& SearchInstitutionsRequest::products(int index) const {
  // @@protoc_insertion_point(field_get:plaid.SearchInstitutionsRequest.products)
  return _internal_products(index);
}
inline std::string* SearchInstitutionsRequest::mutable_products(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.SearchInstitutionsRequest.products)
  return products_.Mutable(index);
}
inline void SearchInstitutionsRequest::set_products(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.SearchInstitutionsRequest.products)
  products_.Mutable(index)->assign(value);
}
inline void SearchInstitutionsRequest::set_products(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.SearchInstitutionsRequest.products)
  products_.Mutable(index)->assign(std::move(value));
}
inline void SearchInstitutionsRequest::set_products(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  products_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.SearchInstitutionsRequest.products)
}
inline void SearchInstitutionsRequest::set_products(int index, const char* value, size_t size) {
  products_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.SearchInstitutionsRequest.products)
}
inline std::string* SearchInstitutionsRequest::_internal_add_products() {
  return products_.Add();
}
inline void SearchInstitutionsRequest::add_products(const std::string& value) {
  products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.SearchInstitutionsRequest.products)
}
inline void SearchInstitutionsRequest::add_products(std::string&& value) {
  products_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.SearchInstitutionsRequest.products)
}
inline void SearchInstitutionsRequest::add_products(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.SearchInstitutionsRequest.products)
}
inline void SearchInstitutionsRequest::add_products(const char* value, size_t size) {
  products_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.SearchInstitutionsRequest.products)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchInstitutionsRequest::products() const {
  // @@protoc_insertion_point(field_list:plaid.SearchInstitutionsRequest.products)
  return products_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchInstitutionsRequest::mutable_products() {
  // @@protoc_insertion_point(field_mutable_list:plaid.SearchInstitutionsRequest.products)
  return &products_;
}

// string public_key = 3;
inline void SearchInstitutionsRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchInstitutionsRequest::public_key() const {
  // @@protoc_insertion_point(field_get:plaid.SearchInstitutionsRequest.public_key)
  return _internal_public_key();
}
inline void SearchInstitutionsRequest::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:plaid.SearchInstitutionsRequest.public_key)
}
inline std::string* SearchInstitutionsRequest::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:plaid.SearchInstitutionsRequest.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& SearchInstitutionsRequest::_internal_public_key() const {
  return public_key_.GetNoArena();
}
inline void SearchInstitutionsRequest::_internal_set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchInstitutionsRequest::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.SearchInstitutionsRequest.public_key)
}
inline void SearchInstitutionsRequest::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.SearchInstitutionsRequest.public_key)
}
inline void SearchInstitutionsRequest::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.SearchInstitutionsRequest.public_key)
}
inline std::string* SearchInstitutionsRequest::_internal_mutable_public_key() {
  
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchInstitutionsRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:plaid.SearchInstitutionsRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchInstitutionsRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:plaid.SearchInstitutionsRequest.public_key)
}

// .plaid.SearchInstitutionsOptions options = 4;
inline bool SearchInstitutionsRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool SearchInstitutionsRequest::has_options() const {
  return _internal_has_options();
}
inline void SearchInstitutionsRequest::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::plaid::SearchInstitutionsOptions& SearchInstitutionsRequest::_internal_options() const {
  const ::plaid::SearchInstitutionsOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::SearchInstitutionsOptions*>(
      &::plaid::_SearchInstitutionsOptions_default_instance_);
}
inline const ::plaid::SearchInstitutionsOptions& SearchInstitutionsRequest::options() const {
  // @@protoc_insertion_point(field_get:plaid.SearchInstitutionsRequest.options)
  return _internal_options();
}
inline ::plaid::SearchInstitutionsOptions* SearchInstitutionsRequest::release_options() {
  // @@protoc_insertion_point(field_release:plaid.SearchInstitutionsRequest.options)
  
  ::plaid::SearchInstitutionsOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::plaid::SearchInstitutionsOptions* SearchInstitutionsRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::SearchInstitutionsOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::plaid::SearchInstitutionsOptions* SearchInstitutionsRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:plaid.SearchInstitutionsRequest.options)
  return _internal_mutable_options();
}
inline void SearchInstitutionsRequest::set_allocated_options(::plaid::SearchInstitutionsOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:plaid.SearchInstitutionsRequest.options)
}

// -------------------------------------------------------------------

// SearchInstitutionsOptions

// bool include_optional_metadata = 1;
inline void SearchInstitutionsOptions::clear_include_optional_metadata() {
  include_optional_metadata_ = false;
}
inline bool SearchInstitutionsOptions::_internal_include_optional_metadata() const {
  return include_optional_metadata_;
}
inline bool SearchInstitutionsOptions::include_optional_metadata() const {
  // @@protoc_insertion_point(field_get:plaid.SearchInstitutionsOptions.include_optional_metadata)
  return _internal_include_optional_metadata();
}
inline void SearchInstitutionsOptions::_internal_set_include_optional_metadata(bool value) {
  
  include_optional_metadata_ = value;
}
inline void SearchInstitutionsOptions::set_include_optional_metadata(bool value) {
  _internal_set_include_optional_metadata(value);
  // @@protoc_insertion_point(field_set:plaid.SearchInstitutionsOptions.include_optional_metadata)
}

// repeated string country_codes = 2;
inline int SearchInstitutionsOptions::_internal_country_codes_size() const {
  return country_codes_.size();
}
inline int SearchInstitutionsOptions::country_codes_size() const {
  return _internal_country_codes_size();
}
inline void SearchInstitutionsOptions::clear_country_codes() {
  country_codes_.Clear();
}
inline std::string* SearchInstitutionsOptions::add_country_codes() {
  // @@protoc_insertion_point(field_add_mutable:plaid.SearchInstitutionsOptions.country_codes)
  return _internal_add_country_codes();
}
inline const std::string& SearchInstitutionsOptions::_internal_country_codes(int index) const {
  return country_codes_.Get(index);
}
inline const std::string& SearchInstitutionsOptions::country_codes(int index) const {
  // @@protoc_insertion_point(field_get:plaid.SearchInstitutionsOptions.country_codes)
  return _internal_country_codes(index);
}
inline std::string* SearchInstitutionsOptions::mutable_country_codes(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.SearchInstitutionsOptions.country_codes)
  return country_codes_.Mutable(index);
}
inline void SearchInstitutionsOptions::set_country_codes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.SearchInstitutionsOptions.country_codes)
  country_codes_.Mutable(index)->assign(value);
}
inline void SearchInstitutionsOptions::set_country_codes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.SearchInstitutionsOptions.country_codes)
  country_codes_.Mutable(index)->assign(std::move(value));
}
inline void SearchInstitutionsOptions::set_country_codes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  country_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.SearchInstitutionsOptions.country_codes)
}
inline void SearchInstitutionsOptions::set_country_codes(int index, const char* value, size_t size) {
  country_codes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.SearchInstitutionsOptions.country_codes)
}
inline std::string* SearchInstitutionsOptions::_internal_add_country_codes() {
  return country_codes_.Add();
}
inline void SearchInstitutionsOptions::add_country_codes(const std::string& value) {
  country_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.SearchInstitutionsOptions.country_codes)
}
inline void SearchInstitutionsOptions::add_country_codes(std::string&& value) {
  country_codes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.SearchInstitutionsOptions.country_codes)
}
inline void SearchInstitutionsOptions::add_country_codes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  country_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.SearchInstitutionsOptions.country_codes)
}
inline void SearchInstitutionsOptions::add_country_codes(const char* value, size_t size) {
  country_codes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.SearchInstitutionsOptions.country_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchInstitutionsOptions::country_codes() const {
  // @@protoc_insertion_point(field_list:plaid.SearchInstitutionsOptions.country_codes)
  return country_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchInstitutionsOptions::mutable_country_codes() {
  // @@protoc_insertion_point(field_mutable_list:plaid.SearchInstitutionsOptions.country_codes)
  return &country_codes_;
}

// repeated string routing_numbers = 3;
inline int SearchInstitutionsOptions::_internal_routing_numbers_size() const {
  return routing_numbers_.size();
}
inline int SearchInstitutionsOptions::routing_numbers_size() const {
  return _internal_routing_numbers_size();
}
inline void SearchInstitutionsOptions::clear_routing_numbers() {
  routing_numbers_.Clear();
}
inline std::string* SearchInstitutionsOptions::add_routing_numbers() {
  // @@protoc_insertion_point(field_add_mutable:plaid.SearchInstitutionsOptions.routing_numbers)
  return _internal_add_routing_numbers();
}
inline const std::string& SearchInstitutionsOptions::_internal_routing_numbers(int index) const {
  return routing_numbers_.Get(index);
}
inline const std::string& SearchInstitutionsOptions::routing_numbers(int index) const {
  // @@protoc_insertion_point(field_get:plaid.SearchInstitutionsOptions.routing_numbers)
  return _internal_routing_numbers(index);
}
inline std::string* SearchInstitutionsOptions::mutable_routing_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.SearchInstitutionsOptions.routing_numbers)
  return routing_numbers_.Mutable(index);
}
inline void SearchInstitutionsOptions::set_routing_numbers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.SearchInstitutionsOptions.routing_numbers)
  routing_numbers_.Mutable(index)->assign(value);
}
inline void SearchInstitutionsOptions::set_routing_numbers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.SearchInstitutionsOptions.routing_numbers)
  routing_numbers_.Mutable(index)->assign(std::move(value));
}
inline void SearchInstitutionsOptions::set_routing_numbers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  routing_numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.SearchInstitutionsOptions.routing_numbers)
}
inline void SearchInstitutionsOptions::set_routing_numbers(int index, const char* value, size_t size) {
  routing_numbers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.SearchInstitutionsOptions.routing_numbers)
}
inline std::string* SearchInstitutionsOptions::_internal_add_routing_numbers() {
  return routing_numbers_.Add();
}
inline void SearchInstitutionsOptions::add_routing_numbers(const std::string& value) {
  routing_numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.SearchInstitutionsOptions.routing_numbers)
}
inline void SearchInstitutionsOptions::add_routing_numbers(std::string&& value) {
  routing_numbers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.SearchInstitutionsOptions.routing_numbers)
}
inline void SearchInstitutionsOptions::add_routing_numbers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  routing_numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.SearchInstitutionsOptions.routing_numbers)
}
inline void SearchInstitutionsOptions::add_routing_numbers(const char* value, size_t size) {
  routing_numbers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.SearchInstitutionsOptions.routing_numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchInstitutionsOptions::routing_numbers() const {
  // @@protoc_insertion_point(field_list:plaid.SearchInstitutionsOptions.routing_numbers)
  return routing_numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchInstitutionsOptions::mutable_routing_numbers() {
  // @@protoc_insertion_point(field_mutable_list:plaid.SearchInstitutionsOptions.routing_numbers)
  return &routing_numbers_;
}

// -------------------------------------------------------------------

// SearchInstitutionsResponse

// string request_id = 1;
inline void SearchInstitutionsResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchInstitutionsResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.SearchInstitutionsResponse.request_id)
  return _internal_request_id();
}
inline void SearchInstitutionsResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.SearchInstitutionsResponse.request_id)
}
inline std::string* SearchInstitutionsResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.SearchInstitutionsResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& SearchInstitutionsResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void SearchInstitutionsResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchInstitutionsResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.SearchInstitutionsResponse.request_id)
}
inline void SearchInstitutionsResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.SearchInstitutionsResponse.request_id)
}
inline void SearchInstitutionsResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.SearchInstitutionsResponse.request_id)
}
inline std::string* SearchInstitutionsResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchInstitutionsResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.SearchInstitutionsResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchInstitutionsResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.SearchInstitutionsResponse.request_id)
}

// repeated .plaid.Institution institutions = 2;
inline int SearchInstitutionsResponse::_internal_institutions_size() const {
  return institutions_.size();
}
inline int SearchInstitutionsResponse::institutions_size() const {
  return _internal_institutions_size();
}
inline void SearchInstitutionsResponse::clear_institutions() {
  institutions_.Clear();
}
inline ::plaid::Institution* SearchInstitutionsResponse::mutable_institutions(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.SearchInstitutionsResponse.institutions)
  return institutions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Institution >*
SearchInstitutionsResponse::mutable_institutions() {
  // @@protoc_insertion_point(field_mutable_list:plaid.SearchInstitutionsResponse.institutions)
  return &institutions_;
}
inline const ::plaid::Institution& SearchInstitutionsResponse::_internal_institutions(int index) const {
  return institutions_.Get(index);
}
inline const ::plaid::Institution& SearchInstitutionsResponse::institutions(int index) const {
  // @@protoc_insertion_point(field_get:plaid.SearchInstitutionsResponse.institutions)
  return _internal_institutions(index);
}
inline ::plaid::Institution* SearchInstitutionsResponse::_internal_add_institutions() {
  return institutions_.Add();
}
inline ::plaid::Institution* SearchInstitutionsResponse::add_institutions() {
  // @@protoc_insertion_point(field_add:plaid.SearchInstitutionsResponse.institutions)
  return _internal_add_institutions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Institution >&
SearchInstitutionsResponse::institutions() const {
  // @@protoc_insertion_point(field_list:plaid.SearchInstitutionsResponse.institutions)
  return institutions_;
}

// -------------------------------------------------------------------

// InvestmentTransaction

// string investment_transaction_id = 1;
inline void InvestmentTransaction::clear_investment_transaction_id() {
  investment_transaction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvestmentTransaction::investment_transaction_id() const {
  // @@protoc_insertion_point(field_get:plaid.InvestmentTransaction.investment_transaction_id)
  return _internal_investment_transaction_id();
}
inline void InvestmentTransaction::set_investment_transaction_id(const std::string& value) {
  _internal_set_investment_transaction_id(value);
  // @@protoc_insertion_point(field_set:plaid.InvestmentTransaction.investment_transaction_id)
}
inline std::string* InvestmentTransaction::mutable_investment_transaction_id() {
  // @@protoc_insertion_point(field_mutable:plaid.InvestmentTransaction.investment_transaction_id)
  return _internal_mutable_investment_transaction_id();
}
inline const std::string& InvestmentTransaction::_internal_investment_transaction_id() const {
  return investment_transaction_id_.GetNoArena();
}
inline void InvestmentTransaction::_internal_set_investment_transaction_id(const std::string& value) {
  
  investment_transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvestmentTransaction::set_investment_transaction_id(std::string&& value) {
  
  investment_transaction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.InvestmentTransaction.investment_transaction_id)
}
inline void InvestmentTransaction::set_investment_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  investment_transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.InvestmentTransaction.investment_transaction_id)
}
inline void InvestmentTransaction::set_investment_transaction_id(const char* value, size_t size) {
  
  investment_transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.InvestmentTransaction.investment_transaction_id)
}
inline std::string* InvestmentTransaction::_internal_mutable_investment_transaction_id() {
  
  return investment_transaction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvestmentTransaction::release_investment_transaction_id() {
  // @@protoc_insertion_point(field_release:plaid.InvestmentTransaction.investment_transaction_id)
  
  return investment_transaction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvestmentTransaction::set_allocated_investment_transaction_id(std::string* investment_transaction_id) {
  if (investment_transaction_id != nullptr) {
    
  } else {
    
  }
  investment_transaction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investment_transaction_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.InvestmentTransaction.investment_transaction_id)
}

// string account_id = 2;
inline void InvestmentTransaction::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvestmentTransaction::account_id() const {
  // @@protoc_insertion_point(field_get:plaid.InvestmentTransaction.account_id)
  return _internal_account_id();
}
inline void InvestmentTransaction::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:plaid.InvestmentTransaction.account_id)
}
inline std::string* InvestmentTransaction::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:plaid.InvestmentTransaction.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& InvestmentTransaction::_internal_account_id() const {
  return account_id_.GetNoArena();
}
inline void InvestmentTransaction::_internal_set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvestmentTransaction::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.InvestmentTransaction.account_id)
}
inline void InvestmentTransaction::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.InvestmentTransaction.account_id)
}
inline void InvestmentTransaction::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.InvestmentTransaction.account_id)
}
inline std::string* InvestmentTransaction::_internal_mutable_account_id() {
  
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvestmentTransaction::release_account_id() {
  // @@protoc_insertion_point(field_release:plaid.InvestmentTransaction.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvestmentTransaction::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.InvestmentTransaction.account_id)
}

// string security_id = 3;
inline void InvestmentTransaction::clear_security_id() {
  security_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvestmentTransaction::security_id() const {
  // @@protoc_insertion_point(field_get:plaid.InvestmentTransaction.security_id)
  return _internal_security_id();
}
inline void InvestmentTransaction::set_security_id(const std::string& value) {
  _internal_set_security_id(value);
  // @@protoc_insertion_point(field_set:plaid.InvestmentTransaction.security_id)
}
inline std::string* InvestmentTransaction::mutable_security_id() {
  // @@protoc_insertion_point(field_mutable:plaid.InvestmentTransaction.security_id)
  return _internal_mutable_security_id();
}
inline const std::string& InvestmentTransaction::_internal_security_id() const {
  return security_id_.GetNoArena();
}
inline void InvestmentTransaction::_internal_set_security_id(const std::string& value) {
  
  security_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvestmentTransaction::set_security_id(std::string&& value) {
  
  security_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.InvestmentTransaction.security_id)
}
inline void InvestmentTransaction::set_security_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  security_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.InvestmentTransaction.security_id)
}
inline void InvestmentTransaction::set_security_id(const char* value, size_t size) {
  
  security_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.InvestmentTransaction.security_id)
}
inline std::string* InvestmentTransaction::_internal_mutable_security_id() {
  
  return security_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvestmentTransaction::release_security_id() {
  // @@protoc_insertion_point(field_release:plaid.InvestmentTransaction.security_id)
  
  return security_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvestmentTransaction::set_allocated_security_id(std::string* security_id) {
  if (security_id != nullptr) {
    
  } else {
    
  }
  security_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), security_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.InvestmentTransaction.security_id)
}

// string cancel_transaction_id = 4;
inline void InvestmentTransaction::clear_cancel_transaction_id() {
  cancel_transaction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvestmentTransaction::cancel_transaction_id() const {
  // @@protoc_insertion_point(field_get:plaid.InvestmentTransaction.cancel_transaction_id)
  return _internal_cancel_transaction_id();
}
inline void InvestmentTransaction::set_cancel_transaction_id(const std::string& value) {
  _internal_set_cancel_transaction_id(value);
  // @@protoc_insertion_point(field_set:plaid.InvestmentTransaction.cancel_transaction_id)
}
inline std::string* InvestmentTransaction::mutable_cancel_transaction_id() {
  // @@protoc_insertion_point(field_mutable:plaid.InvestmentTransaction.cancel_transaction_id)
  return _internal_mutable_cancel_transaction_id();
}
inline const std::string& InvestmentTransaction::_internal_cancel_transaction_id() const {
  return cancel_transaction_id_.GetNoArena();
}
inline void InvestmentTransaction::_internal_set_cancel_transaction_id(const std::string& value) {
  
  cancel_transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvestmentTransaction::set_cancel_transaction_id(std::string&& value) {
  
  cancel_transaction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.InvestmentTransaction.cancel_transaction_id)
}
inline void InvestmentTransaction::set_cancel_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cancel_transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.InvestmentTransaction.cancel_transaction_id)
}
inline void InvestmentTransaction::set_cancel_transaction_id(const char* value, size_t size) {
  
  cancel_transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.InvestmentTransaction.cancel_transaction_id)
}
inline std::string* InvestmentTransaction::_internal_mutable_cancel_transaction_id() {
  
  return cancel_transaction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvestmentTransaction::release_cancel_transaction_id() {
  // @@protoc_insertion_point(field_release:plaid.InvestmentTransaction.cancel_transaction_id)
  
  return cancel_transaction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvestmentTransaction::set_allocated_cancel_transaction_id(std::string* cancel_transaction_id) {
  if (cancel_transaction_id != nullptr) {
    
  } else {
    
  }
  cancel_transaction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cancel_transaction_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.InvestmentTransaction.cancel_transaction_id)
}

// string date = 5;
inline void InvestmentTransaction::clear_date() {
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvestmentTransaction::date() const {
  // @@protoc_insertion_point(field_get:plaid.InvestmentTransaction.date)
  return _internal_date();
}
inline void InvestmentTransaction::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:plaid.InvestmentTransaction.date)
}
inline std::string* InvestmentTransaction::mutable_date() {
  // @@protoc_insertion_point(field_mutable:plaid.InvestmentTransaction.date)
  return _internal_mutable_date();
}
inline const std::string& InvestmentTransaction::_internal_date() const {
  return date_.GetNoArena();
}
inline void InvestmentTransaction::_internal_set_date(const std::string& value) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvestmentTransaction::set_date(std::string&& value) {
  
  date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.InvestmentTransaction.date)
}
inline void InvestmentTransaction::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.InvestmentTransaction.date)
}
inline void InvestmentTransaction::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.InvestmentTransaction.date)
}
inline std::string* InvestmentTransaction::_internal_mutable_date() {
  
  return date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvestmentTransaction::release_date() {
  // @@protoc_insertion_point(field_release:plaid.InvestmentTransaction.date)
  
  return date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvestmentTransaction::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:plaid.InvestmentTransaction.date)
}

// string name = 6;
inline void InvestmentTransaction::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvestmentTransaction::name() const {
  // @@protoc_insertion_point(field_get:plaid.InvestmentTransaction.name)
  return _internal_name();
}
inline void InvestmentTransaction::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:plaid.InvestmentTransaction.name)
}
inline std::string* InvestmentTransaction::mutable_name() {
  // @@protoc_insertion_point(field_mutable:plaid.InvestmentTransaction.name)
  return _internal_mutable_name();
}
inline const std::string& InvestmentTransaction::_internal_name() const {
  return name_.GetNoArena();
}
inline void InvestmentTransaction::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvestmentTransaction::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.InvestmentTransaction.name)
}
inline void InvestmentTransaction::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.InvestmentTransaction.name)
}
inline void InvestmentTransaction::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.InvestmentTransaction.name)
}
inline std::string* InvestmentTransaction::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvestmentTransaction::release_name() {
  // @@protoc_insertion_point(field_release:plaid.InvestmentTransaction.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvestmentTransaction::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:plaid.InvestmentTransaction.name)
}

// double quantity = 7;
inline void InvestmentTransaction::clear_quantity() {
  quantity_ = 0;
}
inline double InvestmentTransaction::_internal_quantity() const {
  return quantity_;
}
inline double InvestmentTransaction::quantity() const {
  // @@protoc_insertion_point(field_get:plaid.InvestmentTransaction.quantity)
  return _internal_quantity();
}
inline void InvestmentTransaction::_internal_set_quantity(double value) {
  
  quantity_ = value;
}
inline void InvestmentTransaction::set_quantity(double value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:plaid.InvestmentTransaction.quantity)
}

// double amount = 8;
inline void InvestmentTransaction::clear_amount() {
  amount_ = 0;
}
inline double InvestmentTransaction::_internal_amount() const {
  return amount_;
}
inline double InvestmentTransaction::amount() const {
  // @@protoc_insertion_point(field_get:plaid.InvestmentTransaction.amount)
  return _internal_amount();
}
inline void InvestmentTransaction::_internal_set_amount(double value) {
  
  amount_ = value;
}
inline void InvestmentTransaction::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:plaid.InvestmentTransaction.amount)
}

// double price = 9;
inline void InvestmentTransaction::clear_price() {
  price_ = 0;
}
inline double InvestmentTransaction::_internal_price() const {
  return price_;
}
inline double InvestmentTransaction::price() const {
  // @@protoc_insertion_point(field_get:plaid.InvestmentTransaction.price)
  return _internal_price();
}
inline void InvestmentTransaction::_internal_set_price(double value) {
  
  price_ = value;
}
inline void InvestmentTransaction::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:plaid.InvestmentTransaction.price)
}

// double fees = 10;
inline void InvestmentTransaction::clear_fees() {
  fees_ = 0;
}
inline double InvestmentTransaction::_internal_fees() const {
  return fees_;
}
inline double InvestmentTransaction::fees() const {
  // @@protoc_insertion_point(field_get:plaid.InvestmentTransaction.fees)
  return _internal_fees();
}
inline void InvestmentTransaction::_internal_set_fees(double value) {
  
  fees_ = value;
}
inline void InvestmentTransaction::set_fees(double value) {
  _internal_set_fees(value);
  // @@protoc_insertion_point(field_set:plaid.InvestmentTransaction.fees)
}

// string type = 11;
inline void InvestmentTransaction::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvestmentTransaction::type() const {
  // @@protoc_insertion_point(field_get:plaid.InvestmentTransaction.type)
  return _internal_type();
}
inline void InvestmentTransaction::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:plaid.InvestmentTransaction.type)
}
inline std::string* InvestmentTransaction::mutable_type() {
  // @@protoc_insertion_point(field_mutable:plaid.InvestmentTransaction.type)
  return _internal_mutable_type();
}
inline const std::string& InvestmentTransaction::_internal_type() const {
  return type_.GetNoArena();
}
inline void InvestmentTransaction::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvestmentTransaction::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.InvestmentTransaction.type)
}
inline void InvestmentTransaction::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.InvestmentTransaction.type)
}
inline void InvestmentTransaction::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.InvestmentTransaction.type)
}
inline std::string* InvestmentTransaction::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvestmentTransaction::release_type() {
  // @@protoc_insertion_point(field_release:plaid.InvestmentTransaction.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvestmentTransaction::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:plaid.InvestmentTransaction.type)
}

// string iso_currency_code = 12;
inline void InvestmentTransaction::clear_iso_currency_code() {
  iso_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvestmentTransaction::iso_currency_code() const {
  // @@protoc_insertion_point(field_get:plaid.InvestmentTransaction.iso_currency_code)
  return _internal_iso_currency_code();
}
inline void InvestmentTransaction::set_iso_currency_code(const std::string& value) {
  _internal_set_iso_currency_code(value);
  // @@protoc_insertion_point(field_set:plaid.InvestmentTransaction.iso_currency_code)
}
inline std::string* InvestmentTransaction::mutable_iso_currency_code() {
  // @@protoc_insertion_point(field_mutable:plaid.InvestmentTransaction.iso_currency_code)
  return _internal_mutable_iso_currency_code();
}
inline const std::string& InvestmentTransaction::_internal_iso_currency_code() const {
  return iso_currency_code_.GetNoArena();
}
inline void InvestmentTransaction::_internal_set_iso_currency_code(const std::string& value) {
  
  iso_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvestmentTransaction::set_iso_currency_code(std::string&& value) {
  
  iso_currency_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.InvestmentTransaction.iso_currency_code)
}
inline void InvestmentTransaction::set_iso_currency_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iso_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.InvestmentTransaction.iso_currency_code)
}
inline void InvestmentTransaction::set_iso_currency_code(const char* value, size_t size) {
  
  iso_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.InvestmentTransaction.iso_currency_code)
}
inline std::string* InvestmentTransaction::_internal_mutable_iso_currency_code() {
  
  return iso_currency_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvestmentTransaction::release_iso_currency_code() {
  // @@protoc_insertion_point(field_release:plaid.InvestmentTransaction.iso_currency_code)
  
  return iso_currency_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvestmentTransaction::set_allocated_iso_currency_code(std::string* iso_currency_code) {
  if (iso_currency_code != nullptr) {
    
  } else {
    
  }
  iso_currency_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iso_currency_code);
  // @@protoc_insertion_point(field_set_allocated:plaid.InvestmentTransaction.iso_currency_code)
}

// string unofficial_currency_code = 13;
inline void InvestmentTransaction::clear_unofficial_currency_code() {
  unofficial_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvestmentTransaction::unofficial_currency_code() const {
  // @@protoc_insertion_point(field_get:plaid.InvestmentTransaction.unofficial_currency_code)
  return _internal_unofficial_currency_code();
}
inline void InvestmentTransaction::set_unofficial_currency_code(const std::string& value) {
  _internal_set_unofficial_currency_code(value);
  // @@protoc_insertion_point(field_set:plaid.InvestmentTransaction.unofficial_currency_code)
}
inline std::string* InvestmentTransaction::mutable_unofficial_currency_code() {
  // @@protoc_insertion_point(field_mutable:plaid.InvestmentTransaction.unofficial_currency_code)
  return _internal_mutable_unofficial_currency_code();
}
inline const std::string& InvestmentTransaction::_internal_unofficial_currency_code() const {
  return unofficial_currency_code_.GetNoArena();
}
inline void InvestmentTransaction::_internal_set_unofficial_currency_code(const std::string& value) {
  
  unofficial_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvestmentTransaction::set_unofficial_currency_code(std::string&& value) {
  
  unofficial_currency_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.InvestmentTransaction.unofficial_currency_code)
}
inline void InvestmentTransaction::set_unofficial_currency_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unofficial_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.InvestmentTransaction.unofficial_currency_code)
}
inline void InvestmentTransaction::set_unofficial_currency_code(const char* value, size_t size) {
  
  unofficial_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.InvestmentTransaction.unofficial_currency_code)
}
inline std::string* InvestmentTransaction::_internal_mutable_unofficial_currency_code() {
  
  return unofficial_currency_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvestmentTransaction::release_unofficial_currency_code() {
  // @@protoc_insertion_point(field_release:plaid.InvestmentTransaction.unofficial_currency_code)
  
  return unofficial_currency_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvestmentTransaction::set_allocated_unofficial_currency_code(std::string* unofficial_currency_code) {
  if (unofficial_currency_code != nullptr) {
    
  } else {
    
  }
  unofficial_currency_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unofficial_currency_code);
  // @@protoc_insertion_point(field_set_allocated:plaid.InvestmentTransaction.unofficial_currency_code)
}

// -------------------------------------------------------------------

// GetInvestmentTransactionsResponse

// string request_id = 1;
inline void GetInvestmentTransactionsResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInvestmentTransactionsResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsResponse.request_id)
  return _internal_request_id();
}
inline void GetInvestmentTransactionsResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetInvestmentTransactionsResponse.request_id)
}
inline std::string* GetInvestmentTransactionsResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInvestmentTransactionsResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetInvestmentTransactionsResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void GetInvestmentTransactionsResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInvestmentTransactionsResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetInvestmentTransactionsResponse.request_id)
}
inline void GetInvestmentTransactionsResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetInvestmentTransactionsResponse.request_id)
}
inline void GetInvestmentTransactionsResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInvestmentTransactionsResponse.request_id)
}
inline std::string* GetInvestmentTransactionsResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInvestmentTransactionsResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.GetInvestmentTransactionsResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInvestmentTransactionsResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInvestmentTransactionsResponse.request_id)
}

// .plaid.Item item = 2;
inline bool GetInvestmentTransactionsResponse::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool GetInvestmentTransactionsResponse::has_item() const {
  return _internal_has_item();
}
inline void GetInvestmentTransactionsResponse::clear_item() {
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::plaid::Item& GetInvestmentTransactionsResponse::_internal_item() const {
  const ::plaid::Item* p = item_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::Item*>(
      &::plaid::_Item_default_instance_);
}
inline const ::plaid::Item& GetInvestmentTransactionsResponse::item() const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsResponse.item)
  return _internal_item();
}
inline ::plaid::Item* GetInvestmentTransactionsResponse::release_item() {
  // @@protoc_insertion_point(field_release:plaid.GetInvestmentTransactionsResponse.item)
  
  ::plaid::Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::plaid::Item* GetInvestmentTransactionsResponse::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::Item>(GetArenaNoVirtual());
    item_ = p;
  }
  return item_;
}
inline ::plaid::Item* GetInvestmentTransactionsResponse::mutable_item() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInvestmentTransactionsResponse.item)
  return _internal_mutable_item();
}
inline void GetInvestmentTransactionsResponse::set_allocated_item(::plaid::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInvestmentTransactionsResponse.item)
}

// repeated .plaid.Account accounts = 3;
inline int GetInvestmentTransactionsResponse::_internal_accounts_size() const {
  return accounts_.size();
}
inline int GetInvestmentTransactionsResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline void GetInvestmentTransactionsResponse::clear_accounts() {
  accounts_.Clear();
}
inline ::plaid::Account* GetInvestmentTransactionsResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetInvestmentTransactionsResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >*
GetInvestmentTransactionsResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetInvestmentTransactionsResponse.accounts)
  return &accounts_;
}
inline const ::plaid::Account& GetInvestmentTransactionsResponse::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::plaid::Account& GetInvestmentTransactionsResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsResponse.accounts)
  return _internal_accounts(index);
}
inline ::plaid::Account* GetInvestmentTransactionsResponse::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::plaid::Account* GetInvestmentTransactionsResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:plaid.GetInvestmentTransactionsResponse.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >&
GetInvestmentTransactionsResponse::accounts() const {
  // @@protoc_insertion_point(field_list:plaid.GetInvestmentTransactionsResponse.accounts)
  return accounts_;
}

// repeated .plaid.InvestmentTransaction investment_transactions = 4;
inline int GetInvestmentTransactionsResponse::_internal_investment_transactions_size() const {
  return investment_transactions_.size();
}
inline int GetInvestmentTransactionsResponse::investment_transactions_size() const {
  return _internal_investment_transactions_size();
}
inline void GetInvestmentTransactionsResponse::clear_investment_transactions() {
  investment_transactions_.Clear();
}
inline ::plaid::InvestmentTransaction* GetInvestmentTransactionsResponse::mutable_investment_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetInvestmentTransactionsResponse.investment_transactions)
  return investment_transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::InvestmentTransaction >*
GetInvestmentTransactionsResponse::mutable_investment_transactions() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetInvestmentTransactionsResponse.investment_transactions)
  return &investment_transactions_;
}
inline const ::plaid::InvestmentTransaction& GetInvestmentTransactionsResponse::_internal_investment_transactions(int index) const {
  return investment_transactions_.Get(index);
}
inline const ::plaid::InvestmentTransaction& GetInvestmentTransactionsResponse::investment_transactions(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsResponse.investment_transactions)
  return _internal_investment_transactions(index);
}
inline ::plaid::InvestmentTransaction* GetInvestmentTransactionsResponse::_internal_add_investment_transactions() {
  return investment_transactions_.Add();
}
inline ::plaid::InvestmentTransaction* GetInvestmentTransactionsResponse::add_investment_transactions() {
  // @@protoc_insertion_point(field_add:plaid.GetInvestmentTransactionsResponse.investment_transactions)
  return _internal_add_investment_transactions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::InvestmentTransaction >&
GetInvestmentTransactionsResponse::investment_transactions() const {
  // @@protoc_insertion_point(field_list:plaid.GetInvestmentTransactionsResponse.investment_transactions)
  return investment_transactions_;
}

// repeated .plaid.Security securities = 5;
inline int GetInvestmentTransactionsResponse::_internal_securities_size() const {
  return securities_.size();
}
inline int GetInvestmentTransactionsResponse::securities_size() const {
  return _internal_securities_size();
}
inline void GetInvestmentTransactionsResponse::clear_securities() {
  securities_.Clear();
}
inline ::plaid::Security* GetInvestmentTransactionsResponse::mutable_securities(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetInvestmentTransactionsResponse.securities)
  return securities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Security >*
GetInvestmentTransactionsResponse::mutable_securities() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetInvestmentTransactionsResponse.securities)
  return &securities_;
}
inline const ::plaid::Security& GetInvestmentTransactionsResponse::_internal_securities(int index) const {
  return securities_.Get(index);
}
inline const ::plaid::Security& GetInvestmentTransactionsResponse::securities(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsResponse.securities)
  return _internal_securities(index);
}
inline ::plaid::Security* GetInvestmentTransactionsResponse::_internal_add_securities() {
  return securities_.Add();
}
inline ::plaid::Security* GetInvestmentTransactionsResponse::add_securities() {
  // @@protoc_insertion_point(field_add:plaid.GetInvestmentTransactionsResponse.securities)
  return _internal_add_securities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Security >&
GetInvestmentTransactionsResponse::securities() const {
  // @@protoc_insertion_point(field_list:plaid.GetInvestmentTransactionsResponse.securities)
  return securities_;
}

// int64 total_investment_transactions = 6;
inline void GetInvestmentTransactionsResponse::clear_total_investment_transactions() {
  total_investment_transactions_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInvestmentTransactionsResponse::_internal_total_investment_transactions() const {
  return total_investment_transactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInvestmentTransactionsResponse::total_investment_transactions() const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsResponse.total_investment_transactions)
  return _internal_total_investment_transactions();
}
inline void GetInvestmentTransactionsResponse::_internal_set_total_investment_transactions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_investment_transactions_ = value;
}
inline void GetInvestmentTransactionsResponse::set_total_investment_transactions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_investment_transactions(value);
  // @@protoc_insertion_point(field_set:plaid.GetInvestmentTransactionsResponse.total_investment_transactions)
}

// -------------------------------------------------------------------

// GetInvestmentTransactionsOptions

// string start_date = 1;
inline void GetInvestmentTransactionsOptions::clear_start_date() {
  start_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInvestmentTransactionsOptions::start_date() const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsOptions.start_date)
  return _internal_start_date();
}
inline void GetInvestmentTransactionsOptions::set_start_date(const std::string& value) {
  _internal_set_start_date(value);
  // @@protoc_insertion_point(field_set:plaid.GetInvestmentTransactionsOptions.start_date)
}
inline std::string* GetInvestmentTransactionsOptions::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInvestmentTransactionsOptions.start_date)
  return _internal_mutable_start_date();
}
inline const std::string& GetInvestmentTransactionsOptions::_internal_start_date() const {
  return start_date_.GetNoArena();
}
inline void GetInvestmentTransactionsOptions::_internal_set_start_date(const std::string& value) {
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInvestmentTransactionsOptions::set_start_date(std::string&& value) {
  
  start_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetInvestmentTransactionsOptions.start_date)
}
inline void GetInvestmentTransactionsOptions::set_start_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetInvestmentTransactionsOptions.start_date)
}
inline void GetInvestmentTransactionsOptions::set_start_date(const char* value, size_t size) {
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInvestmentTransactionsOptions.start_date)
}
inline std::string* GetInvestmentTransactionsOptions::_internal_mutable_start_date() {
  
  return start_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInvestmentTransactionsOptions::release_start_date() {
  // @@protoc_insertion_point(field_release:plaid.GetInvestmentTransactionsOptions.start_date)
  
  return start_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInvestmentTransactionsOptions::set_allocated_start_date(std::string* start_date) {
  if (start_date != nullptr) {
    
  } else {
    
  }
  start_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_date);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInvestmentTransactionsOptions.start_date)
}

// string end_date = 2;
inline void GetInvestmentTransactionsOptions::clear_end_date() {
  end_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInvestmentTransactionsOptions::end_date() const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsOptions.end_date)
  return _internal_end_date();
}
inline void GetInvestmentTransactionsOptions::set_end_date(const std::string& value) {
  _internal_set_end_date(value);
  // @@protoc_insertion_point(field_set:plaid.GetInvestmentTransactionsOptions.end_date)
}
inline std::string* GetInvestmentTransactionsOptions::mutable_end_date() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInvestmentTransactionsOptions.end_date)
  return _internal_mutable_end_date();
}
inline const std::string& GetInvestmentTransactionsOptions::_internal_end_date() const {
  return end_date_.GetNoArena();
}
inline void GetInvestmentTransactionsOptions::_internal_set_end_date(const std::string& value) {
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInvestmentTransactionsOptions::set_end_date(std::string&& value) {
  
  end_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetInvestmentTransactionsOptions.end_date)
}
inline void GetInvestmentTransactionsOptions::set_end_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetInvestmentTransactionsOptions.end_date)
}
inline void GetInvestmentTransactionsOptions::set_end_date(const char* value, size_t size) {
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInvestmentTransactionsOptions.end_date)
}
inline std::string* GetInvestmentTransactionsOptions::_internal_mutable_end_date() {
  
  return end_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInvestmentTransactionsOptions::release_end_date() {
  // @@protoc_insertion_point(field_release:plaid.GetInvestmentTransactionsOptions.end_date)
  
  return end_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInvestmentTransactionsOptions::set_allocated_end_date(std::string* end_date) {
  if (end_date != nullptr) {
    
  } else {
    
  }
  end_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_date);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInvestmentTransactionsOptions.end_date)
}

// repeated string account_ids = 3;
inline int GetInvestmentTransactionsOptions::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int GetInvestmentTransactionsOptions::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void GetInvestmentTransactionsOptions::clear_account_ids() {
  account_ids_.Clear();
}
inline std::string* GetInvestmentTransactionsOptions::add_account_ids() {
  // @@protoc_insertion_point(field_add_mutable:plaid.GetInvestmentTransactionsOptions.account_ids)
  return _internal_add_account_ids();
}
inline const std::string& GetInvestmentTransactionsOptions::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline const std::string& GetInvestmentTransactionsOptions::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsOptions.account_ids)
  return _internal_account_ids(index);
}
inline std::string* GetInvestmentTransactionsOptions::mutable_account_ids(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetInvestmentTransactionsOptions.account_ids)
  return account_ids_.Mutable(index);
}
inline void GetInvestmentTransactionsOptions::set_account_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.GetInvestmentTransactionsOptions.account_ids)
  account_ids_.Mutable(index)->assign(value);
}
inline void GetInvestmentTransactionsOptions::set_account_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.GetInvestmentTransactionsOptions.account_ids)
  account_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetInvestmentTransactionsOptions::set_account_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.GetInvestmentTransactionsOptions.account_ids)
}
inline void GetInvestmentTransactionsOptions::set_account_ids(int index, const char* value, size_t size) {
  account_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInvestmentTransactionsOptions.account_ids)
}
inline std::string* GetInvestmentTransactionsOptions::_internal_add_account_ids() {
  return account_ids_.Add();
}
inline void GetInvestmentTransactionsOptions::add_account_ids(const std::string& value) {
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.GetInvestmentTransactionsOptions.account_ids)
}
inline void GetInvestmentTransactionsOptions::add_account_ids(std::string&& value) {
  account_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.GetInvestmentTransactionsOptions.account_ids)
}
inline void GetInvestmentTransactionsOptions::add_account_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.GetInvestmentTransactionsOptions.account_ids)
}
inline void GetInvestmentTransactionsOptions::add_account_ids(const char* value, size_t size) {
  account_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.GetInvestmentTransactionsOptions.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetInvestmentTransactionsOptions::account_ids() const {
  // @@protoc_insertion_point(field_list:plaid.GetInvestmentTransactionsOptions.account_ids)
  return account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetInvestmentTransactionsOptions::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetInvestmentTransactionsOptions.account_ids)
  return &account_ids_;
}

// int64 count = 4;
inline void GetInvestmentTransactionsOptions::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInvestmentTransactionsOptions::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInvestmentTransactionsOptions::count() const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsOptions.count)
  return _internal_count();
}
inline void GetInvestmentTransactionsOptions::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void GetInvestmentTransactionsOptions::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:plaid.GetInvestmentTransactionsOptions.count)
}

// int64 offset = 5;
inline void GetInvestmentTransactionsOptions::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInvestmentTransactionsOptions::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInvestmentTransactionsOptions::offset() const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsOptions.offset)
  return _internal_offset();
}
inline void GetInvestmentTransactionsOptions::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void GetInvestmentTransactionsOptions::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:plaid.GetInvestmentTransactionsOptions.offset)
}

// -------------------------------------------------------------------

// GetInvestmentTransactionsRequest

// string client_id = 1;
inline void GetInvestmentTransactionsRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInvestmentTransactionsRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsRequest.client_id)
  return _internal_client_id();
}
inline void GetInvestmentTransactionsRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetInvestmentTransactionsRequest.client_id)
}
inline std::string* GetInvestmentTransactionsRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInvestmentTransactionsRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& GetInvestmentTransactionsRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void GetInvestmentTransactionsRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInvestmentTransactionsRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetInvestmentTransactionsRequest.client_id)
}
inline void GetInvestmentTransactionsRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetInvestmentTransactionsRequest.client_id)
}
inline void GetInvestmentTransactionsRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInvestmentTransactionsRequest.client_id)
}
inline std::string* GetInvestmentTransactionsRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInvestmentTransactionsRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.GetInvestmentTransactionsRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInvestmentTransactionsRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInvestmentTransactionsRequest.client_id)
}

// string secret = 2;
inline void GetInvestmentTransactionsRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInvestmentTransactionsRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsRequest.secret)
  return _internal_secret();
}
inline void GetInvestmentTransactionsRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.GetInvestmentTransactionsRequest.secret)
}
inline std::string* GetInvestmentTransactionsRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInvestmentTransactionsRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& GetInvestmentTransactionsRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void GetInvestmentTransactionsRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInvestmentTransactionsRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetInvestmentTransactionsRequest.secret)
}
inline void GetInvestmentTransactionsRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetInvestmentTransactionsRequest.secret)
}
inline void GetInvestmentTransactionsRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInvestmentTransactionsRequest.secret)
}
inline std::string* GetInvestmentTransactionsRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInvestmentTransactionsRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.GetInvestmentTransactionsRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInvestmentTransactionsRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInvestmentTransactionsRequest.secret)
}

// string access_token = 3;
inline void GetInvestmentTransactionsRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInvestmentTransactionsRequest::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsRequest.access_token)
  return _internal_access_token();
}
inline void GetInvestmentTransactionsRequest::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.GetInvestmentTransactionsRequest.access_token)
}
inline std::string* GetInvestmentTransactionsRequest::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInvestmentTransactionsRequest.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& GetInvestmentTransactionsRequest::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void GetInvestmentTransactionsRequest::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInvestmentTransactionsRequest::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetInvestmentTransactionsRequest.access_token)
}
inline void GetInvestmentTransactionsRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetInvestmentTransactionsRequest.access_token)
}
inline void GetInvestmentTransactionsRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInvestmentTransactionsRequest.access_token)
}
inline std::string* GetInvestmentTransactionsRequest::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInvestmentTransactionsRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.GetInvestmentTransactionsRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInvestmentTransactionsRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInvestmentTransactionsRequest.access_token)
}

// string start_date = 4;
inline void GetInvestmentTransactionsRequest::clear_start_date() {
  start_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInvestmentTransactionsRequest::start_date() const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsRequest.start_date)
  return _internal_start_date();
}
inline void GetInvestmentTransactionsRequest::set_start_date(const std::string& value) {
  _internal_set_start_date(value);
  // @@protoc_insertion_point(field_set:plaid.GetInvestmentTransactionsRequest.start_date)
}
inline std::string* GetInvestmentTransactionsRequest::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInvestmentTransactionsRequest.start_date)
  return _internal_mutable_start_date();
}
inline const std::string& GetInvestmentTransactionsRequest::_internal_start_date() const {
  return start_date_.GetNoArena();
}
inline void GetInvestmentTransactionsRequest::_internal_set_start_date(const std::string& value) {
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInvestmentTransactionsRequest::set_start_date(std::string&& value) {
  
  start_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetInvestmentTransactionsRequest.start_date)
}
inline void GetInvestmentTransactionsRequest::set_start_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetInvestmentTransactionsRequest.start_date)
}
inline void GetInvestmentTransactionsRequest::set_start_date(const char* value, size_t size) {
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInvestmentTransactionsRequest.start_date)
}
inline std::string* GetInvestmentTransactionsRequest::_internal_mutable_start_date() {
  
  return start_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInvestmentTransactionsRequest::release_start_date() {
  // @@protoc_insertion_point(field_release:plaid.GetInvestmentTransactionsRequest.start_date)
  
  return start_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInvestmentTransactionsRequest::set_allocated_start_date(std::string* start_date) {
  if (start_date != nullptr) {
    
  } else {
    
  }
  start_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_date);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInvestmentTransactionsRequest.start_date)
}

// string end_date = 5;
inline void GetInvestmentTransactionsRequest::clear_end_date() {
  end_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInvestmentTransactionsRequest::end_date() const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsRequest.end_date)
  return _internal_end_date();
}
inline void GetInvestmentTransactionsRequest::set_end_date(const std::string& value) {
  _internal_set_end_date(value);
  // @@protoc_insertion_point(field_set:plaid.GetInvestmentTransactionsRequest.end_date)
}
inline std::string* GetInvestmentTransactionsRequest::mutable_end_date() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInvestmentTransactionsRequest.end_date)
  return _internal_mutable_end_date();
}
inline const std::string& GetInvestmentTransactionsRequest::_internal_end_date() const {
  return end_date_.GetNoArena();
}
inline void GetInvestmentTransactionsRequest::_internal_set_end_date(const std::string& value) {
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInvestmentTransactionsRequest::set_end_date(std::string&& value) {
  
  end_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetInvestmentTransactionsRequest.end_date)
}
inline void GetInvestmentTransactionsRequest::set_end_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetInvestmentTransactionsRequest.end_date)
}
inline void GetInvestmentTransactionsRequest::set_end_date(const char* value, size_t size) {
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInvestmentTransactionsRequest.end_date)
}
inline std::string* GetInvestmentTransactionsRequest::_internal_mutable_end_date() {
  
  return end_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInvestmentTransactionsRequest::release_end_date() {
  // @@protoc_insertion_point(field_release:plaid.GetInvestmentTransactionsRequest.end_date)
  
  return end_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInvestmentTransactionsRequest::set_allocated_end_date(std::string* end_date) {
  if (end_date != nullptr) {
    
  } else {
    
  }
  end_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_date);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInvestmentTransactionsRequest.end_date)
}

// .plaid.GetInvestmentTransactionsRequestOptions options = 6;
inline bool GetInvestmentTransactionsRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool GetInvestmentTransactionsRequest::has_options() const {
  return _internal_has_options();
}
inline void GetInvestmentTransactionsRequest::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::plaid::GetInvestmentTransactionsRequestOptions& GetInvestmentTransactionsRequest::_internal_options() const {
  const ::plaid::GetInvestmentTransactionsRequestOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::GetInvestmentTransactionsRequestOptions*>(
      &::plaid::_GetInvestmentTransactionsRequestOptions_default_instance_);
}
inline const ::plaid::GetInvestmentTransactionsRequestOptions& GetInvestmentTransactionsRequest::options() const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsRequest.options)
  return _internal_options();
}
inline ::plaid::GetInvestmentTransactionsRequestOptions* GetInvestmentTransactionsRequest::release_options() {
  // @@protoc_insertion_point(field_release:plaid.GetInvestmentTransactionsRequest.options)
  
  ::plaid::GetInvestmentTransactionsRequestOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::plaid::GetInvestmentTransactionsRequestOptions* GetInvestmentTransactionsRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::GetInvestmentTransactionsRequestOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::plaid::GetInvestmentTransactionsRequestOptions* GetInvestmentTransactionsRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:plaid.GetInvestmentTransactionsRequest.options)
  return _internal_mutable_options();
}
inline void GetInvestmentTransactionsRequest::set_allocated_options(::plaid::GetInvestmentTransactionsRequestOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetInvestmentTransactionsRequest.options)
}

// -------------------------------------------------------------------

// GetInvestmentTransactionsRequestOptions

// repeated string account_ids = 1;
inline int GetInvestmentTransactionsRequestOptions::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int GetInvestmentTransactionsRequestOptions::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void GetInvestmentTransactionsRequestOptions::clear_account_ids() {
  account_ids_.Clear();
}
inline std::string* GetInvestmentTransactionsRequestOptions::add_account_ids() {
  // @@protoc_insertion_point(field_add_mutable:plaid.GetInvestmentTransactionsRequestOptions.account_ids)
  return _internal_add_account_ids();
}
inline const std::string& GetInvestmentTransactionsRequestOptions::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline const std::string& GetInvestmentTransactionsRequestOptions::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsRequestOptions.account_ids)
  return _internal_account_ids(index);
}
inline std::string* GetInvestmentTransactionsRequestOptions::mutable_account_ids(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetInvestmentTransactionsRequestOptions.account_ids)
  return account_ids_.Mutable(index);
}
inline void GetInvestmentTransactionsRequestOptions::set_account_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.GetInvestmentTransactionsRequestOptions.account_ids)
  account_ids_.Mutable(index)->assign(value);
}
inline void GetInvestmentTransactionsRequestOptions::set_account_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.GetInvestmentTransactionsRequestOptions.account_ids)
  account_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetInvestmentTransactionsRequestOptions::set_account_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.GetInvestmentTransactionsRequestOptions.account_ids)
}
inline void GetInvestmentTransactionsRequestOptions::set_account_ids(int index, const char* value, size_t size) {
  account_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.GetInvestmentTransactionsRequestOptions.account_ids)
}
inline std::string* GetInvestmentTransactionsRequestOptions::_internal_add_account_ids() {
  return account_ids_.Add();
}
inline void GetInvestmentTransactionsRequestOptions::add_account_ids(const std::string& value) {
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.GetInvestmentTransactionsRequestOptions.account_ids)
}
inline void GetInvestmentTransactionsRequestOptions::add_account_ids(std::string&& value) {
  account_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.GetInvestmentTransactionsRequestOptions.account_ids)
}
inline void GetInvestmentTransactionsRequestOptions::add_account_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.GetInvestmentTransactionsRequestOptions.account_ids)
}
inline void GetInvestmentTransactionsRequestOptions::add_account_ids(const char* value, size_t size) {
  account_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.GetInvestmentTransactionsRequestOptions.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetInvestmentTransactionsRequestOptions::account_ids() const {
  // @@protoc_insertion_point(field_list:plaid.GetInvestmentTransactionsRequestOptions.account_ids)
  return account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetInvestmentTransactionsRequestOptions::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetInvestmentTransactionsRequestOptions.account_ids)
  return &account_ids_;
}

// int64 count = 2;
inline void GetInvestmentTransactionsRequestOptions::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInvestmentTransactionsRequestOptions::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInvestmentTransactionsRequestOptions::count() const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsRequestOptions.count)
  return _internal_count();
}
inline void GetInvestmentTransactionsRequestOptions::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void GetInvestmentTransactionsRequestOptions::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:plaid.GetInvestmentTransactionsRequestOptions.count)
}

// int64 offset = 3;
inline void GetInvestmentTransactionsRequestOptions::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInvestmentTransactionsRequestOptions::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInvestmentTransactionsRequestOptions::offset() const {
  // @@protoc_insertion_point(field_get:plaid.GetInvestmentTransactionsRequestOptions.offset)
  return _internal_offset();
}
inline void GetInvestmentTransactionsRequestOptions::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void GetInvestmentTransactionsRequestOptions::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:plaid.GetInvestmentTransactionsRequestOptions.offset)
}

// -------------------------------------------------------------------

// Item

// repeated string available_products = 1;
inline int Item::_internal_available_products_size() const {
  return available_products_.size();
}
inline int Item::available_products_size() const {
  return _internal_available_products_size();
}
inline void Item::clear_available_products() {
  available_products_.Clear();
}
inline std::string* Item::add_available_products() {
  // @@protoc_insertion_point(field_add_mutable:plaid.Item.available_products)
  return _internal_add_available_products();
}
inline const std::string& Item::_internal_available_products(int index) const {
  return available_products_.Get(index);
}
inline const std::string& Item::available_products(int index) const {
  // @@protoc_insertion_point(field_get:plaid.Item.available_products)
  return _internal_available_products(index);
}
inline std::string* Item::mutable_available_products(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.Item.available_products)
  return available_products_.Mutable(index);
}
inline void Item::set_available_products(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.Item.available_products)
  available_products_.Mutable(index)->assign(value);
}
inline void Item::set_available_products(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.Item.available_products)
  available_products_.Mutable(index)->assign(std::move(value));
}
inline void Item::set_available_products(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  available_products_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.Item.available_products)
}
inline void Item::set_available_products(int index, const char* value, size_t size) {
  available_products_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.Item.available_products)
}
inline std::string* Item::_internal_add_available_products() {
  return available_products_.Add();
}
inline void Item::add_available_products(const std::string& value) {
  available_products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.Item.available_products)
}
inline void Item::add_available_products(std::string&& value) {
  available_products_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.Item.available_products)
}
inline void Item::add_available_products(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  available_products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.Item.available_products)
}
inline void Item::add_available_products(const char* value, size_t size) {
  available_products_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.Item.available_products)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Item::available_products() const {
  // @@protoc_insertion_point(field_list:plaid.Item.available_products)
  return available_products_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Item::mutable_available_products() {
  // @@protoc_insertion_point(field_mutable_list:plaid.Item.available_products)
  return &available_products_;
}

// repeated string billed_products = 2;
inline int Item::_internal_billed_products_size() const {
  return billed_products_.size();
}
inline int Item::billed_products_size() const {
  return _internal_billed_products_size();
}
inline void Item::clear_billed_products() {
  billed_products_.Clear();
}
inline std::string* Item::add_billed_products() {
  // @@protoc_insertion_point(field_add_mutable:plaid.Item.billed_products)
  return _internal_add_billed_products();
}
inline const std::string& Item::_internal_billed_products(int index) const {
  return billed_products_.Get(index);
}
inline const std::string& Item::billed_products(int index) const {
  // @@protoc_insertion_point(field_get:plaid.Item.billed_products)
  return _internal_billed_products(index);
}
inline std::string* Item::mutable_billed_products(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.Item.billed_products)
  return billed_products_.Mutable(index);
}
inline void Item::set_billed_products(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.Item.billed_products)
  billed_products_.Mutable(index)->assign(value);
}
inline void Item::set_billed_products(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.Item.billed_products)
  billed_products_.Mutable(index)->assign(std::move(value));
}
inline void Item::set_billed_products(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  billed_products_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.Item.billed_products)
}
inline void Item::set_billed_products(int index, const char* value, size_t size) {
  billed_products_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.Item.billed_products)
}
inline std::string* Item::_internal_add_billed_products() {
  return billed_products_.Add();
}
inline void Item::add_billed_products(const std::string& value) {
  billed_products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.Item.billed_products)
}
inline void Item::add_billed_products(std::string&& value) {
  billed_products_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.Item.billed_products)
}
inline void Item::add_billed_products(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  billed_products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.Item.billed_products)
}
inline void Item::add_billed_products(const char* value, size_t size) {
  billed_products_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.Item.billed_products)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Item::billed_products() const {
  // @@protoc_insertion_point(field_list:plaid.Item.billed_products)
  return billed_products_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Item::mutable_billed_products() {
  // @@protoc_insertion_point(field_mutable_list:plaid.Item.billed_products)
  return &billed_products_;
}

// .plaid.Error error = 3;
inline bool Item::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool Item::has_error() const {
  return _internal_has_error();
}
inline void Item::clear_error() {
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::plaid::Error& Item::_internal_error() const {
  const ::plaid::Error* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::Error*>(
      &::plaid::_Error_default_instance_);
}
inline const ::plaid::Error& Item::error() const {
  // @@protoc_insertion_point(field_get:plaid.Item.error)
  return _internal_error();
}
inline ::plaid::Error* Item::release_error() {
  // @@protoc_insertion_point(field_release:plaid.Item.error)
  
  ::plaid::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::plaid::Error* Item::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::Error>(GetArenaNoVirtual());
    error_ = p;
  }
  return error_;
}
inline ::plaid::Error* Item::mutable_error() {
  // @@protoc_insertion_point(field_mutable:plaid.Item.error)
  return _internal_mutable_error();
}
inline void Item::set_allocated_error(::plaid::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:plaid.Item.error)
}

// string institution_id = 4;
inline void Item::clear_institution_id() {
  institution_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Item::institution_id() const {
  // @@protoc_insertion_point(field_get:plaid.Item.institution_id)
  return _internal_institution_id();
}
inline void Item::set_institution_id(const std::string& value) {
  _internal_set_institution_id(value);
  // @@protoc_insertion_point(field_set:plaid.Item.institution_id)
}
inline std::string* Item::mutable_institution_id() {
  // @@protoc_insertion_point(field_mutable:plaid.Item.institution_id)
  return _internal_mutable_institution_id();
}
inline const std::string& Item::_internal_institution_id() const {
  return institution_id_.GetNoArena();
}
inline void Item::_internal_set_institution_id(const std::string& value) {
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Item::set_institution_id(std::string&& value) {
  
  institution_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Item.institution_id)
}
inline void Item::set_institution_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Item.institution_id)
}
inline void Item::set_institution_id(const char* value, size_t size) {
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Item.institution_id)
}
inline std::string* Item::_internal_mutable_institution_id() {
  
  return institution_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Item::release_institution_id() {
  // @@protoc_insertion_point(field_release:plaid.Item.institution_id)
  
  return institution_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_institution_id(std::string* institution_id) {
  if (institution_id != nullptr) {
    
  } else {
    
  }
  institution_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), institution_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.Item.institution_id)
}

// string item_id = 5;
inline void Item::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Item::item_id() const {
  // @@protoc_insertion_point(field_get:plaid.Item.item_id)
  return _internal_item_id();
}
inline void Item::set_item_id(const std::string& value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:plaid.Item.item_id)
}
inline std::string* Item::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable:plaid.Item.item_id)
  return _internal_mutable_item_id();
}
inline const std::string& Item::_internal_item_id() const {
  return item_id_.GetNoArena();
}
inline void Item::_internal_set_item_id(const std::string& value) {
  
  item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Item::set_item_id(std::string&& value) {
  
  item_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Item.item_id)
}
inline void Item::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Item.item_id)
}
inline void Item::set_item_id(const char* value, size_t size) {
  
  item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Item.item_id)
}
inline std::string* Item::_internal_mutable_item_id() {
  
  return item_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Item::release_item_id() {
  // @@protoc_insertion_point(field_release:plaid.Item.item_id)
  
  return item_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.Item.item_id)
}

// string webhook = 6;
inline void Item::clear_webhook() {
  webhook_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Item::webhook() const {
  // @@protoc_insertion_point(field_get:plaid.Item.webhook)
  return _internal_webhook();
}
inline void Item::set_webhook(const std::string& value) {
  _internal_set_webhook(value);
  // @@protoc_insertion_point(field_set:plaid.Item.webhook)
}
inline std::string* Item::mutable_webhook() {
  // @@protoc_insertion_point(field_mutable:plaid.Item.webhook)
  return _internal_mutable_webhook();
}
inline const std::string& Item::_internal_webhook() const {
  return webhook_.GetNoArena();
}
inline void Item::_internal_set_webhook(const std::string& value) {
  
  webhook_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Item::set_webhook(std::string&& value) {
  
  webhook_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Item.webhook)
}
inline void Item::set_webhook(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  webhook_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Item.webhook)
}
inline void Item::set_webhook(const char* value, size_t size) {
  
  webhook_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Item.webhook)
}
inline std::string* Item::_internal_mutable_webhook() {
  
  return webhook_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Item::release_webhook() {
  // @@protoc_insertion_point(field_release:plaid.Item.webhook)
  
  return webhook_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_webhook(std::string* webhook) {
  if (webhook != nullptr) {
    
  } else {
    
  }
  webhook_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), webhook);
  // @@protoc_insertion_point(field_set_allocated:plaid.Item.webhook)
}

// -------------------------------------------------------------------

// GetItemRequest

// string client_id = 1;
inline void GetItemRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetItemRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetItemRequest.client_id)
  return _internal_client_id();
}
inline void GetItemRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetItemRequest.client_id)
}
inline std::string* GetItemRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetItemRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& GetItemRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void GetItemRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetItemRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetItemRequest.client_id)
}
inline void GetItemRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetItemRequest.client_id)
}
inline void GetItemRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetItemRequest.client_id)
}
inline std::string* GetItemRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetItemRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.GetItemRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetItemRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetItemRequest.client_id)
}

// string secret = 2;
inline void GetItemRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetItemRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.GetItemRequest.secret)
  return _internal_secret();
}
inline void GetItemRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.GetItemRequest.secret)
}
inline std::string* GetItemRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.GetItemRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& GetItemRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void GetItemRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetItemRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetItemRequest.secret)
}
inline void GetItemRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetItemRequest.secret)
}
inline void GetItemRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetItemRequest.secret)
}
inline std::string* GetItemRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetItemRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.GetItemRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetItemRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetItemRequest.secret)
}

// string access_token = 3;
inline void GetItemRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetItemRequest::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.GetItemRequest.access_token)
  return _internal_access_token();
}
inline void GetItemRequest::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.GetItemRequest.access_token)
}
inline std::string* GetItemRequest::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.GetItemRequest.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& GetItemRequest::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void GetItemRequest::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetItemRequest::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetItemRequest.access_token)
}
inline void GetItemRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetItemRequest.access_token)
}
inline void GetItemRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetItemRequest.access_token)
}
inline std::string* GetItemRequest::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetItemRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.GetItemRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetItemRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetItemRequest.access_token)
}

// -------------------------------------------------------------------

// GetItemResponse

// string request_id = 1;
inline void GetItemResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetItemResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetItemResponse.request_id)
  return _internal_request_id();
}
inline void GetItemResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetItemResponse.request_id)
}
inline std::string* GetItemResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetItemResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetItemResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void GetItemResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetItemResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetItemResponse.request_id)
}
inline void GetItemResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetItemResponse.request_id)
}
inline void GetItemResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetItemResponse.request_id)
}
inline std::string* GetItemResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetItemResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.GetItemResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetItemResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetItemResponse.request_id)
}

// .plaid.Item item = 2;
inline bool GetItemResponse::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool GetItemResponse::has_item() const {
  return _internal_has_item();
}
inline void GetItemResponse::clear_item() {
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::plaid::Item& GetItemResponse::_internal_item() const {
  const ::plaid::Item* p = item_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::Item*>(
      &::plaid::_Item_default_instance_);
}
inline const ::plaid::Item& GetItemResponse::item() const {
  // @@protoc_insertion_point(field_get:plaid.GetItemResponse.item)
  return _internal_item();
}
inline ::plaid::Item* GetItemResponse::release_item() {
  // @@protoc_insertion_point(field_release:plaid.GetItemResponse.item)
  
  ::plaid::Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::plaid::Item* GetItemResponse::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::Item>(GetArenaNoVirtual());
    item_ = p;
  }
  return item_;
}
inline ::plaid::Item* GetItemResponse::mutable_item() {
  // @@protoc_insertion_point(field_mutable:plaid.GetItemResponse.item)
  return _internal_mutable_item();
}
inline void GetItemResponse::set_allocated_item(::plaid::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetItemResponse.item)
}

// -------------------------------------------------------------------

// RemoveItemRequest

// string client_id = 1;
inline void RemoveItemRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveItemRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.RemoveItemRequest.client_id)
  return _internal_client_id();
}
inline void RemoveItemRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.RemoveItemRequest.client_id)
}
inline std::string* RemoveItemRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.RemoveItemRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& RemoveItemRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void RemoveItemRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveItemRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.RemoveItemRequest.client_id)
}
inline void RemoveItemRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.RemoveItemRequest.client_id)
}
inline void RemoveItemRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.RemoveItemRequest.client_id)
}
inline std::string* RemoveItemRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveItemRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.RemoveItemRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveItemRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.RemoveItemRequest.client_id)
}

// string secret = 2;
inline void RemoveItemRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveItemRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.RemoveItemRequest.secret)
  return _internal_secret();
}
inline void RemoveItemRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.RemoveItemRequest.secret)
}
inline std::string* RemoveItemRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.RemoveItemRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& RemoveItemRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void RemoveItemRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveItemRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.RemoveItemRequest.secret)
}
inline void RemoveItemRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.RemoveItemRequest.secret)
}
inline void RemoveItemRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.RemoveItemRequest.secret)
}
inline std::string* RemoveItemRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveItemRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.RemoveItemRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveItemRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.RemoveItemRequest.secret)
}

// string access_token = 3;
inline void RemoveItemRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveItemRequest::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.RemoveItemRequest.access_token)
  return _internal_access_token();
}
inline void RemoveItemRequest::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.RemoveItemRequest.access_token)
}
inline std::string* RemoveItemRequest::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.RemoveItemRequest.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& RemoveItemRequest::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void RemoveItemRequest::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveItemRequest::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.RemoveItemRequest.access_token)
}
inline void RemoveItemRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.RemoveItemRequest.access_token)
}
inline void RemoveItemRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.RemoveItemRequest.access_token)
}
inline std::string* RemoveItemRequest::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveItemRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.RemoveItemRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveItemRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.RemoveItemRequest.access_token)
}

// -------------------------------------------------------------------

// RemoveItemResponse

// string request_id = 1;
inline void RemoveItemResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveItemResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.RemoveItemResponse.request_id)
  return _internal_request_id();
}
inline void RemoveItemResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.RemoveItemResponse.request_id)
}
inline std::string* RemoveItemResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.RemoveItemResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& RemoveItemResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void RemoveItemResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveItemResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.RemoveItemResponse.request_id)
}
inline void RemoveItemResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.RemoveItemResponse.request_id)
}
inline void RemoveItemResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.RemoveItemResponse.request_id)
}
inline std::string* RemoveItemResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveItemResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.RemoveItemResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveItemResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.RemoveItemResponse.request_id)
}

// bool removed = 2;
inline void RemoveItemResponse::clear_removed() {
  removed_ = false;
}
inline bool RemoveItemResponse::_internal_removed() const {
  return removed_;
}
inline bool RemoveItemResponse::removed() const {
  // @@protoc_insertion_point(field_get:plaid.RemoveItemResponse.removed)
  return _internal_removed();
}
inline void RemoveItemResponse::_internal_set_removed(bool value) {
  
  removed_ = value;
}
inline void RemoveItemResponse::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:plaid.RemoveItemResponse.removed)
}

// -------------------------------------------------------------------

// UpdateItemWebhookRequest

// string client_id = 1;
inline void UpdateItemWebhookRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateItemWebhookRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.UpdateItemWebhookRequest.client_id)
  return _internal_client_id();
}
inline void UpdateItemWebhookRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.UpdateItemWebhookRequest.client_id)
}
inline std::string* UpdateItemWebhookRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.UpdateItemWebhookRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& UpdateItemWebhookRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void UpdateItemWebhookRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateItemWebhookRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.UpdateItemWebhookRequest.client_id)
}
inline void UpdateItemWebhookRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.UpdateItemWebhookRequest.client_id)
}
inline void UpdateItemWebhookRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.UpdateItemWebhookRequest.client_id)
}
inline std::string* UpdateItemWebhookRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateItemWebhookRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.UpdateItemWebhookRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateItemWebhookRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.UpdateItemWebhookRequest.client_id)
}

// string secret = 2;
inline void UpdateItemWebhookRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateItemWebhookRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.UpdateItemWebhookRequest.secret)
  return _internal_secret();
}
inline void UpdateItemWebhookRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.UpdateItemWebhookRequest.secret)
}
inline std::string* UpdateItemWebhookRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.UpdateItemWebhookRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& UpdateItemWebhookRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void UpdateItemWebhookRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateItemWebhookRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.UpdateItemWebhookRequest.secret)
}
inline void UpdateItemWebhookRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.UpdateItemWebhookRequest.secret)
}
inline void UpdateItemWebhookRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.UpdateItemWebhookRequest.secret)
}
inline std::string* UpdateItemWebhookRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateItemWebhookRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.UpdateItemWebhookRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateItemWebhookRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.UpdateItemWebhookRequest.secret)
}

// string access_token = 3;
inline void UpdateItemWebhookRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateItemWebhookRequest::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.UpdateItemWebhookRequest.access_token)
  return _internal_access_token();
}
inline void UpdateItemWebhookRequest::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.UpdateItemWebhookRequest.access_token)
}
inline std::string* UpdateItemWebhookRequest::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.UpdateItemWebhookRequest.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& UpdateItemWebhookRequest::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void UpdateItemWebhookRequest::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateItemWebhookRequest::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.UpdateItemWebhookRequest.access_token)
}
inline void UpdateItemWebhookRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.UpdateItemWebhookRequest.access_token)
}
inline void UpdateItemWebhookRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.UpdateItemWebhookRequest.access_token)
}
inline std::string* UpdateItemWebhookRequest::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateItemWebhookRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.UpdateItemWebhookRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateItemWebhookRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.UpdateItemWebhookRequest.access_token)
}

// string webhook = 4;
inline void UpdateItemWebhookRequest::clear_webhook() {
  webhook_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateItemWebhookRequest::webhook() const {
  // @@protoc_insertion_point(field_get:plaid.UpdateItemWebhookRequest.webhook)
  return _internal_webhook();
}
inline void UpdateItemWebhookRequest::set_webhook(const std::string& value) {
  _internal_set_webhook(value);
  // @@protoc_insertion_point(field_set:plaid.UpdateItemWebhookRequest.webhook)
}
inline std::string* UpdateItemWebhookRequest::mutable_webhook() {
  // @@protoc_insertion_point(field_mutable:plaid.UpdateItemWebhookRequest.webhook)
  return _internal_mutable_webhook();
}
inline const std::string& UpdateItemWebhookRequest::_internal_webhook() const {
  return webhook_.GetNoArena();
}
inline void UpdateItemWebhookRequest::_internal_set_webhook(const std::string& value) {
  
  webhook_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateItemWebhookRequest::set_webhook(std::string&& value) {
  
  webhook_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.UpdateItemWebhookRequest.webhook)
}
inline void UpdateItemWebhookRequest::set_webhook(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  webhook_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.UpdateItemWebhookRequest.webhook)
}
inline void UpdateItemWebhookRequest::set_webhook(const char* value, size_t size) {
  
  webhook_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.UpdateItemWebhookRequest.webhook)
}
inline std::string* UpdateItemWebhookRequest::_internal_mutable_webhook() {
  
  return webhook_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateItemWebhookRequest::release_webhook() {
  // @@protoc_insertion_point(field_release:plaid.UpdateItemWebhookRequest.webhook)
  
  return webhook_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateItemWebhookRequest::set_allocated_webhook(std::string* webhook) {
  if (webhook != nullptr) {
    
  } else {
    
  }
  webhook_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), webhook);
  // @@protoc_insertion_point(field_set_allocated:plaid.UpdateItemWebhookRequest.webhook)
}

// -------------------------------------------------------------------

// UpdateItemWebhookResponse

// string request_id = 1;
inline void UpdateItemWebhookResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateItemWebhookResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.UpdateItemWebhookResponse.request_id)
  return _internal_request_id();
}
inline void UpdateItemWebhookResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.UpdateItemWebhookResponse.request_id)
}
inline std::string* UpdateItemWebhookResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.UpdateItemWebhookResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& UpdateItemWebhookResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void UpdateItemWebhookResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateItemWebhookResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.UpdateItemWebhookResponse.request_id)
}
inline void UpdateItemWebhookResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.UpdateItemWebhookResponse.request_id)
}
inline void UpdateItemWebhookResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.UpdateItemWebhookResponse.request_id)
}
inline std::string* UpdateItemWebhookResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateItemWebhookResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.UpdateItemWebhookResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateItemWebhookResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.UpdateItemWebhookResponse.request_id)
}

// .plaid.Item item = 2;
inline bool UpdateItemWebhookResponse::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool UpdateItemWebhookResponse::has_item() const {
  return _internal_has_item();
}
inline void UpdateItemWebhookResponse::clear_item() {
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::plaid::Item& UpdateItemWebhookResponse::_internal_item() const {
  const ::plaid::Item* p = item_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::Item*>(
      &::plaid::_Item_default_instance_);
}
inline const ::plaid::Item& UpdateItemWebhookResponse::item() const {
  // @@protoc_insertion_point(field_get:plaid.UpdateItemWebhookResponse.item)
  return _internal_item();
}
inline ::plaid::Item* UpdateItemWebhookResponse::release_item() {
  // @@protoc_insertion_point(field_release:plaid.UpdateItemWebhookResponse.item)
  
  ::plaid::Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::plaid::Item* UpdateItemWebhookResponse::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::Item>(GetArenaNoVirtual());
    item_ = p;
  }
  return item_;
}
inline ::plaid::Item* UpdateItemWebhookResponse::mutable_item() {
  // @@protoc_insertion_point(field_mutable:plaid.UpdateItemWebhookResponse.item)
  return _internal_mutable_item();
}
inline void UpdateItemWebhookResponse::set_allocated_item(::plaid::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:plaid.UpdateItemWebhookResponse.item)
}

// -------------------------------------------------------------------

// InvalidateAccessTokenRequest

// string client_id = 1;
inline void InvalidateAccessTokenRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvalidateAccessTokenRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.InvalidateAccessTokenRequest.client_id)
  return _internal_client_id();
}
inline void InvalidateAccessTokenRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.InvalidateAccessTokenRequest.client_id)
}
inline std::string* InvalidateAccessTokenRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.InvalidateAccessTokenRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& InvalidateAccessTokenRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void InvalidateAccessTokenRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvalidateAccessTokenRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.InvalidateAccessTokenRequest.client_id)
}
inline void InvalidateAccessTokenRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.InvalidateAccessTokenRequest.client_id)
}
inline void InvalidateAccessTokenRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.InvalidateAccessTokenRequest.client_id)
}
inline std::string* InvalidateAccessTokenRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvalidateAccessTokenRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.InvalidateAccessTokenRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvalidateAccessTokenRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.InvalidateAccessTokenRequest.client_id)
}

// string secret = 2;
inline void InvalidateAccessTokenRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvalidateAccessTokenRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.InvalidateAccessTokenRequest.secret)
  return _internal_secret();
}
inline void InvalidateAccessTokenRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.InvalidateAccessTokenRequest.secret)
}
inline std::string* InvalidateAccessTokenRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.InvalidateAccessTokenRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& InvalidateAccessTokenRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void InvalidateAccessTokenRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvalidateAccessTokenRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.InvalidateAccessTokenRequest.secret)
}
inline void InvalidateAccessTokenRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.InvalidateAccessTokenRequest.secret)
}
inline void InvalidateAccessTokenRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.InvalidateAccessTokenRequest.secret)
}
inline std::string* InvalidateAccessTokenRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvalidateAccessTokenRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.InvalidateAccessTokenRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvalidateAccessTokenRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.InvalidateAccessTokenRequest.secret)
}

// string access_token = 3;
inline void InvalidateAccessTokenRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvalidateAccessTokenRequest::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.InvalidateAccessTokenRequest.access_token)
  return _internal_access_token();
}
inline void InvalidateAccessTokenRequest::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.InvalidateAccessTokenRequest.access_token)
}
inline std::string* InvalidateAccessTokenRequest::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.InvalidateAccessTokenRequest.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& InvalidateAccessTokenRequest::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void InvalidateAccessTokenRequest::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvalidateAccessTokenRequest::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.InvalidateAccessTokenRequest.access_token)
}
inline void InvalidateAccessTokenRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.InvalidateAccessTokenRequest.access_token)
}
inline void InvalidateAccessTokenRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.InvalidateAccessTokenRequest.access_token)
}
inline std::string* InvalidateAccessTokenRequest::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvalidateAccessTokenRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.InvalidateAccessTokenRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvalidateAccessTokenRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.InvalidateAccessTokenRequest.access_token)
}

// -------------------------------------------------------------------

// InvalidateAccessTokenResponse

// string request_id = 1;
inline void InvalidateAccessTokenResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvalidateAccessTokenResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.InvalidateAccessTokenResponse.request_id)
  return _internal_request_id();
}
inline void InvalidateAccessTokenResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.InvalidateAccessTokenResponse.request_id)
}
inline std::string* InvalidateAccessTokenResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.InvalidateAccessTokenResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& InvalidateAccessTokenResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void InvalidateAccessTokenResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvalidateAccessTokenResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.InvalidateAccessTokenResponse.request_id)
}
inline void InvalidateAccessTokenResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.InvalidateAccessTokenResponse.request_id)
}
inline void InvalidateAccessTokenResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.InvalidateAccessTokenResponse.request_id)
}
inline std::string* InvalidateAccessTokenResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvalidateAccessTokenResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.InvalidateAccessTokenResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvalidateAccessTokenResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.InvalidateAccessTokenResponse.request_id)
}

// string new_access_token = 2;
inline void InvalidateAccessTokenResponse::clear_new_access_token() {
  new_access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvalidateAccessTokenResponse::new_access_token() const {
  // @@protoc_insertion_point(field_get:plaid.InvalidateAccessTokenResponse.new_access_token)
  return _internal_new_access_token();
}
inline void InvalidateAccessTokenResponse::set_new_access_token(const std::string& value) {
  _internal_set_new_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.InvalidateAccessTokenResponse.new_access_token)
}
inline std::string* InvalidateAccessTokenResponse::mutable_new_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.InvalidateAccessTokenResponse.new_access_token)
  return _internal_mutable_new_access_token();
}
inline const std::string& InvalidateAccessTokenResponse::_internal_new_access_token() const {
  return new_access_token_.GetNoArena();
}
inline void InvalidateAccessTokenResponse::_internal_set_new_access_token(const std::string& value) {
  
  new_access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvalidateAccessTokenResponse::set_new_access_token(std::string&& value) {
  
  new_access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.InvalidateAccessTokenResponse.new_access_token)
}
inline void InvalidateAccessTokenResponse::set_new_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.InvalidateAccessTokenResponse.new_access_token)
}
inline void InvalidateAccessTokenResponse::set_new_access_token(const char* value, size_t size) {
  
  new_access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.InvalidateAccessTokenResponse.new_access_token)
}
inline std::string* InvalidateAccessTokenResponse::_internal_mutable_new_access_token() {
  
  return new_access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvalidateAccessTokenResponse::release_new_access_token() {
  // @@protoc_insertion_point(field_release:plaid.InvalidateAccessTokenResponse.new_access_token)
  
  return new_access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvalidateAccessTokenResponse::set_allocated_new_access_token(std::string* new_access_token) {
  if (new_access_token != nullptr) {
    
  } else {
    
  }
  new_access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.InvalidateAccessTokenResponse.new_access_token)
}

// -------------------------------------------------------------------

// UpdateAccessTokenVersionRequest

// string client_id = 1;
inline void UpdateAccessTokenVersionRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateAccessTokenVersionRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.UpdateAccessTokenVersionRequest.client_id)
  return _internal_client_id();
}
inline void UpdateAccessTokenVersionRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.UpdateAccessTokenVersionRequest.client_id)
}
inline std::string* UpdateAccessTokenVersionRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.UpdateAccessTokenVersionRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& UpdateAccessTokenVersionRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void UpdateAccessTokenVersionRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateAccessTokenVersionRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.UpdateAccessTokenVersionRequest.client_id)
}
inline void UpdateAccessTokenVersionRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.UpdateAccessTokenVersionRequest.client_id)
}
inline void UpdateAccessTokenVersionRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.UpdateAccessTokenVersionRequest.client_id)
}
inline std::string* UpdateAccessTokenVersionRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateAccessTokenVersionRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.UpdateAccessTokenVersionRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateAccessTokenVersionRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.UpdateAccessTokenVersionRequest.client_id)
}

// string secret = 2;
inline void UpdateAccessTokenVersionRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateAccessTokenVersionRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.UpdateAccessTokenVersionRequest.secret)
  return _internal_secret();
}
inline void UpdateAccessTokenVersionRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.UpdateAccessTokenVersionRequest.secret)
}
inline std::string* UpdateAccessTokenVersionRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.UpdateAccessTokenVersionRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& UpdateAccessTokenVersionRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void UpdateAccessTokenVersionRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateAccessTokenVersionRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.UpdateAccessTokenVersionRequest.secret)
}
inline void UpdateAccessTokenVersionRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.UpdateAccessTokenVersionRequest.secret)
}
inline void UpdateAccessTokenVersionRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.UpdateAccessTokenVersionRequest.secret)
}
inline std::string* UpdateAccessTokenVersionRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateAccessTokenVersionRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.UpdateAccessTokenVersionRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateAccessTokenVersionRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.UpdateAccessTokenVersionRequest.secret)
}

// string access_token_v2 = 3;
inline void UpdateAccessTokenVersionRequest::clear_access_token_v2() {
  access_token_v2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateAccessTokenVersionRequest::access_token_v2() const {
  // @@protoc_insertion_point(field_get:plaid.UpdateAccessTokenVersionRequest.access_token_v2)
  return _internal_access_token_v2();
}
inline void UpdateAccessTokenVersionRequest::set_access_token_v2(const std::string& value) {
  _internal_set_access_token_v2(value);
  // @@protoc_insertion_point(field_set:plaid.UpdateAccessTokenVersionRequest.access_token_v2)
}
inline std::string* UpdateAccessTokenVersionRequest::mutable_access_token_v2() {
  // @@protoc_insertion_point(field_mutable:plaid.UpdateAccessTokenVersionRequest.access_token_v2)
  return _internal_mutable_access_token_v2();
}
inline const std::string& UpdateAccessTokenVersionRequest::_internal_access_token_v2() const {
  return access_token_v2_.GetNoArena();
}
inline void UpdateAccessTokenVersionRequest::_internal_set_access_token_v2(const std::string& value) {
  
  access_token_v2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateAccessTokenVersionRequest::set_access_token_v2(std::string&& value) {
  
  access_token_v2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.UpdateAccessTokenVersionRequest.access_token_v2)
}
inline void UpdateAccessTokenVersionRequest::set_access_token_v2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_v2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.UpdateAccessTokenVersionRequest.access_token_v2)
}
inline void UpdateAccessTokenVersionRequest::set_access_token_v2(const char* value, size_t size) {
  
  access_token_v2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.UpdateAccessTokenVersionRequest.access_token_v2)
}
inline std::string* UpdateAccessTokenVersionRequest::_internal_mutable_access_token_v2() {
  
  return access_token_v2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateAccessTokenVersionRequest::release_access_token_v2() {
  // @@protoc_insertion_point(field_release:plaid.UpdateAccessTokenVersionRequest.access_token_v2)
  
  return access_token_v2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateAccessTokenVersionRequest::set_allocated_access_token_v2(std::string* access_token_v2) {
  if (access_token_v2 != nullptr) {
    
  } else {
    
  }
  access_token_v2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token_v2);
  // @@protoc_insertion_point(field_set_allocated:plaid.UpdateAccessTokenVersionRequest.access_token_v2)
}

// -------------------------------------------------------------------

// UpdateAccessTokenVersionResponse

// string request_id = 1;
inline void UpdateAccessTokenVersionResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateAccessTokenVersionResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.UpdateAccessTokenVersionResponse.request_id)
  return _internal_request_id();
}
inline void UpdateAccessTokenVersionResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.UpdateAccessTokenVersionResponse.request_id)
}
inline std::string* UpdateAccessTokenVersionResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.UpdateAccessTokenVersionResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& UpdateAccessTokenVersionResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void UpdateAccessTokenVersionResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateAccessTokenVersionResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.UpdateAccessTokenVersionResponse.request_id)
}
inline void UpdateAccessTokenVersionResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.UpdateAccessTokenVersionResponse.request_id)
}
inline void UpdateAccessTokenVersionResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.UpdateAccessTokenVersionResponse.request_id)
}
inline std::string* UpdateAccessTokenVersionResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateAccessTokenVersionResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.UpdateAccessTokenVersionResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateAccessTokenVersionResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.UpdateAccessTokenVersionResponse.request_id)
}

// string access_token = 2;
inline void UpdateAccessTokenVersionResponse::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateAccessTokenVersionResponse::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.UpdateAccessTokenVersionResponse.access_token)
  return _internal_access_token();
}
inline void UpdateAccessTokenVersionResponse::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.UpdateAccessTokenVersionResponse.access_token)
}
inline std::string* UpdateAccessTokenVersionResponse::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.UpdateAccessTokenVersionResponse.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& UpdateAccessTokenVersionResponse::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void UpdateAccessTokenVersionResponse::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateAccessTokenVersionResponse::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.UpdateAccessTokenVersionResponse.access_token)
}
inline void UpdateAccessTokenVersionResponse::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.UpdateAccessTokenVersionResponse.access_token)
}
inline void UpdateAccessTokenVersionResponse::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.UpdateAccessTokenVersionResponse.access_token)
}
inline std::string* UpdateAccessTokenVersionResponse::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateAccessTokenVersionResponse::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.UpdateAccessTokenVersionResponse.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateAccessTokenVersionResponse::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.UpdateAccessTokenVersionResponse.access_token)
}

// string item_id = 3;
inline void UpdateAccessTokenVersionResponse::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateAccessTokenVersionResponse::item_id() const {
  // @@protoc_insertion_point(field_get:plaid.UpdateAccessTokenVersionResponse.item_id)
  return _internal_item_id();
}
inline void UpdateAccessTokenVersionResponse::set_item_id(const std::string& value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:plaid.UpdateAccessTokenVersionResponse.item_id)
}
inline std::string* UpdateAccessTokenVersionResponse::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable:plaid.UpdateAccessTokenVersionResponse.item_id)
  return _internal_mutable_item_id();
}
inline const std::string& UpdateAccessTokenVersionResponse::_internal_item_id() const {
  return item_id_.GetNoArena();
}
inline void UpdateAccessTokenVersionResponse::_internal_set_item_id(const std::string& value) {
  
  item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateAccessTokenVersionResponse::set_item_id(std::string&& value) {
  
  item_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.UpdateAccessTokenVersionResponse.item_id)
}
inline void UpdateAccessTokenVersionResponse::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.UpdateAccessTokenVersionResponse.item_id)
}
inline void UpdateAccessTokenVersionResponse::set_item_id(const char* value, size_t size) {
  
  item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.UpdateAccessTokenVersionResponse.item_id)
}
inline std::string* UpdateAccessTokenVersionResponse::_internal_mutable_item_id() {
  
  return item_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateAccessTokenVersionResponse::release_item_id() {
  // @@protoc_insertion_point(field_release:plaid.UpdateAccessTokenVersionResponse.item_id)
  
  return item_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateAccessTokenVersionResponse::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.UpdateAccessTokenVersionResponse.item_id)
}

// -------------------------------------------------------------------

// CreatePublicTokenRequest

// string client_id = 1;
inline void CreatePublicTokenRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePublicTokenRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.CreatePublicTokenRequest.client_id)
  return _internal_client_id();
}
inline void CreatePublicTokenRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.CreatePublicTokenRequest.client_id)
}
inline std::string* CreatePublicTokenRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.CreatePublicTokenRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& CreatePublicTokenRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void CreatePublicTokenRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePublicTokenRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreatePublicTokenRequest.client_id)
}
inline void CreatePublicTokenRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreatePublicTokenRequest.client_id)
}
inline void CreatePublicTokenRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreatePublicTokenRequest.client_id)
}
inline std::string* CreatePublicTokenRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePublicTokenRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.CreatePublicTokenRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePublicTokenRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreatePublicTokenRequest.client_id)
}

// string secret = 2;
inline void CreatePublicTokenRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePublicTokenRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.CreatePublicTokenRequest.secret)
  return _internal_secret();
}
inline void CreatePublicTokenRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.CreatePublicTokenRequest.secret)
}
inline std::string* CreatePublicTokenRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.CreatePublicTokenRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& CreatePublicTokenRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void CreatePublicTokenRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePublicTokenRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreatePublicTokenRequest.secret)
}
inline void CreatePublicTokenRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreatePublicTokenRequest.secret)
}
inline void CreatePublicTokenRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreatePublicTokenRequest.secret)
}
inline std::string* CreatePublicTokenRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePublicTokenRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.CreatePublicTokenRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePublicTokenRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreatePublicTokenRequest.secret)
}

// string access_token = 3;
inline void CreatePublicTokenRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePublicTokenRequest::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.CreatePublicTokenRequest.access_token)
  return _internal_access_token();
}
inline void CreatePublicTokenRequest::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.CreatePublicTokenRequest.access_token)
}
inline std::string* CreatePublicTokenRequest::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.CreatePublicTokenRequest.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& CreatePublicTokenRequest::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void CreatePublicTokenRequest::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePublicTokenRequest::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreatePublicTokenRequest.access_token)
}
inline void CreatePublicTokenRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreatePublicTokenRequest.access_token)
}
inline void CreatePublicTokenRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreatePublicTokenRequest.access_token)
}
inline std::string* CreatePublicTokenRequest::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePublicTokenRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.CreatePublicTokenRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePublicTokenRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreatePublicTokenRequest.access_token)
}

// -------------------------------------------------------------------

// CreatePublicTokenResponse

// string request_id = 1;
inline void CreatePublicTokenResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePublicTokenResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.CreatePublicTokenResponse.request_id)
  return _internal_request_id();
}
inline void CreatePublicTokenResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.CreatePublicTokenResponse.request_id)
}
inline std::string* CreatePublicTokenResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.CreatePublicTokenResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& CreatePublicTokenResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void CreatePublicTokenResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePublicTokenResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreatePublicTokenResponse.request_id)
}
inline void CreatePublicTokenResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreatePublicTokenResponse.request_id)
}
inline void CreatePublicTokenResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreatePublicTokenResponse.request_id)
}
inline std::string* CreatePublicTokenResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePublicTokenResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.CreatePublicTokenResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePublicTokenResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreatePublicTokenResponse.request_id)
}

// string public_token = 2;
inline void CreatePublicTokenResponse::clear_public_token() {
  public_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePublicTokenResponse::public_token() const {
  // @@protoc_insertion_point(field_get:plaid.CreatePublicTokenResponse.public_token)
  return _internal_public_token();
}
inline void CreatePublicTokenResponse::set_public_token(const std::string& value) {
  _internal_set_public_token(value);
  // @@protoc_insertion_point(field_set:plaid.CreatePublicTokenResponse.public_token)
}
inline std::string* CreatePublicTokenResponse::mutable_public_token() {
  // @@protoc_insertion_point(field_mutable:plaid.CreatePublicTokenResponse.public_token)
  return _internal_mutable_public_token();
}
inline const std::string& CreatePublicTokenResponse::_internal_public_token() const {
  return public_token_.GetNoArena();
}
inline void CreatePublicTokenResponse::_internal_set_public_token(const std::string& value) {
  
  public_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePublicTokenResponse::set_public_token(std::string&& value) {
  
  public_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreatePublicTokenResponse.public_token)
}
inline void CreatePublicTokenResponse::set_public_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreatePublicTokenResponse.public_token)
}
inline void CreatePublicTokenResponse::set_public_token(const char* value, size_t size) {
  
  public_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreatePublicTokenResponse.public_token)
}
inline std::string* CreatePublicTokenResponse::_internal_mutable_public_token() {
  
  return public_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePublicTokenResponse::release_public_token() {
  // @@protoc_insertion_point(field_release:plaid.CreatePublicTokenResponse.public_token)
  
  return public_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePublicTokenResponse::set_allocated_public_token(std::string* public_token) {
  if (public_token != nullptr) {
    
  } else {
    
  }
  public_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreatePublicTokenResponse.public_token)
}

// -------------------------------------------------------------------

// ExchangePublicTokenRequest

// string client_id = 1;
inline void ExchangePublicTokenRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExchangePublicTokenRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.ExchangePublicTokenRequest.client_id)
  return _internal_client_id();
}
inline void ExchangePublicTokenRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.ExchangePublicTokenRequest.client_id)
}
inline std::string* ExchangePublicTokenRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.ExchangePublicTokenRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& ExchangePublicTokenRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void ExchangePublicTokenRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExchangePublicTokenRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.ExchangePublicTokenRequest.client_id)
}
inline void ExchangePublicTokenRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.ExchangePublicTokenRequest.client_id)
}
inline void ExchangePublicTokenRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.ExchangePublicTokenRequest.client_id)
}
inline std::string* ExchangePublicTokenRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExchangePublicTokenRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.ExchangePublicTokenRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExchangePublicTokenRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.ExchangePublicTokenRequest.client_id)
}

// string secret = 2;
inline void ExchangePublicTokenRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExchangePublicTokenRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.ExchangePublicTokenRequest.secret)
  return _internal_secret();
}
inline void ExchangePublicTokenRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.ExchangePublicTokenRequest.secret)
}
inline std::string* ExchangePublicTokenRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.ExchangePublicTokenRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& ExchangePublicTokenRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void ExchangePublicTokenRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExchangePublicTokenRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.ExchangePublicTokenRequest.secret)
}
inline void ExchangePublicTokenRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.ExchangePublicTokenRequest.secret)
}
inline void ExchangePublicTokenRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.ExchangePublicTokenRequest.secret)
}
inline std::string* ExchangePublicTokenRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExchangePublicTokenRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.ExchangePublicTokenRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExchangePublicTokenRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.ExchangePublicTokenRequest.secret)
}

// string public_token = 3;
inline void ExchangePublicTokenRequest::clear_public_token() {
  public_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExchangePublicTokenRequest::public_token() const {
  // @@protoc_insertion_point(field_get:plaid.ExchangePublicTokenRequest.public_token)
  return _internal_public_token();
}
inline void ExchangePublicTokenRequest::set_public_token(const std::string& value) {
  _internal_set_public_token(value);
  // @@protoc_insertion_point(field_set:plaid.ExchangePublicTokenRequest.public_token)
}
inline std::string* ExchangePublicTokenRequest::mutable_public_token() {
  // @@protoc_insertion_point(field_mutable:plaid.ExchangePublicTokenRequest.public_token)
  return _internal_mutable_public_token();
}
inline const std::string& ExchangePublicTokenRequest::_internal_public_token() const {
  return public_token_.GetNoArena();
}
inline void ExchangePublicTokenRequest::_internal_set_public_token(const std::string& value) {
  
  public_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExchangePublicTokenRequest::set_public_token(std::string&& value) {
  
  public_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.ExchangePublicTokenRequest.public_token)
}
inline void ExchangePublicTokenRequest::set_public_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.ExchangePublicTokenRequest.public_token)
}
inline void ExchangePublicTokenRequest::set_public_token(const char* value, size_t size) {
  
  public_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.ExchangePublicTokenRequest.public_token)
}
inline std::string* ExchangePublicTokenRequest::_internal_mutable_public_token() {
  
  return public_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExchangePublicTokenRequest::release_public_token() {
  // @@protoc_insertion_point(field_release:plaid.ExchangePublicTokenRequest.public_token)
  
  return public_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExchangePublicTokenRequest::set_allocated_public_token(std::string* public_token) {
  if (public_token != nullptr) {
    
  } else {
    
  }
  public_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.ExchangePublicTokenRequest.public_token)
}

// -------------------------------------------------------------------

// ExchangePublicTokenResponse

// string request_id = 1;
inline void ExchangePublicTokenResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExchangePublicTokenResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.ExchangePublicTokenResponse.request_id)
  return _internal_request_id();
}
inline void ExchangePublicTokenResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.ExchangePublicTokenResponse.request_id)
}
inline std::string* ExchangePublicTokenResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.ExchangePublicTokenResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& ExchangePublicTokenResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void ExchangePublicTokenResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExchangePublicTokenResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.ExchangePublicTokenResponse.request_id)
}
inline void ExchangePublicTokenResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.ExchangePublicTokenResponse.request_id)
}
inline void ExchangePublicTokenResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.ExchangePublicTokenResponse.request_id)
}
inline std::string* ExchangePublicTokenResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExchangePublicTokenResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.ExchangePublicTokenResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExchangePublicTokenResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.ExchangePublicTokenResponse.request_id)
}

// string access_token = 2;
inline void ExchangePublicTokenResponse::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExchangePublicTokenResponse::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.ExchangePublicTokenResponse.access_token)
  return _internal_access_token();
}
inline void ExchangePublicTokenResponse::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.ExchangePublicTokenResponse.access_token)
}
inline std::string* ExchangePublicTokenResponse::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.ExchangePublicTokenResponse.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& ExchangePublicTokenResponse::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void ExchangePublicTokenResponse::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExchangePublicTokenResponse::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.ExchangePublicTokenResponse.access_token)
}
inline void ExchangePublicTokenResponse::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.ExchangePublicTokenResponse.access_token)
}
inline void ExchangePublicTokenResponse::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.ExchangePublicTokenResponse.access_token)
}
inline std::string* ExchangePublicTokenResponse::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExchangePublicTokenResponse::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.ExchangePublicTokenResponse.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExchangePublicTokenResponse::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.ExchangePublicTokenResponse.access_token)
}

// string item_id = 3;
inline void ExchangePublicTokenResponse::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExchangePublicTokenResponse::item_id() const {
  // @@protoc_insertion_point(field_get:plaid.ExchangePublicTokenResponse.item_id)
  return _internal_item_id();
}
inline void ExchangePublicTokenResponse::set_item_id(const std::string& value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:plaid.ExchangePublicTokenResponse.item_id)
}
inline std::string* ExchangePublicTokenResponse::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable:plaid.ExchangePublicTokenResponse.item_id)
  return _internal_mutable_item_id();
}
inline const std::string& ExchangePublicTokenResponse::_internal_item_id() const {
  return item_id_.GetNoArena();
}
inline void ExchangePublicTokenResponse::_internal_set_item_id(const std::string& value) {
  
  item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExchangePublicTokenResponse::set_item_id(std::string&& value) {
  
  item_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.ExchangePublicTokenResponse.item_id)
}
inline void ExchangePublicTokenResponse::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.ExchangePublicTokenResponse.item_id)
}
inline void ExchangePublicTokenResponse::set_item_id(const char* value, size_t size) {
  
  item_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.ExchangePublicTokenResponse.item_id)
}
inline std::string* ExchangePublicTokenResponse::_internal_mutable_item_id() {
  
  return item_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExchangePublicTokenResponse::release_item_id() {
  // @@protoc_insertion_point(field_release:plaid.ExchangePublicTokenResponse.item_id)
  
  return item_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExchangePublicTokenResponse::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.ExchangePublicTokenResponse.item_id)
}

// -------------------------------------------------------------------

// StudentLoanLiability

// string account_id = 1;
inline void StudentLoanLiability::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanLiability::account_id() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.account_id)
  return _internal_account_id();
}
inline void StudentLoanLiability::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.account_id)
}
inline std::string* StudentLoanLiability::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanLiability.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& StudentLoanLiability::_internal_account_id() const {
  return account_id_.GetNoArena();
}
inline void StudentLoanLiability::_internal_set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanLiability::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanLiability.account_id)
}
inline void StudentLoanLiability::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanLiability.account_id)
}
inline void StudentLoanLiability::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanLiability.account_id)
}
inline std::string* StudentLoanLiability::_internal_mutable_account_id() {
  
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanLiability::release_account_id() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanLiability.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanLiability::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanLiability.account_id)
}

// string account_number = 2;
inline void StudentLoanLiability::clear_account_number() {
  account_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanLiability::account_number() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.account_number)
  return _internal_account_number();
}
inline void StudentLoanLiability::set_account_number(const std::string& value) {
  _internal_set_account_number(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.account_number)
}
inline std::string* StudentLoanLiability::mutable_account_number() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanLiability.account_number)
  return _internal_mutable_account_number();
}
inline const std::string& StudentLoanLiability::_internal_account_number() const {
  return account_number_.GetNoArena();
}
inline void StudentLoanLiability::_internal_set_account_number(const std::string& value) {
  
  account_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanLiability::set_account_number(std::string&& value) {
  
  account_number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanLiability.account_number)
}
inline void StudentLoanLiability::set_account_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanLiability.account_number)
}
inline void StudentLoanLiability::set_account_number(const char* value, size_t size) {
  
  account_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanLiability.account_number)
}
inline std::string* StudentLoanLiability::_internal_mutable_account_number() {
  
  return account_number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanLiability::release_account_number() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanLiability.account_number)
  
  return account_number_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanLiability::set_allocated_account_number(std::string* account_number) {
  if (account_number != nullptr) {
    
  } else {
    
  }
  account_number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_number);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanLiability.account_number)
}

// repeated string disbursement_dates = 3;
inline int StudentLoanLiability::_internal_disbursement_dates_size() const {
  return disbursement_dates_.size();
}
inline int StudentLoanLiability::disbursement_dates_size() const {
  return _internal_disbursement_dates_size();
}
inline void StudentLoanLiability::clear_disbursement_dates() {
  disbursement_dates_.Clear();
}
inline std::string* StudentLoanLiability::add_disbursement_dates() {
  // @@protoc_insertion_point(field_add_mutable:plaid.StudentLoanLiability.disbursement_dates)
  return _internal_add_disbursement_dates();
}
inline const std::string& StudentLoanLiability::_internal_disbursement_dates(int index) const {
  return disbursement_dates_.Get(index);
}
inline const std::string& StudentLoanLiability::disbursement_dates(int index) const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.disbursement_dates)
  return _internal_disbursement_dates(index);
}
inline std::string* StudentLoanLiability::mutable_disbursement_dates(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanLiability.disbursement_dates)
  return disbursement_dates_.Mutable(index);
}
inline void StudentLoanLiability::set_disbursement_dates(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.disbursement_dates)
  disbursement_dates_.Mutable(index)->assign(value);
}
inline void StudentLoanLiability::set_disbursement_dates(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.disbursement_dates)
  disbursement_dates_.Mutable(index)->assign(std::move(value));
}
inline void StudentLoanLiability::set_disbursement_dates(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  disbursement_dates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanLiability.disbursement_dates)
}
inline void StudentLoanLiability::set_disbursement_dates(int index, const char* value, size_t size) {
  disbursement_dates_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanLiability.disbursement_dates)
}
inline std::string* StudentLoanLiability::_internal_add_disbursement_dates() {
  return disbursement_dates_.Add();
}
inline void StudentLoanLiability::add_disbursement_dates(const std::string& value) {
  disbursement_dates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.StudentLoanLiability.disbursement_dates)
}
inline void StudentLoanLiability::add_disbursement_dates(std::string&& value) {
  disbursement_dates_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.StudentLoanLiability.disbursement_dates)
}
inline void StudentLoanLiability::add_disbursement_dates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  disbursement_dates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.StudentLoanLiability.disbursement_dates)
}
inline void StudentLoanLiability::add_disbursement_dates(const char* value, size_t size) {
  disbursement_dates_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.StudentLoanLiability.disbursement_dates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StudentLoanLiability::disbursement_dates() const {
  // @@protoc_insertion_point(field_list:plaid.StudentLoanLiability.disbursement_dates)
  return disbursement_dates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StudentLoanLiability::mutable_disbursement_dates() {
  // @@protoc_insertion_point(field_mutable_list:plaid.StudentLoanLiability.disbursement_dates)
  return &disbursement_dates_;
}

// string expected_payoff_date = 4;
inline void StudentLoanLiability::clear_expected_payoff_date() {
  expected_payoff_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanLiability::expected_payoff_date() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.expected_payoff_date)
  return _internal_expected_payoff_date();
}
inline void StudentLoanLiability::set_expected_payoff_date(const std::string& value) {
  _internal_set_expected_payoff_date(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.expected_payoff_date)
}
inline std::string* StudentLoanLiability::mutable_expected_payoff_date() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanLiability.expected_payoff_date)
  return _internal_mutable_expected_payoff_date();
}
inline const std::string& StudentLoanLiability::_internal_expected_payoff_date() const {
  return expected_payoff_date_.GetNoArena();
}
inline void StudentLoanLiability::_internal_set_expected_payoff_date(const std::string& value) {
  
  expected_payoff_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanLiability::set_expected_payoff_date(std::string&& value) {
  
  expected_payoff_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanLiability.expected_payoff_date)
}
inline void StudentLoanLiability::set_expected_payoff_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expected_payoff_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanLiability.expected_payoff_date)
}
inline void StudentLoanLiability::set_expected_payoff_date(const char* value, size_t size) {
  
  expected_payoff_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanLiability.expected_payoff_date)
}
inline std::string* StudentLoanLiability::_internal_mutable_expected_payoff_date() {
  
  return expected_payoff_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanLiability::release_expected_payoff_date() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanLiability.expected_payoff_date)
  
  return expected_payoff_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanLiability::set_allocated_expected_payoff_date(std::string* expected_payoff_date) {
  if (expected_payoff_date != nullptr) {
    
  } else {
    
  }
  expected_payoff_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expected_payoff_date);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanLiability.expected_payoff_date)
}

// string guarantor = 5;
inline void StudentLoanLiability::clear_guarantor() {
  guarantor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanLiability::guarantor() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.guarantor)
  return _internal_guarantor();
}
inline void StudentLoanLiability::set_guarantor(const std::string& value) {
  _internal_set_guarantor(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.guarantor)
}
inline std::string* StudentLoanLiability::mutable_guarantor() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanLiability.guarantor)
  return _internal_mutable_guarantor();
}
inline const std::string& StudentLoanLiability::_internal_guarantor() const {
  return guarantor_.GetNoArena();
}
inline void StudentLoanLiability::_internal_set_guarantor(const std::string& value) {
  
  guarantor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanLiability::set_guarantor(std::string&& value) {
  
  guarantor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanLiability.guarantor)
}
inline void StudentLoanLiability::set_guarantor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  guarantor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanLiability.guarantor)
}
inline void StudentLoanLiability::set_guarantor(const char* value, size_t size) {
  
  guarantor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanLiability.guarantor)
}
inline std::string* StudentLoanLiability::_internal_mutable_guarantor() {
  
  return guarantor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanLiability::release_guarantor() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanLiability.guarantor)
  
  return guarantor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanLiability::set_allocated_guarantor(std::string* guarantor) {
  if (guarantor != nullptr) {
    
  } else {
    
  }
  guarantor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guarantor);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanLiability.guarantor)
}

// double interest_rate_percentage = 6;
inline void StudentLoanLiability::clear_interest_rate_percentage() {
  interest_rate_percentage_ = 0;
}
inline double StudentLoanLiability::_internal_interest_rate_percentage() const {
  return interest_rate_percentage_;
}
inline double StudentLoanLiability::interest_rate_percentage() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.interest_rate_percentage)
  return _internal_interest_rate_percentage();
}
inline void StudentLoanLiability::_internal_set_interest_rate_percentage(double value) {
  
  interest_rate_percentage_ = value;
}
inline void StudentLoanLiability::set_interest_rate_percentage(double value) {
  _internal_set_interest_rate_percentage(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.interest_rate_percentage)
}

// bool is_overdue = 7;
inline void StudentLoanLiability::clear_is_overdue() {
  is_overdue_ = false;
}
inline bool StudentLoanLiability::_internal_is_overdue() const {
  return is_overdue_;
}
inline bool StudentLoanLiability::is_overdue() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.is_overdue)
  return _internal_is_overdue();
}
inline void StudentLoanLiability::_internal_set_is_overdue(bool value) {
  
  is_overdue_ = value;
}
inline void StudentLoanLiability::set_is_overdue(bool value) {
  _internal_set_is_overdue(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.is_overdue)
}

// double last_payment_amount = 8;
inline void StudentLoanLiability::clear_last_payment_amount() {
  last_payment_amount_ = 0;
}
inline double StudentLoanLiability::_internal_last_payment_amount() const {
  return last_payment_amount_;
}
inline double StudentLoanLiability::last_payment_amount() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.last_payment_amount)
  return _internal_last_payment_amount();
}
inline void StudentLoanLiability::_internal_set_last_payment_amount(double value) {
  
  last_payment_amount_ = value;
}
inline void StudentLoanLiability::set_last_payment_amount(double value) {
  _internal_set_last_payment_amount(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.last_payment_amount)
}

// string last_payment_date = 9;
inline void StudentLoanLiability::clear_last_payment_date() {
  last_payment_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanLiability::last_payment_date() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.last_payment_date)
  return _internal_last_payment_date();
}
inline void StudentLoanLiability::set_last_payment_date(const std::string& value) {
  _internal_set_last_payment_date(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.last_payment_date)
}
inline std::string* StudentLoanLiability::mutable_last_payment_date() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanLiability.last_payment_date)
  return _internal_mutable_last_payment_date();
}
inline const std::string& StudentLoanLiability::_internal_last_payment_date() const {
  return last_payment_date_.GetNoArena();
}
inline void StudentLoanLiability::_internal_set_last_payment_date(const std::string& value) {
  
  last_payment_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanLiability::set_last_payment_date(std::string&& value) {
  
  last_payment_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanLiability.last_payment_date)
}
inline void StudentLoanLiability::set_last_payment_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_payment_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanLiability.last_payment_date)
}
inline void StudentLoanLiability::set_last_payment_date(const char* value, size_t size) {
  
  last_payment_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanLiability.last_payment_date)
}
inline std::string* StudentLoanLiability::_internal_mutable_last_payment_date() {
  
  return last_payment_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanLiability::release_last_payment_date() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanLiability.last_payment_date)
  
  return last_payment_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanLiability::set_allocated_last_payment_date(std::string* last_payment_date) {
  if (last_payment_date != nullptr) {
    
  } else {
    
  }
  last_payment_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_payment_date);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanLiability.last_payment_date)
}

// double last_satement_balance = 10;
inline void StudentLoanLiability::clear_last_satement_balance() {
  last_satement_balance_ = 0;
}
inline double StudentLoanLiability::_internal_last_satement_balance() const {
  return last_satement_balance_;
}
inline double StudentLoanLiability::last_satement_balance() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.last_satement_balance)
  return _internal_last_satement_balance();
}
inline void StudentLoanLiability::_internal_set_last_satement_balance(double value) {
  
  last_satement_balance_ = value;
}
inline void StudentLoanLiability::set_last_satement_balance(double value) {
  _internal_set_last_satement_balance(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.last_satement_balance)
}

// string last_statement_issue_date = 11;
inline void StudentLoanLiability::clear_last_statement_issue_date() {
  last_statement_issue_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanLiability::last_statement_issue_date() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.last_statement_issue_date)
  return _internal_last_statement_issue_date();
}
inline void StudentLoanLiability::set_last_statement_issue_date(const std::string& value) {
  _internal_set_last_statement_issue_date(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.last_statement_issue_date)
}
inline std::string* StudentLoanLiability::mutable_last_statement_issue_date() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanLiability.last_statement_issue_date)
  return _internal_mutable_last_statement_issue_date();
}
inline const std::string& StudentLoanLiability::_internal_last_statement_issue_date() const {
  return last_statement_issue_date_.GetNoArena();
}
inline void StudentLoanLiability::_internal_set_last_statement_issue_date(const std::string& value) {
  
  last_statement_issue_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanLiability::set_last_statement_issue_date(std::string&& value) {
  
  last_statement_issue_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanLiability.last_statement_issue_date)
}
inline void StudentLoanLiability::set_last_statement_issue_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_statement_issue_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanLiability.last_statement_issue_date)
}
inline void StudentLoanLiability::set_last_statement_issue_date(const char* value, size_t size) {
  
  last_statement_issue_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanLiability.last_statement_issue_date)
}
inline std::string* StudentLoanLiability::_internal_mutable_last_statement_issue_date() {
  
  return last_statement_issue_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanLiability::release_last_statement_issue_date() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanLiability.last_statement_issue_date)
  
  return last_statement_issue_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanLiability::set_allocated_last_statement_issue_date(std::string* last_statement_issue_date) {
  if (last_statement_issue_date != nullptr) {
    
  } else {
    
  }
  last_statement_issue_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_statement_issue_date);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanLiability.last_statement_issue_date)
}

// string loan_name = 12;
inline void StudentLoanLiability::clear_loan_name() {
  loan_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanLiability::loan_name() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.loan_name)
  return _internal_loan_name();
}
inline void StudentLoanLiability::set_loan_name(const std::string& value) {
  _internal_set_loan_name(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.loan_name)
}
inline std::string* StudentLoanLiability::mutable_loan_name() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanLiability.loan_name)
  return _internal_mutable_loan_name();
}
inline const std::string& StudentLoanLiability::_internal_loan_name() const {
  return loan_name_.GetNoArena();
}
inline void StudentLoanLiability::_internal_set_loan_name(const std::string& value) {
  
  loan_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanLiability::set_loan_name(std::string&& value) {
  
  loan_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanLiability.loan_name)
}
inline void StudentLoanLiability::set_loan_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loan_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanLiability.loan_name)
}
inline void StudentLoanLiability::set_loan_name(const char* value, size_t size) {
  
  loan_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanLiability.loan_name)
}
inline std::string* StudentLoanLiability::_internal_mutable_loan_name() {
  
  return loan_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanLiability::release_loan_name() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanLiability.loan_name)
  
  return loan_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanLiability::set_allocated_loan_name(std::string* loan_name) {
  if (loan_name != nullptr) {
    
  } else {
    
  }
  loan_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loan_name);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanLiability.loan_name)
}

// .plaid.StudentLoanStatus loan_status = 13;
inline bool StudentLoanLiability::_internal_has_loan_status() const {
  return this != internal_default_instance() && loan_status_ != nullptr;
}
inline bool StudentLoanLiability::has_loan_status() const {
  return _internal_has_loan_status();
}
inline void StudentLoanLiability::clear_loan_status() {
  if (GetArenaNoVirtual() == nullptr && loan_status_ != nullptr) {
    delete loan_status_;
  }
  loan_status_ = nullptr;
}
inline const ::plaid::StudentLoanStatus& StudentLoanLiability::_internal_loan_status() const {
  const ::plaid::StudentLoanStatus* p = loan_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::StudentLoanStatus*>(
      &::plaid::_StudentLoanStatus_default_instance_);
}
inline const ::plaid::StudentLoanStatus& StudentLoanLiability::loan_status() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.loan_status)
  return _internal_loan_status();
}
inline ::plaid::StudentLoanStatus* StudentLoanLiability::release_loan_status() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanLiability.loan_status)
  
  ::plaid::StudentLoanStatus* temp = loan_status_;
  loan_status_ = nullptr;
  return temp;
}
inline ::plaid::StudentLoanStatus* StudentLoanLiability::_internal_mutable_loan_status() {
  
  if (loan_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::StudentLoanStatus>(GetArenaNoVirtual());
    loan_status_ = p;
  }
  return loan_status_;
}
inline ::plaid::StudentLoanStatus* StudentLoanLiability::mutable_loan_status() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanLiability.loan_status)
  return _internal_mutable_loan_status();
}
inline void StudentLoanLiability::set_allocated_loan_status(::plaid::StudentLoanStatus* loan_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete loan_status_;
  }
  if (loan_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      loan_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loan_status, submessage_arena);
    }
    
  } else {
    
  }
  loan_status_ = loan_status;
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanLiability.loan_status)
}

// double minimum_payment_amount = 14;
inline void StudentLoanLiability::clear_minimum_payment_amount() {
  minimum_payment_amount_ = 0;
}
inline double StudentLoanLiability::_internal_minimum_payment_amount() const {
  return minimum_payment_amount_;
}
inline double StudentLoanLiability::minimum_payment_amount() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.minimum_payment_amount)
  return _internal_minimum_payment_amount();
}
inline void StudentLoanLiability::_internal_set_minimum_payment_amount(double value) {
  
  minimum_payment_amount_ = value;
}
inline void StudentLoanLiability::set_minimum_payment_amount(double value) {
  _internal_set_minimum_payment_amount(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.minimum_payment_amount)
}

// string next_payment_due_date = 15;
inline void StudentLoanLiability::clear_next_payment_due_date() {
  next_payment_due_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanLiability::next_payment_due_date() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.next_payment_due_date)
  return _internal_next_payment_due_date();
}
inline void StudentLoanLiability::set_next_payment_due_date(const std::string& value) {
  _internal_set_next_payment_due_date(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.next_payment_due_date)
}
inline std::string* StudentLoanLiability::mutable_next_payment_due_date() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanLiability.next_payment_due_date)
  return _internal_mutable_next_payment_due_date();
}
inline const std::string& StudentLoanLiability::_internal_next_payment_due_date() const {
  return next_payment_due_date_.GetNoArena();
}
inline void StudentLoanLiability::_internal_set_next_payment_due_date(const std::string& value) {
  
  next_payment_due_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanLiability::set_next_payment_due_date(std::string&& value) {
  
  next_payment_due_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanLiability.next_payment_due_date)
}
inline void StudentLoanLiability::set_next_payment_due_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_payment_due_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanLiability.next_payment_due_date)
}
inline void StudentLoanLiability::set_next_payment_due_date(const char* value, size_t size) {
  
  next_payment_due_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanLiability.next_payment_due_date)
}
inline std::string* StudentLoanLiability::_internal_mutable_next_payment_due_date() {
  
  return next_payment_due_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanLiability::release_next_payment_due_date() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanLiability.next_payment_due_date)
  
  return next_payment_due_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanLiability::set_allocated_next_payment_due_date(std::string* next_payment_due_date) {
  if (next_payment_due_date != nullptr) {
    
  } else {
    
  }
  next_payment_due_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_payment_due_date);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanLiability.next_payment_due_date)
}

// string origination_date = 16;
inline void StudentLoanLiability::clear_origination_date() {
  origination_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanLiability::origination_date() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.origination_date)
  return _internal_origination_date();
}
inline void StudentLoanLiability::set_origination_date(const std::string& value) {
  _internal_set_origination_date(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.origination_date)
}
inline std::string* StudentLoanLiability::mutable_origination_date() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanLiability.origination_date)
  return _internal_mutable_origination_date();
}
inline const std::string& StudentLoanLiability::_internal_origination_date() const {
  return origination_date_.GetNoArena();
}
inline void StudentLoanLiability::_internal_set_origination_date(const std::string& value) {
  
  origination_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanLiability::set_origination_date(std::string&& value) {
  
  origination_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanLiability.origination_date)
}
inline void StudentLoanLiability::set_origination_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  origination_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanLiability.origination_date)
}
inline void StudentLoanLiability::set_origination_date(const char* value, size_t size) {
  
  origination_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanLiability.origination_date)
}
inline std::string* StudentLoanLiability::_internal_mutable_origination_date() {
  
  return origination_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanLiability::release_origination_date() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanLiability.origination_date)
  
  return origination_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanLiability::set_allocated_origination_date(std::string* origination_date) {
  if (origination_date != nullptr) {
    
  } else {
    
  }
  origination_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origination_date);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanLiability.origination_date)
}

// double origination_principal_amount = 17;
inline void StudentLoanLiability::clear_origination_principal_amount() {
  origination_principal_amount_ = 0;
}
inline double StudentLoanLiability::_internal_origination_principal_amount() const {
  return origination_principal_amount_;
}
inline double StudentLoanLiability::origination_principal_amount() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.origination_principal_amount)
  return _internal_origination_principal_amount();
}
inline void StudentLoanLiability::_internal_set_origination_principal_amount(double value) {
  
  origination_principal_amount_ = value;
}
inline void StudentLoanLiability::set_origination_principal_amount(double value) {
  _internal_set_origination_principal_amount(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.origination_principal_amount)
}

// double outstanding_interest_amount = 18;
inline void StudentLoanLiability::clear_outstanding_interest_amount() {
  outstanding_interest_amount_ = 0;
}
inline double StudentLoanLiability::_internal_outstanding_interest_amount() const {
  return outstanding_interest_amount_;
}
inline double StudentLoanLiability::outstanding_interest_amount() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.outstanding_interest_amount)
  return _internal_outstanding_interest_amount();
}
inline void StudentLoanLiability::_internal_set_outstanding_interest_amount(double value) {
  
  outstanding_interest_amount_ = value;
}
inline void StudentLoanLiability::set_outstanding_interest_amount(double value) {
  _internal_set_outstanding_interest_amount(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.outstanding_interest_amount)
}

// string payment_reference_number = 19;
inline void StudentLoanLiability::clear_payment_reference_number() {
  payment_reference_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanLiability::payment_reference_number() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.payment_reference_number)
  return _internal_payment_reference_number();
}
inline void StudentLoanLiability::set_payment_reference_number(const std::string& value) {
  _internal_set_payment_reference_number(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.payment_reference_number)
}
inline std::string* StudentLoanLiability::mutable_payment_reference_number() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanLiability.payment_reference_number)
  return _internal_mutable_payment_reference_number();
}
inline const std::string& StudentLoanLiability::_internal_payment_reference_number() const {
  return payment_reference_number_.GetNoArena();
}
inline void StudentLoanLiability::_internal_set_payment_reference_number(const std::string& value) {
  
  payment_reference_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanLiability::set_payment_reference_number(std::string&& value) {
  
  payment_reference_number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanLiability.payment_reference_number)
}
inline void StudentLoanLiability::set_payment_reference_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_reference_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanLiability.payment_reference_number)
}
inline void StudentLoanLiability::set_payment_reference_number(const char* value, size_t size) {
  
  payment_reference_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanLiability.payment_reference_number)
}
inline std::string* StudentLoanLiability::_internal_mutable_payment_reference_number() {
  
  return payment_reference_number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanLiability::release_payment_reference_number() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanLiability.payment_reference_number)
  
  return payment_reference_number_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanLiability::set_allocated_payment_reference_number(std::string* payment_reference_number) {
  if (payment_reference_number != nullptr) {
    
  } else {
    
  }
  payment_reference_number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_reference_number);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanLiability.payment_reference_number)
}

// .plaid.PSLFStatus pslf_status = 20;
inline bool StudentLoanLiability::_internal_has_pslf_status() const {
  return this != internal_default_instance() && pslf_status_ != nullptr;
}
inline bool StudentLoanLiability::has_pslf_status() const {
  return _internal_has_pslf_status();
}
inline void StudentLoanLiability::clear_pslf_status() {
  if (GetArenaNoVirtual() == nullptr && pslf_status_ != nullptr) {
    delete pslf_status_;
  }
  pslf_status_ = nullptr;
}
inline const ::plaid::PSLFStatus& StudentLoanLiability::_internal_pslf_status() const {
  const ::plaid::PSLFStatus* p = pslf_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::PSLFStatus*>(
      &::plaid::_PSLFStatus_default_instance_);
}
inline const ::plaid::PSLFStatus& StudentLoanLiability::pslf_status() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.pslf_status)
  return _internal_pslf_status();
}
inline ::plaid::PSLFStatus* StudentLoanLiability::release_pslf_status() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanLiability.pslf_status)
  
  ::plaid::PSLFStatus* temp = pslf_status_;
  pslf_status_ = nullptr;
  return temp;
}
inline ::plaid::PSLFStatus* StudentLoanLiability::_internal_mutable_pslf_status() {
  
  if (pslf_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::PSLFStatus>(GetArenaNoVirtual());
    pslf_status_ = p;
  }
  return pslf_status_;
}
inline ::plaid::PSLFStatus* StudentLoanLiability::mutable_pslf_status() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanLiability.pslf_status)
  return _internal_mutable_pslf_status();
}
inline void StudentLoanLiability::set_allocated_pslf_status(::plaid::PSLFStatus* pslf_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pslf_status_;
  }
  if (pslf_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pslf_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pslf_status, submessage_arena);
    }
    
  } else {
    
  }
  pslf_status_ = pslf_status;
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanLiability.pslf_status)
}

// .plaid.StudentLoanRepaymentPlan repayment_plan = 21;
inline bool StudentLoanLiability::_internal_has_repayment_plan() const {
  return this != internal_default_instance() && repayment_plan_ != nullptr;
}
inline bool StudentLoanLiability::has_repayment_plan() const {
  return _internal_has_repayment_plan();
}
inline void StudentLoanLiability::clear_repayment_plan() {
  if (GetArenaNoVirtual() == nullptr && repayment_plan_ != nullptr) {
    delete repayment_plan_;
  }
  repayment_plan_ = nullptr;
}
inline const ::plaid::StudentLoanRepaymentPlan& StudentLoanLiability::_internal_repayment_plan() const {
  const ::plaid::StudentLoanRepaymentPlan* p = repayment_plan_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::StudentLoanRepaymentPlan*>(
      &::plaid::_StudentLoanRepaymentPlan_default_instance_);
}
inline const ::plaid::StudentLoanRepaymentPlan& StudentLoanLiability::repayment_plan() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.repayment_plan)
  return _internal_repayment_plan();
}
inline ::plaid::StudentLoanRepaymentPlan* StudentLoanLiability::release_repayment_plan() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanLiability.repayment_plan)
  
  ::plaid::StudentLoanRepaymentPlan* temp = repayment_plan_;
  repayment_plan_ = nullptr;
  return temp;
}
inline ::plaid::StudentLoanRepaymentPlan* StudentLoanLiability::_internal_mutable_repayment_plan() {
  
  if (repayment_plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::StudentLoanRepaymentPlan>(GetArenaNoVirtual());
    repayment_plan_ = p;
  }
  return repayment_plan_;
}
inline ::plaid::StudentLoanRepaymentPlan* StudentLoanLiability::mutable_repayment_plan() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanLiability.repayment_plan)
  return _internal_mutable_repayment_plan();
}
inline void StudentLoanLiability::set_allocated_repayment_plan(::plaid::StudentLoanRepaymentPlan* repayment_plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete repayment_plan_;
  }
  if (repayment_plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      repayment_plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, repayment_plan, submessage_arena);
    }
    
  } else {
    
  }
  repayment_plan_ = repayment_plan;
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanLiability.repayment_plan)
}

// string sequence_number = 22;
inline void StudentLoanLiability::clear_sequence_number() {
  sequence_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanLiability::sequence_number() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.sequence_number)
  return _internal_sequence_number();
}
inline void StudentLoanLiability::set_sequence_number(const std::string& value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.sequence_number)
}
inline std::string* StudentLoanLiability::mutable_sequence_number() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanLiability.sequence_number)
  return _internal_mutable_sequence_number();
}
inline const std::string& StudentLoanLiability::_internal_sequence_number() const {
  return sequence_number_.GetNoArena();
}
inline void StudentLoanLiability::_internal_set_sequence_number(const std::string& value) {
  
  sequence_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanLiability::set_sequence_number(std::string&& value) {
  
  sequence_number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanLiability.sequence_number)
}
inline void StudentLoanLiability::set_sequence_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sequence_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanLiability.sequence_number)
}
inline void StudentLoanLiability::set_sequence_number(const char* value, size_t size) {
  
  sequence_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanLiability.sequence_number)
}
inline std::string* StudentLoanLiability::_internal_mutable_sequence_number() {
  
  return sequence_number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanLiability::release_sequence_number() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanLiability.sequence_number)
  
  return sequence_number_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanLiability::set_allocated_sequence_number(std::string* sequence_number) {
  if (sequence_number != nullptr) {
    
  } else {
    
  }
  sequence_number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequence_number);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanLiability.sequence_number)
}

// .plaid.StudentLoanServicerAddress servicer_address = 23;
inline bool StudentLoanLiability::_internal_has_servicer_address() const {
  return this != internal_default_instance() && servicer_address_ != nullptr;
}
inline bool StudentLoanLiability::has_servicer_address() const {
  return _internal_has_servicer_address();
}
inline void StudentLoanLiability::clear_servicer_address() {
  if (GetArenaNoVirtual() == nullptr && servicer_address_ != nullptr) {
    delete servicer_address_;
  }
  servicer_address_ = nullptr;
}
inline const ::plaid::StudentLoanServicerAddress& StudentLoanLiability::_internal_servicer_address() const {
  const ::plaid::StudentLoanServicerAddress* p = servicer_address_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::StudentLoanServicerAddress*>(
      &::plaid::_StudentLoanServicerAddress_default_instance_);
}
inline const ::plaid::StudentLoanServicerAddress& StudentLoanLiability::servicer_address() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.servicer_address)
  return _internal_servicer_address();
}
inline ::plaid::StudentLoanServicerAddress* StudentLoanLiability::release_servicer_address() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanLiability.servicer_address)
  
  ::plaid::StudentLoanServicerAddress* temp = servicer_address_;
  servicer_address_ = nullptr;
  return temp;
}
inline ::plaid::StudentLoanServicerAddress* StudentLoanLiability::_internal_mutable_servicer_address() {
  
  if (servicer_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::StudentLoanServicerAddress>(GetArenaNoVirtual());
    servicer_address_ = p;
  }
  return servicer_address_;
}
inline ::plaid::StudentLoanServicerAddress* StudentLoanLiability::mutable_servicer_address() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanLiability.servicer_address)
  return _internal_mutable_servicer_address();
}
inline void StudentLoanLiability::set_allocated_servicer_address(::plaid::StudentLoanServicerAddress* servicer_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete servicer_address_;
  }
  if (servicer_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      servicer_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, servicer_address, submessage_arena);
    }
    
  } else {
    
  }
  servicer_address_ = servicer_address;
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanLiability.servicer_address)
}

// double ytd_interest_paid = 24;
inline void StudentLoanLiability::clear_ytd_interest_paid() {
  ytd_interest_paid_ = 0;
}
inline double StudentLoanLiability::_internal_ytd_interest_paid() const {
  return ytd_interest_paid_;
}
inline double StudentLoanLiability::ytd_interest_paid() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.ytd_interest_paid)
  return _internal_ytd_interest_paid();
}
inline void StudentLoanLiability::_internal_set_ytd_interest_paid(double value) {
  
  ytd_interest_paid_ = value;
}
inline void StudentLoanLiability::set_ytd_interest_paid(double value) {
  _internal_set_ytd_interest_paid(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.ytd_interest_paid)
}

// double ytd_principal_paid = 25;
inline void StudentLoanLiability::clear_ytd_principal_paid() {
  ytd_principal_paid_ = 0;
}
inline double StudentLoanLiability::_internal_ytd_principal_paid() const {
  return ytd_principal_paid_;
}
inline double StudentLoanLiability::ytd_principal_paid() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanLiability.ytd_principal_paid)
  return _internal_ytd_principal_paid();
}
inline void StudentLoanLiability::_internal_set_ytd_principal_paid(double value) {
  
  ytd_principal_paid_ = value;
}
inline void StudentLoanLiability::set_ytd_principal_paid(double value) {
  _internal_set_ytd_principal_paid(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanLiability.ytd_principal_paid)
}

// -------------------------------------------------------------------

// PSLFStatus

// string estimated_eligibility_date = 1;
inline void PSLFStatus::clear_estimated_eligibility_date() {
  estimated_eligibility_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PSLFStatus::estimated_eligibility_date() const {
  // @@protoc_insertion_point(field_get:plaid.PSLFStatus.estimated_eligibility_date)
  return _internal_estimated_eligibility_date();
}
inline void PSLFStatus::set_estimated_eligibility_date(const std::string& value) {
  _internal_set_estimated_eligibility_date(value);
  // @@protoc_insertion_point(field_set:plaid.PSLFStatus.estimated_eligibility_date)
}
inline std::string* PSLFStatus::mutable_estimated_eligibility_date() {
  // @@protoc_insertion_point(field_mutable:plaid.PSLFStatus.estimated_eligibility_date)
  return _internal_mutable_estimated_eligibility_date();
}
inline const std::string& PSLFStatus::_internal_estimated_eligibility_date() const {
  return estimated_eligibility_date_.GetNoArena();
}
inline void PSLFStatus::_internal_set_estimated_eligibility_date(const std::string& value) {
  
  estimated_eligibility_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PSLFStatus::set_estimated_eligibility_date(std::string&& value) {
  
  estimated_eligibility_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.PSLFStatus.estimated_eligibility_date)
}
inline void PSLFStatus::set_estimated_eligibility_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  estimated_eligibility_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.PSLFStatus.estimated_eligibility_date)
}
inline void PSLFStatus::set_estimated_eligibility_date(const char* value, size_t size) {
  
  estimated_eligibility_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.PSLFStatus.estimated_eligibility_date)
}
inline std::string* PSLFStatus::_internal_mutable_estimated_eligibility_date() {
  
  return estimated_eligibility_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PSLFStatus::release_estimated_eligibility_date() {
  // @@protoc_insertion_point(field_release:plaid.PSLFStatus.estimated_eligibility_date)
  
  return estimated_eligibility_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PSLFStatus::set_allocated_estimated_eligibility_date(std::string* estimated_eligibility_date) {
  if (estimated_eligibility_date != nullptr) {
    
  } else {
    
  }
  estimated_eligibility_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), estimated_eligibility_date);
  // @@protoc_insertion_point(field_set_allocated:plaid.PSLFStatus.estimated_eligibility_date)
}

// int64 payments_made = 2;
inline void PSLFStatus::clear_payments_made() {
  payments_made_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PSLFStatus::_internal_payments_made() const {
  return payments_made_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PSLFStatus::payments_made() const {
  // @@protoc_insertion_point(field_get:plaid.PSLFStatus.payments_made)
  return _internal_payments_made();
}
inline void PSLFStatus::_internal_set_payments_made(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  payments_made_ = value;
}
inline void PSLFStatus::set_payments_made(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_payments_made(value);
  // @@protoc_insertion_point(field_set:plaid.PSLFStatus.payments_made)
}

// int64 payments_remaining = 3;
inline void PSLFStatus::clear_payments_remaining() {
  payments_remaining_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PSLFStatus::_internal_payments_remaining() const {
  return payments_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PSLFStatus::payments_remaining() const {
  // @@protoc_insertion_point(field_get:plaid.PSLFStatus.payments_remaining)
  return _internal_payments_remaining();
}
inline void PSLFStatus::_internal_set_payments_remaining(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  payments_remaining_ = value;
}
inline void PSLFStatus::set_payments_remaining(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_payments_remaining(value);
  // @@protoc_insertion_point(field_set:plaid.PSLFStatus.payments_remaining)
}

// -------------------------------------------------------------------

// StudentLoanServicerAddress

// string city = 1;
inline void StudentLoanServicerAddress::clear_city() {
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanServicerAddress::city() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanServicerAddress.city)
  return _internal_city();
}
inline void StudentLoanServicerAddress::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanServicerAddress.city)
}
inline std::string* StudentLoanServicerAddress::mutable_city() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanServicerAddress.city)
  return _internal_mutable_city();
}
inline const std::string& StudentLoanServicerAddress::_internal_city() const {
  return city_.GetNoArena();
}
inline void StudentLoanServicerAddress::_internal_set_city(const std::string& value) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanServicerAddress::set_city(std::string&& value) {
  
  city_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanServicerAddress.city)
}
inline void StudentLoanServicerAddress::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanServicerAddress.city)
}
inline void StudentLoanServicerAddress::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanServicerAddress.city)
}
inline std::string* StudentLoanServicerAddress::_internal_mutable_city() {
  
  return city_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanServicerAddress::release_city() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanServicerAddress.city)
  
  return city_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanServicerAddress::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanServicerAddress.city)
}

// string country = 2;
inline void StudentLoanServicerAddress::clear_country() {
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanServicerAddress::country() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanServicerAddress.country)
  return _internal_country();
}
inline void StudentLoanServicerAddress::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanServicerAddress.country)
}
inline std::string* StudentLoanServicerAddress::mutable_country() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanServicerAddress.country)
  return _internal_mutable_country();
}
inline const std::string& StudentLoanServicerAddress::_internal_country() const {
  return country_.GetNoArena();
}
inline void StudentLoanServicerAddress::_internal_set_country(const std::string& value) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanServicerAddress::set_country(std::string&& value) {
  
  country_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanServicerAddress.country)
}
inline void StudentLoanServicerAddress::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanServicerAddress.country)
}
inline void StudentLoanServicerAddress::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanServicerAddress.country)
}
inline std::string* StudentLoanServicerAddress::_internal_mutable_country() {
  
  return country_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanServicerAddress::release_country() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanServicerAddress.country)
  
  return country_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanServicerAddress::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanServicerAddress.country)
}

// string postal_code = 3;
inline void StudentLoanServicerAddress::clear_postal_code() {
  postal_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanServicerAddress::postal_code() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanServicerAddress.postal_code)
  return _internal_postal_code();
}
inline void StudentLoanServicerAddress::set_postal_code(const std::string& value) {
  _internal_set_postal_code(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanServicerAddress.postal_code)
}
inline std::string* StudentLoanServicerAddress::mutable_postal_code() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanServicerAddress.postal_code)
  return _internal_mutable_postal_code();
}
inline const std::string& StudentLoanServicerAddress::_internal_postal_code() const {
  return postal_code_.GetNoArena();
}
inline void StudentLoanServicerAddress::_internal_set_postal_code(const std::string& value) {
  
  postal_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanServicerAddress::set_postal_code(std::string&& value) {
  
  postal_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanServicerAddress.postal_code)
}
inline void StudentLoanServicerAddress::set_postal_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  postal_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanServicerAddress.postal_code)
}
inline void StudentLoanServicerAddress::set_postal_code(const char* value, size_t size) {
  
  postal_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanServicerAddress.postal_code)
}
inline std::string* StudentLoanServicerAddress::_internal_mutable_postal_code() {
  
  return postal_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanServicerAddress::release_postal_code() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanServicerAddress.postal_code)
  
  return postal_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanServicerAddress::set_allocated_postal_code(std::string* postal_code) {
  if (postal_code != nullptr) {
    
  } else {
    
  }
  postal_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), postal_code);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanServicerAddress.postal_code)
}

// string region = 4;
inline void StudentLoanServicerAddress::clear_region() {
  region_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanServicerAddress::region() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanServicerAddress.region)
  return _internal_region();
}
inline void StudentLoanServicerAddress::set_region(const std::string& value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanServicerAddress.region)
}
inline std::string* StudentLoanServicerAddress::mutable_region() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanServicerAddress.region)
  return _internal_mutable_region();
}
inline const std::string& StudentLoanServicerAddress::_internal_region() const {
  return region_.GetNoArena();
}
inline void StudentLoanServicerAddress::_internal_set_region(const std::string& value) {
  
  region_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanServicerAddress::set_region(std::string&& value) {
  
  region_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanServicerAddress.region)
}
inline void StudentLoanServicerAddress::set_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanServicerAddress.region)
}
inline void StudentLoanServicerAddress::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanServicerAddress.region)
}
inline std::string* StudentLoanServicerAddress::_internal_mutable_region() {
  
  return region_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanServicerAddress::release_region() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanServicerAddress.region)
  
  return region_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanServicerAddress::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanServicerAddress.region)
}

// string street = 5;
inline void StudentLoanServicerAddress::clear_street() {
  street_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanServicerAddress::street() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanServicerAddress.street)
  return _internal_street();
}
inline void StudentLoanServicerAddress::set_street(const std::string& value) {
  _internal_set_street(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanServicerAddress.street)
}
inline std::string* StudentLoanServicerAddress::mutable_street() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanServicerAddress.street)
  return _internal_mutable_street();
}
inline const std::string& StudentLoanServicerAddress::_internal_street() const {
  return street_.GetNoArena();
}
inline void StudentLoanServicerAddress::_internal_set_street(const std::string& value) {
  
  street_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanServicerAddress::set_street(std::string&& value) {
  
  street_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanServicerAddress.street)
}
inline void StudentLoanServicerAddress::set_street(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  street_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanServicerAddress.street)
}
inline void StudentLoanServicerAddress::set_street(const char* value, size_t size) {
  
  street_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanServicerAddress.street)
}
inline std::string* StudentLoanServicerAddress::_internal_mutable_street() {
  
  return street_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanServicerAddress::release_street() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanServicerAddress.street)
  
  return street_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanServicerAddress::set_allocated_street(std::string* street) {
  if (street != nullptr) {
    
  } else {
    
  }
  street_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), street);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanServicerAddress.street)
}

// -------------------------------------------------------------------

// StudentLoanStatus

// string type = 1;
inline void StudentLoanStatus::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanStatus::type() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanStatus.type)
  return _internal_type();
}
inline void StudentLoanStatus::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanStatus.type)
}
inline std::string* StudentLoanStatus::mutable_type() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanStatus.type)
  return _internal_mutable_type();
}
inline const std::string& StudentLoanStatus::_internal_type() const {
  return type_.GetNoArena();
}
inline void StudentLoanStatus::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanStatus::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanStatus.type)
}
inline void StudentLoanStatus::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanStatus.type)
}
inline void StudentLoanStatus::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanStatus.type)
}
inline std::string* StudentLoanStatus::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanStatus::release_type() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanStatus.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanStatus::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanStatus.type)
}

// string end_date = 2;
inline void StudentLoanStatus::clear_end_date() {
  end_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanStatus::end_date() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanStatus.end_date)
  return _internal_end_date();
}
inline void StudentLoanStatus::set_end_date(const std::string& value) {
  _internal_set_end_date(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanStatus.end_date)
}
inline std::string* StudentLoanStatus::mutable_end_date() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanStatus.end_date)
  return _internal_mutable_end_date();
}
inline const std::string& StudentLoanStatus::_internal_end_date() const {
  return end_date_.GetNoArena();
}
inline void StudentLoanStatus::_internal_set_end_date(const std::string& value) {
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanStatus::set_end_date(std::string&& value) {
  
  end_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanStatus.end_date)
}
inline void StudentLoanStatus::set_end_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanStatus.end_date)
}
inline void StudentLoanStatus::set_end_date(const char* value, size_t size) {
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanStatus.end_date)
}
inline std::string* StudentLoanStatus::_internal_mutable_end_date() {
  
  return end_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanStatus::release_end_date() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanStatus.end_date)
  
  return end_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanStatus::set_allocated_end_date(std::string* end_date) {
  if (end_date != nullptr) {
    
  } else {
    
  }
  end_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_date);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanStatus.end_date)
}

// -------------------------------------------------------------------

// StudentLoanRepaymentPlan

// string type = 1;
inline void StudentLoanRepaymentPlan::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanRepaymentPlan::type() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanRepaymentPlan.type)
  return _internal_type();
}
inline void StudentLoanRepaymentPlan::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanRepaymentPlan.type)
}
inline std::string* StudentLoanRepaymentPlan::mutable_type() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanRepaymentPlan.type)
  return _internal_mutable_type();
}
inline const std::string& StudentLoanRepaymentPlan::_internal_type() const {
  return type_.GetNoArena();
}
inline void StudentLoanRepaymentPlan::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanRepaymentPlan::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanRepaymentPlan.type)
}
inline void StudentLoanRepaymentPlan::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanRepaymentPlan.type)
}
inline void StudentLoanRepaymentPlan::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanRepaymentPlan.type)
}
inline std::string* StudentLoanRepaymentPlan::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanRepaymentPlan::release_type() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanRepaymentPlan.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanRepaymentPlan::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanRepaymentPlan.type)
}

// string description = 2;
inline void StudentLoanRepaymentPlan::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StudentLoanRepaymentPlan::description() const {
  // @@protoc_insertion_point(field_get:plaid.StudentLoanRepaymentPlan.description)
  return _internal_description();
}
inline void StudentLoanRepaymentPlan::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:plaid.StudentLoanRepaymentPlan.description)
}
inline std::string* StudentLoanRepaymentPlan::mutable_description() {
  // @@protoc_insertion_point(field_mutable:plaid.StudentLoanRepaymentPlan.description)
  return _internal_mutable_description();
}
inline const std::string& StudentLoanRepaymentPlan::_internal_description() const {
  return description_.GetNoArena();
}
inline void StudentLoanRepaymentPlan::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StudentLoanRepaymentPlan::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.StudentLoanRepaymentPlan.description)
}
inline void StudentLoanRepaymentPlan::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.StudentLoanRepaymentPlan.description)
}
inline void StudentLoanRepaymentPlan::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.StudentLoanRepaymentPlan.description)
}
inline std::string* StudentLoanRepaymentPlan::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StudentLoanRepaymentPlan::release_description() {
  // @@protoc_insertion_point(field_release:plaid.StudentLoanRepaymentPlan.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StudentLoanRepaymentPlan::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:plaid.StudentLoanRepaymentPlan.description)
}

// -------------------------------------------------------------------

// GetLiabilitiesRequestOptions

// repeated string account_ids = 1;
inline int GetLiabilitiesRequestOptions::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int GetLiabilitiesRequestOptions::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void GetLiabilitiesRequestOptions::clear_account_ids() {
  account_ids_.Clear();
}
inline std::string* GetLiabilitiesRequestOptions::add_account_ids() {
  // @@protoc_insertion_point(field_add_mutable:plaid.GetLiabilitiesRequestOptions.account_ids)
  return _internal_add_account_ids();
}
inline const std::string& GetLiabilitiesRequestOptions::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline const std::string& GetLiabilitiesRequestOptions::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetLiabilitiesRequestOptions.account_ids)
  return _internal_account_ids(index);
}
inline std::string* GetLiabilitiesRequestOptions::mutable_account_ids(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetLiabilitiesRequestOptions.account_ids)
  return account_ids_.Mutable(index);
}
inline void GetLiabilitiesRequestOptions::set_account_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.GetLiabilitiesRequestOptions.account_ids)
  account_ids_.Mutable(index)->assign(value);
}
inline void GetLiabilitiesRequestOptions::set_account_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.GetLiabilitiesRequestOptions.account_ids)
  account_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetLiabilitiesRequestOptions::set_account_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.GetLiabilitiesRequestOptions.account_ids)
}
inline void GetLiabilitiesRequestOptions::set_account_ids(int index, const char* value, size_t size) {
  account_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.GetLiabilitiesRequestOptions.account_ids)
}
inline std::string* GetLiabilitiesRequestOptions::_internal_add_account_ids() {
  return account_ids_.Add();
}
inline void GetLiabilitiesRequestOptions::add_account_ids(const std::string& value) {
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.GetLiabilitiesRequestOptions.account_ids)
}
inline void GetLiabilitiesRequestOptions::add_account_ids(std::string&& value) {
  account_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.GetLiabilitiesRequestOptions.account_ids)
}
inline void GetLiabilitiesRequestOptions::add_account_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.GetLiabilitiesRequestOptions.account_ids)
}
inline void GetLiabilitiesRequestOptions::add_account_ids(const char* value, size_t size) {
  account_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.GetLiabilitiesRequestOptions.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetLiabilitiesRequestOptions::account_ids() const {
  // @@protoc_insertion_point(field_list:plaid.GetLiabilitiesRequestOptions.account_ids)
  return account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetLiabilitiesRequestOptions::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetLiabilitiesRequestOptions.account_ids)
  return &account_ids_;
}

// -------------------------------------------------------------------

// GetLiabilitiesRequest

// string client_id = 1;
inline void GetLiabilitiesRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLiabilitiesRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetLiabilitiesRequest.client_id)
  return _internal_client_id();
}
inline void GetLiabilitiesRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetLiabilitiesRequest.client_id)
}
inline std::string* GetLiabilitiesRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetLiabilitiesRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& GetLiabilitiesRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void GetLiabilitiesRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLiabilitiesRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetLiabilitiesRequest.client_id)
}
inline void GetLiabilitiesRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetLiabilitiesRequest.client_id)
}
inline void GetLiabilitiesRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetLiabilitiesRequest.client_id)
}
inline std::string* GetLiabilitiesRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLiabilitiesRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.GetLiabilitiesRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLiabilitiesRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetLiabilitiesRequest.client_id)
}

// string secret = 2;
inline void GetLiabilitiesRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLiabilitiesRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.GetLiabilitiesRequest.secret)
  return _internal_secret();
}
inline void GetLiabilitiesRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.GetLiabilitiesRequest.secret)
}
inline std::string* GetLiabilitiesRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.GetLiabilitiesRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& GetLiabilitiesRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void GetLiabilitiesRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLiabilitiesRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetLiabilitiesRequest.secret)
}
inline void GetLiabilitiesRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetLiabilitiesRequest.secret)
}
inline void GetLiabilitiesRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetLiabilitiesRequest.secret)
}
inline std::string* GetLiabilitiesRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLiabilitiesRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.GetLiabilitiesRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLiabilitiesRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetLiabilitiesRequest.secret)
}

// string access_token = 3;
inline void GetLiabilitiesRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLiabilitiesRequest::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.GetLiabilitiesRequest.access_token)
  return _internal_access_token();
}
inline void GetLiabilitiesRequest::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.GetLiabilitiesRequest.access_token)
}
inline std::string* GetLiabilitiesRequest::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.GetLiabilitiesRequest.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& GetLiabilitiesRequest::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void GetLiabilitiesRequest::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLiabilitiesRequest::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetLiabilitiesRequest.access_token)
}
inline void GetLiabilitiesRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetLiabilitiesRequest.access_token)
}
inline void GetLiabilitiesRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetLiabilitiesRequest.access_token)
}
inline std::string* GetLiabilitiesRequest::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLiabilitiesRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.GetLiabilitiesRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLiabilitiesRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetLiabilitiesRequest.access_token)
}

// .plaid.GetLiabilitiesRequestOptions options = 4;
inline bool GetLiabilitiesRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool GetLiabilitiesRequest::has_options() const {
  return _internal_has_options();
}
inline void GetLiabilitiesRequest::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::plaid::GetLiabilitiesRequestOptions& GetLiabilitiesRequest::_internal_options() const {
  const ::plaid::GetLiabilitiesRequestOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::GetLiabilitiesRequestOptions*>(
      &::plaid::_GetLiabilitiesRequestOptions_default_instance_);
}
inline const ::plaid::GetLiabilitiesRequestOptions& GetLiabilitiesRequest::options() const {
  // @@protoc_insertion_point(field_get:plaid.GetLiabilitiesRequest.options)
  return _internal_options();
}
inline ::plaid::GetLiabilitiesRequestOptions* GetLiabilitiesRequest::release_options() {
  // @@protoc_insertion_point(field_release:plaid.GetLiabilitiesRequest.options)
  
  ::plaid::GetLiabilitiesRequestOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::plaid::GetLiabilitiesRequestOptions* GetLiabilitiesRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::GetLiabilitiesRequestOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::plaid::GetLiabilitiesRequestOptions* GetLiabilitiesRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:plaid.GetLiabilitiesRequest.options)
  return _internal_mutable_options();
}
inline void GetLiabilitiesRequest::set_allocated_options(::plaid::GetLiabilitiesRequestOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetLiabilitiesRequest.options)
}

// -------------------------------------------------------------------

// GetLiabilitiesResponse

// string request_id = 1;
inline void GetLiabilitiesResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLiabilitiesResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetLiabilitiesResponse.request_id)
  return _internal_request_id();
}
inline void GetLiabilitiesResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetLiabilitiesResponse.request_id)
}
inline std::string* GetLiabilitiesResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetLiabilitiesResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetLiabilitiesResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void GetLiabilitiesResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLiabilitiesResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetLiabilitiesResponse.request_id)
}
inline void GetLiabilitiesResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetLiabilitiesResponse.request_id)
}
inline void GetLiabilitiesResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetLiabilitiesResponse.request_id)
}
inline std::string* GetLiabilitiesResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLiabilitiesResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.GetLiabilitiesResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLiabilitiesResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetLiabilitiesResponse.request_id)
}

// repeated .plaid.Account accounts = 2;
inline int GetLiabilitiesResponse::_internal_accounts_size() const {
  return accounts_.size();
}
inline int GetLiabilitiesResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline void GetLiabilitiesResponse::clear_accounts() {
  accounts_.Clear();
}
inline ::plaid::Account* GetLiabilitiesResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetLiabilitiesResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >*
GetLiabilitiesResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetLiabilitiesResponse.accounts)
  return &accounts_;
}
inline const ::plaid::Account& GetLiabilitiesResponse::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::plaid::Account& GetLiabilitiesResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetLiabilitiesResponse.accounts)
  return _internal_accounts(index);
}
inline ::plaid::Account* GetLiabilitiesResponse::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::plaid::Account* GetLiabilitiesResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:plaid.GetLiabilitiesResponse.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >&
GetLiabilitiesResponse::accounts() const {
  // @@protoc_insertion_point(field_list:plaid.GetLiabilitiesResponse.accounts)
  return accounts_;
}

// .plaid.Item item = 3;
inline bool GetLiabilitiesResponse::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool GetLiabilitiesResponse::has_item() const {
  return _internal_has_item();
}
inline void GetLiabilitiesResponse::clear_item() {
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::plaid::Item& GetLiabilitiesResponse::_internal_item() const {
  const ::plaid::Item* p = item_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::Item*>(
      &::plaid::_Item_default_instance_);
}
inline const ::plaid::Item& GetLiabilitiesResponse::item() const {
  // @@protoc_insertion_point(field_get:plaid.GetLiabilitiesResponse.item)
  return _internal_item();
}
inline ::plaid::Item* GetLiabilitiesResponse::release_item() {
  // @@protoc_insertion_point(field_release:plaid.GetLiabilitiesResponse.item)
  
  ::plaid::Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::plaid::Item* GetLiabilitiesResponse::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::Item>(GetArenaNoVirtual());
    item_ = p;
  }
  return item_;
}
inline ::plaid::Item* GetLiabilitiesResponse::mutable_item() {
  // @@protoc_insertion_point(field_mutable:plaid.GetLiabilitiesResponse.item)
  return _internal_mutable_item();
}
inline void GetLiabilitiesResponse::set_allocated_item(::plaid::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetLiabilitiesResponse.item)
}

// .plaid.Liabilities liabilities = 4;
inline bool GetLiabilitiesResponse::_internal_has_liabilities() const {
  return this != internal_default_instance() && liabilities_ != nullptr;
}
inline bool GetLiabilitiesResponse::has_liabilities() const {
  return _internal_has_liabilities();
}
inline void GetLiabilitiesResponse::clear_liabilities() {
  if (GetArenaNoVirtual() == nullptr && liabilities_ != nullptr) {
    delete liabilities_;
  }
  liabilities_ = nullptr;
}
inline const ::plaid::Liabilities& GetLiabilitiesResponse::_internal_liabilities() const {
  const ::plaid::Liabilities* p = liabilities_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::Liabilities*>(
      &::plaid::_Liabilities_default_instance_);
}
inline const ::plaid::Liabilities& GetLiabilitiesResponse::liabilities() const {
  // @@protoc_insertion_point(field_get:plaid.GetLiabilitiesResponse.liabilities)
  return _internal_liabilities();
}
inline ::plaid::Liabilities* GetLiabilitiesResponse::release_liabilities() {
  // @@protoc_insertion_point(field_release:plaid.GetLiabilitiesResponse.liabilities)
  
  ::plaid::Liabilities* temp = liabilities_;
  liabilities_ = nullptr;
  return temp;
}
inline ::plaid::Liabilities* GetLiabilitiesResponse::_internal_mutable_liabilities() {
  
  if (liabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::Liabilities>(GetArenaNoVirtual());
    liabilities_ = p;
  }
  return liabilities_;
}
inline ::plaid::Liabilities* GetLiabilitiesResponse::mutable_liabilities() {
  // @@protoc_insertion_point(field_mutable:plaid.GetLiabilitiesResponse.liabilities)
  return _internal_mutable_liabilities();
}
inline void GetLiabilitiesResponse::set_allocated_liabilities(::plaid::Liabilities* liabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete liabilities_;
  }
  if (liabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      liabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, liabilities, submessage_arena);
    }
    
  } else {
    
  }
  liabilities_ = liabilities;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetLiabilitiesResponse.liabilities)
}

// -------------------------------------------------------------------

// Liabilities

// repeated .plaid.StudentLoanLiability student = 1;
inline int Liabilities::_internal_student_size() const {
  return student_.size();
}
inline int Liabilities::student_size() const {
  return _internal_student_size();
}
inline void Liabilities::clear_student() {
  student_.Clear();
}
inline ::plaid::StudentLoanLiability* Liabilities::mutable_student(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.Liabilities.student)
  return student_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::StudentLoanLiability >*
Liabilities::mutable_student() {
  // @@protoc_insertion_point(field_mutable_list:plaid.Liabilities.student)
  return &student_;
}
inline const ::plaid::StudentLoanLiability& Liabilities::_internal_student(int index) const {
  return student_.Get(index);
}
inline const ::plaid::StudentLoanLiability& Liabilities::student(int index) const {
  // @@protoc_insertion_point(field_get:plaid.Liabilities.student)
  return _internal_student(index);
}
inline ::plaid::StudentLoanLiability* Liabilities::_internal_add_student() {
  return student_.Add();
}
inline ::plaid::StudentLoanLiability* Liabilities::add_student() {
  // @@protoc_insertion_point(field_add:plaid.Liabilities.student)
  return _internal_add_student();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::StudentLoanLiability >&
Liabilities::student() const {
  // @@protoc_insertion_point(field_list:plaid.Liabilities.student)
  return student_;
}

// -------------------------------------------------------------------

// GetLiabilitiesOptions

// repeated string account_ids = 1;
inline int GetLiabilitiesOptions::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int GetLiabilitiesOptions::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void GetLiabilitiesOptions::clear_account_ids() {
  account_ids_.Clear();
}
inline std::string* GetLiabilitiesOptions::add_account_ids() {
  // @@protoc_insertion_point(field_add_mutable:plaid.GetLiabilitiesOptions.account_ids)
  return _internal_add_account_ids();
}
inline const std::string& GetLiabilitiesOptions::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline const std::string& GetLiabilitiesOptions::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetLiabilitiesOptions.account_ids)
  return _internal_account_ids(index);
}
inline std::string* GetLiabilitiesOptions::mutable_account_ids(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetLiabilitiesOptions.account_ids)
  return account_ids_.Mutable(index);
}
inline void GetLiabilitiesOptions::set_account_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.GetLiabilitiesOptions.account_ids)
  account_ids_.Mutable(index)->assign(value);
}
inline void GetLiabilitiesOptions::set_account_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.GetLiabilitiesOptions.account_ids)
  account_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetLiabilitiesOptions::set_account_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.GetLiabilitiesOptions.account_ids)
}
inline void GetLiabilitiesOptions::set_account_ids(int index, const char* value, size_t size) {
  account_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.GetLiabilitiesOptions.account_ids)
}
inline std::string* GetLiabilitiesOptions::_internal_add_account_ids() {
  return account_ids_.Add();
}
inline void GetLiabilitiesOptions::add_account_ids(const std::string& value) {
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.GetLiabilitiesOptions.account_ids)
}
inline void GetLiabilitiesOptions::add_account_ids(std::string&& value) {
  account_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.GetLiabilitiesOptions.account_ids)
}
inline void GetLiabilitiesOptions::add_account_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.GetLiabilitiesOptions.account_ids)
}
inline void GetLiabilitiesOptions::add_account_ids(const char* value, size_t size) {
  account_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.GetLiabilitiesOptions.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetLiabilitiesOptions::account_ids() const {
  // @@protoc_insertion_point(field_list:plaid.GetLiabilitiesOptions.account_ids)
  return account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetLiabilitiesOptions::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetLiabilitiesOptions.account_ids)
  return &account_ids_;
}

// -------------------------------------------------------------------

// CreateProcessorTokenRequest

// string client_id = 1;
inline void CreateProcessorTokenRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateProcessorTokenRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.CreateProcessorTokenRequest.client_id)
  return _internal_client_id();
}
inline void CreateProcessorTokenRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.CreateProcessorTokenRequest.client_id)
}
inline std::string* CreateProcessorTokenRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateProcessorTokenRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& CreateProcessorTokenRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void CreateProcessorTokenRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateProcessorTokenRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateProcessorTokenRequest.client_id)
}
inline void CreateProcessorTokenRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateProcessorTokenRequest.client_id)
}
inline void CreateProcessorTokenRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateProcessorTokenRequest.client_id)
}
inline std::string* CreateProcessorTokenRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateProcessorTokenRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.CreateProcessorTokenRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateProcessorTokenRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateProcessorTokenRequest.client_id)
}

// string secret = 2;
inline void CreateProcessorTokenRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateProcessorTokenRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.CreateProcessorTokenRequest.secret)
  return _internal_secret();
}
inline void CreateProcessorTokenRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.CreateProcessorTokenRequest.secret)
}
inline std::string* CreateProcessorTokenRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateProcessorTokenRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& CreateProcessorTokenRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void CreateProcessorTokenRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateProcessorTokenRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateProcessorTokenRequest.secret)
}
inline void CreateProcessorTokenRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateProcessorTokenRequest.secret)
}
inline void CreateProcessorTokenRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateProcessorTokenRequest.secret)
}
inline std::string* CreateProcessorTokenRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateProcessorTokenRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.CreateProcessorTokenRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateProcessorTokenRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateProcessorTokenRequest.secret)
}

// string access_token = 3;
inline void CreateProcessorTokenRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateProcessorTokenRequest::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.CreateProcessorTokenRequest.access_token)
  return _internal_access_token();
}
inline void CreateProcessorTokenRequest::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.CreateProcessorTokenRequest.access_token)
}
inline std::string* CreateProcessorTokenRequest::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateProcessorTokenRequest.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& CreateProcessorTokenRequest::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void CreateProcessorTokenRequest::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateProcessorTokenRequest::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateProcessorTokenRequest.access_token)
}
inline void CreateProcessorTokenRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateProcessorTokenRequest.access_token)
}
inline void CreateProcessorTokenRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateProcessorTokenRequest.access_token)
}
inline std::string* CreateProcessorTokenRequest::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateProcessorTokenRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.CreateProcessorTokenRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateProcessorTokenRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateProcessorTokenRequest.access_token)
}

// string account_id = 4;
inline void CreateProcessorTokenRequest::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateProcessorTokenRequest::account_id() const {
  // @@protoc_insertion_point(field_get:plaid.CreateProcessorTokenRequest.account_id)
  return _internal_account_id();
}
inline void CreateProcessorTokenRequest::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:plaid.CreateProcessorTokenRequest.account_id)
}
inline std::string* CreateProcessorTokenRequest::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateProcessorTokenRequest.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& CreateProcessorTokenRequest::_internal_account_id() const {
  return account_id_.GetNoArena();
}
inline void CreateProcessorTokenRequest::_internal_set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateProcessorTokenRequest::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateProcessorTokenRequest.account_id)
}
inline void CreateProcessorTokenRequest::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateProcessorTokenRequest.account_id)
}
inline void CreateProcessorTokenRequest::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateProcessorTokenRequest.account_id)
}
inline std::string* CreateProcessorTokenRequest::_internal_mutable_account_id() {
  
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateProcessorTokenRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:plaid.CreateProcessorTokenRequest.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateProcessorTokenRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateProcessorTokenRequest.account_id)
}

// -------------------------------------------------------------------

// CreateProcessorTokenResponse

// string request_id = 1;
inline void CreateProcessorTokenResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateProcessorTokenResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.CreateProcessorTokenResponse.request_id)
  return _internal_request_id();
}
inline void CreateProcessorTokenResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.CreateProcessorTokenResponse.request_id)
}
inline std::string* CreateProcessorTokenResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateProcessorTokenResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& CreateProcessorTokenResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void CreateProcessorTokenResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateProcessorTokenResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateProcessorTokenResponse.request_id)
}
inline void CreateProcessorTokenResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateProcessorTokenResponse.request_id)
}
inline void CreateProcessorTokenResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateProcessorTokenResponse.request_id)
}
inline std::string* CreateProcessorTokenResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateProcessorTokenResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.CreateProcessorTokenResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateProcessorTokenResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateProcessorTokenResponse.request_id)
}

// string processor_token = 2;
inline void CreateProcessorTokenResponse::clear_processor_token() {
  processor_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateProcessorTokenResponse::processor_token() const {
  // @@protoc_insertion_point(field_get:plaid.CreateProcessorTokenResponse.processor_token)
  return _internal_processor_token();
}
inline void CreateProcessorTokenResponse::set_processor_token(const std::string& value) {
  _internal_set_processor_token(value);
  // @@protoc_insertion_point(field_set:plaid.CreateProcessorTokenResponse.processor_token)
}
inline std::string* CreateProcessorTokenResponse::mutable_processor_token() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateProcessorTokenResponse.processor_token)
  return _internal_mutable_processor_token();
}
inline const std::string& CreateProcessorTokenResponse::_internal_processor_token() const {
  return processor_token_.GetNoArena();
}
inline void CreateProcessorTokenResponse::_internal_set_processor_token(const std::string& value) {
  
  processor_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateProcessorTokenResponse::set_processor_token(std::string&& value) {
  
  processor_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateProcessorTokenResponse.processor_token)
}
inline void CreateProcessorTokenResponse::set_processor_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  processor_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateProcessorTokenResponse.processor_token)
}
inline void CreateProcessorTokenResponse::set_processor_token(const char* value, size_t size) {
  
  processor_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateProcessorTokenResponse.processor_token)
}
inline std::string* CreateProcessorTokenResponse::_internal_mutable_processor_token() {
  
  return processor_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateProcessorTokenResponse::release_processor_token() {
  // @@protoc_insertion_point(field_release:plaid.CreateProcessorTokenResponse.processor_token)
  
  return processor_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateProcessorTokenResponse::set_allocated_processor_token(std::string* processor_token) {
  if (processor_token != nullptr) {
    
  } else {
    
  }
  processor_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), processor_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateProcessorTokenResponse.processor_token)
}

// -------------------------------------------------------------------

// CreateStripeTokenRequest

// string client_id = 1;
inline void CreateStripeTokenRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateStripeTokenRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.CreateStripeTokenRequest.client_id)
  return _internal_client_id();
}
inline void CreateStripeTokenRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.CreateStripeTokenRequest.client_id)
}
inline std::string* CreateStripeTokenRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateStripeTokenRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& CreateStripeTokenRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void CreateStripeTokenRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateStripeTokenRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateStripeTokenRequest.client_id)
}
inline void CreateStripeTokenRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateStripeTokenRequest.client_id)
}
inline void CreateStripeTokenRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateStripeTokenRequest.client_id)
}
inline std::string* CreateStripeTokenRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateStripeTokenRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.CreateStripeTokenRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateStripeTokenRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateStripeTokenRequest.client_id)
}

// string secret = 2;
inline void CreateStripeTokenRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateStripeTokenRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.CreateStripeTokenRequest.secret)
  return _internal_secret();
}
inline void CreateStripeTokenRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.CreateStripeTokenRequest.secret)
}
inline std::string* CreateStripeTokenRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateStripeTokenRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& CreateStripeTokenRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void CreateStripeTokenRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateStripeTokenRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateStripeTokenRequest.secret)
}
inline void CreateStripeTokenRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateStripeTokenRequest.secret)
}
inline void CreateStripeTokenRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateStripeTokenRequest.secret)
}
inline std::string* CreateStripeTokenRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateStripeTokenRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.CreateStripeTokenRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateStripeTokenRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateStripeTokenRequest.secret)
}

// string access_token = 3;
inline void CreateStripeTokenRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateStripeTokenRequest::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.CreateStripeTokenRequest.access_token)
  return _internal_access_token();
}
inline void CreateStripeTokenRequest::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.CreateStripeTokenRequest.access_token)
}
inline std::string* CreateStripeTokenRequest::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateStripeTokenRequest.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& CreateStripeTokenRequest::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void CreateStripeTokenRequest::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateStripeTokenRequest::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateStripeTokenRequest.access_token)
}
inline void CreateStripeTokenRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateStripeTokenRequest.access_token)
}
inline void CreateStripeTokenRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateStripeTokenRequest.access_token)
}
inline std::string* CreateStripeTokenRequest::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateStripeTokenRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.CreateStripeTokenRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateStripeTokenRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateStripeTokenRequest.access_token)
}

// string account_id = 4;
inline void CreateStripeTokenRequest::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateStripeTokenRequest::account_id() const {
  // @@protoc_insertion_point(field_get:plaid.CreateStripeTokenRequest.account_id)
  return _internal_account_id();
}
inline void CreateStripeTokenRequest::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:plaid.CreateStripeTokenRequest.account_id)
}
inline std::string* CreateStripeTokenRequest::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateStripeTokenRequest.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& CreateStripeTokenRequest::_internal_account_id() const {
  return account_id_.GetNoArena();
}
inline void CreateStripeTokenRequest::_internal_set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateStripeTokenRequest::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateStripeTokenRequest.account_id)
}
inline void CreateStripeTokenRequest::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateStripeTokenRequest.account_id)
}
inline void CreateStripeTokenRequest::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateStripeTokenRequest.account_id)
}
inline std::string* CreateStripeTokenRequest::_internal_mutable_account_id() {
  
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateStripeTokenRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:plaid.CreateStripeTokenRequest.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateStripeTokenRequest::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateStripeTokenRequest.account_id)
}

// -------------------------------------------------------------------

// CreateStripeTokenResponse

// string request_id = 1;
inline void CreateStripeTokenResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateStripeTokenResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.CreateStripeTokenResponse.request_id)
  return _internal_request_id();
}
inline void CreateStripeTokenResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.CreateStripeTokenResponse.request_id)
}
inline std::string* CreateStripeTokenResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateStripeTokenResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& CreateStripeTokenResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void CreateStripeTokenResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateStripeTokenResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateStripeTokenResponse.request_id)
}
inline void CreateStripeTokenResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateStripeTokenResponse.request_id)
}
inline void CreateStripeTokenResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateStripeTokenResponse.request_id)
}
inline std::string* CreateStripeTokenResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateStripeTokenResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.CreateStripeTokenResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateStripeTokenResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateStripeTokenResponse.request_id)
}

// string stripe_bank_account_token = 2;
inline void CreateStripeTokenResponse::clear_stripe_bank_account_token() {
  stripe_bank_account_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateStripeTokenResponse::stripe_bank_account_token() const {
  // @@protoc_insertion_point(field_get:plaid.CreateStripeTokenResponse.stripe_bank_account_token)
  return _internal_stripe_bank_account_token();
}
inline void CreateStripeTokenResponse::set_stripe_bank_account_token(const std::string& value) {
  _internal_set_stripe_bank_account_token(value);
  // @@protoc_insertion_point(field_set:plaid.CreateStripeTokenResponse.stripe_bank_account_token)
}
inline std::string* CreateStripeTokenResponse::mutable_stripe_bank_account_token() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateStripeTokenResponse.stripe_bank_account_token)
  return _internal_mutable_stripe_bank_account_token();
}
inline const std::string& CreateStripeTokenResponse::_internal_stripe_bank_account_token() const {
  return stripe_bank_account_token_.GetNoArena();
}
inline void CreateStripeTokenResponse::_internal_set_stripe_bank_account_token(const std::string& value) {
  
  stripe_bank_account_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateStripeTokenResponse::set_stripe_bank_account_token(std::string&& value) {
  
  stripe_bank_account_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateStripeTokenResponse.stripe_bank_account_token)
}
inline void CreateStripeTokenResponse::set_stripe_bank_account_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stripe_bank_account_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateStripeTokenResponse.stripe_bank_account_token)
}
inline void CreateStripeTokenResponse::set_stripe_bank_account_token(const char* value, size_t size) {
  
  stripe_bank_account_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateStripeTokenResponse.stripe_bank_account_token)
}
inline std::string* CreateStripeTokenResponse::_internal_mutable_stripe_bank_account_token() {
  
  return stripe_bank_account_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateStripeTokenResponse::release_stripe_bank_account_token() {
  // @@protoc_insertion_point(field_release:plaid.CreateStripeTokenResponse.stripe_bank_account_token)
  
  return stripe_bank_account_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateStripeTokenResponse::set_allocated_stripe_bank_account_token(std::string* stripe_bank_account_token) {
  if (stripe_bank_account_token != nullptr) {
    
  } else {
    
  }
  stripe_bank_account_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stripe_bank_account_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateStripeTokenResponse.stripe_bank_account_token)
}

// -------------------------------------------------------------------

// CreateSandboxPublicTokenRequest

// string institution_id = 1;
inline void CreateSandboxPublicTokenRequest::clear_institution_id() {
  institution_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateSandboxPublicTokenRequest::institution_id() const {
  // @@protoc_insertion_point(field_get:plaid.CreateSandboxPublicTokenRequest.institution_id)
  return _internal_institution_id();
}
inline void CreateSandboxPublicTokenRequest::set_institution_id(const std::string& value) {
  _internal_set_institution_id(value);
  // @@protoc_insertion_point(field_set:plaid.CreateSandboxPublicTokenRequest.institution_id)
}
inline std::string* CreateSandboxPublicTokenRequest::mutable_institution_id() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateSandboxPublicTokenRequest.institution_id)
  return _internal_mutable_institution_id();
}
inline const std::string& CreateSandboxPublicTokenRequest::_internal_institution_id() const {
  return institution_id_.GetNoArena();
}
inline void CreateSandboxPublicTokenRequest::_internal_set_institution_id(const std::string& value) {
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateSandboxPublicTokenRequest::set_institution_id(std::string&& value) {
  
  institution_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateSandboxPublicTokenRequest.institution_id)
}
inline void CreateSandboxPublicTokenRequest::set_institution_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateSandboxPublicTokenRequest.institution_id)
}
inline void CreateSandboxPublicTokenRequest::set_institution_id(const char* value, size_t size) {
  
  institution_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateSandboxPublicTokenRequest.institution_id)
}
inline std::string* CreateSandboxPublicTokenRequest::_internal_mutable_institution_id() {
  
  return institution_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateSandboxPublicTokenRequest::release_institution_id() {
  // @@protoc_insertion_point(field_release:plaid.CreateSandboxPublicTokenRequest.institution_id)
  
  return institution_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSandboxPublicTokenRequest::set_allocated_institution_id(std::string* institution_id) {
  if (institution_id != nullptr) {
    
  } else {
    
  }
  institution_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), institution_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateSandboxPublicTokenRequest.institution_id)
}

// repeated string inital_products = 2;
inline int CreateSandboxPublicTokenRequest::_internal_inital_products_size() const {
  return inital_products_.size();
}
inline int CreateSandboxPublicTokenRequest::inital_products_size() const {
  return _internal_inital_products_size();
}
inline void CreateSandboxPublicTokenRequest::clear_inital_products() {
  inital_products_.Clear();
}
inline std::string* CreateSandboxPublicTokenRequest::add_inital_products() {
  // @@protoc_insertion_point(field_add_mutable:plaid.CreateSandboxPublicTokenRequest.inital_products)
  return _internal_add_inital_products();
}
inline const std::string& CreateSandboxPublicTokenRequest::_internal_inital_products(int index) const {
  return inital_products_.Get(index);
}
inline const std::string& CreateSandboxPublicTokenRequest::inital_products(int index) const {
  // @@protoc_insertion_point(field_get:plaid.CreateSandboxPublicTokenRequest.inital_products)
  return _internal_inital_products(index);
}
inline std::string* CreateSandboxPublicTokenRequest::mutable_inital_products(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.CreateSandboxPublicTokenRequest.inital_products)
  return inital_products_.Mutable(index);
}
inline void CreateSandboxPublicTokenRequest::set_inital_products(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.CreateSandboxPublicTokenRequest.inital_products)
  inital_products_.Mutable(index)->assign(value);
}
inline void CreateSandboxPublicTokenRequest::set_inital_products(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.CreateSandboxPublicTokenRequest.inital_products)
  inital_products_.Mutable(index)->assign(std::move(value));
}
inline void CreateSandboxPublicTokenRequest::set_inital_products(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inital_products_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.CreateSandboxPublicTokenRequest.inital_products)
}
inline void CreateSandboxPublicTokenRequest::set_inital_products(int index, const char* value, size_t size) {
  inital_products_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateSandboxPublicTokenRequest.inital_products)
}
inline std::string* CreateSandboxPublicTokenRequest::_internal_add_inital_products() {
  return inital_products_.Add();
}
inline void CreateSandboxPublicTokenRequest::add_inital_products(const std::string& value) {
  inital_products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.CreateSandboxPublicTokenRequest.inital_products)
}
inline void CreateSandboxPublicTokenRequest::add_inital_products(std::string&& value) {
  inital_products_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.CreateSandboxPublicTokenRequest.inital_products)
}
inline void CreateSandboxPublicTokenRequest::add_inital_products(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inital_products_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.CreateSandboxPublicTokenRequest.inital_products)
}
inline void CreateSandboxPublicTokenRequest::add_inital_products(const char* value, size_t size) {
  inital_products_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.CreateSandboxPublicTokenRequest.inital_products)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateSandboxPublicTokenRequest::inital_products() const {
  // @@protoc_insertion_point(field_list:plaid.CreateSandboxPublicTokenRequest.inital_products)
  return inital_products_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateSandboxPublicTokenRequest::mutable_inital_products() {
  // @@protoc_insertion_point(field_mutable_list:plaid.CreateSandboxPublicTokenRequest.inital_products)
  return &inital_products_;
}

// string public_key = 3;
inline void CreateSandboxPublicTokenRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateSandboxPublicTokenRequest::public_key() const {
  // @@protoc_insertion_point(field_get:plaid.CreateSandboxPublicTokenRequest.public_key)
  return _internal_public_key();
}
inline void CreateSandboxPublicTokenRequest::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:plaid.CreateSandboxPublicTokenRequest.public_key)
}
inline std::string* CreateSandboxPublicTokenRequest::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateSandboxPublicTokenRequest.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& CreateSandboxPublicTokenRequest::_internal_public_key() const {
  return public_key_.GetNoArena();
}
inline void CreateSandboxPublicTokenRequest::_internal_set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateSandboxPublicTokenRequest::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateSandboxPublicTokenRequest.public_key)
}
inline void CreateSandboxPublicTokenRequest::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateSandboxPublicTokenRequest.public_key)
}
inline void CreateSandboxPublicTokenRequest::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateSandboxPublicTokenRequest.public_key)
}
inline std::string* CreateSandboxPublicTokenRequest::_internal_mutable_public_key() {
  
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateSandboxPublicTokenRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:plaid.CreateSandboxPublicTokenRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSandboxPublicTokenRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateSandboxPublicTokenRequest.public_key)
}

// -------------------------------------------------------------------

// CreateSandboxPublicTokenResponse

// string request_id = 1;
inline void CreateSandboxPublicTokenResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateSandboxPublicTokenResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.CreateSandboxPublicTokenResponse.request_id)
  return _internal_request_id();
}
inline void CreateSandboxPublicTokenResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.CreateSandboxPublicTokenResponse.request_id)
}
inline std::string* CreateSandboxPublicTokenResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateSandboxPublicTokenResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& CreateSandboxPublicTokenResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void CreateSandboxPublicTokenResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateSandboxPublicTokenResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateSandboxPublicTokenResponse.request_id)
}
inline void CreateSandboxPublicTokenResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateSandboxPublicTokenResponse.request_id)
}
inline void CreateSandboxPublicTokenResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateSandboxPublicTokenResponse.request_id)
}
inline std::string* CreateSandboxPublicTokenResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateSandboxPublicTokenResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.CreateSandboxPublicTokenResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSandboxPublicTokenResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateSandboxPublicTokenResponse.request_id)
}

// string public_token = 2;
inline void CreateSandboxPublicTokenResponse::clear_public_token() {
  public_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateSandboxPublicTokenResponse::public_token() const {
  // @@protoc_insertion_point(field_get:plaid.CreateSandboxPublicTokenResponse.public_token)
  return _internal_public_token();
}
inline void CreateSandboxPublicTokenResponse::set_public_token(const std::string& value) {
  _internal_set_public_token(value);
  // @@protoc_insertion_point(field_set:plaid.CreateSandboxPublicTokenResponse.public_token)
}
inline std::string* CreateSandboxPublicTokenResponse::mutable_public_token() {
  // @@protoc_insertion_point(field_mutable:plaid.CreateSandboxPublicTokenResponse.public_token)
  return _internal_mutable_public_token();
}
inline const std::string& CreateSandboxPublicTokenResponse::_internal_public_token() const {
  return public_token_.GetNoArena();
}
inline void CreateSandboxPublicTokenResponse::_internal_set_public_token(const std::string& value) {
  
  public_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateSandboxPublicTokenResponse::set_public_token(std::string&& value) {
  
  public_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.CreateSandboxPublicTokenResponse.public_token)
}
inline void CreateSandboxPublicTokenResponse::set_public_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.CreateSandboxPublicTokenResponse.public_token)
}
inline void CreateSandboxPublicTokenResponse::set_public_token(const char* value, size_t size) {
  
  public_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.CreateSandboxPublicTokenResponse.public_token)
}
inline std::string* CreateSandboxPublicTokenResponse::_internal_mutable_public_token() {
  
  return public_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateSandboxPublicTokenResponse::release_public_token() {
  // @@protoc_insertion_point(field_release:plaid.CreateSandboxPublicTokenResponse.public_token)
  
  return public_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSandboxPublicTokenResponse::set_allocated_public_token(std::string* public_token) {
  if (public_token != nullptr) {
    
  } else {
    
  }
  public_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.CreateSandboxPublicTokenResponse.public_token)
}

// -------------------------------------------------------------------

// ResetSandboxItemRequest

// string client_id = 1;
inline void ResetSandboxItemRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResetSandboxItemRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.ResetSandboxItemRequest.client_id)
  return _internal_client_id();
}
inline void ResetSandboxItemRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.ResetSandboxItemRequest.client_id)
}
inline std::string* ResetSandboxItemRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.ResetSandboxItemRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& ResetSandboxItemRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void ResetSandboxItemRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResetSandboxItemRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.ResetSandboxItemRequest.client_id)
}
inline void ResetSandboxItemRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.ResetSandboxItemRequest.client_id)
}
inline void ResetSandboxItemRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.ResetSandboxItemRequest.client_id)
}
inline std::string* ResetSandboxItemRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResetSandboxItemRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.ResetSandboxItemRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResetSandboxItemRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.ResetSandboxItemRequest.client_id)
}

// string secret = 2;
inline void ResetSandboxItemRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResetSandboxItemRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.ResetSandboxItemRequest.secret)
  return _internal_secret();
}
inline void ResetSandboxItemRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.ResetSandboxItemRequest.secret)
}
inline std::string* ResetSandboxItemRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.ResetSandboxItemRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& ResetSandboxItemRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void ResetSandboxItemRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResetSandboxItemRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.ResetSandboxItemRequest.secret)
}
inline void ResetSandboxItemRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.ResetSandboxItemRequest.secret)
}
inline void ResetSandboxItemRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.ResetSandboxItemRequest.secret)
}
inline std::string* ResetSandboxItemRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResetSandboxItemRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.ResetSandboxItemRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResetSandboxItemRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.ResetSandboxItemRequest.secret)
}

// string access_token = 3;
inline void ResetSandboxItemRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResetSandboxItemRequest::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.ResetSandboxItemRequest.access_token)
  return _internal_access_token();
}
inline void ResetSandboxItemRequest::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.ResetSandboxItemRequest.access_token)
}
inline std::string* ResetSandboxItemRequest::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.ResetSandboxItemRequest.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& ResetSandboxItemRequest::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void ResetSandboxItemRequest::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResetSandboxItemRequest::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.ResetSandboxItemRequest.access_token)
}
inline void ResetSandboxItemRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.ResetSandboxItemRequest.access_token)
}
inline void ResetSandboxItemRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.ResetSandboxItemRequest.access_token)
}
inline std::string* ResetSandboxItemRequest::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResetSandboxItemRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.ResetSandboxItemRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResetSandboxItemRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.ResetSandboxItemRequest.access_token)
}

// -------------------------------------------------------------------

// ResetSandboxItemResponse

// string request_id = 1;
inline void ResetSandboxItemResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResetSandboxItemResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.ResetSandboxItemResponse.request_id)
  return _internal_request_id();
}
inline void ResetSandboxItemResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.ResetSandboxItemResponse.request_id)
}
inline std::string* ResetSandboxItemResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.ResetSandboxItemResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& ResetSandboxItemResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void ResetSandboxItemResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResetSandboxItemResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.ResetSandboxItemResponse.request_id)
}
inline void ResetSandboxItemResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.ResetSandboxItemResponse.request_id)
}
inline void ResetSandboxItemResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.ResetSandboxItemResponse.request_id)
}
inline std::string* ResetSandboxItemResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResetSandboxItemResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.ResetSandboxItemResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResetSandboxItemResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.ResetSandboxItemResponse.request_id)
}

// bool reset_login = 2;
inline void ResetSandboxItemResponse::clear_reset_login() {
  reset_login_ = false;
}
inline bool ResetSandboxItemResponse::_internal_reset_login() const {
  return reset_login_;
}
inline bool ResetSandboxItemResponse::reset_login() const {
  // @@protoc_insertion_point(field_get:plaid.ResetSandboxItemResponse.reset_login)
  return _internal_reset_login();
}
inline void ResetSandboxItemResponse::_internal_set_reset_login(bool value) {
  
  reset_login_ = value;
}
inline void ResetSandboxItemResponse::set_reset_login(bool value) {
  _internal_set_reset_login(value);
  // @@protoc_insertion_point(field_set:plaid.ResetSandboxItemResponse.reset_login)
}

// -------------------------------------------------------------------

// Transaction

// string account_id = 1;
inline void Transaction::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::account_id() const {
  // @@protoc_insertion_point(field_get:plaid.Transaction.account_id)
  return _internal_account_id();
}
inline void Transaction::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:plaid.Transaction.account_id)
}
inline std::string* Transaction::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:plaid.Transaction.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& Transaction::_internal_account_id() const {
  return account_id_.GetNoArena();
}
inline void Transaction::_internal_set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Transaction.account_id)
}
inline void Transaction::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Transaction.account_id)
}
inline void Transaction::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Transaction.account_id)
}
inline std::string* Transaction::_internal_mutable_account_id() {
  
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_account_id() {
  // @@protoc_insertion_point(field_release:plaid.Transaction.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.Transaction.account_id)
}

// double amount = 2;
inline void Transaction::clear_amount() {
  amount_ = 0;
}
inline double Transaction::_internal_amount() const {
  return amount_;
}
inline double Transaction::amount() const {
  // @@protoc_insertion_point(field_get:plaid.Transaction.amount)
  return _internal_amount();
}
inline void Transaction::_internal_set_amount(double value) {
  
  amount_ = value;
}
inline void Transaction::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:plaid.Transaction.amount)
}

// string iso_currency_code = 3;
inline void Transaction::clear_iso_currency_code() {
  iso_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::iso_currency_code() const {
  // @@protoc_insertion_point(field_get:plaid.Transaction.iso_currency_code)
  return _internal_iso_currency_code();
}
inline void Transaction::set_iso_currency_code(const std::string& value) {
  _internal_set_iso_currency_code(value);
  // @@protoc_insertion_point(field_set:plaid.Transaction.iso_currency_code)
}
inline std::string* Transaction::mutable_iso_currency_code() {
  // @@protoc_insertion_point(field_mutable:plaid.Transaction.iso_currency_code)
  return _internal_mutable_iso_currency_code();
}
inline const std::string& Transaction::_internal_iso_currency_code() const {
  return iso_currency_code_.GetNoArena();
}
inline void Transaction::_internal_set_iso_currency_code(const std::string& value) {
  
  iso_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_iso_currency_code(std::string&& value) {
  
  iso_currency_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Transaction.iso_currency_code)
}
inline void Transaction::set_iso_currency_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iso_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Transaction.iso_currency_code)
}
inline void Transaction::set_iso_currency_code(const char* value, size_t size) {
  
  iso_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Transaction.iso_currency_code)
}
inline std::string* Transaction::_internal_mutable_iso_currency_code() {
  
  return iso_currency_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_iso_currency_code() {
  // @@protoc_insertion_point(field_release:plaid.Transaction.iso_currency_code)
  
  return iso_currency_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_iso_currency_code(std::string* iso_currency_code) {
  if (iso_currency_code != nullptr) {
    
  } else {
    
  }
  iso_currency_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iso_currency_code);
  // @@protoc_insertion_point(field_set_allocated:plaid.Transaction.iso_currency_code)
}

// string unofficial_currency_code = 4;
inline void Transaction::clear_unofficial_currency_code() {
  unofficial_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::unofficial_currency_code() const {
  // @@protoc_insertion_point(field_get:plaid.Transaction.unofficial_currency_code)
  return _internal_unofficial_currency_code();
}
inline void Transaction::set_unofficial_currency_code(const std::string& value) {
  _internal_set_unofficial_currency_code(value);
  // @@protoc_insertion_point(field_set:plaid.Transaction.unofficial_currency_code)
}
inline std::string* Transaction::mutable_unofficial_currency_code() {
  // @@protoc_insertion_point(field_mutable:plaid.Transaction.unofficial_currency_code)
  return _internal_mutable_unofficial_currency_code();
}
inline const std::string& Transaction::_internal_unofficial_currency_code() const {
  return unofficial_currency_code_.GetNoArena();
}
inline void Transaction::_internal_set_unofficial_currency_code(const std::string& value) {
  
  unofficial_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_unofficial_currency_code(std::string&& value) {
  
  unofficial_currency_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Transaction.unofficial_currency_code)
}
inline void Transaction::set_unofficial_currency_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unofficial_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Transaction.unofficial_currency_code)
}
inline void Transaction::set_unofficial_currency_code(const char* value, size_t size) {
  
  unofficial_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Transaction.unofficial_currency_code)
}
inline std::string* Transaction::_internal_mutable_unofficial_currency_code() {
  
  return unofficial_currency_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_unofficial_currency_code() {
  // @@protoc_insertion_point(field_release:plaid.Transaction.unofficial_currency_code)
  
  return unofficial_currency_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_unofficial_currency_code(std::string* unofficial_currency_code) {
  if (unofficial_currency_code != nullptr) {
    
  } else {
    
  }
  unofficial_currency_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unofficial_currency_code);
  // @@protoc_insertion_point(field_set_allocated:plaid.Transaction.unofficial_currency_code)
}

// repeated string category = 5;
inline int Transaction::_internal_category_size() const {
  return category_.size();
}
inline int Transaction::category_size() const {
  return _internal_category_size();
}
inline void Transaction::clear_category() {
  category_.Clear();
}
inline std::string* Transaction::add_category() {
  // @@protoc_insertion_point(field_add_mutable:plaid.Transaction.category)
  return _internal_add_category();
}
inline const std::string& Transaction::_internal_category(int index) const {
  return category_.Get(index);
}
inline const std::string& Transaction::category(int index) const {
  // @@protoc_insertion_point(field_get:plaid.Transaction.category)
  return _internal_category(index);
}
inline std::string* Transaction::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.Transaction.category)
  return category_.Mutable(index);
}
inline void Transaction::set_category(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.Transaction.category)
  category_.Mutable(index)->assign(value);
}
inline void Transaction::set_category(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.Transaction.category)
  category_.Mutable(index)->assign(std::move(value));
}
inline void Transaction::set_category(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  category_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.Transaction.category)
}
inline void Transaction::set_category(int index, const char* value, size_t size) {
  category_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.Transaction.category)
}
inline std::string* Transaction::_internal_add_category() {
  return category_.Add();
}
inline void Transaction::add_category(const std::string& value) {
  category_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.Transaction.category)
}
inline void Transaction::add_category(std::string&& value) {
  category_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.Transaction.category)
}
inline void Transaction::add_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  category_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.Transaction.category)
}
inline void Transaction::add_category(const char* value, size_t size) {
  category_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.Transaction.category)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Transaction::category() const {
  // @@protoc_insertion_point(field_list:plaid.Transaction.category)
  return category_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Transaction::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:plaid.Transaction.category)
  return &category_;
}

// string category_id = 6;
inline void Transaction::clear_category_id() {
  category_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::category_id() const {
  // @@protoc_insertion_point(field_get:plaid.Transaction.category_id)
  return _internal_category_id();
}
inline void Transaction::set_category_id(const std::string& value) {
  _internal_set_category_id(value);
  // @@protoc_insertion_point(field_set:plaid.Transaction.category_id)
}
inline std::string* Transaction::mutable_category_id() {
  // @@protoc_insertion_point(field_mutable:plaid.Transaction.category_id)
  return _internal_mutable_category_id();
}
inline const std::string& Transaction::_internal_category_id() const {
  return category_id_.GetNoArena();
}
inline void Transaction::_internal_set_category_id(const std::string& value) {
  
  category_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_category_id(std::string&& value) {
  
  category_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Transaction.category_id)
}
inline void Transaction::set_category_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Transaction.category_id)
}
inline void Transaction::set_category_id(const char* value, size_t size) {
  
  category_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Transaction.category_id)
}
inline std::string* Transaction::_internal_mutable_category_id() {
  
  return category_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_category_id() {
  // @@protoc_insertion_point(field_release:plaid.Transaction.category_id)
  
  return category_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_category_id(std::string* category_id) {
  if (category_id != nullptr) {
    
  } else {
    
  }
  category_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.Transaction.category_id)
}

// string date = 7;
inline void Transaction::clear_date() {
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::date() const {
  // @@protoc_insertion_point(field_get:plaid.Transaction.date)
  return _internal_date();
}
inline void Transaction::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:plaid.Transaction.date)
}
inline std::string* Transaction::mutable_date() {
  // @@protoc_insertion_point(field_mutable:plaid.Transaction.date)
  return _internal_mutable_date();
}
inline const std::string& Transaction::_internal_date() const {
  return date_.GetNoArena();
}
inline void Transaction::_internal_set_date(const std::string& value) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_date(std::string&& value) {
  
  date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Transaction.date)
}
inline void Transaction::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Transaction.date)
}
inline void Transaction::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Transaction.date)
}
inline std::string* Transaction::_internal_mutable_date() {
  
  return date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_date() {
  // @@protoc_insertion_point(field_release:plaid.Transaction.date)
  
  return date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:plaid.Transaction.date)
}

// .plaid.Location location = 8;
inline bool Transaction::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool Transaction::has_location() const {
  return _internal_has_location();
}
inline void Transaction::clear_location() {
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::plaid::Location& Transaction::_internal_location() const {
  const ::plaid::Location* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::Location*>(
      &::plaid::_Location_default_instance_);
}
inline const ::plaid::Location& Transaction::location() const {
  // @@protoc_insertion_point(field_get:plaid.Transaction.location)
  return _internal_location();
}
inline ::plaid::Location* Transaction::release_location() {
  // @@protoc_insertion_point(field_release:plaid.Transaction.location)
  
  ::plaid::Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::plaid::Location* Transaction::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::Location>(GetArenaNoVirtual());
    location_ = p;
  }
  return location_;
}
inline ::plaid::Location* Transaction::mutable_location() {
  // @@protoc_insertion_point(field_mutable:plaid.Transaction.location)
  return _internal_mutable_location();
}
inline void Transaction::set_allocated_location(::plaid::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:plaid.Transaction.location)
}

// string name = 9;
inline void Transaction::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::name() const {
  // @@protoc_insertion_point(field_get:plaid.Transaction.name)
  return _internal_name();
}
inline void Transaction::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:plaid.Transaction.name)
}
inline std::string* Transaction::mutable_name() {
  // @@protoc_insertion_point(field_mutable:plaid.Transaction.name)
  return _internal_mutable_name();
}
inline const std::string& Transaction::_internal_name() const {
  return name_.GetNoArena();
}
inline void Transaction::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Transaction.name)
}
inline void Transaction::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Transaction.name)
}
inline void Transaction::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Transaction.name)
}
inline std::string* Transaction::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_name() {
  // @@protoc_insertion_point(field_release:plaid.Transaction.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:plaid.Transaction.name)
}

// .plaid.PaymentMeta payment_meta = 10;
inline bool Transaction::_internal_has_payment_meta() const {
  return this != internal_default_instance() && payment_meta_ != nullptr;
}
inline bool Transaction::has_payment_meta() const {
  return _internal_has_payment_meta();
}
inline void Transaction::clear_payment_meta() {
  if (GetArenaNoVirtual() == nullptr && payment_meta_ != nullptr) {
    delete payment_meta_;
  }
  payment_meta_ = nullptr;
}
inline const ::plaid::PaymentMeta& Transaction::_internal_payment_meta() const {
  const ::plaid::PaymentMeta* p = payment_meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::PaymentMeta*>(
      &::plaid::_PaymentMeta_default_instance_);
}
inline const ::plaid::PaymentMeta& Transaction::payment_meta() const {
  // @@protoc_insertion_point(field_get:plaid.Transaction.payment_meta)
  return _internal_payment_meta();
}
inline ::plaid::PaymentMeta* Transaction::release_payment_meta() {
  // @@protoc_insertion_point(field_release:plaid.Transaction.payment_meta)
  
  ::plaid::PaymentMeta* temp = payment_meta_;
  payment_meta_ = nullptr;
  return temp;
}
inline ::plaid::PaymentMeta* Transaction::_internal_mutable_payment_meta() {
  
  if (payment_meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::PaymentMeta>(GetArenaNoVirtual());
    payment_meta_ = p;
  }
  return payment_meta_;
}
inline ::plaid::PaymentMeta* Transaction::mutable_payment_meta() {
  // @@protoc_insertion_point(field_mutable:plaid.Transaction.payment_meta)
  return _internal_mutable_payment_meta();
}
inline void Transaction::set_allocated_payment_meta(::plaid::PaymentMeta* payment_meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete payment_meta_;
  }
  if (payment_meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payment_meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment_meta, submessage_arena);
    }
    
  } else {
    
  }
  payment_meta_ = payment_meta;
  // @@protoc_insertion_point(field_set_allocated:plaid.Transaction.payment_meta)
}

// bool pending = 11;
inline void Transaction::clear_pending() {
  pending_ = false;
}
inline bool Transaction::_internal_pending() const {
  return pending_;
}
inline bool Transaction::pending() const {
  // @@protoc_insertion_point(field_get:plaid.Transaction.pending)
  return _internal_pending();
}
inline void Transaction::_internal_set_pending(bool value) {
  
  pending_ = value;
}
inline void Transaction::set_pending(bool value) {
  _internal_set_pending(value);
  // @@protoc_insertion_point(field_set:plaid.Transaction.pending)
}

// string pending_transaction_id = 12;
inline void Transaction::clear_pending_transaction_id() {
  pending_transaction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::pending_transaction_id() const {
  // @@protoc_insertion_point(field_get:plaid.Transaction.pending_transaction_id)
  return _internal_pending_transaction_id();
}
inline void Transaction::set_pending_transaction_id(const std::string& value) {
  _internal_set_pending_transaction_id(value);
  // @@protoc_insertion_point(field_set:plaid.Transaction.pending_transaction_id)
}
inline std::string* Transaction::mutable_pending_transaction_id() {
  // @@protoc_insertion_point(field_mutable:plaid.Transaction.pending_transaction_id)
  return _internal_mutable_pending_transaction_id();
}
inline const std::string& Transaction::_internal_pending_transaction_id() const {
  return pending_transaction_id_.GetNoArena();
}
inline void Transaction::_internal_set_pending_transaction_id(const std::string& value) {
  
  pending_transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_pending_transaction_id(std::string&& value) {
  
  pending_transaction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Transaction.pending_transaction_id)
}
inline void Transaction::set_pending_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pending_transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Transaction.pending_transaction_id)
}
inline void Transaction::set_pending_transaction_id(const char* value, size_t size) {
  
  pending_transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Transaction.pending_transaction_id)
}
inline std::string* Transaction::_internal_mutable_pending_transaction_id() {
  
  return pending_transaction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_pending_transaction_id() {
  // @@protoc_insertion_point(field_release:plaid.Transaction.pending_transaction_id)
  
  return pending_transaction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_pending_transaction_id(std::string* pending_transaction_id) {
  if (pending_transaction_id != nullptr) {
    
  } else {
    
  }
  pending_transaction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pending_transaction_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.Transaction.pending_transaction_id)
}

// string account_owner = 13;
inline void Transaction::clear_account_owner() {
  account_owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::account_owner() const {
  // @@protoc_insertion_point(field_get:plaid.Transaction.account_owner)
  return _internal_account_owner();
}
inline void Transaction::set_account_owner(const std::string& value) {
  _internal_set_account_owner(value);
  // @@protoc_insertion_point(field_set:plaid.Transaction.account_owner)
}
inline std::string* Transaction::mutable_account_owner() {
  // @@protoc_insertion_point(field_mutable:plaid.Transaction.account_owner)
  return _internal_mutable_account_owner();
}
inline const std::string& Transaction::_internal_account_owner() const {
  return account_owner_.GetNoArena();
}
inline void Transaction::_internal_set_account_owner(const std::string& value) {
  
  account_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_account_owner(std::string&& value) {
  
  account_owner_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Transaction.account_owner)
}
inline void Transaction::set_account_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Transaction.account_owner)
}
inline void Transaction::set_account_owner(const char* value, size_t size) {
  
  account_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Transaction.account_owner)
}
inline std::string* Transaction::_internal_mutable_account_owner() {
  
  return account_owner_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_account_owner() {
  // @@protoc_insertion_point(field_release:plaid.Transaction.account_owner)
  
  return account_owner_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_account_owner(std::string* account_owner) {
  if (account_owner != nullptr) {
    
  } else {
    
  }
  account_owner_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_owner);
  // @@protoc_insertion_point(field_set_allocated:plaid.Transaction.account_owner)
}

// string transaction_id = 14;
inline void Transaction::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::transaction_id() const {
  // @@protoc_insertion_point(field_get:plaid.Transaction.transaction_id)
  return _internal_transaction_id();
}
inline void Transaction::set_transaction_id(const std::string& value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:plaid.Transaction.transaction_id)
}
inline std::string* Transaction::mutable_transaction_id() {
  // @@protoc_insertion_point(field_mutable:plaid.Transaction.transaction_id)
  return _internal_mutable_transaction_id();
}
inline const std::string& Transaction::_internal_transaction_id() const {
  return transaction_id_.GetNoArena();
}
inline void Transaction::_internal_set_transaction_id(const std::string& value) {
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_transaction_id(std::string&& value) {
  
  transaction_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Transaction.transaction_id)
}
inline void Transaction::set_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Transaction.transaction_id)
}
inline void Transaction::set_transaction_id(const char* value, size_t size) {
  
  transaction_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Transaction.transaction_id)
}
inline std::string* Transaction::_internal_mutable_transaction_id() {
  
  return transaction_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_transaction_id() {
  // @@protoc_insertion_point(field_release:plaid.Transaction.transaction_id)
  
  return transaction_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  transaction_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.Transaction.transaction_id)
}

// string transaction_type = 15;
inline void Transaction::clear_transaction_type() {
  transaction_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::transaction_type() const {
  // @@protoc_insertion_point(field_get:plaid.Transaction.transaction_type)
  return _internal_transaction_type();
}
inline void Transaction::set_transaction_type(const std::string& value) {
  _internal_set_transaction_type(value);
  // @@protoc_insertion_point(field_set:plaid.Transaction.transaction_type)
}
inline std::string* Transaction::mutable_transaction_type() {
  // @@protoc_insertion_point(field_mutable:plaid.Transaction.transaction_type)
  return _internal_mutable_transaction_type();
}
inline const std::string& Transaction::_internal_transaction_type() const {
  return transaction_type_.GetNoArena();
}
inline void Transaction::_internal_set_transaction_type(const std::string& value) {
  
  transaction_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_transaction_type(std::string&& value) {
  
  transaction_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Transaction.transaction_type)
}
inline void Transaction::set_transaction_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Transaction.transaction_type)
}
inline void Transaction::set_transaction_type(const char* value, size_t size) {
  
  transaction_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Transaction.transaction_type)
}
inline std::string* Transaction::_internal_mutable_transaction_type() {
  
  return transaction_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_transaction_type() {
  // @@protoc_insertion_point(field_release:plaid.Transaction.transaction_type)
  
  return transaction_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_transaction_type(std::string* transaction_type) {
  if (transaction_type != nullptr) {
    
  } else {
    
  }
  transaction_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_type);
  // @@protoc_insertion_point(field_set_allocated:plaid.Transaction.transaction_type)
}

// -------------------------------------------------------------------

// Location

// string addreess = 1;
inline void Location::clear_addreess() {
  addreess_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Location::addreess() const {
  // @@protoc_insertion_point(field_get:plaid.Location.addreess)
  return _internal_addreess();
}
inline void Location::set_addreess(const std::string& value) {
  _internal_set_addreess(value);
  // @@protoc_insertion_point(field_set:plaid.Location.addreess)
}
inline std::string* Location::mutable_addreess() {
  // @@protoc_insertion_point(field_mutable:plaid.Location.addreess)
  return _internal_mutable_addreess();
}
inline const std::string& Location::_internal_addreess() const {
  return addreess_.GetNoArena();
}
inline void Location::_internal_set_addreess(const std::string& value) {
  
  addreess_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Location::set_addreess(std::string&& value) {
  
  addreess_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Location.addreess)
}
inline void Location::set_addreess(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addreess_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Location.addreess)
}
inline void Location::set_addreess(const char* value, size_t size) {
  
  addreess_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Location.addreess)
}
inline std::string* Location::_internal_mutable_addreess() {
  
  return addreess_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Location::release_addreess() {
  // @@protoc_insertion_point(field_release:plaid.Location.addreess)
  
  return addreess_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_addreess(std::string* addreess) {
  if (addreess != nullptr) {
    
  } else {
    
  }
  addreess_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addreess);
  // @@protoc_insertion_point(field_set_allocated:plaid.Location.addreess)
}

// string city = 2;
inline void Location::clear_city() {
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Location::city() const {
  // @@protoc_insertion_point(field_get:plaid.Location.city)
  return _internal_city();
}
inline void Location::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:plaid.Location.city)
}
inline std::string* Location::mutable_city() {
  // @@protoc_insertion_point(field_mutable:plaid.Location.city)
  return _internal_mutable_city();
}
inline const std::string& Location::_internal_city() const {
  return city_.GetNoArena();
}
inline void Location::_internal_set_city(const std::string& value) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Location::set_city(std::string&& value) {
  
  city_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Location.city)
}
inline void Location::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Location.city)
}
inline void Location::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Location.city)
}
inline std::string* Location::_internal_mutable_city() {
  
  return city_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Location::release_city() {
  // @@protoc_insertion_point(field_release:plaid.Location.city)
  
  return city_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:plaid.Location.city)
}

// double lat = 3;
inline void Location::clear_lat() {
  lat_ = 0;
}
inline double Location::_internal_lat() const {
  return lat_;
}
inline double Location::lat() const {
  // @@protoc_insertion_point(field_get:plaid.Location.lat)
  return _internal_lat();
}
inline void Location::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Location::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:plaid.Location.lat)
}

// double lon = 4;
inline void Location::clear_lon() {
  lon_ = 0;
}
inline double Location::_internal_lon() const {
  return lon_;
}
inline double Location::lon() const {
  // @@protoc_insertion_point(field_get:plaid.Location.lon)
  return _internal_lon();
}
inline void Location::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void Location::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:plaid.Location.lon)
}

// string region = 5;
inline void Location::clear_region() {
  region_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Location::region() const {
  // @@protoc_insertion_point(field_get:plaid.Location.region)
  return _internal_region();
}
inline void Location::set_region(const std::string& value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:plaid.Location.region)
}
inline std::string* Location::mutable_region() {
  // @@protoc_insertion_point(field_mutable:plaid.Location.region)
  return _internal_mutable_region();
}
inline const std::string& Location::_internal_region() const {
  return region_.GetNoArena();
}
inline void Location::_internal_set_region(const std::string& value) {
  
  region_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Location::set_region(std::string&& value) {
  
  region_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Location.region)
}
inline void Location::set_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Location.region)
}
inline void Location::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Location.region)
}
inline std::string* Location::_internal_mutable_region() {
  
  return region_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Location::release_region() {
  // @@protoc_insertion_point(field_release:plaid.Location.region)
  
  return region_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:plaid.Location.region)
}

// string store_number = 6;
inline void Location::clear_store_number() {
  store_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Location::store_number() const {
  // @@protoc_insertion_point(field_get:plaid.Location.store_number)
  return _internal_store_number();
}
inline void Location::set_store_number(const std::string& value) {
  _internal_set_store_number(value);
  // @@protoc_insertion_point(field_set:plaid.Location.store_number)
}
inline std::string* Location::mutable_store_number() {
  // @@protoc_insertion_point(field_mutable:plaid.Location.store_number)
  return _internal_mutable_store_number();
}
inline const std::string& Location::_internal_store_number() const {
  return store_number_.GetNoArena();
}
inline void Location::_internal_set_store_number(const std::string& value) {
  
  store_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Location::set_store_number(std::string&& value) {
  
  store_number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Location.store_number)
}
inline void Location::set_store_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Location.store_number)
}
inline void Location::set_store_number(const char* value, size_t size) {
  
  store_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Location.store_number)
}
inline std::string* Location::_internal_mutable_store_number() {
  
  return store_number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Location::release_store_number() {
  // @@protoc_insertion_point(field_release:plaid.Location.store_number)
  
  return store_number_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_store_number(std::string* store_number) {
  if (store_number != nullptr) {
    
  } else {
    
  }
  store_number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_number);
  // @@protoc_insertion_point(field_set_allocated:plaid.Location.store_number)
}

// string postal_code = 7;
inline void Location::clear_postal_code() {
  postal_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Location::postal_code() const {
  // @@protoc_insertion_point(field_get:plaid.Location.postal_code)
  return _internal_postal_code();
}
inline void Location::set_postal_code(const std::string& value) {
  _internal_set_postal_code(value);
  // @@protoc_insertion_point(field_set:plaid.Location.postal_code)
}
inline std::string* Location::mutable_postal_code() {
  // @@protoc_insertion_point(field_mutable:plaid.Location.postal_code)
  return _internal_mutable_postal_code();
}
inline const std::string& Location::_internal_postal_code() const {
  return postal_code_.GetNoArena();
}
inline void Location::_internal_set_postal_code(const std::string& value) {
  
  postal_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Location::set_postal_code(std::string&& value) {
  
  postal_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Location.postal_code)
}
inline void Location::set_postal_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  postal_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Location.postal_code)
}
inline void Location::set_postal_code(const char* value, size_t size) {
  
  postal_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Location.postal_code)
}
inline std::string* Location::_internal_mutable_postal_code() {
  
  return postal_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Location::release_postal_code() {
  // @@protoc_insertion_point(field_release:plaid.Location.postal_code)
  
  return postal_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_postal_code(std::string* postal_code) {
  if (postal_code != nullptr) {
    
  } else {
    
  }
  postal_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), postal_code);
  // @@protoc_insertion_point(field_set_allocated:plaid.Location.postal_code)
}

// string country = 8;
inline void Location::clear_country() {
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Location::country() const {
  // @@protoc_insertion_point(field_get:plaid.Location.country)
  return _internal_country();
}
inline void Location::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:plaid.Location.country)
}
inline std::string* Location::mutable_country() {
  // @@protoc_insertion_point(field_mutable:plaid.Location.country)
  return _internal_mutable_country();
}
inline const std::string& Location::_internal_country() const {
  return country_.GetNoArena();
}
inline void Location::_internal_set_country(const std::string& value) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Location::set_country(std::string&& value) {
  
  country_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.Location.country)
}
inline void Location::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.Location.country)
}
inline void Location::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.Location.country)
}
inline std::string* Location::_internal_mutable_country() {
  
  return country_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Location::release_country() {
  // @@protoc_insertion_point(field_release:plaid.Location.country)
  
  return country_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:plaid.Location.country)
}

// -------------------------------------------------------------------

// PaymentMeta

// string by_order_of = 1;
inline void PaymentMeta::clear_by_order_of() {
  by_order_of_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PaymentMeta::by_order_of() const {
  // @@protoc_insertion_point(field_get:plaid.PaymentMeta.by_order_of)
  return _internal_by_order_of();
}
inline void PaymentMeta::set_by_order_of(const std::string& value) {
  _internal_set_by_order_of(value);
  // @@protoc_insertion_point(field_set:plaid.PaymentMeta.by_order_of)
}
inline std::string* PaymentMeta::mutable_by_order_of() {
  // @@protoc_insertion_point(field_mutable:plaid.PaymentMeta.by_order_of)
  return _internal_mutable_by_order_of();
}
inline const std::string& PaymentMeta::_internal_by_order_of() const {
  return by_order_of_.GetNoArena();
}
inline void PaymentMeta::_internal_set_by_order_of(const std::string& value) {
  
  by_order_of_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PaymentMeta::set_by_order_of(std::string&& value) {
  
  by_order_of_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.PaymentMeta.by_order_of)
}
inline void PaymentMeta::set_by_order_of(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  by_order_of_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.PaymentMeta.by_order_of)
}
inline void PaymentMeta::set_by_order_of(const char* value, size_t size) {
  
  by_order_of_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.PaymentMeta.by_order_of)
}
inline std::string* PaymentMeta::_internal_mutable_by_order_of() {
  
  return by_order_of_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PaymentMeta::release_by_order_of() {
  // @@protoc_insertion_point(field_release:plaid.PaymentMeta.by_order_of)
  
  return by_order_of_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PaymentMeta::set_allocated_by_order_of(std::string* by_order_of) {
  if (by_order_of != nullptr) {
    
  } else {
    
  }
  by_order_of_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), by_order_of);
  // @@protoc_insertion_point(field_set_allocated:plaid.PaymentMeta.by_order_of)
}

// string payee = 2;
inline void PaymentMeta::clear_payee() {
  payee_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PaymentMeta::payee() const {
  // @@protoc_insertion_point(field_get:plaid.PaymentMeta.payee)
  return _internal_payee();
}
inline void PaymentMeta::set_payee(const std::string& value) {
  _internal_set_payee(value);
  // @@protoc_insertion_point(field_set:plaid.PaymentMeta.payee)
}
inline std::string* PaymentMeta::mutable_payee() {
  // @@protoc_insertion_point(field_mutable:plaid.PaymentMeta.payee)
  return _internal_mutable_payee();
}
inline const std::string& PaymentMeta::_internal_payee() const {
  return payee_.GetNoArena();
}
inline void PaymentMeta::_internal_set_payee(const std::string& value) {
  
  payee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PaymentMeta::set_payee(std::string&& value) {
  
  payee_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.PaymentMeta.payee)
}
inline void PaymentMeta::set_payee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.PaymentMeta.payee)
}
inline void PaymentMeta::set_payee(const char* value, size_t size) {
  
  payee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.PaymentMeta.payee)
}
inline std::string* PaymentMeta::_internal_mutable_payee() {
  
  return payee_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PaymentMeta::release_payee() {
  // @@protoc_insertion_point(field_release:plaid.PaymentMeta.payee)
  
  return payee_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PaymentMeta::set_allocated_payee(std::string* payee) {
  if (payee != nullptr) {
    
  } else {
    
  }
  payee_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payee);
  // @@protoc_insertion_point(field_set_allocated:plaid.PaymentMeta.payee)
}

// string payer = 3;
inline void PaymentMeta::clear_payer() {
  payer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PaymentMeta::payer() const {
  // @@protoc_insertion_point(field_get:plaid.PaymentMeta.payer)
  return _internal_payer();
}
inline void PaymentMeta::set_payer(const std::string& value) {
  _internal_set_payer(value);
  // @@protoc_insertion_point(field_set:plaid.PaymentMeta.payer)
}
inline std::string* PaymentMeta::mutable_payer() {
  // @@protoc_insertion_point(field_mutable:plaid.PaymentMeta.payer)
  return _internal_mutable_payer();
}
inline const std::string& PaymentMeta::_internal_payer() const {
  return payer_.GetNoArena();
}
inline void PaymentMeta::_internal_set_payer(const std::string& value) {
  
  payer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PaymentMeta::set_payer(std::string&& value) {
  
  payer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.PaymentMeta.payer)
}
inline void PaymentMeta::set_payer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.PaymentMeta.payer)
}
inline void PaymentMeta::set_payer(const char* value, size_t size) {
  
  payer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.PaymentMeta.payer)
}
inline std::string* PaymentMeta::_internal_mutable_payer() {
  
  return payer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PaymentMeta::release_payer() {
  // @@protoc_insertion_point(field_release:plaid.PaymentMeta.payer)
  
  return payer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PaymentMeta::set_allocated_payer(std::string* payer) {
  if (payer != nullptr) {
    
  } else {
    
  }
  payer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payer);
  // @@protoc_insertion_point(field_set_allocated:plaid.PaymentMeta.payer)
}

// string payment_method = 4;
inline void PaymentMeta::clear_payment_method() {
  payment_method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PaymentMeta::payment_method() const {
  // @@protoc_insertion_point(field_get:plaid.PaymentMeta.payment_method)
  return _internal_payment_method();
}
inline void PaymentMeta::set_payment_method(const std::string& value) {
  _internal_set_payment_method(value);
  // @@protoc_insertion_point(field_set:plaid.PaymentMeta.payment_method)
}
inline std::string* PaymentMeta::mutable_payment_method() {
  // @@protoc_insertion_point(field_mutable:plaid.PaymentMeta.payment_method)
  return _internal_mutable_payment_method();
}
inline const std::string& PaymentMeta::_internal_payment_method() const {
  return payment_method_.GetNoArena();
}
inline void PaymentMeta::_internal_set_payment_method(const std::string& value) {
  
  payment_method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PaymentMeta::set_payment_method(std::string&& value) {
  
  payment_method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.PaymentMeta.payment_method)
}
inline void PaymentMeta::set_payment_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.PaymentMeta.payment_method)
}
inline void PaymentMeta::set_payment_method(const char* value, size_t size) {
  
  payment_method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.PaymentMeta.payment_method)
}
inline std::string* PaymentMeta::_internal_mutable_payment_method() {
  
  return payment_method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PaymentMeta::release_payment_method() {
  // @@protoc_insertion_point(field_release:plaid.PaymentMeta.payment_method)
  
  return payment_method_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PaymentMeta::set_allocated_payment_method(std::string* payment_method) {
  if (payment_method != nullptr) {
    
  } else {
    
  }
  payment_method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_method);
  // @@protoc_insertion_point(field_set_allocated:plaid.PaymentMeta.payment_method)
}

// string payment_processor = 5;
inline void PaymentMeta::clear_payment_processor() {
  payment_processor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PaymentMeta::payment_processor() const {
  // @@protoc_insertion_point(field_get:plaid.PaymentMeta.payment_processor)
  return _internal_payment_processor();
}
inline void PaymentMeta::set_payment_processor(const std::string& value) {
  _internal_set_payment_processor(value);
  // @@protoc_insertion_point(field_set:plaid.PaymentMeta.payment_processor)
}
inline std::string* PaymentMeta::mutable_payment_processor() {
  // @@protoc_insertion_point(field_mutable:plaid.PaymentMeta.payment_processor)
  return _internal_mutable_payment_processor();
}
inline const std::string& PaymentMeta::_internal_payment_processor() const {
  return payment_processor_.GetNoArena();
}
inline void PaymentMeta::_internal_set_payment_processor(const std::string& value) {
  
  payment_processor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PaymentMeta::set_payment_processor(std::string&& value) {
  
  payment_processor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.PaymentMeta.payment_processor)
}
inline void PaymentMeta::set_payment_processor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_processor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.PaymentMeta.payment_processor)
}
inline void PaymentMeta::set_payment_processor(const char* value, size_t size) {
  
  payment_processor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.PaymentMeta.payment_processor)
}
inline std::string* PaymentMeta::_internal_mutable_payment_processor() {
  
  return payment_processor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PaymentMeta::release_payment_processor() {
  // @@protoc_insertion_point(field_release:plaid.PaymentMeta.payment_processor)
  
  return payment_processor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PaymentMeta::set_allocated_payment_processor(std::string* payment_processor) {
  if (payment_processor != nullptr) {
    
  } else {
    
  }
  payment_processor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_processor);
  // @@protoc_insertion_point(field_set_allocated:plaid.PaymentMeta.payment_processor)
}

// string ppd_id = 6;
inline void PaymentMeta::clear_ppd_id() {
  ppd_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PaymentMeta::ppd_id() const {
  // @@protoc_insertion_point(field_get:plaid.PaymentMeta.ppd_id)
  return _internal_ppd_id();
}
inline void PaymentMeta::set_ppd_id(const std::string& value) {
  _internal_set_ppd_id(value);
  // @@protoc_insertion_point(field_set:plaid.PaymentMeta.ppd_id)
}
inline std::string* PaymentMeta::mutable_ppd_id() {
  // @@protoc_insertion_point(field_mutable:plaid.PaymentMeta.ppd_id)
  return _internal_mutable_ppd_id();
}
inline const std::string& PaymentMeta::_internal_ppd_id() const {
  return ppd_id_.GetNoArena();
}
inline void PaymentMeta::_internal_set_ppd_id(const std::string& value) {
  
  ppd_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PaymentMeta::set_ppd_id(std::string&& value) {
  
  ppd_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.PaymentMeta.ppd_id)
}
inline void PaymentMeta::set_ppd_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ppd_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.PaymentMeta.ppd_id)
}
inline void PaymentMeta::set_ppd_id(const char* value, size_t size) {
  
  ppd_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.PaymentMeta.ppd_id)
}
inline std::string* PaymentMeta::_internal_mutable_ppd_id() {
  
  return ppd_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PaymentMeta::release_ppd_id() {
  // @@protoc_insertion_point(field_release:plaid.PaymentMeta.ppd_id)
  
  return ppd_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PaymentMeta::set_allocated_ppd_id(std::string* ppd_id) {
  if (ppd_id != nullptr) {
    
  } else {
    
  }
  ppd_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ppd_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.PaymentMeta.ppd_id)
}

// string reason = 7;
inline void PaymentMeta::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PaymentMeta::reason() const {
  // @@protoc_insertion_point(field_get:plaid.PaymentMeta.reason)
  return _internal_reason();
}
inline void PaymentMeta::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:plaid.PaymentMeta.reason)
}
inline std::string* PaymentMeta::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:plaid.PaymentMeta.reason)
  return _internal_mutable_reason();
}
inline const std::string& PaymentMeta::_internal_reason() const {
  return reason_.GetNoArena();
}
inline void PaymentMeta::_internal_set_reason(const std::string& value) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PaymentMeta::set_reason(std::string&& value) {
  
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.PaymentMeta.reason)
}
inline void PaymentMeta::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.PaymentMeta.reason)
}
inline void PaymentMeta::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.PaymentMeta.reason)
}
inline std::string* PaymentMeta::_internal_mutable_reason() {
  
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PaymentMeta::release_reason() {
  // @@protoc_insertion_point(field_release:plaid.PaymentMeta.reason)
  
  return reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PaymentMeta::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:plaid.PaymentMeta.reason)
}

// string reference_number = 8;
inline void PaymentMeta::clear_reference_number() {
  reference_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PaymentMeta::reference_number() const {
  // @@protoc_insertion_point(field_get:plaid.PaymentMeta.reference_number)
  return _internal_reference_number();
}
inline void PaymentMeta::set_reference_number(const std::string& value) {
  _internal_set_reference_number(value);
  // @@protoc_insertion_point(field_set:plaid.PaymentMeta.reference_number)
}
inline std::string* PaymentMeta::mutable_reference_number() {
  // @@protoc_insertion_point(field_mutable:plaid.PaymentMeta.reference_number)
  return _internal_mutable_reference_number();
}
inline const std::string& PaymentMeta::_internal_reference_number() const {
  return reference_number_.GetNoArena();
}
inline void PaymentMeta::_internal_set_reference_number(const std::string& value) {
  
  reference_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PaymentMeta::set_reference_number(std::string&& value) {
  
  reference_number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.PaymentMeta.reference_number)
}
inline void PaymentMeta::set_reference_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.PaymentMeta.reference_number)
}
inline void PaymentMeta::set_reference_number(const char* value, size_t size) {
  
  reference_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.PaymentMeta.reference_number)
}
inline std::string* PaymentMeta::_internal_mutable_reference_number() {
  
  return reference_number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PaymentMeta::release_reference_number() {
  // @@protoc_insertion_point(field_release:plaid.PaymentMeta.reference_number)
  
  return reference_number_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PaymentMeta::set_allocated_reference_number(std::string* reference_number) {
  if (reference_number != nullptr) {
    
  } else {
    
  }
  reference_number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_number);
  // @@protoc_insertion_point(field_set_allocated:plaid.PaymentMeta.reference_number)
}

// -------------------------------------------------------------------

// GetTransactionsRequestOptions

// repeated string account_ids = 1;
inline int GetTransactionsRequestOptions::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int GetTransactionsRequestOptions::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void GetTransactionsRequestOptions::clear_account_ids() {
  account_ids_.Clear();
}
inline std::string* GetTransactionsRequestOptions::add_account_ids() {
  // @@protoc_insertion_point(field_add_mutable:plaid.GetTransactionsRequestOptions.account_ids)
  return _internal_add_account_ids();
}
inline const std::string& GetTransactionsRequestOptions::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline const std::string& GetTransactionsRequestOptions::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionsRequestOptions.account_ids)
  return _internal_account_ids(index);
}
inline std::string* GetTransactionsRequestOptions::mutable_account_ids(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetTransactionsRequestOptions.account_ids)
  return account_ids_.Mutable(index);
}
inline void GetTransactionsRequestOptions::set_account_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.GetTransactionsRequestOptions.account_ids)
  account_ids_.Mutable(index)->assign(value);
}
inline void GetTransactionsRequestOptions::set_account_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.GetTransactionsRequestOptions.account_ids)
  account_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetTransactionsRequestOptions::set_account_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.GetTransactionsRequestOptions.account_ids)
}
inline void GetTransactionsRequestOptions::set_account_ids(int index, const char* value, size_t size) {
  account_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.GetTransactionsRequestOptions.account_ids)
}
inline std::string* GetTransactionsRequestOptions::_internal_add_account_ids() {
  return account_ids_.Add();
}
inline void GetTransactionsRequestOptions::add_account_ids(const std::string& value) {
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.GetTransactionsRequestOptions.account_ids)
}
inline void GetTransactionsRequestOptions::add_account_ids(std::string&& value) {
  account_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.GetTransactionsRequestOptions.account_ids)
}
inline void GetTransactionsRequestOptions::add_account_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.GetTransactionsRequestOptions.account_ids)
}
inline void GetTransactionsRequestOptions::add_account_ids(const char* value, size_t size) {
  account_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.GetTransactionsRequestOptions.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTransactionsRequestOptions::account_ids() const {
  // @@protoc_insertion_point(field_list:plaid.GetTransactionsRequestOptions.account_ids)
  return account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTransactionsRequestOptions::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetTransactionsRequestOptions.account_ids)
  return &account_ids_;
}

// int64 count = 2;
inline void GetTransactionsRequestOptions::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTransactionsRequestOptions::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTransactionsRequestOptions::count() const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionsRequestOptions.count)
  return _internal_count();
}
inline void GetTransactionsRequestOptions::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void GetTransactionsRequestOptions::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:plaid.GetTransactionsRequestOptions.count)
}

// int64 offset = 3;
inline void GetTransactionsRequestOptions::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTransactionsRequestOptions::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTransactionsRequestOptions::offset() const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionsRequestOptions.offset)
  return _internal_offset();
}
inline void GetTransactionsRequestOptions::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void GetTransactionsRequestOptions::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:plaid.GetTransactionsRequestOptions.offset)
}

// -------------------------------------------------------------------

// GetTransactionsRequest

// string client_id = 1;
inline void GetTransactionsRequest::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTransactionsRequest::client_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionsRequest.client_id)
  return _internal_client_id();
}
inline void GetTransactionsRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetTransactionsRequest.client_id)
}
inline std::string* GetTransactionsRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetTransactionsRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& GetTransactionsRequest::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void GetTransactionsRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTransactionsRequest::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetTransactionsRequest.client_id)
}
inline void GetTransactionsRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetTransactionsRequest.client_id)
}
inline void GetTransactionsRequest::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetTransactionsRequest.client_id)
}
inline std::string* GetTransactionsRequest::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTransactionsRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:plaid.GetTransactionsRequest.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransactionsRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetTransactionsRequest.client_id)
}

// string secret = 2;
inline void GetTransactionsRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTransactionsRequest::secret() const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionsRequest.secret)
  return _internal_secret();
}
inline void GetTransactionsRequest::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:plaid.GetTransactionsRequest.secret)
}
inline std::string* GetTransactionsRequest::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:plaid.GetTransactionsRequest.secret)
  return _internal_mutable_secret();
}
inline const std::string& GetTransactionsRequest::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void GetTransactionsRequest::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTransactionsRequest::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetTransactionsRequest.secret)
}
inline void GetTransactionsRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetTransactionsRequest.secret)
}
inline void GetTransactionsRequest::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetTransactionsRequest.secret)
}
inline std::string* GetTransactionsRequest::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTransactionsRequest::release_secret() {
  // @@protoc_insertion_point(field_release:plaid.GetTransactionsRequest.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransactionsRequest::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetTransactionsRequest.secret)
}

// string access_token = 3;
inline void GetTransactionsRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTransactionsRequest::access_token() const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionsRequest.access_token)
  return _internal_access_token();
}
inline void GetTransactionsRequest::set_access_token(const std::string& value) {
  _internal_set_access_token(value);
  // @@protoc_insertion_point(field_set:plaid.GetTransactionsRequest.access_token)
}
inline std::string* GetTransactionsRequest::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:plaid.GetTransactionsRequest.access_token)
  return _internal_mutable_access_token();
}
inline const std::string& GetTransactionsRequest::_internal_access_token() const {
  return access_token_.GetNoArena();
}
inline void GetTransactionsRequest::_internal_set_access_token(const std::string& value) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTransactionsRequest::set_access_token(std::string&& value) {
  
  access_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetTransactionsRequest.access_token)
}
inline void GetTransactionsRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetTransactionsRequest.access_token)
}
inline void GetTransactionsRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetTransactionsRequest.access_token)
}
inline std::string* GetTransactionsRequest::_internal_mutable_access_token() {
  
  return access_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTransactionsRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:plaid.GetTransactionsRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransactionsRequest::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetTransactionsRequest.access_token)
}

// string start_date = 4;
inline void GetTransactionsRequest::clear_start_date() {
  start_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTransactionsRequest::start_date() const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionsRequest.start_date)
  return _internal_start_date();
}
inline void GetTransactionsRequest::set_start_date(const std::string& value) {
  _internal_set_start_date(value);
  // @@protoc_insertion_point(field_set:plaid.GetTransactionsRequest.start_date)
}
inline std::string* GetTransactionsRequest::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:plaid.GetTransactionsRequest.start_date)
  return _internal_mutable_start_date();
}
inline const std::string& GetTransactionsRequest::_internal_start_date() const {
  return start_date_.GetNoArena();
}
inline void GetTransactionsRequest::_internal_set_start_date(const std::string& value) {
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTransactionsRequest::set_start_date(std::string&& value) {
  
  start_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetTransactionsRequest.start_date)
}
inline void GetTransactionsRequest::set_start_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetTransactionsRequest.start_date)
}
inline void GetTransactionsRequest::set_start_date(const char* value, size_t size) {
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetTransactionsRequest.start_date)
}
inline std::string* GetTransactionsRequest::_internal_mutable_start_date() {
  
  return start_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTransactionsRequest::release_start_date() {
  // @@protoc_insertion_point(field_release:plaid.GetTransactionsRequest.start_date)
  
  return start_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransactionsRequest::set_allocated_start_date(std::string* start_date) {
  if (start_date != nullptr) {
    
  } else {
    
  }
  start_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_date);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetTransactionsRequest.start_date)
}

// string end_date = 5;
inline void GetTransactionsRequest::clear_end_date() {
  end_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTransactionsRequest::end_date() const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionsRequest.end_date)
  return _internal_end_date();
}
inline void GetTransactionsRequest::set_end_date(const std::string& value) {
  _internal_set_end_date(value);
  // @@protoc_insertion_point(field_set:plaid.GetTransactionsRequest.end_date)
}
inline std::string* GetTransactionsRequest::mutable_end_date() {
  // @@protoc_insertion_point(field_mutable:plaid.GetTransactionsRequest.end_date)
  return _internal_mutable_end_date();
}
inline const std::string& GetTransactionsRequest::_internal_end_date() const {
  return end_date_.GetNoArena();
}
inline void GetTransactionsRequest::_internal_set_end_date(const std::string& value) {
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTransactionsRequest::set_end_date(std::string&& value) {
  
  end_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetTransactionsRequest.end_date)
}
inline void GetTransactionsRequest::set_end_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetTransactionsRequest.end_date)
}
inline void GetTransactionsRequest::set_end_date(const char* value, size_t size) {
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetTransactionsRequest.end_date)
}
inline std::string* GetTransactionsRequest::_internal_mutable_end_date() {
  
  return end_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTransactionsRequest::release_end_date() {
  // @@protoc_insertion_point(field_release:plaid.GetTransactionsRequest.end_date)
  
  return end_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransactionsRequest::set_allocated_end_date(std::string* end_date) {
  if (end_date != nullptr) {
    
  } else {
    
  }
  end_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_date);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetTransactionsRequest.end_date)
}

// .plaid.GetTransactionsRequestOptions options = 6;
inline bool GetTransactionsRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool GetTransactionsRequest::has_options() const {
  return _internal_has_options();
}
inline void GetTransactionsRequest::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::plaid::GetTransactionsRequestOptions& GetTransactionsRequest::_internal_options() const {
  const ::plaid::GetTransactionsRequestOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::GetTransactionsRequestOptions*>(
      &::plaid::_GetTransactionsRequestOptions_default_instance_);
}
inline const ::plaid::GetTransactionsRequestOptions& GetTransactionsRequest::options() const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionsRequest.options)
  return _internal_options();
}
inline ::plaid::GetTransactionsRequestOptions* GetTransactionsRequest::release_options() {
  // @@protoc_insertion_point(field_release:plaid.GetTransactionsRequest.options)
  
  ::plaid::GetTransactionsRequestOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::plaid::GetTransactionsRequestOptions* GetTransactionsRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::GetTransactionsRequestOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::plaid::GetTransactionsRequestOptions* GetTransactionsRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:plaid.GetTransactionsRequest.options)
  return _internal_mutable_options();
}
inline void GetTransactionsRequest::set_allocated_options(::plaid::GetTransactionsRequestOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetTransactionsRequest.options)
}

// -------------------------------------------------------------------

// GetTransactionsResponse

// string request_id = 1;
inline void GetTransactionsResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTransactionsResponse::request_id() const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionsResponse.request_id)
  return _internal_request_id();
}
inline void GetTransactionsResponse::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:plaid.GetTransactionsResponse.request_id)
}
inline std::string* GetTransactionsResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:plaid.GetTransactionsResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetTransactionsResponse::_internal_request_id() const {
  return request_id_.GetNoArena();
}
inline void GetTransactionsResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTransactionsResponse::set_request_id(std::string&& value) {
  
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetTransactionsResponse.request_id)
}
inline void GetTransactionsResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetTransactionsResponse.request_id)
}
inline void GetTransactionsResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetTransactionsResponse.request_id)
}
inline std::string* GetTransactionsResponse::_internal_mutable_request_id() {
  
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTransactionsResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:plaid.GetTransactionsResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransactionsResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetTransactionsResponse.request_id)
}

// repeated .plaid.Account accounts = 2;
inline int GetTransactionsResponse::_internal_accounts_size() const {
  return accounts_.size();
}
inline int GetTransactionsResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline void GetTransactionsResponse::clear_accounts() {
  accounts_.Clear();
}
inline ::plaid::Account* GetTransactionsResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetTransactionsResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >*
GetTransactionsResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetTransactionsResponse.accounts)
  return &accounts_;
}
inline const ::plaid::Account& GetTransactionsResponse::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::plaid::Account& GetTransactionsResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionsResponse.accounts)
  return _internal_accounts(index);
}
inline ::plaid::Account* GetTransactionsResponse::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::plaid::Account* GetTransactionsResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:plaid.GetTransactionsResponse.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Account >&
GetTransactionsResponse::accounts() const {
  // @@protoc_insertion_point(field_list:plaid.GetTransactionsResponse.accounts)
  return accounts_;
}

// .plaid.Item item = 3;
inline bool GetTransactionsResponse::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool GetTransactionsResponse::has_item() const {
  return _internal_has_item();
}
inline void GetTransactionsResponse::clear_item() {
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::plaid::Item& GetTransactionsResponse::_internal_item() const {
  const ::plaid::Item* p = item_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plaid::Item*>(
      &::plaid::_Item_default_instance_);
}
inline const ::plaid::Item& GetTransactionsResponse::item() const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionsResponse.item)
  return _internal_item();
}
inline ::plaid::Item* GetTransactionsResponse::release_item() {
  // @@protoc_insertion_point(field_release:plaid.GetTransactionsResponse.item)
  
  ::plaid::Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::plaid::Item* GetTransactionsResponse::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::plaid::Item>(GetArenaNoVirtual());
    item_ = p;
  }
  return item_;
}
inline ::plaid::Item* GetTransactionsResponse::mutable_item() {
  // @@protoc_insertion_point(field_mutable:plaid.GetTransactionsResponse.item)
  return _internal_mutable_item();
}
inline void GetTransactionsResponse::set_allocated_item(::plaid::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:plaid.GetTransactionsResponse.item)
}

// repeated .plaid.Transaction transactions = 4;
inline int GetTransactionsResponse::_internal_transactions_size() const {
  return transactions_.size();
}
inline int GetTransactionsResponse::transactions_size() const {
  return _internal_transactions_size();
}
inline void GetTransactionsResponse::clear_transactions() {
  transactions_.Clear();
}
inline ::plaid::Transaction* GetTransactionsResponse::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetTransactionsResponse.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Transaction >*
GetTransactionsResponse::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetTransactionsResponse.transactions)
  return &transactions_;
}
inline const ::plaid::Transaction& GetTransactionsResponse::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::plaid::Transaction& GetTransactionsResponse::transactions(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionsResponse.transactions)
  return _internal_transactions(index);
}
inline ::plaid::Transaction* GetTransactionsResponse::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::plaid::Transaction* GetTransactionsResponse::add_transactions() {
  // @@protoc_insertion_point(field_add:plaid.GetTransactionsResponse.transactions)
  return _internal_add_transactions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plaid::Transaction >&
GetTransactionsResponse::transactions() const {
  // @@protoc_insertion_point(field_list:plaid.GetTransactionsResponse.transactions)
  return transactions_;
}

// int64 total_transactions = 5;
inline void GetTransactionsResponse::clear_total_transactions() {
  total_transactions_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTransactionsResponse::_internal_total_transactions() const {
  return total_transactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTransactionsResponse::total_transactions() const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionsResponse.total_transactions)
  return _internal_total_transactions();
}
inline void GetTransactionsResponse::_internal_set_total_transactions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_transactions_ = value;
}
inline void GetTransactionsResponse::set_total_transactions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_transactions(value);
  // @@protoc_insertion_point(field_set:plaid.GetTransactionsResponse.total_transactions)
}

// -------------------------------------------------------------------

// GetTransactionOptions

// string start_date = 1;
inline void GetTransactionOptions::clear_start_date() {
  start_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTransactionOptions::start_date() const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionOptions.start_date)
  return _internal_start_date();
}
inline void GetTransactionOptions::set_start_date(const std::string& value) {
  _internal_set_start_date(value);
  // @@protoc_insertion_point(field_set:plaid.GetTransactionOptions.start_date)
}
inline std::string* GetTransactionOptions::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:plaid.GetTransactionOptions.start_date)
  return _internal_mutable_start_date();
}
inline const std::string& GetTransactionOptions::_internal_start_date() const {
  return start_date_.GetNoArena();
}
inline void GetTransactionOptions::_internal_set_start_date(const std::string& value) {
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTransactionOptions::set_start_date(std::string&& value) {
  
  start_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetTransactionOptions.start_date)
}
inline void GetTransactionOptions::set_start_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetTransactionOptions.start_date)
}
inline void GetTransactionOptions::set_start_date(const char* value, size_t size) {
  
  start_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetTransactionOptions.start_date)
}
inline std::string* GetTransactionOptions::_internal_mutable_start_date() {
  
  return start_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTransactionOptions::release_start_date() {
  // @@protoc_insertion_point(field_release:plaid.GetTransactionOptions.start_date)
  
  return start_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransactionOptions::set_allocated_start_date(std::string* start_date) {
  if (start_date != nullptr) {
    
  } else {
    
  }
  start_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_date);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetTransactionOptions.start_date)
}

// string end_date = 2;
inline void GetTransactionOptions::clear_end_date() {
  end_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTransactionOptions::end_date() const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionOptions.end_date)
  return _internal_end_date();
}
inline void GetTransactionOptions::set_end_date(const std::string& value) {
  _internal_set_end_date(value);
  // @@protoc_insertion_point(field_set:plaid.GetTransactionOptions.end_date)
}
inline std::string* GetTransactionOptions::mutable_end_date() {
  // @@protoc_insertion_point(field_mutable:plaid.GetTransactionOptions.end_date)
  return _internal_mutable_end_date();
}
inline const std::string& GetTransactionOptions::_internal_end_date() const {
  return end_date_.GetNoArena();
}
inline void GetTransactionOptions::_internal_set_end_date(const std::string& value) {
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTransactionOptions::set_end_date(std::string&& value) {
  
  end_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plaid.GetTransactionOptions.end_date)
}
inline void GetTransactionOptions::set_end_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plaid.GetTransactionOptions.end_date)
}
inline void GetTransactionOptions::set_end_date(const char* value, size_t size) {
  
  end_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plaid.GetTransactionOptions.end_date)
}
inline std::string* GetTransactionOptions::_internal_mutable_end_date() {
  
  return end_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTransactionOptions::release_end_date() {
  // @@protoc_insertion_point(field_release:plaid.GetTransactionOptions.end_date)
  
  return end_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransactionOptions::set_allocated_end_date(std::string* end_date) {
  if (end_date != nullptr) {
    
  } else {
    
  }
  end_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_date);
  // @@protoc_insertion_point(field_set_allocated:plaid.GetTransactionOptions.end_date)
}

// repeated string account_ids = 3;
inline int GetTransactionOptions::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int GetTransactionOptions::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void GetTransactionOptions::clear_account_ids() {
  account_ids_.Clear();
}
inline std::string* GetTransactionOptions::add_account_ids() {
  // @@protoc_insertion_point(field_add_mutable:plaid.GetTransactionOptions.account_ids)
  return _internal_add_account_ids();
}
inline const std::string& GetTransactionOptions::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline const std::string& GetTransactionOptions::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionOptions.account_ids)
  return _internal_account_ids(index);
}
inline std::string* GetTransactionOptions::mutable_account_ids(int index) {
  // @@protoc_insertion_point(field_mutable:plaid.GetTransactionOptions.account_ids)
  return account_ids_.Mutable(index);
}
inline void GetTransactionOptions::set_account_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plaid.GetTransactionOptions.account_ids)
  account_ids_.Mutable(index)->assign(value);
}
inline void GetTransactionOptions::set_account_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plaid.GetTransactionOptions.account_ids)
  account_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetTransactionOptions::set_account_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plaid.GetTransactionOptions.account_ids)
}
inline void GetTransactionOptions::set_account_ids(int index, const char* value, size_t size) {
  account_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plaid.GetTransactionOptions.account_ids)
}
inline std::string* GetTransactionOptions::_internal_add_account_ids() {
  return account_ids_.Add();
}
inline void GetTransactionOptions::add_account_ids(const std::string& value) {
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plaid.GetTransactionOptions.account_ids)
}
inline void GetTransactionOptions::add_account_ids(std::string&& value) {
  account_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plaid.GetTransactionOptions.account_ids)
}
inline void GetTransactionOptions::add_account_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  account_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plaid.GetTransactionOptions.account_ids)
}
inline void GetTransactionOptions::add_account_ids(const char* value, size_t size) {
  account_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plaid.GetTransactionOptions.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTransactionOptions::account_ids() const {
  // @@protoc_insertion_point(field_list:plaid.GetTransactionOptions.account_ids)
  return account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTransactionOptions::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:plaid.GetTransactionOptions.account_ids)
  return &account_ids_;
}

// int64 count = 4;
inline void GetTransactionOptions::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTransactionOptions::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTransactionOptions::count() const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionOptions.count)
  return _internal_count();
}
inline void GetTransactionOptions::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void GetTransactionOptions::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:plaid.GetTransactionOptions.count)
}

// int64 offset = 5;
inline void GetTransactionOptions::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTransactionOptions::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTransactionOptions::offset() const {
  // @@protoc_insertion_point(field_get:plaid.GetTransactionOptions.offset)
  return _internal_offset();
}
inline void GetTransactionOptions::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void GetTransactionOptions::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:plaid.GetTransactionOptions.offset)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace plaid

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_plaid_2eproto
